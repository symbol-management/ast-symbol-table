{
 "networkx": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.release.authors",
   "networkx.release.date",
   "networkx.release.version",
   "sys",
   "sys.version_info"
  ],
  "type": "module"
 },
 "networkx.algorithms": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.clique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.clique.clique_removal": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.ramsey.ramsey_R2"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.large_clique_size": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.large_clique_size._clique_heuristic": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.max_clique": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.complement"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.clustering_coefficient": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.clustering_coefficient.average_clustering": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_pred_succ": {
  "lineno": 345,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_shortest_path": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity": {
  "lineno": 217,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.local_node_connectivity": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity": {
  "lineno": 112,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.is_weakly_connected",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity.neighbors": {
  "lineno": 191,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.dominating_set.min_edge_dominating_set": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set._cost": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.independent_set": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.independent_set.maximum_independent_set": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.clique_removal"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "module"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__getitem__": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__init__": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__iter__": {
  "lineno": 275,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__len__": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView": {
  "lineno": 245,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__getitem__": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__init__": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__iter__": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__len__": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.reportviews.DegreeView"
  ],
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__getitem__": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__iter__": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.__getitem__": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.adj": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.adjacency": {
  "lineno": 353,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.degree": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.single_edge_dict": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.subgraph": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._cliques_heuristic": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.core_number",
   "networkx.density",
   "networkx.k_core"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._same": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.k_components": {
  "lineno": 20,
  "symbols_in_volume": [
   "collections.defaultdict",
   "itertools.combinations",
   "networkx.algorithms.approximation.local_node_connectivity",
   "networkx.biconnected_components",
   "networkx.connected_components",
   "networkx.core_number",
   "networkx.density",
   "networkx.k_core"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.matching.min_maximal_matching": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.maximal_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.ramsey": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.ramsey.ramsey_R2": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.all_neighbors",
   "networkx.non_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.steinertree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.steinertree.metric_closure": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.all_pairs_dijkstra",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.steinertree.steiner_tree": {
  "lineno": 49,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.minimum_spanning_edges",
   "networkx.utils.not_implemented_for",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_complete": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_dodecahedral": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.average_clustering",
   "networkx.dodecahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_empty": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.average_clustering",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen_seed": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.average_clustering",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_tetrahedral": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.average_clustering",
   "networkx.average_clustering",
   "networkx.tetrahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_barbell_graph": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.clique_removal",
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_complete_graph": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.clique_removal",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_trivial_graph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.clique_removal",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_complete_graph": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.max_clique",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_maximal_by_cardinality": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.max_clique",
   "networkx.complete_graph",
   "networkx.lollipop_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_null_graph": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.max_clique",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.is_clique": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.is_independent_set": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.test_large_clique_size": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.algorithms.approximation.large_clique_size",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.setup_class": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.gnp_random_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.all_pairs_node_connectivity",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_complete": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cutoff": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cycles": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_paths": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_complete_graphs": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_directed_node_connectivity": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_dodecahedral": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.dodecahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_empty_graphs": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_global_node_connectivity": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.local_node_connectivity",
   "networkx.algorithms.approximation.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_source": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_target": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_octahedral": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.octahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_source": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_target": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_petersen": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_source_equals_target": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.local_node_connectivity",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_white_harary1": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.node_connectivity",
   "networkx.complete_graph",
   "networkx.disjoint_union"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_edge_dominating_set": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.min_edge_dominating_set",
   "networkx.complete_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_weighted_dominating_set": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.min_weighted_dominating_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_star_graph": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.min_weighted_dominating_set",
   "networkx.relabel_nodes",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_independent_set": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.test_independent_set": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.maximum_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.setup_class": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.kcomponents._AntiGraph",
   "networkx.complement",
   "networkx.davis_southern_women_graph",
   "networkx.gnp_random_graph",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adj": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adjacency": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_connected_components": {
  "lineno": 257,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_core_number": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.core_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree_thingraph": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_neighbors": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_node_not_in_graph": {
  "lineno": 282,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_size": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.k_components",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.k_components.items"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.disjoint_union",
   "networkx.get_node_attributes",
   "networkx.grid_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_directed": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.approximation.k_components",
   "networkx.gnp_random_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1_detail_3_and_4": {
  "lineno": 194,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.k_components",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_0": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_1": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.k_components",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_same": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.kcomponents._same"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.disjoint_union",
   "networkx.get_node_attributes",
   "networkx.grid_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_matching.test_min_maximal_matching": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.min_maximal_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_ramsey": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.test_ramsey": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.ramsey_R2",
   "networkx.barbell_graph",
   "networkx.complete_graph",
   "networkx.density",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.setup_class": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_connected_metric_closure": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.approximation.steinertree.metric_closure",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_metric_closure": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.steinertree.metric_closure",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_multigraph_steiner_tree": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.approximation.steinertree.steiner_tree",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_steiner_tree": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.steinertree.steiner_tree",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.setup_class": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_empty_graph": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.treewidth_min_degree"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_abort": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_first_steps": {
  "lineno": 137,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_petersen_graph": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth_min_degree",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_small_tree_treewidth": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth_min_fill_in"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_two_component_graph": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.treewidth_min_degree"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.setup_class": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_empty_graph": {
  "lineno": 229,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.treewidth_min_fill_in"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_abort": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_first_steps": {
  "lineno": 242,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_petersen_graph": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth_min_fill_in",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_small_tree_treewidth": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.treewidth_min_fill_in"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_two_component_graph": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.treewidth_min_fill_in"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.is_tree_decomp": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_directed": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.approximation.min_weighted_vertex_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_undirected": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.algorithms.approximation.min_weighted_vertex_cover",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_weighted": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.approximation.min_weighted_vertex_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.is_cover": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.__init__": {
  "lineno": 95,
  "symbols_in_volume": [
   "heapq.heapify"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.best_node": {
  "lineno": 108,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic": {
  "lineno": 132,
  "symbols_in_volume": [
   "sys.maxsize"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_decomp": {
  "lineno": 178,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_min_degree": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_min_fill_in": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.approximation.vertex_cover": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity.average_degree_connectivity": {
  "lineno": 6,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.correlation.attribute_ac": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.attribute_assortativity_coefficient": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.mixing.attribute_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.degree_assortativity_coefficient": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.mixing.degree_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.degree_pearson_correlation_coefficient": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.pairs.node_degree_xy",
   "scipy.stats.pearsonr"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.numeric_ac": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.outer",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.numeric_assortativity_coefficient": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.mixing.numeric_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.mixing.attribute_mixing_dict": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.pairs.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.attribute_mixing_matrix": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.degree_mixing_dict": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.pairs.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.degree_mixing_matrix": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.mixing_dict": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.numeric_mixing_matrix": {
  "lineno": 163,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.pairs.node_attribute_xy": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs.node_degree_xy": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.base_test": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setup_class": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setup_class": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.average_degree_connectivity",
   "networkx.k_nearest_neighbors",
   "networkx.star_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.average_degree_connectivity",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.average_degree_connectivity",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_in_out_weight": {
  "lineno": 113,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.DiGraph",
   "networkx.average_degree_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_source": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_degree_connectivity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_target": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_degree_connectivity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_single_node": {
  "lineno": 133,
  "symbols_in_volume": [
   "networkx.average_degree_connectivity",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.average_degree_connectivity",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_degree_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.correlation.attribute_ac"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.correlation.attribute_ac"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.correlation.attribute_ac"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.attribute_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.attribute_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.attribute_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.degree_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.degree_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.degree_assortativity_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.degree_pearson_correlation_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_multigraph": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.degree_pearson_correlation_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_undirected": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.degree_pearson_correlation_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.attribute_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.attribute_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.attribute_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.attribute_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.attribute_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.attribute_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.degree_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.degree_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.degree_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.degree_mixing_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.degree_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.degree_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.degree_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.degree_mixing_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.average_neighbor_degree",
   "networkx.star_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.average_neighbor_degree",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.average_neighbor_degree",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.average_neighbor_degree",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.average_neighbor_degree",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.node_attribute_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected_nodes": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.node_degree_xy"
  ],
  "type": "function"
 },
 "networkx.algorithms.asteroidal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.asteroidal.create_component_structure": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.asteroidal.find_asteroidal_triple": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.complement",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.asteroidal.is_at_free": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic.color": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.isolates"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.color.neighbors": {
  "lineno": 57,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.degrees": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.density": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.number_of_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite_node_set": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.algorithms.components.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.sets": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.AmbiguousSolution",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.centrality.betweenness_centrality": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.closeness_centrality": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.degree_centrality": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.cluster._four_cycles": {
  "lineno": 260,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster._threepaths": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.average_clustering": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_dot": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_max": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_min": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.latapy_clustering": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.robins_alexander_clustering": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.covering": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.covering.min_edge_cover": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
   "networkx.algorithms.covering.min_edge_cover",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.edgelist.generate_edgelist": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.parse_edgelist": {
  "lineno": 149,
  "symbols_in_volume": [
   "ast.literal_eval",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.read_edgelist": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.write_edgelist": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.generators._add_nodes_with_bipartite_label": {
  "lineno": 590,
  "symbols_in_volume": [
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.alternating_havel_hakimi_graph": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.complete_bipartite_graph": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.nodes_or_number",
   "numbers.Integral"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.configuration_model": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.gnmk_random_graph": {
  "lineno": 520,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.complete_bipartite_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.havel_hakimi_graph": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.preferential_attachment_graph": {
  "lineno": 363,
  "symbols_in_volume": [
   "functools.reduce",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.random_graph": {
  "lineno": 434,
  "symbols_in_volume": [
   "math.log",
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.complete_bipartite_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.reverse_havel_hakimi_graph": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.matching._connected_by_alternating_paths": {
  "lineno": 377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path._alternating_dfs": {
  "lineno": 338,
  "symbols_in_volume": [
   "itertools.cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.bipartite.sets"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching.recurse": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching": {
  "lineno": 57,
  "symbols_in_volume": [
   "collections.deque",
   "itertools.chain",
   "networkx.algorithms.bipartite.sets"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.breadth_first_search": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.depth_first_search": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.minimum_weight_full_matching": {
  "lineno": 495,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matrix.biadjacency_matrix",
   "networkx.bipartite.sets",
   "numpy.full",
   "numpy.inf"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.to_vertex_cover": {
  "lineno": 415,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.matrix.biadjacency_matrix": {
  "lineno": 13,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.NetworkXError",
   "scipy.sparse.coo_matrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.from_biadjacency_matrix": {
  "lineno": 113,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.convert_matrix._generate_weighted_edges",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph": {
  "lineno": 207,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph": {
  "lineno": 400,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph.weight_function": {
  "lineno": 501,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph": {
  "lineno": 301,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.project": {
  "lineno": 515,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.projected_graph": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.weighted_projected_graph": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.redundancy._node_redundancy": {
  "lineno": 94,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy.node_redundancy": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.spectral": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.spectral.spectral_bipartivity": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_basic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.algorithms.bipartite.random_graph",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_order": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.path_graph",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_weight": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.path_graph",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.color",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.degrees",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.bipartite.density",
   "networkx.algorithms.bipartite.sets",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.is_bipartite",
   "networkx.algorithms.bipartite.random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_directed": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_disconnected": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.AmbiguousSolution",
   "networkx.algorithms.bipartite.sets",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_given_top_nodes": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.degrees",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.bipartite.is_bipartite",
   "networkx.complete_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.is_bipartite_node_set",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_not_bipartite_color": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.color",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setup_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.cycle_graph",
   "networkx.davis_southern_women_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.closeness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.degree_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.average_clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_bad_mode": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.clustering",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_not_bipartite": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.clustering",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.cluster.cc_dot",
   "networkx.algorithms.bipartite.cluster.cc_max",
   "networkx.algorithms.bipartite.cluster.cc_min",
   "networkx.algorithms.bipartite.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_path_graph": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_davis": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.robins_alexander_clustering",
   "networkx.davis_southern_women_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_square": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.robins_alexander_clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_zero": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.robins_alexander_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_star_graph": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.clustering",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_default": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.min_edge_cover",
   "networkx.is_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.eppstein_matching",
   "networkx.algorithms.bipartite.min_edge_cover",
   "networkx.is_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_empty_graph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_graph_single_edge": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.setup_class": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.convert_node_labels_to_integers",
   "networkx.isolates",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "lineno": 170,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_empty_digraph": {
  "lineno": 182,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.bipartite.write_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.testing.assert_graphs_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1_issue": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.write_edgelist",
   "os.close",
   "os.unlink",
   "pytest.raises",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_raise_attribute": {
  "lineno": 187,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "lineno": 29,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "lineno": 40,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.read_edgelist",
   "networkx.algorithms.bipartite.write_edgelist",
   "networkx.testing.assert_graphs_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "lineno": 57,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.algorithms.bipartite.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "lineno": 68,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.algorithms.bipartite.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "lineno": 79,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.algorithms.bipartite.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "lineno": 91,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.algorithms.bipartite.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph": {
  "lineno": 257,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.project",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_complete_bipartite_graph": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.cycle_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.star_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_configuration_model": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.project",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph": {
  "lineno": 373,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph_complete": {
  "lineno": 388,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_havel_hakimi_graph": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.project",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_preferential_attachment": {
  "lineno": 321,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_digraph": {
  "lineno": 363,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph": {
  "lineno": 353,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.sets",
   "networkx.is_bipartite"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.project",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_match": {
  "lineno": 81,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_vertex_cover": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.setup": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.eppstein_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_disconnected": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.AmbiguousSolution",
   "networkx.algorithms.bipartite.matching.eppstein_matching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_simple": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.eppstein_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_disconnected": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.AmbiguousSolution",
   "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_simple": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_issue_2127": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
   "networkx.algorithms.bipartite.matching.to_vertex_cover",
   "networkx.transitive_closure"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_to_vertex_cover": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.maximum_matching",
   "networkx.algorithms.bipartite.matching.to_vertex_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_unorderable_nodes": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.maximum_matching",
   "networkx.algorithms.bipartite.matching.to_vertex_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_vertex_cover_issue_2384": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.maximum_matching",
   "networkx.algorithms.bipartite.matching.to_vertex_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.setup_class": {
  "lineno": 208,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_different_weight_key": {
  "lineno": 309,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_incomplete_graph": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_negative_weights": {
  "lineno": 300,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_left": {
  "lineno": 249,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_right": {
  "lineno": 283,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_top_nodes_right": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_square": {
  "lineno": 235,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_with_no_full_matching": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.test_eppstein_matching": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.eppstein_matching",
   "networkx.algorithms.bipartite.matching.maximum_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.algorithms.bipartite.random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_order": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_weight": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_row": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_empty_graph": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_format_keyword": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_multigraph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.bipartite.from_biadjacency_matrix",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_roundtrip": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "networkx.algorithms.bipartite.from_biadjacency_matrix",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_weight": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.from_biadjacency_matrix",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_null_graph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.biadjacency_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.bipartite.projected_graph",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.projected_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.projected_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.collaboration_weighted_projected_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.projected_graph",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.projected_graph",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.star_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setup_class": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom": {
  "lineno": 368,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.generic_weighted_projected_graph",
   "networkx.bipartite.complete_bipartite_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.jaccard": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.my_weight": {
  "lineno": 374,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple": {
  "lineno": 340,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.bipartite.generic_weighted_projected_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple.shared": {
  "lineno": 341,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared": {
  "lineno": 175,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.weighted_projected_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_no_redundant_nodes": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.complete_bipartite_graph",
   "networkx.algorithms.bipartite.node_redundancy"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_not_enough_neighbors": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.bipartite.complete_bipartite_graph",
   "networkx.algorithms.bipartite.node_redundancy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_redundant_nodes": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.node_redundancy",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_k23_like": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.spectral_bipartivity",
   "networkx.complete_bipartite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.spectral_bipartivity",
   "networkx.complete_bipartite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.spectral_bipartivity",
   "networkx.star_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.boundary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.boundary.edge_boundary": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.boundary.node_boundary": {
  "lineno": 92,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.bridges": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.bridges.bridges": {
  "lineno": 10,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.chain_decomposition",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bridges.has_bridges": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.bridges.local_bridges": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.shortest_path_length",
   "networkx.utils.not_implemented_for",
   "networkx.weighted._weight_function"
  ],
  "type": "function"
 },
 "networkx.algorithms.bridges.local_bridges.hide_edge": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_basic": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_edges": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_endpoints": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._rescale": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._rescale_e": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic": {
  "lineno": 274,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.betweenness_centrality": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.edge_betweenness": {
  "lineno": 239,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.edge_betweenness_centrality": {
  "lineno": 147,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_subset": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale_e": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_source": {
  "lineno": 196,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
   "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
   "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.closeness": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.closeness.closeness_centrality": {
  "lineno": 12,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.single_source_dijkstra_path_length",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.closeness.incremental_closeness_centrality": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.exception.NetworkXError",
   "networkx.single_source_shortest_path_length",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state",
   "networkx.utils.reverse_cuthill_mckee_ordering",
   "numpy.abs",
   "numpy.ceil",
   "numpy.log",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.reverse_cuthill_mckee_ordering"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.reverse_cuthill_mckee_ordering"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.reverse_cuthill_mckee_ordering",
   "numpy.abs"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.reverse_cuthill_mckee_ordering",
   "numpy.abs"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_closeness": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian",
   "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix",
   "networkx.is_connected",
   "networkx.relabel_nodes",
   "networkx.utils.not_implemented_for",
   "networkx.utils.reverse_cuthill_mckee_ordering"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.degree_alg.degree_centrality": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.in_degree_centrality": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.out_degree_centrality": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.dispersion.dispersion": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion.dispersion._dispersion": {
  "lineno": 47,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality": {
  "lineno": 11,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept",
   "networkx.PowerIterationFailedConvergence",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.to_scipy_sparse_matrix",
   "numpy.sign",
   "scipy.linalg.norm",
   "scipy.sparse.linalg.eigs"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver": {
  "lineno": 114,
  "symbols_in_volume": [
   "scipy.sparse.linalg.LinearOperator",
   "scipy.sparse.linalg.spilu"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.zeros",
   "scipy.sparse.linalg.cg"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse": {
  "lineno": 127,
  "symbols_in_volume": [
   "numpy.zeros",
   "scipy.sparse.linalg.cg"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.linalg.inv",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.nonzero"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver": {
  "lineno": 97,
  "symbols_in_volume": [
   "scipy.sparse.linalg.factorized"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.flow_matrix_row": {
  "lineno": 6,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "numpy.asarray"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.group": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.group.group_betweenness_centrality": {
  "lineno": 18,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.NodeNotFound",
   "networkx.all_shortest_paths",
   "networkx.exception.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_closeness_centrality": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.multi_source_dijkstra_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_degree_centrality": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_in_degree_centrality": {
  "lineno": 277,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_out_degree_centrality": {
  "lineno": 323,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.harmonic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.harmonic.harmonic_centrality": {
  "lineno": 9,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.katz": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.katz.katz_centrality": {
  "lineno": 10,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.NetworkXError",
   "networkx.PowerIterationFailedConvergence",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.katz_centrality_numpy": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.adj_matrix",
   "networkx.utils.not_implemented_for",
   "numpy.array",
   "numpy.eye",
   "numpy.linalg.norm",
   "numpy.linalg.solve",
   "numpy.ones",
   "numpy.sign"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.load": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.load._edge_betweenness": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.predecessor",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.load._node_betweenness": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.dijkstra_predecessor_and_distance",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.load.edge_load_centrality": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.load.newman_betweenness_centrality": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.percolation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.percolation._accumulate_percolation": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.percolation.percolation_centrality": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
   "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic",
   "networkx.get_node_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.reaching._average_weight": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.global_reaching_centrality": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_negatively_weighted",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.global_reaching_centrality.as_distance": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.local_reaching_centrality": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_negatively_weighted",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.local_reaching_centrality.as_distance": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.second_order": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.second_order.second_order_centrality": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXException",
   "networkx.is_connected",
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for",
   "numpy.empty",
   "numpy.identity",
   "numpy.linalg.solve",
   "numpy.newaxis",
   "numpy.ones",
   "numpy.sqrt",
   "numpy.sum"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.second_order.second_order_centrality._Qj": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.subgraph_alg._rescale": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality": {
  "lineno": 189,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for",
   "numpy.diag",
   "numpy.nonzero"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.estrada_index": {
  "lineno": 302,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for",
   "numpy.array",
   "numpy.dot",
   "numpy.exp",
   "numpy.linalg.eigh",
   "numpy.nonzero"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.complete_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.complete_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path": {
  "lineno": 271,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path": {
  "lineno": 247,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints": {
  "lineno": 257,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.florentine_families_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.krackhardt_kite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.krackhardt_kite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_les_miserables_graph": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.les_miserables_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_sample_from_P3": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality": {
  "lineno": 517,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4": {
  "lineno": 534,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5": {
  "lineno": 518,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4": {
  "lineno": 542,
  "symbols_in_volume": [
   "networkx.edge_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree": {
  "lineno": 558,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5": {
  "lineno": 526,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4": {
  "lineno": 550,
  "symbols_in_volume": [
   "networkx.edge_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality": {
  "lineno": 290,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G": {
  "lineno": 484,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2": {
  "lineno": 492,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.complete_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized": {
  "lineno": 299,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph": {
  "lineno": 360,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.florentine_families_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.krackhardt_kite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "lineno": 338,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.krackhardt_kite_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph": {
  "lineno": 473,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_les_miserables_graph": {
  "lineno": 386,
  "symbols_in_volume": [
   "networkx.betweenness_centrality",
   "networkx.les_miserables_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality": {
  "lineno": 567,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4": {
  "lineno": 576,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5": {
  "lineno": 568,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4": {
  "lineno": 584,
  "symbols_in_volume": [
   "networkx.edge_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree": {
  "lineno": 592,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph": {
  "lineno": 629,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph": {
  "lineno": 600,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.betweenness_centrality_source",
   "networkx.complete_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.betweenness_centrality_source",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.betweenness_centrality_subset",
   "networkx.complete_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_diamond_multi_path": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_add_edge": {
  "lineno": 209,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_remove_edge": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setup_class": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.balanced_tree",
   "networkx.closeness_centrality",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.fast_gnp_random_graph",
   "networkx.florentine_families_graph",
   "networkx.krackhardt_kite_graph",
   "networkx.les_miserables_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_digraph": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.closeness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_directed_raises": {
  "lineno": 225,
  "symbols_in_volume": [
   "networkx.NetworkXNotImplemented",
   "networkx.gn_graph",
   "networkx.incremental_closeness_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_incremental": {
  "lineno": 264,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.incremental_closeness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_les_miserables_closeness": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wf_improved": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_nodes_prev_cc_raises": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.incremental_closeness_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_size_prev_cc_raises": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.incremental_closeness_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_zero_centrality": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.incremental_closeness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_seed": {
  "lineno": 121,
  "symbols_in_volume": [
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_star",
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.current_flow_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.current_flow_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solvers2": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_star",
   "networkx.current_flow_betweenness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.edge_current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.edge_current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.edge_current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.edge_current_flow_betweenness_centrality",
   "networkx.edge_current_flow_betweenness_centrality_subset",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality_subset",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality_subset",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_star",
   "networkx.current_flow_betweenness_centrality",
   "networkx.current_flow_betweenness_centrality_subset",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.current_flow_closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.current_flow_closeness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_star",
   "networkx.current_flow_closeness_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.setup_method": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.complete_graph",
   "networkx.krackhardt_kite_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.in_degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.out_degree_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_small_graph_centrality": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.degree_centrality",
   "networkx.empty_graph",
   "networkx.in_degree_centrality",
   "networkx.out_degree_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_article": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.dispersion"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_impossible_things": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.dispersion",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_results_length": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.dispersion"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5": {
  "lineno": 13,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.complete_graph",
   "networkx.eigenvector_centrality",
   "networkx.eigenvector_centrality_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality",
   "networkx.eigenvector_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3_unweighted": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_maxiter": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.eigenvector_centrality",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setup_class": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.eigenvector_centrality_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.eigenvector_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty_numpy": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.eigenvector_centrality_numpy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph": {
  "lineno": 154,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXException",
   "networkx.eigenvector_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph_numpy": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXException",
   "networkx.eigenvector_centrality_numpy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_disconnected_graph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.group_betweenness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_node_not_in_graph": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.group_betweenness_centrality",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_normalized": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.group_betweenness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_single_node": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.group_betweenness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_value_zero": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.group_betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_disconnected": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.group_closeness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_multiple_node": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.group_closeness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_node_not_in_graph": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.group_closeness_centrality",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_single_node": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.closeness_centrality",
   "networkx.group_closeness_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_multiple_node": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.group_degree_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_node_not_in_graph": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.group_degree_centrality",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_single_node": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.degree_centrality",
   "networkx.group_degree_centrality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_in_degree_centrality": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.group_in_degree_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_out_degree_centrality": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.group_out_degree_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.setup_class": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.balanced_tree",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_bal_tree": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_clique_complete": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C4": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C5": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_empty": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.centrality.harmonic_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_exampleGraph": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_singleton": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.centrality.harmonic_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_weighted_harmonic": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.centrality.harmonic_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_K5": {
  "lineno": 9,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.complete_graph",
   "networkx.katz_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_P3": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.katz_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta_numbe": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.katz_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_dict": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_scalar": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_empty": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.katz_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_maxiter": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.PowerIterationFailedConvergence",
   "networkx.katz_centrality",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multigraph": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXException",
   "networkx.katz_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multiple_alpha": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.setup_class": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_unweighted": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_weighted": {
  "lineno": 303,
  "symbols_in_volume": [
   "networkx.katz_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.setup_class": {
  "lineno": 319,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted": {
  "lineno": 332,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted": {
  "lineno": 325,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.setup_class": {
  "lineno": 122,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5": {
  "lineno": 128,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.complete_graph",
   "networkx.eigenvector_centrality_numpy",
   "networkx.katz_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5_unweighted": {
  "lineno": 228,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.complete_graph",
   "networkx.eigenvector_centrality_numpy",
   "networkx.katz_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3_unweighted": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta": {
  "lineno": 217,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.katz_centrality_numpy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta_numbe": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.katz_centrality_numpy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_dict": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_scalar": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_empty": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.katz_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multigraph": {
  "lineno": 209,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXException",
   "networkx.katz_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multiple_alpha": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.katz_centrality_numpy",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.setup_class": {
  "lineno": 341,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random": {
  "lineno": 349,
  "symbols_in_volume": [
   "networkx.adjacency_matrix",
   "networkx.eigenvector_centrality_numpy",
   "networkx.gnp_random_graph",
   "networkx.katz_centrality_numpy",
   "networkx.testing.almost_equal",
   "numpy.linalg.eigvals"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.balanced_tree",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.florentine_families_graph",
   "networkx.krackhardt_kite_graph",
   "networkx.les_miserables_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load": {
  "lineno": 292,
  "symbols_in_volume": [
   "networkx.edge_load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.edge_load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_les_miserables_load": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_not_strongly_connected": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p2_load": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load": {
  "lineno": 299,
  "symbols_in_volume": [
   "networkx.edge_load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load": {
  "lineno": 324,
  "symbols_in_volume": [
   "networkx.edge_load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load": {
  "lineno": 232,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.load_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.load_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_converge_to_betweenness": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.florentine_families_graph",
   "networkx.percolation_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1a": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.percolation_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1b": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.percolation_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.example1a_G": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.example1b_G": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_unweighted": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_weighted": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_unweighted": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_weighted": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_star": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_weighted": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.global_reaching_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_negatively_weighted": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.NetworkXError",
   "networkx.nx.global_reaching_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_non_positive_weights": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.NetworkXError",
   "networkx.nx.global_reaching_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_unweighted_star": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.nx.global_reaching_centrality",
   "networkx.nx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_weighted_star": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.global_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_negatively_weighted": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.NetworkXError",
   "networkx.nx.local_reaching_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_non_positive_weights": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.nx.DiGraph",
   "networkx.nx.NetworkXError",
   "networkx.nx.local_reaching_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_unweighted_star": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.nx.local_reaching_centrality",
   "networkx.nx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_weighted_star": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.nx.Graph",
   "networkx.nx.local_reaching_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_K3": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.second_order_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_P3": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.second_order_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_empty": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.empty_graph",
   "networkx.second_order_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_connected": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.second_order_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_negative_edge_weights": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.path_graph",
   "networkx.second_order_centrality",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_one_node_graph": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.second_order_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_ring_graph": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.second_order_centrality",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_communicability_betweenness_centrality": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_estrada_index": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.algorithms.centrality.subgraph_alg.estrada_index",
   "networkx.karate_club_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality",
   "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality_big_graph": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.subgraph_centrality",
   "networkx.subgraph_centrality_exp"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_differences": {
  "lineno": 204,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_differences"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_cannibalism": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_incoherence_parameter"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_no_cannibalism": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_incoherence_parameter"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.trophic_levels"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_even_more_complex": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_levels"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_levine": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.linalg.graphmatrix.adjacency_matrix",
   "networkx.testing.almost_equal",
   "networkx.trophic_levels"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_more_complex": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_levels"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_simple": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.almost_equal",
   "networkx.trophic_levels"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_matrix": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.from_numpy_array",
   "networkx.trophic_levels",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_with_basal": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.trophic_levels",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_1": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.voterank"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_2": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.florentine_families_graph",
   "networkx.voterank"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_3": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.gnc_graph",
   "networkx.voterank"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_4": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.voterank"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_5": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.voterank"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.trophic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.trophic.trophic_differences": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.trophic.trophic_incoherence_parameter": {
  "lineno": 121,
  "symbols_in_volume": [
   "networkx.selfloop_edges",
   "networkx.utils.not_implemented_for",
   "numpy.std"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.trophic.trophic_levels": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.adjacency_matrix",
   "networkx.utils.not_implemented_for",
   "numpy.eye",
   "numpy.linalg.LinAlgError",
   "numpy.linalg.inv",
   "numpy.newaxis",
   "numpy.sum"
  ],
  "type": "function"
 },
 "networkx.algorithms.centrality.voterank_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.centrality.voterank_alg.voterank": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.chains": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.chains.chain_decomposition": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.chains.chain_decomposition._build_chain": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.chains.chain_decomposition._dfs_cycle_forest": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "class"
 },
 "networkx.algorithms.chordal._chordal_graph_cliques": {
  "lineno": 345,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.components.connected_components",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal._find_chordality_breaker": {
  "lineno": 309,
  "symbols_in_volume": [
   "networkx.NetworkXTreewidthBoundExceeded",
   "networkx.utils.arbitrary_element",
   "sys.maxsize"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal._find_missing_edge": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.chordal._is_complete_graph": {
  "lineno": 275,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.number_of_selfloops"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal._max_cardinality_node": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.chordal.chordal_graph_cliques": {
  "lineno": 172,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal.chordal_graph_treewidth": {
  "lineno": 220,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.chordal_graph_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal.complete_to_chordal_graph": {
  "lineno": 420,
  "symbols_in_volume": [
   "networkx.has_path",
   "networkx.is_chordal",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal.find_induced_nodes": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "sys.maxsize"
  ],
  "type": "function"
 },
 "networkx.algorithms.chordal.is_chordal": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.clique.MaxWeightClique": {
  "lineno": 557,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.clique.MaxWeightClique.__init__": {
  "lineno": 583,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.expand": {
  "lineno": 636,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.find_branching_nodes": {
  "lineno": 620,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.find_max_weight_clique": {
  "lineno": 651,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.greedily_find_independent_set": {
  "lineno": 609,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.update_incumbent_if_improved": {
  "lineno": 600,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.cliques_containing_node": {
  "lineno": 534,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.enumerate_all_cliques": {
  "lineno": 33,
  "symbols_in_volume": [
   "collections.deque",
   "itertools.chain",
   "itertools.islice",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive.expand": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.graph_clique_number": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.graph_number_of_cliques": {
  "lineno": 430,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.clique.make_clique_bipartite": {
  "lineno": 347,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.make_max_clique_graph": {
  "lineno": 301,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.max_weight_clique": {
  "lineno": 659,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.node_clique_number": {
  "lineno": 460,
  "symbols_in_volume": [
   "networkx.ego_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.clique.number_of_cliques": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.cluster._directed_triangles_and_degree_iter": {
  "lineno": 119,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter.wt": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster._triangles_and_degree_iter": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.Counter",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster._weighted_triangles_and_degree_iter": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster._weighted_triangles_and_degree_iter.wt": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster.average_clustering": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster.clustering": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster.generalized_degree": {
  "lineno": 484,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster.square_clustering": {
  "lineno": 410,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.cluster.transitivity": {
  "lineno": 377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cluster.triangles": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.coloring.equitable_coloring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.coloring.equitable_coloring.change_color": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.equitable_color": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.is_coloring": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.is_equitable": {
  "lineno": 20,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_C_from_F": {
  "lineno": 50,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.move_witnesses": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.pad_graph": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.procedure_P": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.coloring.greedy_coloring._maximal_independent_set": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.greedy_color": {
  "lineno": 253,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.bfs_edges",
   "networkx.connected_components",
   "networkx.dfs_edges",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_bfs": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_dfs": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_independent_set": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_largest_first": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_random_sequential": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last": {
  "lineno": 50,
  "symbols_in_volume": [
   "collections.defaultdict",
   "collections.deque"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last.find_min_degree": {
  "lineno": 79,
  "symbols_in_volume": [
   "itertools.count"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__init__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__repr__": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__init__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__repr__": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.assign_color": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.clear_color": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors_color": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.greedy_coloring_with_interchange": {
  "lineno": 71,
  "symbols_in_volume": [
   "itertools.count",
   "itertools.dropwhile"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.coloring.tests.test_coloring": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.coloring.equitable_coloring.is_coloring",
   "networkx.algorithms.coloring.equitable_coloring.is_equitable"
  ],
  "type": "module"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_bad_inputs": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.coloring.greedy_color",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_basic_cases": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_basic_cases.check_basic_case": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.coloring.greedy_color"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_case_V_plus_not_in_A_cal": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
   "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
   "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
   "networkx.algorithms.coloring.equitable_coloring.procedure_P"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cast_no_solo": {
  "lineno": 175,
  "symbols_in_volume": [
   "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
   "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
   "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
   "networkx.algorithms.coloring.equitable_coloring.procedure_P"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.coloring.equitable_color",
   "networkx.fast_gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_empty": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.coloring.equitable_color",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_large": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.coloring.equitable_color",
   "networkx.fast_gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hard_prob": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.coloring.equitable_coloring.procedure_P"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hardest_prob": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.coloring.equitable_coloring.procedure_P"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_interchange_invalid": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.coloring.greedy_color",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_coloring": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_equitable": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_num_colors": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXAlgorithmError",
   "networkx.coloring.equitable_color",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_seed_argument": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.coloring.greedy_color",
   "networkx.coloring.strategy_random_sequential"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_special_cases": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_special_cases.check_special_case": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.coloring.greedy_color"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_strategy_as_function": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.coloring.greedy_color",
   "networkx.coloring.strategy_largest_first"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.check_state": {
  "lineno": 764,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.cs_shc": {
  "lineno": 613,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.dict_to_sets": {
  "lineno": 452,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.disconnected": {
  "lineno": 492,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.empty_graph": {
  "lineno": 468,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.gis_hc": {
  "lineno": 606,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.gis_shc": {
  "lineno": 599,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lf_hc": {
  "lineno": 543,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lf_shc": {
  "lineno": 536,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lfi_hc": {
  "lineno": 638,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lfi_shc": {
  "lineno": 629,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.make_params_from_graph": {
  "lineno": 781,
  "symbols_in_volume": [
   "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
   "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
   "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.max_degree": {
  "lineno": 776,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.one_node_graph": {
  "lineno": 472,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.rs_shc": {
  "lineno": 498,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.rsi_shc": {
  "lineno": 620,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sl_hc": {
  "lineno": 573,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sl_shc": {
  "lineno": 564,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.slf_hc": {
  "lineno": 514,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.slf_shc": {
  "lineno": 505,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sli_hc": {
  "lineno": 683,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sli_shc": {
  "lineno": 662,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.three_node_clique": {
  "lineno": 485,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.two_node_graph": {
  "lineno": 478,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.verify_coloring": {
  "lineno": 434,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.verify_length": {
  "lineno": 447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.communicability_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.communicability_alg.communicability": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for",
   "numpy.exp",
   "numpy.linalg.eigh"
  ],
  "type": "function"
 },
 "networkx.algorithms.communicability_alg.communicability_exp": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.community": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.asyn_fluid": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.asyn_fluid.asyn_fluidc": {
  "lineno": 13,
  "symbols_in_volume": [
   "collections.Counter",
   "networkx.algorithms.components.is_connected",
   "networkx.exception.NetworkXError",
   "networkx.utils.groups",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.centrality._without_most_central_edges": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.number_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.centrality.girvan_newman": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.centrality.girvan_newman.most_valuable_edge": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.edge_betweenness_centrality"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.community_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.community_utils.is_partition": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.kclique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.kclique._get_adjacent_cliques": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.kclique.k_clique_communities": {
  "lineno": 7,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.connected_components",
   "networkx.find_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep": {
  "lineno": 11,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.utils.BinaryHeap"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep._update_costs": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin.kernighan_lin_bisection": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.community.community_utils.is_partition",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.label_propagation._color_network": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.coloring.greedy_color"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._labeling_complete": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._most_frequent_labels": {
  "lineno": 170,
  "symbols_in_volume": [
   "collections.Counter"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._update_label": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation.asyn_lpa_communities": {
  "lineno": 14,
  "symbols_in_volume": [
   "collections.Counter",
   "networkx.utils.groups",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation.label_propagation_communities": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.lukes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.lukes._split_n_from": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning": {
  "lineno": 28,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.NotATree",
   "networkx.descendants",
   "networkx.dfs_tree",
   "networkx.get_node_attributes",
   "networkx.is_directed",
   "networkx.is_tree",
   "networkx.set_edge_attributes",
   "networkx.set_node_attributes",
   "random.choice"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._a_parent_of_leaves_only": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.descendants",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._concatenate_or_merge": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._leaves": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.descendants",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._pivot": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._value_of_cluster": {
  "lineno": 132,
  "symbols_in_volume": [
   "functools.lru_cache"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._value_of_partition": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._weight_of_cluster": {
  "lineno": 140,
  "symbols_in_volume": [
   "functools.lru_cache"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.modularity_max": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.modularity_max.greedy_modularity_communities": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.community.quality.modularity",
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.modularity_max.naive_greedy_modularity_communities": {
  "lineno": 212,
  "symbols_in_volume": [
   "networkx.algorithms.community.quality.modularity"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.quality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.quality.NotAPartition": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "class"
 },
 "networkx.algorithms.community.quality.NotAPartition.__init__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.quality.coverage": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.quality.inter_community_edges": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.quotient_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.quality.inter_community_non_edges": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.complement"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.quality.intra_community_edges": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.quality.modularity": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.algorithms.community.community_utils.is_partition"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.quality.modularity.community_contribution": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.quality.performance": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.quality.require_partition": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.quality.require_partition.new_func": {
  "lineno": 57,
  "symbols_in_volume": [
   "functools.wraps",
   "networkx.NetworkXError",
   "networkx.algorithms.community.community_utils.is_partition"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_exceptions": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.community.asyn_fluid.asyn_fluidc",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_five_clique_ring": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_single_node": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_two_clique_communities": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_two_nodes": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_directed": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.community.girvan_newman",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_most_valuable_edge": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.girvan_newman"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_most_valuable_edge.heaviest": {
  "lineno": 79,
  "symbols_in_volume": [
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_no_edges": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.algorithms.community.girvan_newman",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_selfloops": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.algorithms.community.girvan_newman",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_undirected": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.algorithms.community.girvan_newman",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.set_of_sets": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.validate_communities": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.validate_possible_communities": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub._check_communities": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.algorithms.community.k_clique_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.setup": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k2": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k3": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k4": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k5": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k6": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_bad_k": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.community.k_clique_communities",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_isolated_K5": {
  "lineno": 19,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.algorithms.community.k_clique_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_overlapping_K5": {
  "lineno": 9,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.algorithms.community.k_clique_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_multigraph": {
  "lineno": 49,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.MultiGraph",
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.cycle_graph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_non_disjoint_partition": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.barbell_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_partition": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_partition_argument": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_seed_argument": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_too_many_blocks": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.barbell_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities._check_communities": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.algorithms.community.asyn_lpa_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_null_graph": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_seed_argument": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.asyn_lpa_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_several_communities": {
  "lineno": 149,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "itertools.combinations",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_simple_communities": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_single_node": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_connected_communities": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.label_propagation_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_directed_not_supported": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.community.label_propagation_communities",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_one_node": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.label_propagation_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_termination": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.algorithms.community.asyn_lpa_communities",
   "networkx.caveman_graph",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_unconnected_communities": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.community.label_propagation_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_lukes.paper_1_case": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.community.lukes_partitioning",
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.paper_2_case": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.community.lukes_partitioning"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_mandatory_integrality": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.community.lukes_partitioning",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_mandatory_tree": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.NotATree",
   "networkx.algorithms.community.lukes_partitioning",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_paper_1_case": {
  "lineno": 105,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_paper_2_case": {
  "lineno": 114,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM._check_communities": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.algorithms.community.greedy_modularity_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM.setup": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM.test_karate_club": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive._check_communities": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.algorithms.community.naive_greedy_modularity_communities"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive.setup": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive.test_karate_club": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage.test_bad_partition": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.algorithms.community.coverage",
   "networkx.barbell_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage.test_good_partition": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.algorithms.community.coverage",
   "networkx.barbell_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance.test_bad_partition": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.community.performance",
   "networkx.barbell_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance.test_good_partition": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.algorithms.community.performance",
   "networkx.barbell_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.test_inter_community_edges_with_digraphs": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.community.quality.inter_community_edges",
   "networkx.complete_graph",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.test_modularity": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.community.modularity",
   "networkx.barbell_graph",
   "networkx.erdos_renyi_graph",
   "networkx.margulis_gabber_galil_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_utils.test_is_partition": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.algorithms.community.is_partition",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_covering": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.algorithms.community.is_partition",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_disjoint": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.algorithms.community.is_partition",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_node": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.algorithms.community.is_partition",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.attracting": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.attracting.attracting_components": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.condensation",
   "networkx.strongly_connected_components",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.attracting.is_attracting_component": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.attracting.number_attracting_components": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.biconnected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.biconnected._biconnected_dfs": {
  "lineno": 330,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.articulation_points": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.biconnected_component_edges": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.biconnected_components": {
  "lineno": 160,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.is_biconnected": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.connected._plain_bfs": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.connected.connected_components": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.connected.is_connected": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.connected.node_connected_component": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.connected.number_connected_components": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.semiconnected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.semiconnected.is_semiconnected": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.condensation",
   "networkx.is_weakly_connected",
   "networkx.topological_sort",
   "networkx.utils.not_implemented_for",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.strongly_connected.condensation": {
  "lineno": 340,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.set_node_attributes",
   "networkx.strongly_connected_components",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.is_strongly_connected": {
  "lineno": 298,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.dfs_postorder_nodes",
   "networkx.dfs_preorder_nodes",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.number_strongly_connected_components": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive.visit": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_attracting": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setup_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.attracting_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_connected_raise": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.attracting_components",
   "networkx.is_attracting_component",
   "networkx.number_attracting_components",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.is_attracting_component"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.number_attracting_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_equal": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.articulation_points",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_articulation_points_repetitions": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.articulation_points"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_barbell": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.add_path",
   "networkx.articulation_points",
   "networkx.barbell_graph",
   "networkx.biconnected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.articulation_points",
   "networkx.biconnected_component_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.biconnected_component_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.biconnected_components",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.articulation_points",
   "networkx.biconnected_components",
   "networkx.davis_southern_women_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.biconnected_components",
   "networkx.is_biconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.articulation_points",
   "networkx.biconnected_components",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_connected_raise": {
  "lineno": 239,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.articulation_points",
   "networkx.biconnected_component_edges",
   "networkx.biconnected_components",
   "networkx.is_biconnected",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.is_biconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_is_biconnected": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.cycle_graph",
   "networkx.is_biconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_null_graph": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.articulation_points",
   "networkx.biconnected_component_edges",
   "networkx.biconnected_components",
   "networkx.is_biconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.setup_class": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.convert_node_labels_to_integers",
   "networkx.grid_2d_graph",
   "networkx.house_graph",
   "networkx.lollipop_graph",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_mutability": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.NetworkXPointlessConcept",
   "networkx.connected_components",
   "networkx.is_connected",
   "networkx.node_connected_component",
   "networkx.number_connected_components",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.node_connected_component"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.number_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.number_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_alternating_path": {
  "lineno": 49,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.DiGraph",
   "networkx.is_semiconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_cycle": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.is_semiconnected",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_dumbbell": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.is_semiconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_empty": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXPointlessConcept",
   "networkx.is_semiconnected",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_path": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_semiconnected",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_single_node_graph": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_semiconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_tree": {
  "lineno": 35,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.DiGraph",
   "networkx.is_semiconnected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_undirected": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.is_semiconnected",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setup_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_condensation_mapping_and_members": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.condensation"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_raise": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.NetworkXPointlessConcept",
   "networkx.condensation",
   "networkx.is_strongly_connected",
   "networkx.kosaraju_strongly_connected_components",
   "networkx.strongly_connected_components",
   "networkx.strongly_connected_components_recursive",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.condensation",
   "networkx.is_directed_acyclic_graph",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.condensation",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.condensation",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.is_strongly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.kosaraju_strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_null_graph": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXPointlessConcept",
   "networkx.condensation",
   "networkx.is_strongly_connected",
   "networkx.kosaraju_strongly_connected_components",
   "networkx.strongly_connected_components",
   "networkx.strongly_connected_components_recursive",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.number_strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.strongly_connected_components_recursive"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setup_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.is_weakly_connected",
   "networkx.number_weakly_connected_components",
   "networkx.weakly_connected_components",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_null_graph": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXPointlessConcept",
   "networkx.is_weakly_connected",
   "networkx.number_weakly_connected_components",
   "networkx.weakly_connected_components",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.number_connected_components",
   "networkx.number_weakly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.weakly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.components.weakly_connected._plain_bfs": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.is_weakly_connected": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.number_weakly_connected_components": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.weakly_connected_components": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.connectivity": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity": {
  "lineno": 420,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.algorithms.flow.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.average_node_connectivity": {
  "lineno": 352,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.algorithms.flow.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.edge_connectivity": {
  "lineno": 650,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.flow.build_residual_network",
   "networkx.dominating_set",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.local_edge_connectivity": {
  "lineno": 487,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.maximum_flow_value"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.local_node_connectivity": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.maximum_flow_value"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity": {
  "lineno": 212,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.NetworkXError",
   "networkx.algorithms.flow.build_residual_network",
   "networkx.is_connected",
   "networkx.is_weakly_connected",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity.neighbors": {
  "lineno": 321,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.cuts.minimum_edge_cut": {
  "lineno": 439,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.flow.build_residual_network",
   "networkx.dominating_set",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut": {
  "lineno": 294,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.NetworkXError",
   "networkx.algorithms.flow.build_residual_network",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut.neighbors": {
  "lineno": 405,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.minimum_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_node_cut": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.disjoint_paths._unique_everseen": {
  "lineno": 385,
  "symbols_in_volume": [
   "itertools.filterfalse"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths.edge_disjoint_paths": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.exception.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths.node_disjoint_paths": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.exception.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.edge_augmentation._compat_shuffle": {
  "lineno": 1141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._lightest_meta_edges": {
  "lineno": 527,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._minimum_rooted_branching": {
  "lineno": 1010,
  "symbols_in_volume": [
   "networkx.minimum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._ordered": {
  "lineno": 493,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges": {
  "lineno": 498,
  "symbols_in_volume": [
   "itertools.compress"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges._try_getitem": {
  "lineno": 507,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.bridge_augmentation": {
  "lineno": 439,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.collapse": {
  "lineno": 1034,
  "symbols_in_volume": [
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.complement_edges": {
  "lineno": 1105,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.greedy_k_edge_augmentation": {
  "lineno": 1146,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.has_bridges",
   "networkx.is_connected",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.connectivity.local_edge_connectivity",
   "networkx.has_path",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.k_edge_augmentation": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.is_k_edge_connected",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.one_edge_augmentation": {
  "lineno": 385,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.partial_k_edge_augmentation": {
  "lineno": 285,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.k_edge_augmentation",
   "networkx.k_edge_subgraphs"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.partial_k_edge_augmentation._edges_between_disjoint": {
  "lineno": 338,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.unconstrained_bridge_augmentation": {
  "lineno": 686,
  "symbols_in_volume": [
   "collections.defaultdict",
   "itertools.product",
   "math.ceil",
   "networkx.connected_components",
   "networkx.connectivity.bridge_components",
   "networkx.dfs_preorder_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.unconstrained_one_edge_augmentation": {
  "lineno": 576,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.weighted_bridge_augmentation": {
  "lineno": 840,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.NetworkXUnfeasible",
   "networkx.connectivity.bridge_components",
   "networkx.dfs_tree",
   "networkx.has_bridges",
   "networkx.is_connected",
   "networkx.reverse",
   "networkx.set_edge_attributes",
   "networkx.tree_all_pairs_lowest_common_ancestor"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.weighted_one_edge_augmentation": {
  "lineno": 618,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.connected_components",
   "networkx.is_connected",
   "networkx.minimum_spanning_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.construct": {
  "lineno": 313,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.utils.arbitrary_element",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.construct._recursive_build": {
  "lineno": 337,
  "symbols_in_volume": [
   "networkx.minimum_cut",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_components": {
  "lineno": 381,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.connected_components",
   "networkx.get_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_subgraphs": {
  "lineno": 414,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.connected_components",
   "networkx.get_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._high_degree_components": {
  "lineno": 480,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.connected_components",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._k_edge_subgraphs_nodes": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._low_degree_nodes": {
  "lineno": 459,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.bridge_components": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.algorithms.bridges",
   "networkx.connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs": {
  "lineno": 505,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.minimum_edge_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.k_edge_components": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.strongly_connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.k_edge_subgraphs": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcomponents._consolidate": {
  "lineno": 157,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition.has_nbrs_in_partition": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._reconstruct_k_components": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.build_k_number_dict": {
  "lineno": 218,
  "symbols_in_volume": [
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.k_components": {
  "lineno": 19,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.all_node_cuts",
   "networkx.biconnected_components",
   "networkx.connected_components",
   "networkx.node_connectivity",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcutsets._is_separating_set": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.restricted_view"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets.all_node_cuts": {
  "lineno": 23,
  "symbols_in_volume": [
   "collections.defaultdict",
   "copy.copy",
   "itertools.combinations",
   "networkx.NetworkXError",
   "networkx.algorithms.flow.build_residual_network",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.antichains",
   "networkx.condensation",
   "networkx.density",
   "networkx.is_connected",
   "networkx.node_connectivity",
   "networkx.transitive_closure",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.stoerwagner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.stoerwagner.stoer_wagner": {
  "lineno": 14,
  "symbols_in_volume": [
   "itertools.islice",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.setup_class": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.gnp_random_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity": {
  "lineno": 374,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.add_path",
   "networkx.all_pairs_node_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed": {
  "lineno": 386,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.all_pairs_node_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral": {
  "lineno": 369,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.all_pairs_node_connectivity",
   "networkx.icosahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch": {
  "lineno": 363,
  "symbols_in_volume": [
   "networkx.all_pairs_node_connectivity",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_combinations": {
  "lineno": 398,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.all_pairs_node_connectivity",
   "networkx.complete_graph",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter": {
  "lineno": 409,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.all_pairs_node_connectivity",
   "networkx.complete_graph",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_complete": {
  "lineno": 343,
  "symbols_in_volume": [
   "networkx.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_cycles": {
  "lineno": 333,
  "symbols_in_volume": [
   "networkx.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_paths": {
  "lineno": 350,
  "symbols_in_volume": [
   "networkx.all_pairs_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.fast_gnp_random_graph",
   "networkx.is_biconnected",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_articulation_points": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.average_node_connectivity",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity_directed": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_brandes_erlebach": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.local_edge_connectivity",
   "networkx.algorithms.connectivity.local_node_connectivity",
   "networkx.algorithms.flow.preflow_push",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_complete_graphs": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_cutoff": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.local_edge_connectivity",
   "networkx.algorithms.connectivity.local_node_connectivity",
   "networkx.algorithms.flow.preflow_push",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_directed_edge_connectivity": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.connectivity.local_edge_connectivity",
   "networkx.cycle_graph",
   "networkx.edge_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_dodecahedral": {
  "lineno": 184,
  "symbols_in_volume": [
   "networkx.dodecahedral_graph",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_connectivity_flow_vs_stoer_wagner": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.dodecahedral_graph",
   "networkx.edge_connectivity",
   "networkx.icosahedral_graph",
   "networkx.octahedral_graph",
   "networkx.stoer_wagner"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_source": {
  "lineno": 224,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.edge_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_target": {
  "lineno": 232,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.edge_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_empty_graphs": {
  "lineno": 159,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.empty_graph",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_icosahedral": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.icosahedral_graph",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_source": {
  "lineno": 290,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.edge_connectivity",
   "networkx.node_connectivity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_target": {
  "lineno": 296,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.edge_connectivity",
   "networkx.node_connectivity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_invalid_auxiliary": {
  "lineno": 285,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.connectivity.local_node_connectivity",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_source": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.node_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_target": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.node_connectivity",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_connected": {
  "lineno": 250,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_weakly_connected": {
  "lineno": 240,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_octahedral": {
  "lineno": 192,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.node_connectivity",
   "networkx.octahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_petersen": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.node_connectivity",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_tutte": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.node_connectivity",
   "networkx.tutte_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_1": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.disjoint_union",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_2": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.core_number",
   "networkx.disjoint_union",
   "networkx.edge_connectivity",
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.fast_gnp_random_graph",
   "networkx.is_biconnected",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_articulation_points": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.articulation_points",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_brandes_erlebach_book": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.minimum_st_node_cut",
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_edge_cutset_random_graphs": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.edge_connectivity",
   "networkx.fast_gnp_random_graph",
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_empty_graphs": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXPointlessConcept",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_icosahedral_cutset": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.icosahedral_graph",
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_source": {
  "lineno": 301,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_target": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_invalid_auxiliary": {
  "lineno": 296,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.connectivity.minimum_st_node_cut",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_source": {
  "lineno": 237,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_target": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_exception": {
  "lineno": 181,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_random_graphs": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.fast_gnp_random_graph",
   "networkx.is_connected",
   "networkx.minimum_node_cut",
   "networkx.node_connectivity",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_connected": {
  "lineno": 264,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_weakly_connected": {
  "lineno": 255,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_octahedral_cutset": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "networkx.octahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_petersen_cutset": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_unbounded": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.minimum_st_edge_cut",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_white_harary_paper": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.disjoint_union",
   "networkx.is_connected",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete_directed": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.minimum_edge_cut",
   "networkx.minimum_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_minimum_st_node_cut": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.minimum_st_node_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.is_path": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_cutoff_disjoint_paths": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.edge_disjoint_paths",
   "networkx.icosahedral_graph",
   "networkx.node_disjoint_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_florentine_families": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.edge_disjoint_paths",
   "networkx.florentine_families_graph",
   "networkx.node_connectivity",
   "networkx.node_disjoint_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_graph_from_pr_2053": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.edge_connectivity",
   "networkx.edge_disjoint_paths",
   "networkx.node_connectivity",
   "networkx.node_disjoint_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_icosahedral_disjoint_paths": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.edge_disjoint_paths",
   "networkx.icosahedral_graph",
   "networkx.node_disjoint_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_invalid_auxiliary": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.node_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_edges": {
  "lineno": 230,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.edge_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_nodes": {
  "lineno": 238,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.node_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_karate": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.edge_connectivity",
   "networkx.edge_disjoint_paths",
   "networkx.karate_club_graph",
   "networkx.node_connectivity",
   "networkx.node_disjoint_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_edge_paths": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.edge_disjoint_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_node_paths": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.node_disjoint_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_edge_paths": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.edge_disjoint_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_node_paths": {
  "lineno": 192,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.node_disjoint_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_edges": {
  "lineno": 214,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.edge_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_nodes": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.node_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_edges": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.edge_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_nodes": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.node_disjoint_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_octahedral_disjoint_paths": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.edge_disjoint_paths",
   "networkx.node_disjoint_paths",
   "networkx.octahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_petersen_disjoint_paths": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.edge_disjoint_paths",
   "networkx.node_disjoint_paths",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._assert_solution_properties": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._augment_and_check": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
   "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
   "networkx.edge_connectivity",
   "networkx.k_edge_augmentation"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._check_augmentations": {
  "lineno": 394,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
   "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
   "networkx.edge_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._check_unconstrained_bridge_property": {
  "lineno": 480,
  "symbols_in_volume": [
   "math.ceil",
   "networkx.algorithms.connectivity.edge_augmentation.collapse",
   "networkx.connectivity.bridge_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.tarjan_bridge_graph": {
  "lineno": 20,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_barbell": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_bridge": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_clique_and_node": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_cliques": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_configuration": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.configuration_model",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_edgeless_graph": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_gnp_augmentation": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
   "networkx.gnp_random_graph",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_invalid_k": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.k_edge_augmentation",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected",
   "networkx.barbell_graph",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected_exceptions": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected",
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected_exceptions": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_karate": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_null_graph": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_point_graph": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_shell": {
  "lineno": 197,
  "symbols_in_volume": [
   "networkx.random_shell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_star": {
  "lineno": 211,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_tarjan": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_unfeasible": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.connectivity.k_edge_augmentation",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_weight_key": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._all_pairs_connectivity": {
  "lineno": 45,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_local_cc_edge_connectivity": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.edge_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_subgraph_edge_connectivity": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.edge_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity": {
  "lineno": 74,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.algorithms.connectivity.bridge_components",
   "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs",
   "networkx.connected_components",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._memo_connectivity": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.edge_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_bridge_cc": {
  "lineno": 241,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.algorithms.connectivity.bridge_components",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.configuration_model",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration_directed": {
  "lineno": 464,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.configuration_model",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_directed_aux_graph": {
  "lineno": 424,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.DiGraph",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.strongly_connected_components",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_empty_input": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_five_clique": {
  "lineno": 390,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.complete_graph",
   "networkx.degree",
   "networkx.disjoint_union",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_four_clique": {
  "lineno": 357,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_general_k_edge_subgraph_quick_return": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate_directed": {
  "lineno": 483,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference": {
  "lineno": 296,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference_directed": {
  "lineno": 323,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.DiGraph",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_not_implemented": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.algorithms.connectivity.bridge_components",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp_directed": {
  "lineno": 456,
  "symbols_in_volume": [
   "networkx.gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell": {
  "lineno": 209,
  "symbols_in_volume": [
   "networkx.random_shell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell_directed": {
  "lineno": 474,
  "symbols_in_volume": [
   "networkx.random_shell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_tarjan_bridge": {
  "lineno": 223,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_triangles": {
  "lineno": 339,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_undirected_aux_graph": {
  "lineno": 254,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.Graph",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.k_edge_subgraphs",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_zero_k_exception": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
   "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs",
   "networkx.k_edge_components",
   "networkx.k_edge_subgraphs",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.node_connectivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_configuration": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.configuration_model",
   "networkx.k_components",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women": {
  "lineno": 181,
  "symbols_in_volume": [
   "networkx.davis_southern_women_graph",
   "networkx.k_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women_detail_3_and_4": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.davis_southern_women_graph",
   "networkx.k_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_directed": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.NetworkXNotImplemented",
   "networkx.gnp_random_graph",
   "networkx.k_components",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.k_components",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate_component_number": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.kcomponents.build_k_number_dict",
   "networkx.k_components",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_random_gnp": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.gnp_random_graph",
   "networkx.k_components",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode": {
  "lineno": 259,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.kcomponents._consolidate"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode.list_of_sets_equal": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_shell": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.k_components",
   "networkx.random_shell_graph",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.k_components",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.disjoint_union",
   "networkx.get_node_attributes",
   "networkx.grid_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets": {
  "lineno": 122,
  "symbols_in_volume": [
   "itertools.islice",
   "networkx.all_node_cuts",
   "networkx.connected_components",
   "networkx.is_connected",
   "networkx.node_connectivity",
   "networkx.restricted_view"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.fast_gnp_random_graph",
   "networkx.is_biconnected",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.disjoint_union",
   "networkx.get_node_attributes",
   "networkx.grid_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_alternative_flow_functions": {
  "lineno": 209,
  "symbols_in_volume": [
   "itertools.islice",
   "networkx.all_node_cuts",
   "networkx.cycle_graph",
   "networkx.grid_2d_graph",
   "networkx.is_connected",
   "networkx.node_connectivity",
   "networkx.restricted_view",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_articulation_points": {
  "lineno": 184,
  "symbols_in_volume": [
   "networkx.all_node_cuts",
   "networkx.articulation_points"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_complete_graph": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.all_node_cuts",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_configuration": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.configuration_model",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_cycle_graph": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.all_node_cuts",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_disconnected_graph": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.all_node_cuts",
   "networkx.fast_gnp_random_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_example_1": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_grid_2d_graph": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.all_node_cuts",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.kcutsets._is_separating_set",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set_complete_graph": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.algorithms.connectivity.kcutsets._is_separating_set",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_karate": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_non_repeated_cuts": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.all_node_cuts",
   "networkx.biconnected_components",
   "networkx.info",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_random_gnp": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_shell": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.random_shell_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_torrents_and_ferraro_graph": {
  "lineno": 135,
  "symbols_in_volume": [
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.disjoint_union",
   "networkx.get_node_attributes",
   "networkx.grid_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition": {
  "lineno": 6,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.stoer_wagner",
   "networkx.utils.BinaryHeap",
   "networkx.utils.PairingHeap"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_exceptions": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.stoer_wagner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph1": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph2": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph3": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_weight_name": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_node_connectivity": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.core._core_subgraph": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.core_number": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.all_neighbors",
   "networkx.exception.NetworkXError",
   "networkx.number_of_selfloops",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.core.k_core": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_core.k_filter": {
  "lineno": 194,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_corona": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_corona.func": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_crust": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_shell": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_shell.k_filter": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.core.k_truss": {
  "lineno": 371,
  "symbols_in_volume": [
   "networkx.isolates",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.core.onion_layers": {
  "lineno": 440,
  "symbols_in_volume": [
   "networkx.all_neighbors",
   "networkx.exception.NetworkXError",
   "networkx.isolates",
   "networkx.number_of_selfloops",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.covering": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.covering.is_edge_cover": {
  "lineno": 89,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.covering.min_edge_cover": {
  "lineno": 12,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.NetworkXException",
   "networkx.max_weight_matching",
   "networkx.number_of_isolates",
   "networkx.utils.arbitrary_element",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cuts": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.cuts.boundary_expansion": {
  "lineno": 359,
  "symbols_in_volume": [
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.cuts.conductance": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cuts.cut_size": {
  "lineno": 24,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.edge_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.cuts.edge_expansion": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cuts.mixing_expansion": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cuts.node_expansion": {
  "lineno": 320,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.cuts.normalized_cut_size": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cuts.volume": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cycles": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.cycles._min_cycle": {
  "lineno": 570,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.shortest_path",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles._min_cycle_basis": {
  "lineno": 545,
  "symbols_in_volume": [
   "networkx.minimum_spanning_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles._path_to_cycle": {
  "lineno": 614,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.cycle_basis": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.find_cycle": {
  "lineno": 339,
  "symbols_in_volume": [
   "networkx.edge_dfs",
   "networkx.exception.NetworkXNoCycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.find_cycle.tailhead": {
  "lineno": 419,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cycles.minimum_cycle_basis": {
  "lineno": 499,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles": {
  "lineno": 227,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.strongly_connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles._unblock": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles.circuit": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles": {
  "lineno": 98,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.strongly_connected_components",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles._unblock": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.d_separation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.d_separation.d_separated": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.NodeNotFound",
   "networkx.is_directed_acyclic_graph",
   "networkx.utils.UnionFind",
   "networkx.utils.not_implemented_for",
   "networkx.weakly_connected_components",
   "typing.AbstractSet"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag": {
  "lineno": null,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "module"
 },
 "networkx.algorithms.dag.all_topological_sorts": {
  "lineno": 291,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.NetworkXError",
   "networkx.NetworkXUnfeasible",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.ancestors": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.antichains": {
  "lineno": 631,
  "symbols_in_volume": [
   "networkx.topological_sort",
   "networkx.transitive_closure_dag",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.dag_longest_path": {
  "lineno": 690,
  "symbols_in_volume": [
   "networkx.topological_sort",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.dag_longest_path_length": {
  "lineno": 756,
  "symbols_in_volume": [
   "networkx.dag_longest_path",
   "networkx.utils.not_implemented_for",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.dag_to_branching": {
  "lineno": 811,
  "symbols_in_volume": [
   "networkx.HasACycle",
   "networkx.generators.trees.NIL",
   "networkx.prefix_tree",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.descendants": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.has_cycle": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.utils.consume"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.is_aperiodic": {
  "lineno": 410,
  "symbols_in_volume": [
   "math.gcd",
   "networkx.NetworkXError",
   "networkx.is_aperiodic",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.is_directed_acyclic_graph": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort": {
  "lineno": 201,
  "symbols_in_volume": [
   "heapq.heapify",
   "heapq.heappop",
   "heapq.heappush",
   "networkx.NetworkXError",
   "networkx.NetworkXUnfeasible"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort.create_tuple": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort.key": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.dag.root_to_leaf_paths": {
  "lineno": 793,
  "symbols_in_volume": [
   "functools.partial",
   "itertools.product",
   "itertools.starmap",
   "networkx.all_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.topological_sort": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXUnfeasible"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_closure": {
  "lineno": 469,
  "symbols_in_volume": [
   "networkx.dfs_preorder_nodes",
   "networkx.edge_dfs",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_closure_dag": {
  "lineno": 531,
  "symbols_in_volume": [
   "networkx.algorithms.traversal.breadth_first_search.descendants_at_distance",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_reduction": {
  "lineno": 580,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.dfs_edges",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_measures": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.distance_measures._count_lu_permutations": {
  "lineno": 488,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_measures._laplacian_submatrix": {
  "lineno": 464,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.barycenter": {
  "lineno": 392,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.center": {
  "lineno": 360,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.diameter": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.eccentricity": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.extrema_bounding": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.periphery": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.radius": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_measures.resistance_distance": {
  "lineno": 503,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.laplacian_matrix",
   "networkx.utils.not_implemented_for",
   "numpy.absolute",
   "numpy.append",
   "numpy.divide",
   "numpy.product",
   "numpy.sign",
   "numpy.sort"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_regular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.distance_regular.global_parameters": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.distance_regular.intersection_array": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.all_pairs_shortest_path_length",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_regular.is_distance_regular": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.distance_regular.is_strongly_regular": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dominance": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.dominance.dominance_frontiers": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators": {
  "lineno": 12,
  "symbols_in_volume": [
   "functools.reduce",
   "networkx.NetworkXError",
   "networkx.dfs_postorder_nodes",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators.intersect": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.dominating": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.dominating.dominating_set": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.dominating.is_dominating_set": {
  "lineno": 67,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.efficiency_measures.efficiency": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.exception.NetworkXNoPath",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures.global_efficiency": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.all_pairs_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures.local_efficiency": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.euler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.euler._find_path_start": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.euler._multigraph_eulerian_circuit": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.euler._simplegraph_eulerian_circuit": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.euler.eulerian_circuit": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.euler.eulerian_path": {
  "lineno": 263,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.euler.eulerize": {
  "lineno": 302,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept",
   "networkx.is_connected",
   "networkx.max_weight_matching",
   "networkx.shortest_path",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.euler.has_eulerian_path": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.euler.is_eulerian": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.is_strongly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.euler.is_semieulerian": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.boykovkolmogorov": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl": {
  "lineno": 161,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.NetworkXError",
   "networkx.NetworkXUnbounded",
   "networkx.algorithms.flow.utils.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl._has_valid_root": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl._is_closer": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.adopt": {
  "lineno": 274,
  "symbols_in_volume": [
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.augment": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.grow": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.capacityscaling._build_flow_dict": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._build_residual_network": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.NetworkXUnfeasible",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._detect_unboundedness": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.negative_edge_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling.capacity_scaling": {
  "lineno": 157,
  "symbols_in_volume": [
   "itertools.chain",
   "math.log",
   "networkx.NetworkXUnfeasible",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXUnbounded",
   "networkx.algorithms.flow.utils.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl.breath_first_search": {
  "lineno": 168,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl.depth_first_search": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.augment": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.bidirectional_bfs": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_impl": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.flow.utils.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.gomory_hu": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.gomory_hu.gomory_hu_tree": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.minimum_cut",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow_value": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut": {
  "lineno": 312,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut_value": {
  "lineno": 475,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.mincost": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.mincost.cost_of_flow": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.max_flow_min_cost": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.maximum_flow_value"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow_cost": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex": {
  "lineno": 13,
  "symbols_in_volume": [
   "itertools.chain",
   "itertools.repeat",
   "networkx.NetworkXError",
   "networkx.NetworkXUnbounded",
   "networkx.NetworkXUnfeasible",
   "networkx.selfloop_edges",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_edge": {
  "lineno": 488,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_entry": {
  "lineno": 562,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.augment_flow": {
  "lineno": 410,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_apex": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_cycle": {
  "lineno": 377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_entering_edges": {
  "lineno": 300,
  "symbols_in_volume": [
   "itertools.chain",
   "math.ceil",
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_leaving_edge": {
  "lineno": 401,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.make_root": {
  "lineno": 451,
  "symbols_in_volume": [
   "itertools.islice"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.reduced_cost": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.remove_edge": {
  "lineno": 428,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.residual_capacity": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_path": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_subtree": {
  "lineno": 419,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.update_potentials": {
  "lineno": 512,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.activate": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.discharge": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.gap_heuristic": {
  "lineno": 175,
  "symbols_in_volume": [
   "itertools.islice"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.global_relabel": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.push": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.relabel": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.reverse_bfs": {
  "lineno": 50,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl": {
  "lineno": 13,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.augment": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.relabel": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.compute_cutset": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.minimum_edge_weight": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_davis_southern_women_graph": {
  "lineno": 53,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.davis_southern_women_graph",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.minimum_cut_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_default_flow_function_karate_club_graph": {
  "lineno": 34,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.karate_club_graph",
   "networkx.minimum_cut_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_directed_raises": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.gomory_hu_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_empty_raises": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.gomory_hu_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_florentine_families_graph": {
  "lineno": 63,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.florentine_families_graph",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.minimum_cut_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph": {
  "lineno": 43,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.karate_club_graph",
   "networkx.minimum_cut_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph_cutset": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.karate_club_graph",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_les_miserables_graph_cutset": {
  "lineno": 73,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.les_miserables_graph",
   "networkx.minimum_cut_value",
   "networkx.set_edge_attributes",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_wikipedia_example": {
  "lineno": 94,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.gomory_hu_tree",
   "networkx.is_tree",
   "networkx.minimum_cut_value"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.maximum_flow",
   "networkx.maximum_flow_value",
   "networkx.minimum_cut",
   "networkx.minimum_cut_value"
  ],
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff": {
  "lineno": 524,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_complete_graph_cutoff": {
  "lineno": 540,
  "symbols_in_volume": [
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.shortest_augmenting_path",
   "networkx.complete_graph",
   "networkx.maximum_flow_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_cutoff": {
  "lineno": 525,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface": {
  "lineno": 385,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.setup": {
  "lineno": 386,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_not_callable": {
  "lineno": 402,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_parameters": {
  "lineno": 411,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs": {
  "lineno": 447,
  "symbols_in_volume": [
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs_default_flow_func": {
  "lineno": 465,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff": {
  "lineno": 425,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.minimum_cut",
   "networkx.minimum_cut_value",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_reusing_residual": {
  "lineno": 472,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph1": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph2": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph3": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph5": {
  "lineno": 335,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_edges": {
  "lineno": 262,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_path": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnbounded",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_disconnected": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.maximum_flow_value"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph1": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph2": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph_infcap_edges": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_multigraphs_raise": {
  "lineno": 377,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_optional_capacity": {
  "lineno": 235,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_coincide": {
  "lineno": 371,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_not_in_graph": {
  "lineno": 360,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_wikipedia_dinitz_example": {
  "lineno": 211,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_flow_dict",
   "networkx.minimum_cut"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compute_cutset": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_global_relabel_freq": {
  "lineno": 493,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.algorithms.flow.preflow_push",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_makes_enough_space": {
  "lineno": 501,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.flow.preflow_push"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_shortest_augmenting_path_two_phase": {
  "lineno": 510,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_cuts": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.is_connected",
   "networkx.is_strongly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_flows": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.flow.boykov_kolmogorov",
   "networkx.algorithms.flow.dinitz",
   "networkx.algorithms.flow.edmonds_karp",
   "networkx.algorithms.flow.preflow_push",
   "networkx.algorithms.flow.shortest_augmenting_path"
  ],
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network",
   "networkx.complete_graph",
   "networkx.maximum_flow_value",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network",
   "pytest.mark.slow"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.algorithms.flow.preflow_push"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network",
   "networkx.maximum_flow_value",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_residual_network"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.read_gpickle",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.algorithms.flow.build_flow_dict"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_bone_shaped": {
  "lineno": 407,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_deadend": {
  "lineno": 325,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.min_cost_flow",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digon": {
  "lineno": 300,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow",
   "networkx.min_cost_flow_cost",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph1": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow",
   "networkx.min_cost_flow_cost",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph2": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.max_flow_min_cost"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph3": {
  "lineno": 224,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.max_flow_min_cost"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_exceptions": {
  "lineno": 428,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.NetworkXUnfeasible",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_finite_capacity_neg_digon": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow_cost"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_infinite_capacity_neg_digon": {
  "lineno": 337,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_large": {
  "lineno": 459,
  "symbols_in_volume": [
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.network_simplex",
   "networkx.read_gpickle",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_max_flow_min_cost": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.max_flow_min_cost"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_multidigraph": {
  "lineno": 366,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.capacity_scaling",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negative_selfloops": {
  "lineno": 378,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negcycle_infcap": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.NetworkXUnfeasible",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_no_flow_satisfying_demands": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_simple_digraph": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow",
   "networkx.min_cost_flow_cost",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_sum_demands_not_zero": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.capacity_scaling",
   "networkx.network_simplex",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_transshipment": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow",
   "networkx.min_cost_flow_cost",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_zero_capacity_edges": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.capacity_scaling",
   "networkx.cost_of_flow",
   "networkx.min_cost_flow",
   "networkx.min_cost_flow_cost",
   "networkx.network_simplex"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.flow.utils.CurrentEdge": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.__init__": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge._rewind": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.get": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.move_to_next": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.__init__": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.add_work": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.clear_work": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.is_reached": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.Level": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.flow.utils.Level.__init__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.build_flow_dict": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.build_residual_network": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.flow.utils.detect_unboundedness": {
  "lineno": 156,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.NetworkXUnbounded"
  ],
  "type": "function"
 },
 "networkx.algorithms.graph_hashing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash": {
  "lineno": 13,
  "symbols_in_volume": [
   "collections.Counter",
   "hashlib.blake2b"
  ],
  "type": "function"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash.neighborhood_aggregate": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash.weisfeiler_lehman_step": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.graphical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.graphical._basic_graphical_tests": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.utils.make_list_of_ints"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_digraphical": {
  "lineno": 301,
  "symbols_in_volume": [
   "heapq.heapify",
   "heapq.heappop",
   "heapq.heappush",
   "networkx.NetworkXError",
   "networkx.utils.make_list_of_ints"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_graphical": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_multigraphical": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.make_list_of_ints"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_pseudographical": {
  "lineno": 268,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.make_list_of_ints"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible"
  ],
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible"
  ],
  "type": "function"
 },
 "networkx.algorithms.hierarchy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.hierarchy.flow_hierarchy": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.hybrid": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.hybrid.is_kl_connected": {
  "lineno": 116,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.NetworkXNoPath",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.hybrid.kl_connected_subgraph": {
  "lineno": 12,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.NetworkXNoPath",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.isolate": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isolate.is_isolate": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isolate.isolates": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isolate.number_of_isolates": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.ismags": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.__init__": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._couple_nodes": {
  "lineno": 1014,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_compatibility": {
  "lineno": 413,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_match_maker": {
  "lineno": 435,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_match_maker.comparer": {
  "lineno": 437,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edges_of_same_color": {
  "lineno": 787,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_neighbor_color_count": {
  "lineno": 491,
  "symbols_in_volume": [
   "collections.Counter"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_node_edge_color": {
  "lineno": 687,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_nodecolor_candidates": {
  "lineno": 657,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_permutations": {
  "lineno": 971,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_colors": {
  "lineno": 393,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_partitions": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_partitions.edgematch": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._get_lookahead_candidates": {
  "lineno": 508,
  "symbols_in_volume": [
   "collections.Counter",
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._get_permutations_by_length": {
  "lineno": 712,
  "symbols_in_volume": [
   "collections.defaultdict",
   "itertools.permutations",
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_colors": {
  "lineno": 387,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_partitions": {
  "lineno": 355,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_partitions.nodematch": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._largest_common_subgraph": {
  "lineno": 884,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._make_constraints": {
  "lineno": 674,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._map_nodes": {
  "lineno": 804,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_compatibility": {
  "lineno": 399,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_match_maker": {
  "lineno": 427,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_match_maker.comparer": {
  "lineno": 429,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._process_ordered_pair_partitions": {
  "lineno": 1055,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._refine_node_partitions": {
  "lineno": 736,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._refine_node_partitions.equal_color": {
  "lineno": 744,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._remove_node": {
  "lineno": 954,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_colors": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_partitions": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_partitions.edgematch": {
  "lineno": 349,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_colors": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_partitions": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_partitions.nodematch": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._update_orbits": {
  "lineno": 991,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.analyze_symmetry": {
  "lineno": 579,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.find_isomorphisms": {
  "lineno": 443,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.is_isomorphic": {
  "lineno": 617,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.isomorphisms_iter": {
  "lineno": 645,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.largest_common_subgraph": {
  "lineno": 540,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_is_isomorphic": {
  "lineno": 630,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_isomorphisms_iter": {
  "lineno": 653,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.are_all_equal": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.intersect": {
  "lineno": 206,
  "symbols_in_volume": [
   "functools.reduce"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.make_partitions": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.partition_to_color": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorph.could_be_isomorphic": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.number_of_cliques",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.is_isomorphic": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState": {
  "lineno": 934,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__": {
  "lineno": 944,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore": {
  "lineno": 1047,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher": {
  "lineno": 519,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__": {
  "lineno": 525,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter": {
  "lineno": 541,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize": {
  "lineno": 588,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility": {
  "lineno": 622,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState": {
  "lineno": 846,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__": {
  "lineno": 855,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.restore": {
  "lineno": 918,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__": {
  "lineno": 153,
  "symbols_in_volume": [
   "sys.getrecursionlimit",
   "sys.setrecursionlimit"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter": {
  "lineno": 289,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit": {
  "lineno": 189,
  "symbols_in_volume": [
   "sys.setrecursionlimit"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_monomorphic": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter": {
  "lineno": 379,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_monomorphisms_iter": {
  "lineno": 386,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.matchhelpers.allclose": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match.match": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match.match": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.close": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.copyfunc": {
  "lineno": 20,
  "symbols_in_volume": [
   "types.FunctionType"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_edge_match": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match.match": {
  "lineno": 361,
  "symbols_in_volume": [
   "itertools.permutations"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match.match": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match.match": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match.match": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.__init__": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_pred_dates": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_succ_dates": {
  "lineno": 184,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.one_hop": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.preds": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.semantic_feasibility": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.succs": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_one": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_two": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_pred": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_succ": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.__init__": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.one_hop": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.semantic_feasibility": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.two_hop": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_mcis": {
  "lineno": 232,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.ISMAGS",
   "networkx.algorithms.isomorphism.categorical_node_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_symmetry_mcis": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.algorithms.isomorphism.ISMAGS",
   "networkx.algorithms.isomorphism.categorical_node_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_directed_self_isomorphism": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.ISMAGS",
   "networkx.algorithms.isomorphism.categorical_node_match",
   "pytest.mark.skip"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_edgecase_self_isomorphism": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.algorithms.isomorphism.ISMAGS",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_self_isomorphism": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.ISMAGS",
   "networkx.algorithms.isomorphism.categorical_node_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.algorithms.isomorphism.ISMAGS"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism2": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.algorithms.isomorphism.ISMAGS"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_edges": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.algorithms.isomorphism.ISMAGS"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_nodes": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.algorithms.isomorphism.ISMAGS"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample.test_graph": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.ISMAGS"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.could_be_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.fast_could_be_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.faster_could_be_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setup_class": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.generators.atlas.graph_atlas_g"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas": {
  "lineno": 154,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.relabel_nodes",
   "random.shuffle"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.Graph",
   "struct.unpack"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.GraphMatcher",
   "os.path.join",
   "os.path.split"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.GraphMatcher",
   "os.path.join",
   "os.path.split"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.GraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.GraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph_mono": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.GraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1": {
  "lineno": 285,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.isomorphism.DiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2": {
  "lineno": 326,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.cycle_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_edge_match": {
  "lineno": 393,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.categorical_edge_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_iter1": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.isomorphism.DiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.relabel_nodes",
   "random.shuffle"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple": {
  "lineno": 341,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.subgraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_noncomparable_nodes": {
  "lineno": 372,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.relabel_nodes",
   "random.shuffle"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop_mono": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.isomorphism.DiGraphMatcher",
   "networkx.algorithms.isomorphism.GraphMatcher",
   "networkx.relabel_nodes",
   "networkx.selfloop_edges",
   "random.shuffle"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.setup": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.test_generic_multiedge_match": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.generic_multiedge_match",
   "operator.eq"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.test_categorical_node_match": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.categorical_node_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g1_topology": {
  "lineno": 154,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g2_path_3edges": {
  "lineno": 159,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_same_dates_returns_true": {
  "lineno": 173,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings": {
  "lineno": 182,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_one_embedding": {
  "lineno": 192,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_two_embeddings": {
  "lineno": 202,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_zero_same_dates_returns_true": {
  "lineno": 164,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g1_topology": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g2_path_3edges": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_timeRespecting_returnsTrue": {
  "lineno": 99,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_notTimeRespecting_returnsFalse": {
  "lineno": 108,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings": {
  "lineno": 117,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_four_embedding": {
  "lineno": 127,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_ten_embeddings": {
  "lineno": 137,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_datetime_timeRespecting_returnsTrue": {
  "lineno": 90,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_timeRespecting_returnsTrue": {
  "lineno": 81,
  "symbols_in_volume": [
   "datetime.timedelta",
   "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.provide_g1_edgelist": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_datetime": {
  "lineno": 19,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time": {
  "lineno": 13,
  "symbols_in_volume": [
   "datetime.date"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_sequence_time": {
  "lineno": 25,
  "symbols_in_volume": [
   "datetime.date",
   "datetime.timedelta"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_0": {
  "lineno": 33,
  "symbols_in_volume": [
   "datetime.date"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_1": {
  "lineno": 44,
  "symbols_in_volume": [
   "datetime.date"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_2": {
  "lineno": 55,
  "symbols_in_volume": [
   "datetime.date"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.classes.function.is_directed"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.positive_single_tree": {
  "lineno": 172,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism",
   "networkx.is_tree",
   "random.shuffle"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random_swap": {
  "lineno": 161,
  "symbols_in_volume": [
   "random.randint"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_hardcoded": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_negative": {
  "lineno": 277,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism",
   "networkx.nonisomorphic_trees",
   "time.time"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_positive": {
  "lineno": 212,
  "symbols_in_volume": [
   "networkx.nonisomorphic_trees",
   "time.time"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial_2": {
  "lineno": 249,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setup_method": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph": {
  "lineno": 194,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setup_method": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.isomorphism.MultiDiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.categorical_edge_match",
   "networkx.algorithms.isomorphism.categorical_multiedge_match",
   "networkx.algorithms.isomorphism.generic_edge_match",
   "networkx.algorithms.isomorphism.generic_multiedge_match",
   "networkx.algorithms.isomorphism.matchhelpers.close",
   "networkx.algorithms.isomorphism.numerical_edge_match",
   "networkx.algorithms.isomorphism.numerical_multiedge_match",
   "operator.eq"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setup_method": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.isomorphism.MultiGraphMatcher"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.categorical_node_match",
   "networkx.algorithms.isomorphism.numerical_edge_match"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setup_method": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.algorithms.isomorphism.numerical_edge_match",
   "networkx.algorithms.isomorphism.numerical_multiedge_match",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.isomorphism.numerical_edge_match",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.assign_levels": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.bfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.generate_isomorphism": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.group_by_levels": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.root_trees": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bfs_edges",
   "networkx.number_of_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism": {
  "lineno": 209,
  "symbols_in_volume": [
   "networkx.center",
   "networkx.is_tree",
   "networkx.number_of_nodes",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.link_analysis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg.authority_matrix": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.PowerIterationFailedConvergence"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_numpy": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.authority_matrix",
   "networkx.hub_matrix",
   "numpy.array",
   "numpy.linalg.eig"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_scipy": {
  "lineno": 204,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.to_scipy_sparse_matrix",
   "numpy.absolute",
   "numpy.asarray",
   "numpy.ones"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hub_matrix": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.google_matrix": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.to_numpy_matrix",
   "numpy.array",
   "numpy.repeat",
   "numpy.where"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.stochastic_graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_numpy": {
  "lineno": 254,
  "symbols_in_volume": [
   "numpy.argmax",
   "numpy.array",
   "numpy.linalg.eig"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_scipy": {
  "lineno": 338,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.to_scipy_sparse_matrix",
   "numpy.absolute",
   "numpy.array",
   "numpy.repeat",
   "numpy.where"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_hits": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.authority_matrix",
   "networkx.hits",
   "networkx.hits_numpy",
   "networkx.hub_matrix",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty_scipy": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.hits_scipy",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.hits",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_not_convergent": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.hits",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_nstart": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.hits"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.hits_numpy",
   "networkx.testing.almost_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_scipy": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.hits_scipy",
   "networkx.testing.almost_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setup_class": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_matrix": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.google_matrix",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_numpy_pagerank": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.pagerank_numpy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_pagerank": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.pagerank",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_empty": {
  "lineno": 163,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.google_matrix",
   "networkx.pagerank",
   "networkx.pagerank_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.google_matrix",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_incomplete_personalization": {
  "lineno": 121,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.pagerank",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.pagerank_numpy",
   "networkx.testing.almost_equal",
   "random.random"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_one_nonzero_personalization_value": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.pagerank",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.pagerank",
   "networkx.testing.almost_equal",
   "random.random"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank_max_iter": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.pagerank",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.pagerank",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_zero_personalization_vector": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.pagerank",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.pagerank_scipy",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_empty_scipy": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.pagerank_scipy"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.pagerank_scipy",
   "networkx.testing.almost_equal",
   "random.random"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank_max_iter": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.PowerIterationFailedConvergence",
   "networkx.pagerank_scipy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.link_prediction._apply_prediction": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.non_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction._community": {
  "lineno": 573,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.adamic_adar_index": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.adamic_adar_index.predict": {
  "lineno": 202,
  "symbols_in_volume": [
   "math.log",
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.cn_soundarajan_hopcroft": {
  "lineno": 341,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.cn_soundarajan_hopcroft.predict": {
  "lineno": 403,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.common_neighbor_centrality": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.shortest_path",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.common_neighbor_centrality.predict": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.jaccard_coefficient": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.jaccard_coefficient.predict": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.preferential_attachment": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.preferential_attachment.predict": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft": {
  "lineno": 415,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft.predict": {
  "lineno": 479,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.resource_allocation_index": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.resource_allocation_index.predict": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.within_inter_cluster": {
  "lineno": 490,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.link_prediction.within_inter_cluster.predict": {
  "lineno": 560,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor": {
  "lineno": 158,
  "symbols_in_volume": [
   "collections.abc.Mapping",
   "collections.abc.Set",
   "collections.defaultdict",
   "itertools.chain.from_iterable",
   "itertools.count",
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept",
   "networkx.NodeNotFound",
   "networkx.bfs_edges",
   "networkx.dag.ancestors",
   "networkx.depth_first_search.dfs_preorder_nodes",
   "networkx.dfs_tree",
   "networkx.is_directed_acyclic_graph",
   "networkx.utils.generate_unique_node",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor._compute_dag_lca_from_tree_values": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor._compute_dag_lca_from_tree_values.get_next_in_merged_lists": {
  "lineno": 290,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.lowest_common_ancestor": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.tree_all_pairs_lowest_common_ancestor": {
  "lineno": 21,
  "symbols_in_volume": [
   "collections.abc.Mapping",
   "collections.abc.Set",
   "collections.defaultdict",
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept",
   "networkx.NodeNotFound",
   "networkx.dfs_postorder_nodes",
   "networkx.utils.UnionFind",
   "networkx.utils.arbitrary_element",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.matching.is_matching": {
  "lineno": 68,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.matching.is_maximal_matching": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.is_perfect_matching": {
  "lineno": 143,
  "symbols_in_volume": [
   "collections.Counter"
  ],
  "type": "function"
 },
 "networkx.algorithms.matching.matching_dict_to_set": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching": {
  "lineno": 179,
  "symbols_in_volume": [
   "itertools.repeat"
  ],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom.leaves": {
  "lineno": 267,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.NoNode": {
  "lineno": 244,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.addBlossom": {
  "lineno": 425,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.assignLabel": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentBlossom": {
  "lineno": 616,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentMatching": {
  "lineno": 661,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.expandBlossom": {
  "lineno": 520,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.scanBlossom": {
  "lineno": 388,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.slack": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.verifyOptimum": {
  "lineno": 694,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.matching.maximal_matching": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.minors": {
  "lineno": null,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "module"
 },
 "networkx.algorithms.minors._quotient_graph": {
  "lineno": 245,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "itertools.product",
   "networkx.empty_graph",
   "networkx.exception.NetworkXException",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.edge_data": {
  "lineno": 290,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.edge_relation": {
  "lineno": 283,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.node_data": {
  "lineno": 265,
  "symbols_in_volume": [
   "networkx.density"
  ],
  "type": "function"
 },
 "networkx.algorithms.minors.contracted_edge": {
  "lineno": 449,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.minors.contracted_nodes": {
  "lineno": 331,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.algorithms.minors.equivalence_classes": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.minors.quotient_graph": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.mis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.mis.maximal_independent_set": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.moral": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.moral.moral_graph": {
  "lineno": 9,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.node_classification.hmn": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.utils._get_label_info",
   "networkx.algorithms.node_classification.utils._init_label_matrix",
   "networkx.algorithms.node_classification.utils._predict",
   "networkx.algorithms.node_classification.utils._propagate",
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function._build_base_matrix": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function._build_propagation_matrix": {
  "lineno": 77,
  "symbols_in_volume": [
   "scipy.sparse.diags"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.utils._get_label_info",
   "networkx.algorithms.node_classification.utils._init_label_matrix",
   "networkx.algorithms.node_classification.utils._predict",
   "networkx.algorithms.node_classification.utils._propagate",
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency._build_base_matrix": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency._build_propagation_matrix": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.sqrt",
   "scipy.sparse.diags"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_digraph": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.node_classification.harmonic_function",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_labeled_nodes_are_not_changed": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.harmonic_function",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_edges": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.harmonic_function",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_labels": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.harmonic_function",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_nodes": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.harmonic_function",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_nodes_all_labeled": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.harmonic_function",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_one_labeled_node": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.harmonic_function",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_path_graph": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.harmonic_function",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_digraph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.node_classification.harmonic_function",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_edges": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_labels": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_nodes": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_nodes_all_labeled": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "networkx.karate_club_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_one_labeled_node": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_path_graph": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.algorithms.node_classification.local_and_global_consistency",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.node_classification.utils._get_label_info": {
  "lineno": 22,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._init_label_matrix": {
  "lineno": 58,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._predict": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.argmax"
  ],
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._propagate": {
  "lineno": 1,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.non_randomness": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.non_randomness.non_randomness": {
  "lineno": 11,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.NetworkXError",
   "networkx.NetworkXException",
   "networkx.community.label_propagation_communities",
   "networkx.is_connected",
   "networkx.selfloop_edges",
   "networkx.to_numpy_array",
   "networkx.utils.not_implemented_for",
   "numpy.linalg.eigvals",
   "numpy.real",
   "numpy.sum"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.all": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.all.compose_all": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.compose"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.all.disjoint_union_all": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.disjoint_union"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.all.intersection_all": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.intersection"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.all.union_all": {
  "lineno": 9,
  "symbols_in_volume": [
   "itertools.zip_longest",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.binary.compose": {
  "lineno": 289,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.difference": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.create_empty_copy"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.disjoint_union": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join.add_prefix": {
  "lineno": 380,
  "symbols_in_volume": [
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join.add_prefix.label": {
  "lineno": 384,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.intersection": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.create_empty_copy"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.symmetric_difference": {
  "lineno": 237,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.create_empty_copy"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix.label": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.product._dict_product": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product._directed_edges_cross_edges": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes_and_nodes": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product._init_product_graph": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.product._node_product": {
  "lineno": 24,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.product._nodes_cross_edges": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product._undirected_edges_cross_edges": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product.cartesian_product": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product.lexicographic_product": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product.power": {
  "lineno": 337,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.product.rooted_product": {
  "lineno": 426,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.product.strong_product": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.product.tensor_product": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_all": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_compose_all": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.compose_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_disjoint_union": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.disjoint_union_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_intersection_all": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.intersection_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_union": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.union_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_input_output": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.compose_all",
   "networkx.disjoint_union_all",
   "networkx.intersection_all"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.intersection_all"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.intersection",
   "networkx.intersection_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.intersection_all"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_compose": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.compose_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_disjoint_union": {
  "lineno": 207,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.disjoint_union_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_intersection": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.intersection_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_union": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.union_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_and_compose_all": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.compose_all",
   "networkx.disjoint_union_all",
   "networkx.number_of_edges",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.union",
   "networkx.union_all",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_attributes": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.union_all"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_multigraph": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.union_all"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_binary.test_compose_multigraph": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.compose"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.difference",
   "networkx.symmetric_difference"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference2": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.difference"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_attributes": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.difference",
   "networkx.intersection",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_multigraph_attributes": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.difference"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_raise": {
  "lineno": 154,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.difference",
   "networkx.path_graph",
   "networkx.symmetric_difference",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_disjoint_union_multigraph": {
  "lineno": 279,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.disjoint_union"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_full_join_graph": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.full_join"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_full_join_multigraph": {
  "lineno": 357,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.full_join"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.intersection"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_attributes": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.intersection",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.intersection"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_union": {
  "lineno": 395,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.compose",
   "networkx.difference",
   "networkx.disjoint_union",
   "networkx.intersection",
   "networkx.symmetric_difference",
   "networkx.union",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_multigraph": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.symmetric_difference"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_and_compose": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.compose",
   "networkx.disjoint_union",
   "networkx.number_of_edges",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.union",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_attributes": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_multigraph": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_classic": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.cartesian_product",
   "networkx.cubical_graph",
   "networkx.grid_2d_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_multigraph": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cartesian_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_null": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.cartesian_product",
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_raises": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.cartesian_product",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_random": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.cartesian_product",
   "networkx.erdos_renyi_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_size": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.cartesian_product",
   "networkx.complete_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power": {
  "lineno": 369,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.power",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power_negative": {
  "lineno": 410,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.power",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power_raises": {
  "lineno": 364,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.power",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_combinations": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.lexicographic_product",
   "networkx.number_of_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_null": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.lexicographic_product",
   "networkx.null_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_raises": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.lexicographic_product",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_random": {
  "lineno": 271,
  "symbols_in_volume": [
   "networkx.erdos_renyi_graph",
   "networkx.lexicographic_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_size": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.lexicographic_product",
   "networkx.number_of_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_rooted_product": {
  "lineno": 420,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.cycle_graph",
   "networkx.rooted_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_rooted_product_raises": {
  "lineno": 415,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.path_graph",
   "networkx.rooted_product",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_combinations": {
  "lineno": 332,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.strong_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_null": {
  "lineno": 289,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph",
   "networkx.path_graph",
   "networkx.strong_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_raises": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.strong_product",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_random": {
  "lineno": 347,
  "symbols_in_volume": [
   "networkx.erdos_renyi_graph",
   "networkx.strong_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_size": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.strong_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_classic_result": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.cubical_graph",
   "networkx.cycle_graph",
   "networkx.desargues_graph",
   "networkx.is_isomorphic",
   "networkx.petersen_graph",
   "networkx.tensor_product",
   "networkx.tetrahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_combinations": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.tensor_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_null": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph",
   "networkx.path_graph",
   "networkx.tensor_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_raises": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.tensor_product",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_random": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.erdos_renyi_graph",
   "networkx.tensor_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_size": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.tensor_product"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.bull_graph",
   "networkx.complement",
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement_2": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complement"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_reverse1": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.reverse",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.operators.unary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.operators.unary.complement": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.operators.unary.reverse": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.planar_drawing.combinatorial_embedding_to_pos": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering": {
  "lineno": 140,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering.is_on_outer_face": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering.is_outer_face_nbr": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.make_bi_connected": {
  "lineno": 405,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.set_position": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.triangulate_embedding": {
  "lineno": 336,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding",
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.triangulate_face": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.planarity.ConflictPair": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.planarity.ConflictPair.__init__": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.ConflictPair.lowest": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.ConflictPair.swap": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.planarity.Interval.__init__": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.conflicting": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.copy": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.empty": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.planarity.LRPlanarity.__init__": {
  "lineno": 228,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.DiGraph",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.add_constraints": {
  "lineno": 557,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_embedding": {
  "lineno": 640,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_embedding_recursive": {
  "lineno": 669,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_orientation": {
  "lineno": 394,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_orientation_recursive": {
  "lineno": 448,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_testing": {
  "lineno": 481,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_testing_recursive": {
  "lineno": 530,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.lr_planarity": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.lr_planarity_recursive": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.remove_back_edges": {
  "lineno": 601,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.sign": {
  "lineno": 687,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.sign_recursive": {
  "lineno": 707,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding": {
  "lineno": 715,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "class"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_ccw": {
  "lineno": 917,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_cw": {
  "lineno": 958,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_first": {
  "lineno": 1030,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.check_structure": {
  "lineno": 858,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.connect_components": {
  "lineno": 1006,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.get_data": {
  "lineno": 797,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.is_directed": {
  "lineno": 1108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.neighbors_cw_order": {
  "lineno": 836,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.next_face_half_edge": {
  "lineno": 1050,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.set_data": {
  "lineno": 816,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.traverse_face": {
  "lineno": 1065,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.check_planarity": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.check_planarity_recursive": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.planarity.get_counterexample": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.get_counterexample_recursive": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.planarity.top_of_stack": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.reciprocity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.reciprocity._reciprocity_iter": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.reciprocity.overall_reciprocity": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.reciprocity.reciprocity": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.regular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.regular.is_k_regular": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.regular.is_regular": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.matching.is_perfect_matching",
   "networkx.algorithms.matching.max_weight_matching",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.__init__": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.replace_node": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.restore_node": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.__init__": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.replace_node": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.restore_node": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.richclub": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.richclub._compute_rc": {
  "lineno": 87,
  "symbols_in_volume": [
   "itertools.accumulate",
   "networkx.degree_histogram"
  ],
  "type": "function"
 },
 "networkx.algorithms.richclub.rich_club_coefficient": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.double_edge_swap",
   "networkx.number_of_selfloops",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path": {
  "lineno": 12,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count",
   "networkx.NetworkXNoPath",
   "networkx.NodeNotFound",
   "networkx.algorithms.shortest_paths.weighted._weight_function"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path.heuristic": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path_length": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.algorithms.shortest_paths.weighted._weight_function"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "numpy.fill_diagonal",
   "numpy.inf",
   "numpy.minimum",
   "numpy.newaxis"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance": {
  "lineno": 59,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.reconstruct_path": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors": {
  "lineno": 484,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.all_shortest_paths": {
  "lineno": 412,
  "symbols_in_volume": [
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.dijkstra_predecessor_and_distance",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.average_shortest_path_length": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXPointlessConcept",
   "networkx.floyd_warshall",
   "networkx.floyd_warshall_numpy",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.average_shortest_path_length.path_length": {
  "lineno": 392,
  "symbols_in_volume": [
   "networkx.single_source_bellman_ford_path_length",
   "networkx.single_source_dijkstra_path_length",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.has_path": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.all_pairs_bellman_ford_path",
   "networkx.all_pairs_dijkstra_path",
   "networkx.all_pairs_shortest_path",
   "networkx.bellman_ford_path",
   "networkx.bidirectional_shortest_path",
   "networkx.dijkstra_path",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_dijkstra_path",
   "networkx.single_source_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path_length": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.all_pairs_bellman_ford_path_length",
   "networkx.all_pairs_dijkstra_path_length",
   "networkx.all_pairs_shortest_path_length",
   "networkx.bellman_ford_path_length",
   "networkx.bidirectional_shortest_path",
   "networkx.dijkstra_path_length",
   "networkx.single_source_bellman_ford_path_length",
   "networkx.single_source_dijkstra_path_length",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setup_class": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.astar_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed3": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.astar_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed3.h": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed4": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.astar_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.astar_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.astar_path",
   "networkx.cycle_graph",
   "networkx.dijkstra_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_multiple_optimal_paths": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.astar_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_multiple_optimal_paths.h": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_unorderable_nodes": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.astar_path",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.floyd_warshall",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_reconstruct_path": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.floyd_warshall_predecessor_and_distance",
   "networkx.reconstruct_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter": {
  "lineno": 152,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_distance": {
  "lineno": 170,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.floyd_warshall_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_weight": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.floyd_warshall"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_cycle_numpy": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.floyd_warshall_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_directed_cycle_numpy": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.floyd_warshall_numpy",
   "networkx.floyd_warshall_predecessor_and_distance",
   "networkx.utils.dict_to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weight_parameter_numpy": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy_three_edges": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy_two_edges": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.floyd_warshall_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_zero_weight": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.floyd_warshall_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_bad_method": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_cycle_graph": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.cycle_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_disconnected": {
  "lineno": 329,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.average_shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_null_graph": {
  "lineno": 348,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.average_shortest_path_length",
   "networkx.null_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_path_graph": {
  "lineno": 292,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_specified_methods": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.add_path",
   "networkx.average_shortest_path_length",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_trivial_graph": {
  "lineno": 337,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_weighted": {
  "lineno": 296,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.add_path",
   "networkx.average_shortest_path_length",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.setup_class": {
  "lineno": 359,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.test_specified_methods_numpy": {
  "lineno": 368,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.add_path",
   "networkx.average_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setup_class": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.convert_node_labels_to_integers",
   "networkx.cycle_graph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.all_pairs_bellman_ford_path",
   "networkx.all_pairs_dijkstra_path",
   "networkx.all_pairs_shortest_path",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length": {
  "lineno": 197,
  "symbols_in_volume": [
   "networkx.all_pairs_bellman_ford_path_length",
   "networkx.all_pairs_dijkstra_path_length",
   "networkx.all_pairs_shortest_path_length",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.all_shortest_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_raise": {
  "lineno": 254,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.all_shortest_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_zero_weight_edge": {
  "lineno": 265,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.all_shortest_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_bad_method": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.all_shortest_paths",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.has_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.shortest_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length_target": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_target": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.shortest_path",
   "networkx.single_source_dijkstra_path",
   "networkx.single_source_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.shortest_path_length",
   "networkx.single_source_bellman_ford_path_length",
   "networkx.single_source_dijkstra_path_length",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setup_class": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.convert_node_labels_to_integers",
   "networkx.cycle_graph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.all_pairs_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.all_pairs_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.bidirectional_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cutoff": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cycle": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_path": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_target": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.predecessor"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.single_source_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.single_target_shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path_length": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.single_target_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik": {
  "lineno": 478,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_4_cycle": {
  "lineno": 781,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_bellman_ford": {
  "lineno": 488,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.bellman_ford_path",
   "networkx.bellman_ford_path_length",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.path_graph",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_goldberg_radzik": {
  "lineno": 502,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.goldberg_radzik",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_multigraph": {
  "lineno": 677,
  "symbols_in_volume": [
   "networkx.bellman_ford_path",
   "networkx.bellman_ford_path_length",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight": {
  "lineno": 805,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bellman_ford_path",
   "networkx.bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle": {
  "lineno": 536,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnbounded",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.cycle_graph",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle_consistency": {
  "lineno": 519,
  "symbols_in_volume": [
   "networkx.binomial_graph",
   "networkx.negative_edge_cycle",
   "random.seed",
   "random.uniform"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle_heuristic": {
  "lineno": 507,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.negative_edge_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_not_connected": {
  "lineno": 605,
  "symbols_in_volume": [
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.complete_graph",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_others": {
  "lineno": 710,
  "symbols_in_volume": [
   "networkx.bellman_ford_path",
   "networkx.bellman_ford_path_length",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_path_graph": {
  "lineno": 730,
  "symbols_in_volume": [
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.goldberg_radzik",
   "networkx.path_graph",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_single_node_graph": {
  "lineno": 479,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bellman_ford_predecessor_and_distance",
   "networkx.goldberg_radzik",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_bellman_ford_path",
   "networkx.single_source_bellman_ford_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_zero_cycle_smoke": {
  "lineno": 816,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bellman_ford_path",
   "networkx.bidirectional_dijkstra",
   "networkx.dijkstra_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength": {
  "lineno": 400,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength.test_weight_function": {
  "lineno": 406,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.dijkstra_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength.test_weight_function.weight": {
  "lineno": 421,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm": {
  "lineno": 826,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_graphs": {
  "lineno": 882,
  "symbols_in_volume": [
   "networkx.johnson"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_cycle": {
  "lineno": 833,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXUnbounded",
   "networkx.johnson",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_weights": {
  "lineno": 859,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.johnson"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_single_node_graph": {
  "lineno": 827,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.johnson",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_unweighted_graph": {
  "lineno": 877,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.johnson",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra": {
  "lineno": 432,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_absent_source": {
  "lineno": 450,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.multi_source_dijkstra",
   "networkx.multi_source_dijkstra_path",
   "networkx.multi_source_dijkstra_path_length",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_no_sources": {
  "lineno": 438,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.multi_source_dijkstra",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_length_no_sources": {
  "lineno": 446,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.multi_source_dijkstra_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_no_sources": {
  "lineno": 442,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.multi_source_dijkstra_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_simple_paths": {
  "lineno": 470,
  "symbols_in_volume": [
   "networkx.multi_source_dijkstra_path",
   "networkx.multi_source_dijkstra_path_length",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_two_sources": {
  "lineno": 459,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.multi_source_dijkstra"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_absent_source": {
  "lineno": 252,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.dijkstra_path",
   "networkx.dijkstra_path_length",
   "networkx.dijkstra_predecessor_and_distance",
   "networkx.path_graph",
   "networkx.single_source_dijkstra",
   "networkx.single_source_dijkstra_path",
   "networkx.single_source_dijkstra_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra": {
  "lineno": 388,
  "symbols_in_volume": [
   "networkx.all_pairs_dijkstra",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path": {
  "lineno": 370,
  "symbols_in_volume": [
   "networkx.all_pairs_dijkstra_path",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path_length": {
  "lineno": 379,
  "symbols_in_volume": [
   "networkx.all_pairs_dijkstra_path_length",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.bidirectional_dijkstra",
   "networkx.dijkstra_path",
   "networkx.path_graph",
   "networkx.single_source_dijkstra_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph": {
  "lineno": 312,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.bidirectional_dijkstra"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_no_path": {
  "lineno": 245,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.bidirectional_dijkstra",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.dijkstra_path",
   "networkx.dijkstra_path_length",
   "networkx.single_source_dijkstra",
   "networkx.single_source_dijkstra_path",
   "networkx.single_source_dijkstra_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph": {
  "lineno": 319,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.dijkstra_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor1": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.dijkstra_predecessor_and_distance",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor2": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.dijkstra_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor3": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dijkstra_predecessor_and_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle": {
  "lineno": 327,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bidirectional_dijkstra",
   "networkx.cycle_graph",
   "networkx.dijkstra_predecessor_and_distance",
   "networkx.negative_edge_cycle",
   "networkx.single_source_dijkstra",
   "networkx.single_source_dijkstra_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_single_source_dijkstra_path_length": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.single_source_dijkstra_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_function": {
  "lineno": 341,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.single_source_dijkstra"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_function.weight": {
  "lineno": 356,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.bidirectional_dijkstra",
   "networkx.single_source_bellman_ford",
   "networkx.single_source_dijkstra",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.astar": {
  "lineno": 211,
  "symbols_in_volume": [
   "networkx.astar_path",
   "networkx.astar_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.getpath": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.goldberg_radzik": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.goldberg_radzik"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.heuristic": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.vlp": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.weight": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase.setup": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.convert_node_labels_to_integers",
   "networkx.cycle_graph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path.weight_f": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted._single_shortest_path": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted._single_shortest_path_length": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path": {
  "lineno": 429,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.predecessor": {
  "lineno": 462,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path": {
  "lineno": 295,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path.join": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path": {
  "lineno": 378,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path.join": {
  "lineno": 417,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path_length": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.weighted._bellman_ford": {
  "lineno": 1207,
  "symbols_in_volume": [
   "collections.deque",
   "itertools.count",
   "itertools.count.get",
   "networkx.NetworkXUnbounded",
   "networkx.NodeNotFound",
   "networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._dijkstra": {
  "lineno": 733,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._dijkstra_multisource": {
  "lineno": 747,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count",
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._weight_function": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path": {
  "lineno": 1666,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path_length": {
  "lineno": 1622,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra": {
  "lineno": 922,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path": {
  "lineno": 1046,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path_length": {
  "lineno": 989,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_path": {
  "lineno": 1341,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_path_length": {
  "lineno": 1389,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_predecessor_and_distance": {
  "lineno": 1097,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded",
   "networkx.NodeNotFound",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bidirectional_dijkstra": {
  "lineno": 1944,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count",
   "networkx.NetworkXNoPath",
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_path": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_path_length": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_predecessor_and_distance": {
  "lineno": 850,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik": {
  "lineno": 1704,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded",
   "networkx.NodeNotFound",
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik.relax": {
  "lineno": 1855,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik.topo_sort": {
  "lineno": 1799,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson": {
  "lineno": 2086,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_weighted"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson.dist_path": {
  "lineno": 2168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson.new_weight": {
  "lineno": 2165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra": {
  "lineno": 618,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path": {
  "lineno": 469,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path_length": {
  "lineno": 541,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.negative_edge_cycle": {
  "lineno": 1883,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded",
   "networkx.utils.generate_unique_node"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford": {
  "lineno": 1544,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path": {
  "lineno": 1447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path_length": {
  "lineno": 1492,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.similarity._is_close": {
  "lineno": 1191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.debug_print": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.graph_edit_distance": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimal_edit_paths": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths": {
  "lineno": 516,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NodeNotFound",
   "numpy.array",
   "numpy.zeros",
   "time.perf_counter"
  ],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.CostMatrix": {
  "lineno": 667,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.CostMatrix.__init__": {
  "lineno": 668,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.MaxCost": {
  "lineno": 1150,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.MaxCost.__init__": {
  "lineno": 1151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.extract_C": {
  "lineno": 700,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.get_edit_ops": {
  "lineno": 808,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.get_edit_paths": {
  "lineno": 907,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.make_CostMatrix": {
  "lineno": 680,
  "symbols_in_volume": [
   "scipy.optimize.linear_sum_assignment"
  ],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.match_edges": {
  "lineno": 719,
  "symbols_in_volume": [
   "networkx.is_directed",
   "numpy.empty"
  ],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.prune": {
  "lineno": 1163,
  "symbols_in_volume": [
   "time.perf_counter"
  ],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_C": {
  "lineno": 706,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_Ce": {
  "lineno": 799,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_ind": {
  "lineno": 712,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_graph_edit_distance": {
  "lineno": 366,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity": {
  "lineno": 1226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity.avg_sim": {
  "lineno": 1326,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity.sim": {
  "lineno": 1329,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity_numpy": {
  "lineno": 1348,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "numpy.allclose",
   "numpy.copy",
   "numpy.eye",
   "numpy.fill_diagonal",
   "numpy.float64",
   "numpy.matmul"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.simple_paths.PathBuffer": {
  "lineno": 561,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__init__": {
  "lineno": 562,
  "symbols_in_volume": [
   "itertools.count"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__len__": {
  "lineno": 567,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.pop": {
  "lineno": 576,
  "symbols_in_volume": [
   "heapq.heappop"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.push": {
  "lineno": 570,
  "symbols_in_volume": [
   "heapq.heappush"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_edge_paths_multigraph": {
  "lineno": 388,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_graph": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_multigraph": {
  "lineno": 266,
  "symbols_in_volume": [
   "itertools.count"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra": {
  "lineno": 751,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count",
   "networkx.NetworkXNoPath",
   "networkx.algorithms.shortest_paths.weighted._weight_function"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter": {
  "lineno": 872,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter.iterate": {
  "lineno": 873,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter": {
  "lineno": 851,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter.iterate": {
  "lineno": 852,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter": {
  "lineno": 859,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter.iterate": {
  "lineno": 860,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ": {
  "lineno": 646,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter": {
  "lineno": 705,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter.iterate": {
  "lineno": 706,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter": {
  "lineno": 684,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter.iterate": {
  "lineno": 685,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter": {
  "lineno": 692,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter.iterate": {
  "lineno": 693,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_shortest_path": {
  "lineno": 583,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.all_simple_edge_paths": {
  "lineno": 294,
  "symbols_in_volume": [
   "networkx.NodeNotFound"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.all_simple_paths": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.utils.empty_generator"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.is_simple_path": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths": {
  "lineno": 414,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.NodeNotFound",
   "networkx.algorithms.shortest_paths.weighted._weight_function",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths.length_func": {
  "lineno": 514,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.smallworld": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.smallworld.lattice_reference": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.connectivity.local_edge_connectivity",
   "networkx.number_of_edges",
   "networkx.utils.cumulative_distribution",
   "networkx.utils.discrete_sequence",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state",
   "numpy.append",
   "numpy.arange",
   "numpy.ceil",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.algorithms.smallworld.omega": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.transitivity",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state",
   "numpy.mean"
  ],
  "type": "function"
 },
 "networkx.algorithms.smallworld.random_reference": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.connectivity.local_edge_connectivity",
   "networkx.number_of_edges",
   "networkx.utils.cumulative_distribution",
   "networkx.utils.discrete_sequence",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.smallworld.sigma": {
  "lineno": 238,
  "symbols_in_volume": [
   "networkx.average_shortest_path_length",
   "networkx.transitivity",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state",
   "numpy.mean"
  ],
  "type": "function"
 },
 "networkx.algorithms.smetric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.smetric.s_metric": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.sparsifiers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.sparsifiers._add_edge_to_spanner": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.sparsifiers._lightest_edge_dicts": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.sparsifiers._setup_residual_graph": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.sparsifiers.spanner": {
  "lineno": 9,
  "symbols_in_volume": [
   "math.pow",
   "networkx.empty_graph",
   "networkx.utils.not_implemented_for",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.structuralholes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.structuralholes.constraint": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.all_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.structuralholes.effective_size": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.all_neighbors",
   "networkx.ego_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.structuralholes.effective_size.redundancy": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.all_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.structuralholes.local_constraint": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.all_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.structuralholes.mutual_weight": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.structuralholes.normalized_mutual_weight": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.all_neighbors"
  ],
  "type": "function"
 },
 "networkx.algorithms.swap": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.swap.connected_double_edge_swap": {
  "lineno": 96,
  "symbols_in_volume": [
   "math.ceil",
   "networkx.NetworkXError",
   "networkx.has_path",
   "networkx.is_connected",
   "networkx.utils.cumulative_distribution",
   "networkx.utils.discrete_sequence",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.swap.double_edge_swap": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.NetworkXError",
   "networkx.utils.cumulative_distribution",
   "networkx.utils.discrete_sequence",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_asteroidal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_asteroidal.test_is_at_free": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.asteroidal.is_at_free",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.line_graph",
   "networkx.path_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_complete_graph": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.edge_boundary",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_complete_graph.ilen": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_directed": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.edge_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multidigraph": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.edge_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multigraph": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cycle_graph",
   "networkx.edge_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_null_graph": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.edge_boundary",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_path_graph": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.edge_boundary",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_complete_graph": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_directed": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multidigraph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multigraph": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cycle_graph",
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_null_graph": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.node_boundary",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_path_graph": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.node_boundary",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_petersen": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.petersen_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_petersen.cheeger": {
  "lineno": 50,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.node_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges.test_barbell_graph": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.bridges"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges.test_single_bridge": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.bridges"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.setup_class": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_no_weight": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.local_bridges"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_nospan": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.local_bridges"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_weight": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.local_bridges"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.assertContainsChain": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_barbell_graph": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.chain_decomposition"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_decomposition": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.chain_decomposition"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.chain_decomposition",
   "networkx.relabel_nodes",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph_root_node": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.chain_decomposition",
   "networkx.relabel_nodes",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.cycles": {
  "lineno": 8,
  "symbols_in_volume": [
   "itertools.cycle",
   "itertools.islice"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.cyclic_equals": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.chordal_graph_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.chordal_graph_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques_path": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.chordal_graph_cliques",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_complete_to_chordal_graph": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.bull_graph",
   "networkx.complete_to_chordal_graph",
   "networkx.cycle_graph",
   "networkx.fast_gnp_random_graph",
   "networkx.grid_graph",
   "networkx.is_chordal",
   "networkx.ladder_graph",
   "networkx.star_graph",
   "networkx.wheel_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_induced_nodes": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXTreewidthBoundExceeded",
   "networkx.find_induced_nodes",
   "networkx.generators.classic.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_is_chordal": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.is_chordal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_clique.TestCliques": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.setup_method": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.find_cliques",
   "networkx.generators.havel_hakimi_graph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.graph_clique_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number2": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.graph_clique_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number3": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.graph_clique_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node": {
  "lineno": 147,
  "symbols_in_volume": [
   "networkx.cliques_containing_node"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_directed": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.find_cliques",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.find_cliques",
   "networkx.find_cliques_recursive"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.find_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.make_clique_bipartite",
   "networkx.project",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_make_max_clique_graph": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.make_clique_bipartite",
   "networkx.make_max_clique_graph",
   "networkx.project",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.node_clique_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.graph_number_of_cliques",
   "networkx.number_of_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_selfloops": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.find_cliques",
   "networkx.find_cliques_recursive"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques.test_paper_figure_4": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.enumerate_all_cliques"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_clustering": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_cubical": {
  "lineno": 278,
  "symbols_in_volume": [
   "networkx.clustering",
   "networkx.cubical_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_k5": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.average_clustering",
   "networkx.clustering",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_path": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_clustering": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_k5": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_clustering",
   "networkx.clustering",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_path": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_triangle_and_edge": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_clustering": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_k5": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.average_clustering",
   "networkx.clustering",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_path": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_triangle_and_edge": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.clustering",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree": {
  "lineno": 418,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_cubical": {
  "lineno": 428,
  "symbols_in_volume": [
   "networkx.cubical_graph",
   "networkx.generalized_degree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_generalized_degree": {
  "lineno": 419,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generalized_degree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_k5": {
  "lineno": 432,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.generalized_degree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_path": {
  "lineno": 423,
  "symbols_in_volume": [
   "networkx.generalized_degree",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5": {
  "lineno": 374,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical": {
  "lineno": 354,
  "symbols_in_volume": [
   "networkx.cubical_graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5": {
  "lineno": 370,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering": {
  "lineno": 378,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path": {
  "lineno": 327,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.square_clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.cubical_graph",
   "networkx.transitivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5": {
  "lineno": 314,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.transitivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_path": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.transitivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.transitivity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.cubical_graph",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_empty": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_k5": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_path": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering": {
  "lineno": 172,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.clustering"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical": {
  "lineno": 204,
  "symbols_in_volume": [
   "networkx.clustering",
   "networkx.cubical_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.average_clustering",
   "networkx.clustering",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.clustering",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge": {
  "lineno": 238,
  "symbols_in_volume": [
   "networkx.clustering",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.test_average_clustering": {
  "lineno": 410,
  "symbols_in_volume": [
   "networkx.average_clustering",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_communicability": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.algorithms.communicability_alg.communicability",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability2": {
  "lineno": 29,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.Graph",
   "networkx.algorithms.communicability_alg.communicability",
   "networkx.algorithms.communicability_alg.communicability_exp",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_core.TestCore": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_core.TestCore.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.havel_hakimi_graph",
   "networkx.relabel_nodes",
   "networkx.tetrahedral_graph",
   "networkx.union"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_core_number": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.core_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_directed_find_cores": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.core_number"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.find_cores",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores2": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.find_cores",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_core": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.k_core"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_corona": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.k_corona"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_crust": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.k_crust"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_shell": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.k_shell"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_truss": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.k_truss"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_core": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.k_core"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_crust": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.k_crust"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_shell": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.k_shell"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_onion_layers": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.onion_layers",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_trivial": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.find_cores"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_empty_graph": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_single_edge": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_with_loop": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.bipartite.matching.eppstein_matching",
   "networkx.is_edge_cover",
   "networkx.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_complete_graph": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_edge_cover",
   "networkx.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_empty_graph": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_single_edge": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_with_loop": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.min_edge_cover"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_cuts.TestBoundaryExpansion": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestBoundaryExpansion.test_graph": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.boundary_expansion",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestConductance": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestConductance.test_graph": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.conductance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_directed": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_directed_symmetric": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_multigraph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_single_edge": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_symmetric": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestEdgeExpansion": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestEdgeExpansion.test_graph": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.edge_expansion"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestMixingExpansion": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestMixingExpansion.test_graph": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.mixing_expansion"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNodeExpansion": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestNodeExpansion.test_graph": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.node_expansion",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_directed": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.normalized_cut_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_graph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.normalized_cut_size",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_digraph": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.volume"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_graph": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.volume"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_multidigraph": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.volume"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_multigraph": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cycle_graph",
   "networkx.volume"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.edgedfs.FORWARD",
   "networkx.algorithms.edgedfs.REVERSE"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permutation": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.cycle_basis"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis2": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.cycle_basis",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis3": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.cycle_basis",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_recursive_simple_and_not": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.recursive_simple_cycles",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.simple_cycles",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_graph_with_reported_bug": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.recursive_simple_cycles",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.simple_cycles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.setup_class": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_dag": {
  "lineno": 276,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle",
   "networkx.exception.NetworkXNoCycle",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_ignore": {
  "lineno": 235,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_none": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_original": {
  "lineno": 214,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_reverse": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_cycle": {
  "lineno": 181,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_nocycle": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.find_cycle",
   "networkx.exception.NetworkXNoCycle",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_none": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_original": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore": {
  "lineno": 247,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2": {
  "lineno": 255,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_original": {
  "lineno": 262,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.find_cycle",
   "networkx.exception.NetworkXNoCycle",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multigraph": {
  "lineno": 220,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.find_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_no_cycle": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNoCycle",
   "networkx.algorithms.find_cycle",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_prev_explored": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNoCycle",
   "networkx.algorithms.find_cycle",
   "networkx.find_cycle",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.setup_class": {
  "lineno": 316,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_complete_graph": {
  "lineno": 343,
  "symbols_in_volume": [
   "networkx.algorithms.minimum_cycle_basis",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_dimensionality": {
  "lineno": 331,
  "symbols_in_volume": [
   "networkx.algorithms.minimum_cycle_basis",
   "networkx.erdos_renyi_graph",
   "networkx.number_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_tree_graph": {
  "lineno": 348,
  "symbols_in_volume": [
   "networkx.algorithms.minimum_cycle_basis",
   "networkx.balanced_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_unweighted_diamond": {
  "lineno": 323,
  "symbols_in_volume": [
   "networkx.algorithms.minimum_cycle_basis"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_weighted_diamond": {
  "lineno": 327,
  "symbols_in_volume": [
   "networkx.algorithms.minimum_cycle_basis"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.assert_basis_equal": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_d_separation.asia_graph": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.asia_graph_fixture": {
  "lineno": 77,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.collider_graph": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.collider_graph_fixture": {
  "lineno": 67,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.fork_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.fork_graph_fixture": {
  "lineno": 62,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.naive_bayes_graph": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.naive_bayes_graph_fixture": {
  "lineno": 72,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.path_graph": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.freeze",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.path_graph_fixture": {
  "lineno": 57,
  "symbols_in_volume": [
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_asia_graph_dsep": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.d_separated"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_collider_graph_dsep": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.d_separated"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_cyclic_graphs_raise_error": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.cycle_graph",
   "networkx.d_separated",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_fork_graph_dsep": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.d_separated"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_invalid_nodes_raise_error": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.d_separated",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_markov_condition": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.d_separated",
   "networkx.descendants",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_naive_bayes_dsep": {
  "lineno": 112,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.d_separated"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_path_graph_dsep": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.d_separated"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_undirected_graphs_are_not_supported": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.d_separated",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_dag.TestDAG": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDAG._check_antichains": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.setup_class": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_1": {
  "lineno": 204,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_2": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.NetworkXNotImplemented",
   "networkx.NetworkXUnfeasible",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.not_implemented": {
  "lineno": 224,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.not_implemted_2": {
  "lineno": 229,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.unfeasible": {
  "lineno": 219,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_4": {
  "lineno": 237,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.DiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_1": {
  "lineno": 245,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_2": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.all_topological_sorts"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_ancestors": {
  "lineno": 259,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.algorithms.dag.ancestors",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_antichains": {
  "lineno": 368,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.dag.antichains",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_antichains.f": {
  "lineno": 420,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_descendants": {
  "lineno": 268,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.algorithms.dag.descendants",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_is_directed_acyclic_graph": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.generators.complete_graph",
   "networkx.is_directed_acyclic_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort": {
  "lineno": 428,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.lexicographical_topological_sort"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2": {
  "lineno": 448,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.lexicographical_topological_sort"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node": {
  "lineno": 455,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node.__init__": {
  "lineno": 456,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node.__repr__": {
  "lineno": 460,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.sorting_key": {
  "lineno": 463,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_reflexive_transitive_closure": {
  "lineno": 303,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.transitive_closure"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.lexicographical_topological_sort",
   "networkx.topological_sort",
   "networkx.utils.consume",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.is_directed_acyclic_graph",
   "networkx.topological_sort",
   "networkx.utils.consume",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.topological_sort",
   "networkx.utils.consume",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3.validate": {
  "lineno": 151,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.has_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.topological_sort",
   "networkx.utils.consume",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.topological_sort"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.lexicographical_topological_sort",
   "networkx.topological_sort",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.runtime_error": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.runtime_error2": {
  "lineno": 192,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.unfeasible_error": {
  "lineno": 184,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure": {
  "lineno": 277,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.transitive_closure",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure_dag": {
  "lineno": 328,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.dag.transitive_closure_dag",
   "networkx.testing.utils.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_reduction": {
  "lineno": 351,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.algorithms.dag.transitive_reduction",
   "networkx.testing.utils.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_empty": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_undirected_not_implemented": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.dag_longest_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unorderable_nodes": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted1": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted2": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_weighted": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_undirected_not_implemented": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.dag_longest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_unweighted": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_weighted": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_longest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching": {
  "lineno": 543,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_arborescence": {
  "lineno": 597,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.balanced_tree",
   "networkx.dag_to_branching",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_branching": {
  "lineno": 606,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.balanced_tree",
   "networkx.dag_to_branching",
   "networkx.disjoint_union",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multidigraph": {
  "lineno": 631,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.dag_to_branching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multigraph": {
  "lineno": 627,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.dag_to_branching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multiple_roots": {
  "lineno": 557,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_to_branching",
   "networkx.is_arborescence",
   "networkx.is_branching",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_not_acyclic": {
  "lineno": 617,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.HasACycle",
   "networkx.dag_to_branching",
   "networkx.utils.pairwise",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_single_root": {
  "lineno": 546,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dag_to_branching",
   "networkx.is_arborescence",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_undirected": {
  "lineno": 623,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.dag_to_branching",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite": {
  "lineno": 514,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.davis_southern_women_graph",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle": {
  "lineno": 475,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2": {
  "lineno": 481,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3": {
  "lineno": 488,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4": {
  "lineno": 495,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected": {
  "lineno": 525,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2": {
  "lineno": 536,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_raise": {
  "lineno": 509,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.is_aperiodic",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree": {
  "lineno": 520,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.full_rary_tree",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop": {
  "lineno": 502,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.is_aperiodic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.barycenter_as_subgraph": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.barycenter"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_must_be_connected": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.barycenter",
   "networkx.empty_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_sp_kwarg": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.barycenter",
   "networkx.complete_graph",
   "networkx.shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_this_one_specific_tree": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_trees": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.random_tree",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.setup_method": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_center": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.center"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_diameter": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.diameter"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_periphery": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.periphery"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_radius": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.radius"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_center": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.center"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.diameter"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.eccentricity",
   "networkx.empty_graph",
   "networkx.path_graph",
   "networkx.shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_directed_weakly_connected": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.eccentricity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_infinite": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.eccentricity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_undirected_not_connected": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.eccentricity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.periphery"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.radius"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.diameter",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_class": {
  "lineno": 95,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_method": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.algorithms.distance_measures._laplacian_submatrix"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix_matrix_node_dim": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.distance_measures._laplacian_submatrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix_square": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.distance_measures._laplacian_submatrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_multigraph": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.resistance_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.resistance_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_div0": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.resistance_distance",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_neg_weight": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.resistance_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_no_weight": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.resistance_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeA_not_in_graph": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.resistance_distance",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeB_not_in_graph": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.resistance_distance",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_noinv": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.resistance_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_not_connected": {
  "lineno": 170,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.resistance_distance",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_same_node": {
  "lineno": 175,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.resistance_distance",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.global_parameters",
   "networkx.intersection_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.dodecahedral_graph",
   "networkx.icosahedral_graph",
   "networkx.intersection_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.cubical_graph",
   "networkx.cycle_graph",
   "networkx.dodecahedral_graph",
   "networkx.heawood_graph",
   "networkx.icosahedral_graph",
   "networkx.is_distance_regular",
   "networkx.pappus_graph",
   "networkx.path_graph",
   "networkx.petersen_graph",
   "networkx.tetrahedral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.cycle_graph",
   "networkx.is_distance_regular"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_cycle_graph": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_strongly_regular"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_path_graph": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.is_strongly_regular",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_petersen_graph": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.is_strongly_regular",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_boost_example": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_cycle": {
  "lineno": 103,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_discard_issue": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_domrel_png": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_exceptions": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.dominance_frontiers",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible1": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible2": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loop": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loops_larger": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_missing_immediate_doms": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_path": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_singleton": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_unreachable": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.dominance_frontiers",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_boost_example": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_cycle": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_domrel_png": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_exceptions": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.immediate_dominators",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible1": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible2": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_path": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_singleton": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_unreachable": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.immediate_dominators",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominating.test_complete": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.dominating_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_dominating_set": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.dominating_set",
   "networkx.gnp_random_graph",
   "networkx.is_dominating_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_is_dominating_set": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.is_dominating_set",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_raise_dominating_set": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.dominating_set",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_wikipedia_is_dominating_set": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_dominating_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.setup_method": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.cycle_graph",
   "networkx.lollipop_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency_disconnected_nodes": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.global_efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency_complete_graph": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.global_efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_complete_graph": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.local_efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_disconnected_graph": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.local_efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_using_ego_graph": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.local_efficiency"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_cycle": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.eulerian_circuit"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_digraph": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.eulerian_circuit"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_cycle",
   "networkx.eulerian_circuit"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph_with_keys": {
  "lineno": 90,
  "symbols_in_volume": [
   "collections.Counter",
   "networkx.MultiGraph",
   "networkx.add_cycle",
   "networkx.eulerian_circuit"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_not_eulerian": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.eulerian_circuit",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianPath": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.eulerian_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_disconnected": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.eulerize",
   "networkx.from_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_null_graph": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXPointlessConcept",
   "networkx.eulerize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_null_multigraph": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXPointlessConcept",
   "networkx.eulerize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_complete_graph": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.eulerize",
   "networkx.is_eulerian"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_empty_graph": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.eulerize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.eulerize",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian_multigraph": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.cycle_graph",
   "networkx.eulerize",
   "networkx.is_eulerian"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestFindPathStart": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestFindPathStart.testfind_path_start": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.euler._find_path_start",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_cyclic": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.has_eulerian_path",
   "networkx.hypercube_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_non_cyclic": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.has_eulerian_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.hypercube_graph",
   "networkx.is_eulerian",
   "networkx.path_graph",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian2": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.is_eulerian"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsSemiEulerian": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestIsSemiEulerian.test_is_semieulerian": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.hypercube_graph",
   "networkx.is_semieulerian",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graph_hashing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_directed": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.weisfeiler_lehman_graph_hash"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_empty_graph_hash": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.weisfeiler_lehman_graph_hash"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_relabel": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.relabel_nodes",
   "networkx.weisfeiler_lehman_graph_hash"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.setup_class": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.generators.atlas.graph_atlas_g"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.test_atlas": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_directed_degree_sequence": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.erdos_renyi_graph",
   "networkx.is_digraphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_multi_sequence": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.is_multigraphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_negative_input": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_non_integer_input": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.is_graphical",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_numpy_degree_sequence": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.is_graphical",
   "pytest.importorskip",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_pseudo_sequence": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.is_pseudographical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_directed_sequences": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.is_digraphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_false": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_true": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_string_input": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.is_graphical",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.erdos_renyi_graph",
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.barabasi_albert_graph",
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_1": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.flow_hierarchy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_cycle": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.flow_hierarchy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_exception": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.cycle_graph",
   "networkx.flow_hierarchy",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_tree": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.flow_hierarchy",
   "networkx.full_rary_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_weight": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.flow_hierarchy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_hybrid.test_2d_grid_graph": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.grid_2d_graph",
   "networkx.is_kl_connected",
   "networkx.kl_connected_subgraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid.test_small_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_kl_connected",
   "networkx.kl_connected_subgraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_isolate.test_is_isolate": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_isolate"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate.test_isolates": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.isolates"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate.test_number_of_isolates": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.number_of_isolates"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.setup_class": {
  "lineno": 117,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.adamic_adar_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_K5": {
  "lineno": 122,
  "symbols_in_volume": [
   "math.log",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_P3": {
  "lineno": 126,
  "symbols_in_volume": [
   "math.log",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_S4": {
  "lineno": 130,
  "symbols_in_volume": [
   "math.log",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_all_nonexistent_edges": {
  "lineno": 160,
  "symbols_in_volume": [
   "math.log",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_equal_nodes": {
  "lineno": 156,
  "symbols_in_volume": [
   "math.log",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_no_common_neighbor": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_notimplemented": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.setup_class": {
  "lineno": 215,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.cn_soundarajan_hopcroft"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_K5": {
  "lineno": 220,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_P3": {
  "lineno": 229,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_S4": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_all_nonexistent_edges": {
  "lineno": 309,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_custom_community_attribute_name": {
  "lineno": 300,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_different_community": {
  "lineno": 270,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_equal_nodes": {
  "lineno": 263,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_insufficient_community_information": {
  "lineno": 283,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXAlgorithmError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_common_neighbor": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_community_information": {
  "lineno": 279,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_notimplemented": {
  "lineno": 245,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_sufficient_community_information": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.setup_class": {
  "lineno": 70,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.jaccard_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_K5": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_P4": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_all_nonexistent_edges": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_isolated_nodes": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_no_common_neighbor": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_notimplemented": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.setup_class": {
  "lineno": 169,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.preferential_attachment"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_K5": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_P3": {
  "lineno": 178,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_S4": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_all_nonexistent_edges": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_notimplemented": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_zero_degrees": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.setup_class": {
  "lineno": 320,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.ra_index_soundarajan_hopcroft"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_K5": {
  "lineno": 325,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_P3": {
  "lineno": 334,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_S4": {
  "lineno": 341,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges": {
  "lineno": 414,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name": {
  "lineno": 405,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_different_community": {
  "lineno": 375,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_equal_nodes": {
  "lineno": 368,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_insufficient_community_information": {
  "lineno": 388,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXAlgorithmError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_common_neighbor": {
  "lineno": 361,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_community_information": {
  "lineno": 384,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_notimplemented": {
  "lineno": 350,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_sufficient_community_information": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.setup_class": {
  "lineno": 20,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.resource_allocation_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_K5": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_P3": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_S4": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_all_nonexistent_edges": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_equal_nodes": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_no_common_neighbor": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_notimplemented": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster": {
  "lineno": 424,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.setup_class": {
  "lineno": 425,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.within_inter_cluster"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_K5": {
  "lineno": 433,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_P3": {
  "lineno": 442,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_S4": {
  "lineno": 449,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_all_nonexistent_edges": {
  "lineno": 535,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_custom_community_attribute_name": {
  "lineno": 527,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_different_community": {
  "lineno": 483,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_equal_nodes": {
  "lineno": 476,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_insufficient_community_information": {
  "lineno": 504,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXAlgorithmError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_invalid_delta": {
  "lineno": 521,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_common_neighbor": {
  "lineno": 469,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_community_information": {
  "lineno": 500,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_inter_cluster_common_neighbor": {
  "lineno": 492,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_notimplemented": {
  "lineno": 458,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_sufficient_community_information": {
  "lineno": 512,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction._test_func": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.all_pairs_lowest_common_ancestor",
   "networkx.tree_all_pairs_lowest_common_ancestor"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.assert_lca_dicts_same": {
  "lineno": 216,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.setup_class": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor1": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor10": {
  "lineno": 295,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.NodeNotFound",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor2": {
  "lineno": 237,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor3": {
  "lineno": 243,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor4": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor5": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor6": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor7": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXPointlessConcept",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor8": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor9": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_lowest_common_ancestor1": {
  "lineno": 301,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.lowest_common_ancestor"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_lowest_common_ancestor2": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.lowest_common_ancestor"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.assert_has_same_pairs": {
  "lineno": 48,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.setup_class": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_not_implemented_for": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.lowest_common_ancestor",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor1": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor10": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor11": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.NodeNotFound",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor12": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor13": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor2": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor3": {
  "lineno": 64,
  "symbols_in_volume": [
   "itertools.chain",
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor4": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor5": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXPointlessConcept",
   "networkx.NodeNotFound",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor6": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor7": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor8": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor9": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.get_pair": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_dict": {
  "lineno": 384,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_edge_order": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_empty_matching": {
  "lineno": 388,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_invalid": {
  "lineno": 407,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_single_edge": {
  "lineno": 392,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_valid": {
  "lineno": 403,
  "symbols_in_volume": [
   "networkx.is_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching": {
  "lineno": 412,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_dict": {
  "lineno": 418,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_matching": {
  "lineno": 426,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_maximal": {
  "lineno": 430,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_valid": {
  "lineno": 422,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching": {
  "lineno": 435,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_dict": {
  "lineno": 441,
  "symbols_in_volume": [
   "networkx.is_perfect_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_maximal_but_not_perfect": {
  "lineno": 461,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_perfect_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_not_matching": {
  "lineno": 457,
  "symbols_in_volume": [
   "networkx.is_perfect_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid": {
  "lineno": 445,
  "symbols_in_volume": [
   "networkx.is_perfect_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid_not_path": {
  "lineno": 449,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_perfect_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_floating_point_weights": {
  "lineno": 67,
  "symbols_in_volume": [
   "math.exp",
   "math.pi",
   "math.sqrt",
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom1": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom2": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_augmenting": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_expand_recursively": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_least_slack": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_negative_weights": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_expand": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel_expand": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom_relabel_expand": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_t_blossom": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial1": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.max_weight_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial2": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.max_weight_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial3": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial4": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial5": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial6": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.matching.matching_dict_to_set",
   "networkx.max_weight_matching",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching": {
  "lineno": 469,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_ordering": {
  "lineno": 498,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.Graph",
   "networkx.is_maximal_matching",
   "networkx.maximal_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_self_loops": {
  "lineno": 488,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.maximal_matching",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_single_edge_matching": {
  "lineno": 481,
  "symbols_in_volume": [
   "networkx.is_maximal_matching",
   "networkx.maximal_matching",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_valid_matching": {
  "lineno": 475,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_maximal_matching",
   "networkx.maximal_matching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_30_node_prob": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.max_weight_clique"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_basic_cases": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_basic_cases.check_basic_case": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.algorithms.max_weight_clique"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_error_on_non_integer_weight": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.algorithms.max_weight_clique",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_key_error": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.algorithms.max_weight_clique",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_unaffected_by_self_loops": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.algorithms.max_weight_clique"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.disconnected": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.empty_graph": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.one_node_graph": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.three_node_clique": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.three_node_independent_set": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.two_node_graph": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.verify_clique": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_minors.TestContraction": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_contract_selfloop_graph": {
  "lineno": 334,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_create_multigraph": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.contracted_nodes",
   "networkx.path_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction": {
  "lineno": 250,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction_no_copy": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_multigraph_keys": {
  "lineno": 295,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.contracted_nodes",
   "networkx.path_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_node_attributes": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_nonexistent_edge": {
  "lineno": 357,
  "symbols_in_volume": [
   "networkx.contracted_edge",
   "networkx.cycle_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_edge_contraction": {
  "lineno": 349,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.contracted_edge",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction_no_copy": {
  "lineno": 259,
  "symbols_in_volume": [
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_without_self_loops": {
  "lineno": 327,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.contracted_nodes",
   "networkx.cycle_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_barbell": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_barbell_plus": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.barbell_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_blockmodel": {
  "lineno": 204,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.condensation",
   "networkx.is_isomorphic",
   "networkx.quotient_graph",
   "networkx.strongly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient.same_component": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_directed_multigraph_path": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_directed_path": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_multigraph_blockmodel": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_multigraph_path": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_overlapping_blocks": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.path_graph",
   "networkx.quotient_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_path": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.complete_graph",
   "networkx.is_isomorphic",
   "networkx.quotient_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite.same_neighbors": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.complete_multipartite_graph",
   "networkx.is_isomorphic",
   "networkx.quotient_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite.same_neighbors": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.quotient_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation.identity": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation.same_parity": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_incomplete_partition": {
  "lineno": 226,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_weighted_path": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.quotient_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.setup": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K5": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.maximal_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K55": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.maximal_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_bipartite": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.maximal_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_digraph_exception": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.maximal_independent_set",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_exception": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.maximal_independent_set",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_florentine_family": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.maximal_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_graphs": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.maximal_independent_set",
   "networkx.random_graphs.erdos_renyi_graph",
   "random.random"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_seed": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.maximal_independent_set"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_moral": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_moral.test_get_moral_graph": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.moral.moral_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_non_randomness": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_non_randomness.test_non_randomness": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.karate_club_graph",
   "networkx.non_randomness"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__eq__": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__ge__": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__gt__": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__init__": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__le__": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__lt__": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__ne__": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_edge_intersections": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_embedding_data": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding",
   "networkx.combinatorial_embedding_to_pos"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_triangulation": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.algorithms.planar_drawing.triangulate_embedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.is_close": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.planar_drawing_conforms_to_embedding": {
  "lineno": 244,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.point_in_between": {
  "lineno": 137,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_circle_graph": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_graph1": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_graph2": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_grid_graph": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_invalid_half_edge": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "networkx.combinatorial_embedding_to_pos",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph1": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph2": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_one_node_graph": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_three_node_graph": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding1": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding2": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_two_node_graph": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.check_graph": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.algorithms.planarity.check_planarity_recursive",
   "networkx.check_planarity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_comp": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar": {
  "lineno": 263,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.algorithms.planarity.get_counterexample",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar_recursive": {
  "lineno": 270,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.algorithms.planarity.get_counterexample_recursive",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_goldner_harary": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph1": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.OrderedGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph2": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.OrderedGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph3": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.OrderedGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k3_3": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k5": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_loop": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_non_planar": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_planar": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar1": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_digraph": {
  "lineno": 189,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_multigraph": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_with_selfloop": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_digraph": {
  "lineno": 185,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_multigraph": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_with_selfloop": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_simple_planar_graph": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_single_component": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass": {
  "lineno": 371,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.get_star_embedding": {
  "lineno": 433,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_connect_components": {
  "lineno": 415,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_get_data": {
  "lineno": 372,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_invalid_edge_orientation": {
  "lineno": 386,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_edge_orientation": {
  "lineno": 378,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_half_edge": {
  "lineno": 394,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_reference": {
  "lineno": 410,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_not_fulfilling_euler_formula": {
  "lineno": 401,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_successful_face_traversal": {
  "lineno": 419,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_unsuccessful_face_traversal": {
  "lineno": 426,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.check_counterexample": {
  "lineno": 320,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.complete_bipartite_graph",
   "networkx.complete_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.check_embedding": {
  "lineno": 278,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_overall_reciprocity_empty_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.overall_reciprocity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_digraph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reciprocity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_isolated_nodes": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.reciprocity",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_node": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reciprocity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_nodes": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reciprocity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular1": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_k_regular",
   "networkx.generators.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular2": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_k_regular",
   "networkx.generators.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular3": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_k_regular",
   "networkx.generators.lollipop_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular1": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_regular",
   "networkx.generators.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular2": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_regular",
   "networkx.generators.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular3": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.algorithms.regular.is_regular",
   "networkx.generators.lollipop_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor1": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor2": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor3": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.grid_2d_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor4": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.lattice.hexagonal_lattice_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor5": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor_trivial": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.algorithms.regular.k_factor",
   "networkx.generators.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_richclub.test_rich_club_exception2": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.rich_club_coefficient",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.richclub.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub2": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.richclub.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub3": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.karate_club_graph",
   "networkx.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub4": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_exception": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.rich_club_coefficient",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_normalized": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.richclub.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_seed": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.richclub.rich_club_coefficient"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.setup_class": {
  "lineno": 38,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testCopy": {
  "lineno": 364,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph1": {
  "lineno": 446,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph2": {
  "lineno": 458,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph3": {
  "lineno": 472,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4": {
  "lineno": 490,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_a": {
  "lineno": 502,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_b": {
  "lineno": 514,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneEdgeLabelDiff": {
  "lineno": 384,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraEdge": {
  "lineno": 418,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNode": {
  "lineno": 406,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNodeAndEdge": {
  "lineno": 433,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneNodeLabelDiff": {
  "lineno": 395,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testSame": {
  "lineno": 373,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_digraph": {
  "lineno": 282,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.cycle_graph",
   "networkx.generators.classic.path_graph",
   "networkx.generators.classic.wheel_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost": {
  "lineno": 154,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_del_cost": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_ins_cost": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_subst_cost": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_match": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_del_cost": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_ins_cost": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_subst_cost": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_match": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_roots_and_timeout": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NodeNotFound",
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.star_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_upper_bound": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.graph_edit_distance",
   "networkx.generators.classic.circular_ladder_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_multidigraph": {
  "lineno": 340,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_multigraph": {
  "lineno": 311,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimal_edit_paths": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.optimal_edit_paths",
   "networkx.generators.classic.cycle_graph",
   "networkx.generators.classic.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimal_edit_paths.canonical": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimize_graph_edit_distance": {
  "lineno": 239,
  "symbols_in_volume": [
   "networkx.algorithms.similarity.optimize_graph_edit_distance",
   "networkx.generators.classic.circular_ladder_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_selfloops": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.similarity.graph_edit_distance"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_no_source_no_target": {
  "lineno": 526,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.similarity.simrank_similarity",
   "networkx.cycle_graph",
   "networkx.simrank_similarity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_no_source_no_target": {
  "lineno": 653,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.simrank_similarity_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_and_target": {
  "lineno": 711,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.simrank_similarity_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_no_target": {
  "lineno": 697,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.simrank_similarity_numpy"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_and_target": {
  "lineno": 630,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.similarity.simrank_similarity",
   "networkx.cycle_graph",
   "networkx.simrank_similarity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_no_target": {
  "lineno": 601,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.similarity.simrank_similarity",
   "networkx.cycle_graph",
   "networkx.simrank_similarity"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.ematch": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.getCanonical": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.nmatch": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_cycle": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_cycle": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_non_path": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_path": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_empty_list": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_missing_node": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multidigraph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multigraph": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_non_simple_path": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_simple_path": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_nonpath": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_path": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.is_simple_path",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.hamiltonian_edge_path": {
  "lineno": 404,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.hamiltonian_path": {
  "lineno": 214,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_Greg_Bernstein": {
  "lineno": 484,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_corner_cases": {
  "lineno": 398,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.empty_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_cutoff": {
  "lineno": 328,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_directed": {
  "lineno": 384,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.all_simple_edge_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_empty": {
  "lineno": 392,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_ignores_cycle": {
  "lineno": 308,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph": {
  "lineno": 363,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path",
   "networkx.all_simple_edge_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph_with_cutoff": {
  "lineno": 377,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.all_simple_edge_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_on_non_trivial_graph": {
  "lineno": 336,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_source_target": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_cutoff": {
  "lineno": 282,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_emits_two_paths": {
  "lineno": 262,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_corner_cases": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.empty_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_cutoff": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_directed": {
  "lineno": 194,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.all_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_empty": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_ignores_cycle": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_paths",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path",
   "networkx.all_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph_with_cutoff": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.all_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_on_non_trivial_graph": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_source_target": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_cutoff": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_emits_two_paths": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_in_line_emits_two_paths": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_paths",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijksta_restricted": {
  "lineno": 689,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.algorithms.simple_paths._bidirectional_dijkstra",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_ignore": {
  "lineno": 756,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.algorithms.simple_paths._bidirectional_dijkstra",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_no_path": {
  "lineno": 748,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.algorithms.simple_paths._bidirectional_dijkstra",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_ignore": {
  "lineno": 656,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.algorithms.simple_paths._bidirectional_shortest_path",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_cycle": {
  "lineno": 608,
  "symbols_in_volume": [
   "networkx.algorithms.simple_paths._bidirectional_shortest_path",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_directed_cycle": {
  "lineno": 630,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNoPath",
   "networkx.algorithms.simple_paths._bidirectional_shortest_path",
   "networkx.cycle_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_wheel": {
  "lineno": 616,
  "symbols_in_volume": [
   "networkx.algorithms.simple_paths._bidirectional_shortest_path",
   "networkx.wheel_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_cutoff_zero": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.all_simple_paths",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_cutoff": {
  "lineno": 292,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths": {
  "lineno": 272,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_cutoff": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_emits_two_paths": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_simple_paths",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path": {
  "lineno": 512,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.set_edge_attributes",
   "networkx.shortest_simple_paths",
   "random.randint"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path.cost_func": {
  "lineno": 513,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path_issue2427": {
  "lineno": 548,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_cutoff_zero": {
  "lineno": 423,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.all_simple_edge_paths",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_source_missing": {
  "lineno": 431,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.all_simple_edge_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_target_missing": {
  "lineno": 438,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.all_simple_edge_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_hamiltonian__edge_path": {
  "lineno": 414,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.complete_graph",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_hamiltonian_path": {
  "lineno": 224,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths": {
  "lineno": 446,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.convert_node_labels_to_integers",
   "networkx.grid_2d_graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed": {
  "lineno": 456,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed_with_weight_fucntion": {
  "lineno": 462,
  "symbols_in_volume": [
   "networkx.all_simple_paths",
   "networkx.convert_node_labels_to_integers",
   "networkx.grid_2d_graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed_with_weight_fucntion.cost": {
  "lineno": 463,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_with_weight_fucntion": {
  "lineno": 475,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.cycle_graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_with_weight_fucntion.cost": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_source_missing": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.all_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_multigraph": {
  "lineno": 593,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.add_path",
   "networkx.shortest_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing": {
  "lineno": 579,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.shortest_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing2": {
  "lineno": 600,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNoPath",
   "networkx.add_path",
   "networkx.shortest_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_target_missing": {
  "lineno": 586,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.shortest_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_target_missing": {
  "lineno": 248,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NodeNotFound",
   "networkx.add_path",
   "networkx.all_simple_paths",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weight_name": {
  "lineno": 569,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.set_edge_attributes",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path": {
  "lineno": 498,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.set_edge_attributes",
   "networkx.shortest_simple_paths",
   "random.randint"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path.cost_func": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path_issue2427": {
  "lineno": 527,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.shortest_simple_paths"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_length_path": {
  "lineno": 684,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_path": {
  "lineno": 676,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip",
   "random.Random"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_smallworld.test_lattice_reference": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.average_shortest_path_length",
   "networkx.connected_watts_strogatz_graph",
   "networkx.lattice_reference",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_omega": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.connected_watts_strogatz_graph",
   "networkx.omega"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_random_reference": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.average_clustering",
   "networkx.connected_watts_strogatz_graph",
   "networkx.random_reference",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_sigma": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.connected_watts_strogatz_graph",
   "networkx.sigma"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_smetric.test_normalized": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.s_metric",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric.test_smetric": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.s_metric"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_sparsifiers._assign_random_weights": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers._test_spanner": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_invalid_stretch": {
  "lineno": 133,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.spanner",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_trivial": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_complete_graph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_disconnected_graph": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.disjoint_union",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_gnp_graph": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.gnp_random_graph",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_complete_graph": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_gnp_graph": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.gnp_random_graph",
   "networkx.spanner"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.setup": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_directed": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.constraint",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_isolated": {
  "lineno": 116,
  "symbols_in_volume": [
   "math.isnan",
   "networkx.constraint"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_undirected": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.constraint",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_directed": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.constraint",
   "networkx.set_edge_attributes",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_undirected": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.constraint",
   "networkx.set_edge_attributes",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_borgatti_isolated": {
  "lineno": 129,
  "symbols_in_volume": [
   "math.isnan",
   "networkx.effective_size"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_directed": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.effective_size",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_isolated": {
  "lineno": 122,
  "symbols_in_volume": [
   "math.isnan",
   "networkx.effective_size",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.effective_size",
   "networkx.set_edge_attributes",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected_borgatti": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.effective_size",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_directed": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.effective_size",
   "networkx.set_edge_attributes",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_undirected": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.effective_size",
   "networkx.set_edge_attributes",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.barabasi_albert_graph",
   "networkx.connected_double_edge_swap",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_not_connected": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.connected_double_edge_swap",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_small": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.connected_double_edge_swap",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_degree_seq_c4": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.double_edge_swap"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.barabasi_albert_graph",
   "networkx.double_edge_swap"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_seed": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.barabasi_albert_graph",
   "networkx.double_edge_swap"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_small": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.double_edge_swap",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_tries": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.double_edge_swap",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers"
  ],
  "type": "module"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.random_threshold_sequence": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.random_threshold_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_create_using": {
  "lineno": 268,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.algorithms.threshold.threshold_graph",
   "networkx.exception.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequence_to_weights": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.creation_sequence_to_weights",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
   "networkx.algorithms.threshold.creation_sequence",
   "networkx.algorithms.threshold.threshold_graph",
   "networkx.algorithms.threshold.uncompact",
   "networkx.generators.havel_hakimi_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors": {
  "lineno": 249,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.eigenvectors",
   "networkx.algorithms.threshold.threshold_graph",
   "networkx.laplacian_matrix",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.betweenness_sequence",
   "networkx.algorithms.threshold.cluster_sequence",
   "networkx.algorithms.threshold.degree_correlation",
   "networkx.algorithms.threshold.degree_sequence",
   "networkx.algorithms.threshold.density",
   "networkx.algorithms.threshold.eigenvalues",
   "networkx.algorithms.threshold.threshold_graph",
   "networkx.algorithms.threshold.triangle_sequence",
   "networkx.algorithms.threshold.triangles",
   "networkx.betweenness_centrality",
   "networkx.clustering",
   "networkx.density",
   "networkx.testing.almost_equal",
   "networkx.triangles"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_find_alternating_4_cycle": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.threshold.find_alternating_4_cycle"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_finding_routines": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.threshold.creation_sequence",
   "networkx.algorithms.threshold.find_alternating_4_cycle",
   "networkx.algorithms.threshold.find_creation_sequence",
   "networkx.algorithms.threshold.find_threshold_graph",
   "networkx.algorithms.threshold.is_threshold_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_left_d_threshold_sequence": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.left_d_threshold_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_make_compact": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.make_compact",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_right_d_threshold_sequence": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.right_d_threshold_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.creation_sequence",
   "networkx.algorithms.threshold.shortest_path",
   "networkx.algorithms.threshold.shortest_path_length",
   "networkx.generators.havel_hakimi_graph",
   "networkx.shortest_path",
   "networkx.single_source_shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path_length": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.shortest_path",
   "networkx.algorithms.threshold.shortest_path_length",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.left_d_threshold_sequence",
   "networkx.algorithms.threshold.right_d_threshold_sequence",
   "networkx.algorithms.threshold.swap_d"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.is_threshold_graph",
   "networkx.algorithms.threshold.is_threshold_sequence",
   "networkx.complete_graph",
   "networkx.generators.havel_hakimi_graph",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_uncompact": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.uncompact",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.creation_sequence_to_weights",
   "networkx.algorithms.threshold.uncompact",
   "networkx.algorithms.threshold.weights_to_creation_sequence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_to_creation_sequence": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.algorithms.threshold.weights_to_creation_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath.test_hamiltonian_cycle": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.hamiltonian_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath.test_path_is_hamiltonian": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.hamiltonian_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_bidirectional_edges": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_is_tournament": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_missing_edges": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_self_loops": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament.test_graph_is_tournament": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.algorithms.tournament.is_tournament",
   "networkx.algorithms.tournament.random_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament.test_graph_is_tournament_seed": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.algorithms.tournament.is_tournament",
   "networkx.algorithms.tournament.random_tournament"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_reachable_pair": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_reachable"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_same_node_is_reachable": {
  "lineno": 106,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_reachable"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_unreachable_pair": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_reachable"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected.test_is_strongly_connected": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_strongly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected.test_not_strongly_connected": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tournament.is_strongly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_triads.test_all_triads": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_triads",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_all_triplets": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.all_triplets"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_is_triad": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.is_triad",
   "networkx.karate_club_graph",
   "random.sample"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_random_triad": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.is_triad",
   "networkx.karate_club_graph",
   "networkx.random_triad"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triad_type": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.triad_type"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triadic_census": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.triadic_census"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triads_by_type": {
  "lineno": 117,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.DiGraph",
   "networkx.all_triads",
   "networkx.is_isomorphic",
   "networkx.triad_type",
   "networkx.triads_by_type"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_disconnecting_graph": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.closeness_vitality",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.closeness_vitality",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted_digraph": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.closeness_vitality",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.closeness_vitality"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_digraph": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_cycle",
   "networkx.closeness_vitality"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_multidigraph": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_cycle",
   "networkx.closeness_vitality"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_inward": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.utils.pairwise",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_unweighted": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.utils.pairwise",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_weighted": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_isolates": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_unweighted": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.utils.pairwise",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_weighted": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_unweighted": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_weighted": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_unweighted": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_weighted": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.voronoi_cells"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_complete_graph": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.wiener_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_directed": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.wiener_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_disconnected_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.wiener_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_path_graph": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.wiener_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.threshold": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.threshold.betweenness_sequence": {
  "lineno": 661,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.cluster_sequence": {
  "lineno": 482,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.creation_sequence": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.creation_sequence_to_weights": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.degree_correlation": {
  "lineno": 528,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.degree_sequence": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.density": {
  "lineno": 516,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.eigenvalues": {
  "lineno": 780,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.eigenvectors": {
  "lineno": 701,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.algorithms.threshold.find_alternating_4_cycle": {
  "lineno": 353,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.find_creation_sequence": {
  "lineno": 402,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.find_threshold_graph": {
  "lineno": 368,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.is_threshold_graph": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.is_threshold_sequence": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.left_d_threshold_sequence": {
  "lineno": 891,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.make_compact": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.random_threshold_sequence": {
  "lineno": 822,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.threshold.right_d_threshold_sequence": {
  "lineno": 857,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.shortest_path": {
  "lineno": 562,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.shortest_path_length": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.spectral_projection": {
  "lineno": 759,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.swap_d": {
  "lineno": 926,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.threshold.threshold_graph": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.threshold.triangle_sequence": {
  "lineno": 454,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.triangles": {
  "lineno": 434,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.uncompact": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.threshold.weights_to_creation_sequence": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tournament": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tournament.hamiltonian_path": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.index_satisfying": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tournament.is_reachable": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.is_reachable.is_closed": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tournament.is_reachable.two_neighborhood": {
  "lineno": 281,
  "symbols_in_volume": [
   "networkx.algorithms.simple_paths.is_simple_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.is_strongly_connected": {
  "lineno": 312,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.is_tournament": {
  "lineno": 66,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.number_of_selfloops",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.random_tournament": {
  "lineno": 137,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.DiGraph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.score_sequence": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tournament.tournament_matrix": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.adjacency_matrix",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.beamsearch": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.beamsearch.bfs_beam_edges": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.beamsearch.bfs_beam_edges.successors": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_edges": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_successors": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_tree": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.descendants_at_distance": {
  "lineno": 361,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.generic_bfs_edges": {
  "lineno": 14,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_edges": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_predecessors": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes": {
  "lineno": 293,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_successors": {
  "lineno": 189,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_tree": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs": {
  "lineno": 18,
  "symbols_in_volume": [
   "collections.deque",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs.edge_id": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs.edges_from": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs.edge_id": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs.edges_from": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_narrow": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.bfs_beam_edges",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_wide": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.bfs_beam_edges",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.identity": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.setup_class": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.bfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_reverse": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.bfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_sorting": {
  "lineno": 34,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.DiGraph",
   "networkx.bfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.bfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree_isolates": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.bfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.bfs_predecessors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.bfs_successors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.setup_class": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_edges": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.bfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_predecessor": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.bfs_predecessors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_successor": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.bfs_successors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_tree": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.bfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.setup_class": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.dfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.dfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree_isolates": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.dfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.dfs_postorder_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.dfs_predecessors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.dfs_preorder_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.dfs_successors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.setup_class": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_edges": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.dfs_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_disconnected_edges": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_edges": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.dfs_labeled_edges"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_postorder_nodes": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.dfs_postorder_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_predecessor": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.dfs_predecessors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_preorder_nodes": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.dfs_preorder_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_successor": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.dfs_successors"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_tree": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.dfs_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.edgedfs.FORWARD",
   "networkx.algorithms.edgedfs.REVERSE",
   "networkx.edge_bfs"
  ],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph2": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore": {
  "lineno": 121,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore2": {
  "lineno": 133,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_invalid": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_none": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_original": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev2": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_empty": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph_single_source": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_ignore": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_rev": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multigraph": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.edge_dfs",
   "networkx.algorithms.edgedfs.FORWARD",
   "networkx.algorithms.edgedfs.REVERSE"
  ],
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.setup_class": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph2": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore2": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_invalid": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_none": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_original": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev2": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_empty": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_graph": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_ignore": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_rev": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multigraph": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.branchings": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.branchings.Edmonds": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.Edmonds.__init__": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds._init": {
  "lineno": 275,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.utils.UnionFind"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.desired_edge": {
  "lineno": 391,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.is_root": {
  "lineno": 550,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.__init__": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edge": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edges_from": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edge_with_key": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edges_from": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_node": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_nodes_from": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings._max_weight": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings._min_weight": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.branching_weight": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.get_path": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.shortest_path"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.get_path.first_key": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.greedy_branching": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXException",
   "networkx.utils.UnionFind",
   "networkx.utils.py_random_state",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.maximum_branching": {
  "lineno": 641,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.maximum_spanning_arborescence": {
  "lineno": 657,
  "symbols_in_volume": [
   "networkx.exception.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_branching": {
  "lineno": 649,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_spanning_arborescence": {
  "lineno": 668,
  "symbols_in_volume": [
   "networkx.exception.NetworkXException"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.random_string": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.utils.py_random_state",
   "string.ascii_letters"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.coding.NotATree": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.NetworkXException"
  ],
  "type": "class"
 },
 "networkx.algorithms.tree.coding.from_nested_tuple": {
  "lineno": 130,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.bfs_edges",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.from_nested_tuple._make_tree": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.tree.join"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.from_prufer_sequence": {
  "lineno": 314,
  "symbols_in_volume": [
   "collections.Counter",
   "itertools.chain",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_nested_tuple": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.NotATree",
   "networkx.is_tree",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_nested_tuple._make_tuple": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_prufer_sequence": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.NotATree",
   "networkx.is_tree",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_prufer_sequence.parents": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.decomposition": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.decomposition.junction_tree": {
  "lineno": 11,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.algorithms.chordal_graph_cliques",
   "networkx.algorithms.complete_to_chordal_graph",
   "networkx.algorithms.moral.moral_graph",
   "networkx.maximum_spanning_tree",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.mst.boruvka_mst_edges": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.utils.UnionFind",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.boruvka_mst_edges.best_edge": {
  "lineno": 58,
  "symbols_in_volume": [
   "math.isnan",
   "networkx.edge_boundary"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.kruskal_mst_edges": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.utils.UnionFind",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.kruskal_mst_edges.filter_nan_edges": {
  "lineno": 166,
  "symbols_in_volume": [
   "math.isnan"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.maximum_spanning_edges": {
  "lineno": 401,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.maximum_spanning_tree": {
  "lineno": 553,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.minimum_spanning_edges": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.minimum_spanning_tree": {
  "lineno": 494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.mst.prim_mst_edges": {
  "lineno": 203,
  "symbols_in_volume": [
   "heapq.heappop",
   "heapq.heappush",
   "itertools.count",
   "math.isnan"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.operations": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.operations.join": {
  "lineno": 11,
  "symbols_in_volume": [
   "functools.partial",
   "itertools.accumulate",
   "itertools.chain",
   "itertools.chain.from_iterable",
   "networkx.convert_node_labels_to_integers",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.recognition": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.recognition.is_arborescence": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_branching": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_forest": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.exception.NetworkXPointlessConcept",
   "networkx.weakly_connected_components"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_tree": {
  "lineno": 181,
  "symbols_in_volume": [
   "networkx.exception.NetworkXPointlessConcept",
   "networkx.is_connected",
   "networkx.is_weakly_connected"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_branchings": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_branchings.G1": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.from_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.G2": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.from_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.build_branching": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.sorted_edges": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_discard": {
  "lineno": 435,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.tree.branchings.Edmonds",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_multigraph": {
  "lineno": 415,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algorithms.tree.branchings.Edmonds"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_normal_graph": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.tree.branchings.Edmonds"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxarbor": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.maximum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxbranch": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.maximum_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_minbranch": {
  "lineno": 378,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.algorithms.tree.branchings.maximum_branching",
   "networkx.algorithms.tree.branchings.minimum_branching",
   "networkx.from_numpy_array"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxarbor": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.maximum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxbranch": {
  "lineno": 281,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.maximum_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_minarbor": {
  "lineno": 295,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch1": {
  "lineno": 314,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.minimum_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch2": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.minimum_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max1": {
  "lineno": 195,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.greedy_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max2": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.greedy_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max3": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.greedy_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_min": {
  "lineno": 249,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.greedy_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1a": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1b": {
  "lineno": 189,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mixed_nodetypes": {
  "lineno": 369,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mst": {
  "lineno": 334,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_arborescence2": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching1": {
  "lineno": 159,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2a": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2b": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.algorithms.tree.branchings.branching_weight",
   "networkx.algorithms.tree.recognition.is_arborescence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_canonical_form": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_nested_tuple"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_decoding": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.from_nested_tuple",
   "networkx.full_rary_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_encoding": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.full_rary_tree",
   "networkx.testing.assert_nodes_equal",
   "networkx.to_nested_tuple"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_nontree": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.NotATree",
   "networkx.cycle_graph",
   "networkx.to_nested_tuple",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_sensible_relabeling": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.from_nested_tuple",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_unknown_root": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.NodeNotFound",
   "networkx.path_graph",
   "networkx.to_nested_tuple",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_bad_integer_labels": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_prufer_sequence",
   "networkx.utils.pairwise",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.from_prufer_sequence",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding2": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.from_prufer_sequence",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_encoding": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_prufer_sequence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_inverse": {
  "lineno": 61,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.from_prufer_sequence",
   "networkx.nonisomorphic_trees",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.to_prufer_sequence"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_nontree": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.NotATree",
   "networkx.cycle_graph",
   "networkx.to_prufer_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_null_graph": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.null_graph",
   "networkx.to_prufer_sequence",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_trivial_graph": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.to_prufer_sequence",
   "networkx.trivial_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_cascade": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.tree.decomposition.junction_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_confounders": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.tree.decomposition.junction_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_edges": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.tree.decomposition.junction_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_nodes": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.algorithms.tree.decomposition.junction_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_undirected": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algorithms.tree.decomposition.junction_tree",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.setup_method": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_attributes": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_disconnected": {
  "lineno": 170,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_empty_graph": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_isolated_node": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_edges": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.maximum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_tree": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.maximum_spanning_tree",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_edges": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_tree": {
  "lineno": 160,
  "symbols_in_volume": [
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights_order": {
  "lineno": 110,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_weight_attribute": {
  "lineno": 194,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.maximum_spanning_tree",
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_without_data": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_max": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.maximum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_min": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestBoruvka": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestBoruvka.test_unicode_name": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.minimum_spanning_edges",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestKruskal": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.minimum_spanning_tree",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree_max": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.maximum_spanning_tree",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.test_unknown_algorithm": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.minimum_spanning_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_basic": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.full_rary_tree",
   "networkx.is_isomorphic",
   "networkx.join"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_empty_sequence": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.join"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_single": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.join",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestDirectedTreeRecognition": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph"
  ],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.setup_class": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.compose"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_forest": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.is_forest"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_forest": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.is_forest"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_tree": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_tree": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.is_forest",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest2": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.is_forest",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.is_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree2": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.is_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_dag_nontree": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_directed_acyclic_graph",
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_disconnected_graph": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_emptybranch": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_multicycle": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.is_directed_acyclic_graph",
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence1": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence2": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching1": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching2": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_path": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.is_arborescence",
   "networkx.is_branching"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.triads._tricode": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.algorithms.triads.all_triads": {
  "lineno": 235,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.all_triplets": {
  "lineno": 217,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.is_triad": {
  "lineno": 197,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.is_directed"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.random_triad": {
  "lineno": 366,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for",
   "random.sample"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.triad_type": {
  "lineno": 278,
  "symbols_in_volume": [
   "itertools.permutations",
   "networkx.NetworkXAlgorithmError",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.triadic_census": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.triads.triads_by_type": {
  "lineno": 254,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.algorithms.vitality": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.vitality.closeness_vitality": {
  "lineno": 11,
  "symbols_in_volume": [
   "functools.partial",
   "networkx.wiener_index"
  ],
  "type": "function"
 },
 "networkx.algorithms.voronoi": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.algorithms.voronoi.voronoi_cells": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.multi_source_dijkstra_path",
   "networkx.utils.groups"
  ],
  "type": "function"
 },
 "networkx.algorithms.wiener": {
  "lineno": null,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "module"
 },
 "networkx.algorithms.wiener.wiener_index": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.coreviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.coreviews.AdjacencyView": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.AdjacencyView.__getitem__": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AdjacencyView.copy": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView": {
  "lineno": 20,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.classes.coreviews.AtlasView.__getitem__": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__getstate__": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__init__": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__iter__": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__len__": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__repr__": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__setstate__": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__str__": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.copy": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency": {
  "lineno": 302,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.classes.coreviews.FilterAdjacency.__getitem__": {
  "lineno": 320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__getitem__.new_node_ok": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__init__": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__iter__": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__len__": {
  "lineno": 308,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__repr__": {
  "lineno": 354,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__str__": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.copy": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas": {
  "lineno": 264,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.classes.coreviews.FilterAtlas.__getitem__": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__init__": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__iter__": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__len__": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__repr__": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__str__": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.copy": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency": {
  "lineno": 405,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.__getitem__": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.__getitem__.edge_ok": {
  "lineno": 409,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.copy": {
  "lineno": 415,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.FilterMultiInner.__getitem__": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.__getitem__.new_node_ok": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.__iter__": {
  "lineno": 360,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.copy": {
  "lineno": 387,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.MultiAdjacencyView": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.MultiAdjacencyView.__getitem__": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.MultiAdjacencyView.copy": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency": {
  "lineno": 162,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.classes.coreviews.UnionAdjacency.__getitem__": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__getstate__": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__init__": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__iter__": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__len__": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__repr__": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__setstate__": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__str__": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.copy": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas": {
  "lineno": 107,
  "symbols_in_volume": [
   "collections.abc.Mapping"
  ],
  "type": "class"
 },
 "networkx.classes.coreviews.UnionAtlas.__getitem__": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__getstate__": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__init__": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__iter__": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__len__": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__repr__": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__setstate__": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__str__": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.copy": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiAdjacency": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.UnionMultiAdjacency.__getitem__": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiInner": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.coreviews.UnionMultiInner.__getitem__": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiInner.copy": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.digraph.DiGraph": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.classes.graph.Graph"
  ],
  "type": "class"
 },
 "networkx.classes.digraph.DiGraph.__init__": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.convert.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edge": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edges_from": {
  "lineno": 640,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_node": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_nodes_from": {
  "lineno": 425,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.adj": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.clear": {
  "lineno": 1075,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.clear_edges": {
  "lineno": 1095,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.degree": {
  "lineno": 934,
  "symbols_in_volume": [
   "networkx.classes.reportviews.DiDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.edges": {
  "lineno": 837,
  "symbols_in_volume": [
   "networkx.classes.reportviews.OutEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_predecessor": {
  "lineno": 773,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_successor": {
  "lineno": 766,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_degree": {
  "lineno": 981,
  "symbols_in_volume": [
   "networkx.classes.reportviews.InDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_edges": {
  "lineno": 903,
  "symbols_in_volume": [
   "networkx.classes.reportviews.InEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_directed": {
  "lineno": 1117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_multigraph": {
  "lineno": 1113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.out_degree": {
  "lineno": 1028,
  "symbols_in_volume": [
   "networkx.classes.reportviews.OutDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.pred": {
  "lineno": 362,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.predecessors": {
  "lineno": 812,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edge": {
  "lineno": 701,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edges_from": {
  "lineno": 734,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_node": {
  "lineno": 495,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_nodes_from": {
  "lineno": 537,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.reverse": {
  "lineno": 1200,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.reverse_view"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.succ": {
  "lineno": 341,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.successors": {
  "lineno": 780,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.to_undirected": {
  "lineno": 1121,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.classes.graph.Graph",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.filters": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.filters.hide_diedges": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.hide_edges": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.hide_multidiedges": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.hide_multiedges": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.hide_nodes": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.no_filter": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_diedges": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_edges": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_multidiedges": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_multiedges": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_nodes": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.filters.show_nodes.__call__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.filters.show_nodes.__init__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.function.add_cycle": {
  "lineno": 295,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.classes.function.add_path": {
  "lineno": 263,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.classes.function.add_star": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.all_neighbors": {
  "lineno": 851,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.classes.function.common_neighbors": {
  "lineno": 921,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.classes.function.create_empty_copy": {
  "lineno": 531,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.degree": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.degree_histogram": {
  "lineno": 128,
  "symbols_in_volume": [
   "collections.Counter"
  ],
  "type": "function"
 },
 "networkx.classes.function.density": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.edge_subgraph": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.filters",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "function"
 },
 "networkx.classes.function.edges": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.freeze": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.frozen": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.function.get_edge_attributes": {
  "lineno": 820,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.get_node_attributes": {
  "lineno": 694,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.induced_subgraph": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.filters.show_nodes",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "function"
 },
 "networkx.classes.function.info": {
  "lineno": 554,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.function.is_directed": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.is_empty": {
  "lineno": 1065,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.is_frozen": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.is_negatively_weighted": {
  "lineno": 1012,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.function.is_path": {
  "lineno": 1237,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.classes.function.is_weighted": {
  "lineno": 959,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.function.neighbors": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.nodes": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.nodes_with_selfloops": {
  "lineno": 1088,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.non_edges": {
  "lineno": 896,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.non_neighbors": {
  "lineno": 876,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.number_of_edges": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.number_of_nodes": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.number_of_selfloops": {
  "lineno": 1212,
  "symbols_in_volume": [
   "networkx.selfloop_edges"
  ],
  "type": "function"
 },
 "networkx.classes.function.path_weight": {
  "lineno": 1260,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "networkx.is_path",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.classes.function.restricted_view": {
  "lineno": 455,
  "symbols_in_volume": [
   "networkx.filters",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "function"
 },
 "networkx.classes.function.selfloop_edges": {
  "lineno": 1115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.set_edge_attributes": {
  "lineno": 719,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.set_node_attributes": {
  "lineno": 605,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.subgraph": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.to_directed": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.function.to_undirected": {
  "lineno": 521,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.graph.Graph": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.graph.Graph.__contains__": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.__getitem__": {
  "lineno": 441,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.__init__": {
  "lineno": 290,
  "symbols_in_volume": [
   "networkx.convert.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.__iter__": {
  "lineno": 388,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.__len__": {
  "lineno": 420,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.__str__": {
  "lineno": 372,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edge": {
  "lineno": 820,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edges_from": {
  "lineno": 884,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_node": {
  "lineno": 467,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_nodes_from": {
  "lineno": 513,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_weighted_edges_from": {
  "lineno": 943,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.adj": {
  "lineno": 339,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.adjacency": {
  "lineno": 1345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.clear": {
  "lineno": 1405,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.clear_edges": {
  "lineno": 1424,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.copy": {
  "lineno": 1447,
  "symbols_in_volume": [
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.degree": {
  "lineno": 1365,
  "symbols_in_volume": [
   "networkx.classes.reportviews.DegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.edge_subgraph": {
  "lineno": 1713,
  "symbols_in_volume": [
   "networkx.edge_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.edges": {
  "lineno": 1242,
  "symbols_in_volume": [
   "networkx.classes.reportviews.EdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.get_edge_data": {
  "lineno": 1299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_edge": {
  "lineno": 1158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_node": {
  "lineno": 794,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_directed": {
  "lineno": 1443,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_multigraph": {
  "lineno": 1439,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.name": {
  "lineno": 368,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter": {
  "lineno": 1848,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter.bunch_iter": {
  "lineno": 1894,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.neighbors": {
  "lineno": 1199,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.nodes": {
  "lineno": 656,
  "symbols_in_volume": [
   "networkx.classes.reportviews.NodeView"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_edges": {
  "lineno": 1796,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_nodes": {
  "lineno": 754,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.order": {
  "lineno": 774,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edge": {
  "lineno": 975,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edges_from": {
  "lineno": 1008,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_node": {
  "lineno": 581,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_nodes_from": {
  "lineno": 621,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.size": {
  "lineno": 1753,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.subgraph": {
  "lineno": 1649,
  "symbols_in_volume": [
   "networkx.filters.show_nodes",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_directed": {
  "lineno": 1536,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_directed_class": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_undirected": {
  "lineno": 1592,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_undirected_class": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.graph.Graph.update": {
  "lineno": 1042,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.graphviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.graphviews.generic_graph_view": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.classes.coreviews.UnionAdjacency",
   "networkx.classes.coreviews.UnionMultiAdjacency",
   "networkx.empty_graph",
   "networkx.exception.NetworkXError",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.classes.graphviews.reverse_view": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.classes.graphviews.subgraph_view": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.classes.coreviews.FilterAdjacency",
   "networkx.classes.coreviews.FilterAtlas",
   "networkx.classes.coreviews.FilterMultiAdjacency",
   "networkx.classes.filters.no_filter",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.classes.graphviews.subgraph_view.reverse_edge": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multidigraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.multidigraph.MultiDiGraph": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.classes.digraph.DiGraph",
   "networkx.classes.multigraph.MultiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.multidigraph.MultiDiGraph.__init__": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.classes.digraph.DiGraph.__init__"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.add_edge": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.adj": {
  "lineno": 305,
  "symbols_in_volume": [
   "networkx.classes.coreviews.MultiAdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.degree": {
  "lineno": 626,
  "symbols_in_volume": [
   "networkx.classes.reportviews.DiMultiDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.edges": {
  "lineno": 517,
  "symbols_in_volume": [
   "networkx.classes.reportviews.OutMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_degree": {
  "lineno": 673,
  "symbols_in_volume": [
   "networkx.classes.reportviews.InMultiDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_edges": {
  "lineno": 593,
  "symbols_in_volume": [
   "networkx.classes.reportviews.InMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_directed": {
  "lineno": 770,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_multigraph": {
  "lineno": 766,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.out_degree": {
  "lineno": 720,
  "symbols_in_volume": [
   "networkx.classes.reportviews.OutMultiDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.pred": {
  "lineno": 343,
  "symbols_in_volume": [
   "networkx.classes.coreviews.MultiAdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.remove_edge": {
  "lineno": 453,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.reverse": {
  "lineno": 849,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.reverse_view"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.succ": {
  "lineno": 324,
  "symbols_in_volume": [
   "networkx.classes.coreviews.MultiAdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.to_undirected": {
  "lineno": 774,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.multigraph.MultiGraph": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.classes.graph.Graph"
  ],
  "type": "class"
 },
 "networkx.classes.multigraph.MultiGraph.__init__": {
  "lineno": 278,
  "symbols_in_volume": [
   "networkx.classes.graph.Graph.__init__"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edge": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edges_from": {
  "lineno": 453,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.adj": {
  "lineno": 314,
  "symbols_in_volume": [
   "networkx.classes.coreviews.MultiAdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.copy": {
  "lineno": 878,
  "symbols_in_volume": [
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.degree": {
  "lineno": 827,
  "symbols_in_volume": [
   "networkx.classes.reportviews.MultiDegreeView"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.edges": {
  "lineno": 697,
  "symbols_in_volume": [
   "networkx.classes.reportviews.MultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.get_edge_data": {
  "lineno": 765,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.has_edge": {
  "lineno": 641,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_directed": {
  "lineno": 874,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_multigraph": {
  "lineno": 870,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.new_edge_key": {
  "lineno": 333,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.number_of_edges": {
  "lineno": 1078,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edge": {
  "lineno": 532,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edges_from": {
  "lineno": 597,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_directed": {
  "lineno": 968,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_directed_class": {
  "lineno": 262,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_undirected": {
  "lineno": 1025,
  "symbols_in_volume": [
   "copy.deepcopy",
   "networkx.graphviews.generic_graph_view"
  ],
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_undirected_class": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.ordered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.ordered.OrderedDiGraph": {
  "lineno": 53,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "class"
 },
 "networkx.classes.ordered.OrderedGraph": {
  "lineno": 44,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiDiGraph": {
  "lineno": 72,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiGraph": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "class"
 },
 "networkx.classes.reportviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.reportviews.DegreeView": {
  "lineno": 401,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.DegreeView.__getitem__": {
  "lineno": 445,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DegreeView.__iter__": {
  "lineno": 454,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.DiDegreeView.__call__": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__getitem__": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__init__": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__iter__": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__len__": {
  "lineno": 391,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__repr__": {
  "lineno": 397,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__str__": {
  "lineno": 394,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiMultiDegreeView": {
  "lineno": 555,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.DiMultiDegreeView.__getitem__": {
  "lineno": 558,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.DiMultiDegreeView.__iter__": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView": {
  "lineno": 738,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.EdgeDataView.__contains__": {
  "lineno": 781,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView.__iter__": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView.__len__": {
  "lineno": 769,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView": {
  "lineno": 1037,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.EdgeView.__contains__": {
  "lineno": 1125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView.__iter__": {
  "lineno": 1116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView.__len__": {
  "lineno": 1112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InDegreeView": {
  "lineno": 492,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InDegreeView.__getitem__": {
  "lineno": 495,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InDegreeView.__iter__": {
  "lineno": 502,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeDataView": {
  "lineno": 792,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InEdgeDataView.__contains__": {
  "lineno": 804,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeDataView.__iter__": {
  "lineno": 797,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView": {
  "lineno": 1133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InEdgeView.__contains__": {
  "lineno": 1155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__getitem__": {
  "lineno": 1162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__init__": {
  "lineno": 1145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__iter__": {
  "lineno": 1150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__setstate__": {
  "lineno": 1138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiDegreeView": {
  "lineno": 600,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiDegreeView.__getitem__": {
  "lineno": 603,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiDegreeView.__iter__": {
  "lineno": 613,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView": {
  "lineno": 941,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView.__contains__": {
  "lineno": 954,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView.__iter__": {
  "lineno": 946,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView": {
  "lineno": 1235,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__contains__": {
  "lineno": 1258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__getitem__": {
  "lineno": 1272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__init__": {
  "lineno": 1247,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__iter__": {
  "lineno": 1252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__setstate__": {
  "lineno": 1240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiDegreeView": {
  "lineno": 515,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.MultiDegreeView.__getitem__": {
  "lineno": 518,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiDegreeView.__iter__": {
  "lineno": 533,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeDataView": {
  "lineno": 902,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.MultiEdgeDataView.__contains__": {
  "lineno": 917,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeDataView.__iter__": {
  "lineno": 907,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeView": {
  "lineno": 1214,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.MultiEdgeView.__iter__": {
  "lineno": 1224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeView.__len__": {
  "lineno": 1221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView": {
  "lineno": 215,
  "symbols_in_volume": [
   "collections.abc.Set"
  ],
  "type": "class"
 },
 "networkx.classes.reportviews.NodeDataView.__contains__": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__getitem__": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__getstate__": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__init__": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__iter__": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__len__": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__repr__": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__setstate__": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__str__": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView._from_iterable": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView": {
  "lineno": 114,
  "symbols_in_volume": [
   "collections.abc.Mapping",
   "collections.abc.Set"
  ],
  "type": "class"
 },
 "networkx.classes.reportviews.NodeView.__call__": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__contains__": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__getitem__": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__getstate__": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__init__": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__iter__": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__len__": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__repr__": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__setstate__": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__str__": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView._from_iterable": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.data": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutDegreeView": {
  "lineno": 469,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.OutDegreeView.__getitem__": {
  "lineno": 472,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutDegreeView.__iter__": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView": {
  "lineno": 663,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__contains__": {
  "lineno": 721,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__getstate__": {
  "lineno": 676,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__init__": {
  "lineno": 687,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__iter__": {
  "lineno": 714,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__len__": {
  "lineno": 711,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__repr__": {
  "lineno": 734,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__setstate__": {
  "lineno": 684,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__str__": {
  "lineno": 731,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView": {
  "lineno": 973,
  "symbols_in_volume": [
   "collections.abc.Mapping",
   "collections.abc.Set"
  ],
  "type": "class"
 },
 "networkx.classes.reportviews.OutEdgeView.__call__": {
  "lineno": 1019,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__contains__": {
  "lineno": 1006,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__getitem__": {
  "lineno": 1014,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__getstate__": {
  "lineno": 978,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__init__": {
  "lineno": 992,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__iter__": {
  "lineno": 1001,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__len__": {
  "lineno": 998,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__repr__": {
  "lineno": 1033,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__setstate__": {
  "lineno": 981,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__str__": {
  "lineno": 1030,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView._from_iterable": {
  "lineno": 986,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.data": {
  "lineno": 1024,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiDegreeView": {
  "lineno": 631,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiDegreeView.__getitem__": {
  "lineno": 634,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiDegreeView.__iter__": {
  "lineno": 644,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__contains__": {
  "lineno": 881,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__getstate__": {
  "lineno": 820,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__init__": {
  "lineno": 832,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__iter__": {
  "lineno": 873,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__len__": {
  "lineno": 870,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__setstate__": {
  "lineno": 829,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView": {
  "lineno": 1167,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__call__": {
  "lineno": 1203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__contains__": {
  "lineno": 1185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__getitem__": {
  "lineno": 1199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__iter__": {
  "lineno": 1179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__len__": {
  "lineno": 1174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.data": {
  "lineno": 1208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.historical_tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.setup_class": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.complete_graph",
   "networkx.convert_node_labels_to_integers",
   "networkx.null_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge": {
  "lineno": 152,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph": {
  "lineno": 441,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_contains": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_copy": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree2": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph": {
  "lineno": 297,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch": {
  "lineno": 248,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph": {
  "lineno": 431,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_iterators": {
  "lineno": 399,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_name": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors": {
  "lineno": 389,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_issue": {
  "lineno": 469,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null": {
  "lineno": 309,
  "symbols_in_volume": [
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph": {
  "lineno": 424,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_order_size": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge": {
  "lineno": 223,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph": {
  "lineno": 330,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch": {
  "lineno": 449,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_isomorphic",
   "networkx.null_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.setup": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_copy": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_getitem": {
  "lineno": 82,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_items": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_iter": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_len": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_pickle": {
  "lineno": 70,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_repr": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_str": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.setup": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.classes.coreviews.AtlasView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_copy": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_getitem": {
  "lineno": 28,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_items": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_iter": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_len": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_pickle": {
  "lineno": 13,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_repr": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_str": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.setup": {
  "lineno": 316,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_copy": {
  "lineno": 346,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_hide_show_nodes": {
  "lineno": 320,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_str_repr": {
  "lineno": 332,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.setup": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.classes.coreviews.MultiAdjacencyView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_copy": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_getitem": {
  "lineno": 123,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.setup": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.classes.coreviews.UnionAdjacency"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_copy": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_getitem": {
  "lineno": 220,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_iter": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_len": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_pickle": {
  "lineno": 208,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_repr": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_str": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.setup": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.classes.coreviews.UnionAtlas"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_copy": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_getitem": {
  "lineno": 162,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_items": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_iter": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_len": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_pickle": {
  "lineno": 150,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_repr": {
  "lineno": 194,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_str": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.setup": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.classes.coreviews.UnionMultiAdjacency"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_copy": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_getitem": {
  "lineno": 294,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.setup": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.classes.coreviews.UnionMultiInner"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_copy": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_getitem": {
  "lineno": 261,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_len": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_edges_data": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_in_degree_weighted": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_out_degree_weighted": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_data": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_data": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_hashable": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_hashable.Foo": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.setup_method": {
  "lineno": 178,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from": {
  "lineno": 222,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_clear": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_clear_edges": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_data_input": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge": {
  "lineno": 236,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from": {
  "lineno": 244,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph.setup_method": {
  "lineno": 276,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph.test_pred_succ": {
  "lineno": 289,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setup_class": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_diedges": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.classes.filters.hide_diedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_edges": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.classes.filters.hide_edges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multidiedges": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.classes.filters.hide_multidiedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multiedges": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.classes.filters.hide_multiedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_nodes": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.classes.filters.hide_nodes",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_no_filter": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.filters.no_filter"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_diedges": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.classes.filters.show_diedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_edges": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.classes.filters.show_edges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_multidiedges": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.classes.filters.show_multidiedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_multiedges": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.classes.filters.show_multiedges",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_nodes": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.classes.filters.show_nodes",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors": {
  "lineno": 460,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setup_class": {
  "lineno": 461,
  "symbols_in_volume": [
   "networkx.common_neighbors"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setup_class.test_func": {
  "lineno": 465,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_K5": {
  "lineno": 471,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_P3": {
  "lineno": 475,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_S4": {
  "lineno": 479,
  "symbols_in_volume": [
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom1": {
  "lineno": 495,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom2": {
  "lineno": 501,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_digraph": {
  "lineno": 483,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_nonexistent_nodes": {
  "lineno": 489,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.common_neighbors",
   "networkx.complete_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestFunction.setup_method": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_cycle": {
  "lineno": 145,
  "symbols_in_volume": [
   "networkx.add_cycle",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_path": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.add_path",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_star": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.add_star",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_create_empty_copy": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.create_empty_copy",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.degree",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree_histogram": {
  "lineno": 230,
  "symbols_in_volume": [
   "networkx.degree_histogram"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.density"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density_selfloop": {
  "lineno": 240,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.density"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edge_subgraph": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.edge_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edges": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.edges",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_freeze": {
  "lineno": 247,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.freeze",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.info",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info_digraph": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.info",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_directed": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.is_directed"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_frozen": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.freeze",
   "networkx.is_frozen"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_negatively_weighted": {
  "lineno": 422,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.is_negatively_weighted",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_weighted": {
  "lineno": 389,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.is_weighted",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_neighbors": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.neighbors"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_neighbors_complete_graph": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.neighbors",
   "networkx.path_graph",
   "networkx.star_graph",
   "random.sample"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_nodes": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.nodes",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_edges": {
  "lineno": 363,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.non_edges",
   "networkx.path_graph",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_neighbors": {
  "lineno": 336,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.complete_graph",
   "networkx.non_neighbors",
   "networkx.path_graph",
   "networkx.star_graph",
   "random.sample"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_edges": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.number_of_edges"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_nodes": {
  "lineno": 53,
  "symbols_in_volume": [
   "networkx.number_of_nodes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_restricted_view": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.restricted_view"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_subgraph": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.induced_subgraph",
   "networkx.subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_get_edge_attributes": {
  "lineno": 614,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.get_edge_attributes",
   "networkx.path_graph",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_get_node_attributes": {
  "lineno": 601,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.get_node_attributes",
   "networkx.path_graph",
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_is_empty": {
  "lineno": 640,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.is_empty"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_ispath": {
  "lineno": 710,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.is_path"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_pathweight": {
  "lineno": 694,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNoPath",
   "networkx.path_weight",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_selfloops": {
  "lineno": 650,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.nodes_with_selfloops",
   "networkx.number_of_selfloops",
   "networkx.selfloop_edges",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes": {
  "lineno": 539,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.path_graph",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes_multi": {
  "lineno": 570,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_node_attributes": {
  "lineno": 507,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr": {
  "lineno": 255,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict": {
  "lineno": 297,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal": {
  "lineno": 310,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_class_copy": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr": {
  "lineno": 365,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2": {
  "lineno": 371,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3": {
  "lineno": 379,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4": {
  "lineno": 396,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_lookup": {
  "lineno": 360,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_fresh_copy": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr": {
  "lineno": 330,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_chain": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr": {
  "lineno": 339,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2": {
  "lineno": 351,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr": {
  "lineno": 458,
  "symbols_in_volume": [
   "networkx.selfloop_edges",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph": {
  "lineno": 444,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed": {
  "lineno": 435,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected": {
  "lineno": 426,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree": {
  "lineno": 159,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_contains": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_degree": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_edges": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.testing.utils.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_node": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak": {
  "lineno": 54,
  "symbols_in_volume": [
   "gc.collect"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak.MyGraph": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak.count_objects_of_type": {
  "lineno": 57,
  "symbols_in_volume": [
   "gc.get_objects"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.testing.utils.assert_nodes_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter_node_format_raise": {
  "lineno": 120,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nodes": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_order": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.nodes_with_selfloops",
   "networkx.number_of_selfloops",
   "networkx.selfloop_edges",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_size": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph": {
  "lineno": 732,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.setup_method": {
  "lineno": 735,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_add_node": {
  "lineno": 756,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_edges": {
  "lineno": 752,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_nodes": {
  "lineno": 748,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_edge_attr_dict": {
  "lineno": 785,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_graph_attr_dict": {
  "lineno": 798,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_node_attr_dict": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_remove_node": {
  "lineno": 764,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph": {
  "lineno": 470,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph.TestGraph.setup_method": {
  "lineno": 473,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edge": {
  "lineno": 580,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edges_from": {
  "lineno": 588,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_node": {
  "lineno": 518,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from": {
  "lineno": 537,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_adjacency": {
  "lineno": 502,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_clear": {
  "lineno": 624,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_clear_edges": {
  "lineno": 632,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_data_input": {
  "lineno": 494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_edges_data": {
  "lineno": 642,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.testing.utils.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_get_edge_data": {
  "lineno": 651,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_getitem": {
  "lineno": 510,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_pickle": {
  "lineno": 487,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edge": {
  "lineno": 611,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from": {
  "lineno": 618,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_node": {
  "lineno": 565,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_update": {
  "lineno": 659,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.testing.utils.assert_graphs_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graph_historical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical.setup_class": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.setup_class": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.to_directed",
   "networkx.to_undirected"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_disubgraph": {
  "lineno": 297,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multidisubgraph": {
  "lineno": 305,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multisubgraph": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_of_view": {
  "lineno": 321,
  "symbols_in_volume": [
   "networkx.OrderedMultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_subgraph": {
  "lineno": 289,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_pickle": {
  "lineno": 194,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_restricted_induced_subgraph_chains": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.induced_subgraph",
   "networkx.restricted_view",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_reverse_copy": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_subgraph_toundirected": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass": {
  "lineno": 327,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph": {
  "lineno": 328,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph.my_method": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph.to_directed_class": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_copy": {
  "lineno": 245,
  "symbols_in_volume": [
   "networkx.OrderedGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_edgesubgraph_toundirected": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_of_subgraph": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.induced_subgraph",
   "networkx.subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_todirected": {
  "lineno": 252,
  "symbols_in_volume": [
   "networkx.induced_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_toundirected": {
  "lineno": 258,
  "symbols_in_volume": [
   "networkx.induced_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.setup": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.reverse_view"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_contains": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_exceptions": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.graphviews",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_iter": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_pickle": {
  "lineno": 62,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.setup": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph",
   "networkx.reverse_view"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_contains": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_exceptions": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.graphviews",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_iter": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_pickle": {
  "lineno": 14,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.reverse_view"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph.my_method": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph.to_directed_class": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.setup": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.to_directed"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_already_directed": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal",
   "networkx.to_directed"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_contains": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_directed": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_iter": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_pickle": {
  "lineno": 106,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.setup": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.to_undirected"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_already_directed": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal",
   "networkx.to_undirected"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_contains": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_directed": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_iter": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_pickle": {
  "lineno": 145,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_multi": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_data": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_no_keys": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_data": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_multi": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy": {
  "lineno": 235,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors": {
  "lineno": 170,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestEdgeSubgraph": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.TestEdgeSubgraph.setup_method": {
  "lineno": 381,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setup_method": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from": {
  "lineno": 276,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge": {
  "lineno": 312,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge": {
  "lineno": 328,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.graphs_equal": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_lookup": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_number_of_edges_selfloops": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed": {
  "lineno": 100,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph": {
  "lineno": 297,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.setup_method": {
  "lineno": 300,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_add_node": {
  "lineno": 328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_edges": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_nodes": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_edge_attr_dict": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_graph_attr_dict": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_node_attr_dict": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_remove_node": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.setup_method": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from": {
  "lineno": 218,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem": {
  "lineno": 185,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge": {
  "lineno": 281,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_ordered.TestOrdered": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_digraph": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.OrderedDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_graph": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.OrderedGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_multidigraph": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.OrderedMultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_multigraph": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.OrderedMultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures.setup_class": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.OrderedDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures.test_subgraph_order": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.induced_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView": {
  "lineno": 985,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.reportviews.DegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.setup_class": {
  "lineno": 989,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_getitem": {
  "lineno": 1040,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_iter": {
  "lineno": 1014,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_len": {
  "lineno": 1066,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_nbunch": {
  "lineno": 1033,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_pickle": {
  "lineno": 995,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_repr": {
  "lineno": 1009,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_str": {
  "lineno": 1002,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_weight": {
  "lineno": 1052,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDiDegreeView": {
  "lineno": 1071,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reportviews.DiDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDiDegreeView.test_repr": {
  "lineno": 1075,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDiMultiDegreeView": {
  "lineno": 1231,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.reportviews.DiMultiDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDiMultiDegreeView.test_repr": {
  "lineno": 1235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.modify_edge": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.setup_class": {
  "lineno": 263,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.reportviews.EdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains_with_nbunch": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iter": {
  "lineno": 327,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iterdata": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_len": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_pickle": {
  "lineno": 268,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_repr": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_str": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView": {
  "lineno": 552,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.modify_edge": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.setup_class": {
  "lineno": 553,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.reportviews.EdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_and": {
  "lineno": 645,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_call": {
  "lineno": 582,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_contains": {
  "lineno": 605,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_contains_with_nbunch": {
  "lineno": 622,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_data": {
  "lineno": 589,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_iter": {
  "lineno": 596,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_len": {
  "lineno": 634,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_or": {
  "lineno": 657,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_pickle": {
  "lineno": 558,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_repr": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_str": {
  "lineno": 569,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_sub": {
  "lineno": 682,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_xor": {
  "lineno": 668,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView": {
  "lineno": 1131,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reportviews.InDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_getitem": {
  "lineno": 1154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_nbunch": {
  "lineno": 1147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_repr": {
  "lineno": 1142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_str": {
  "lineno": 1135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_weight": {
  "lineno": 1166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView": {
  "lineno": 429,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.setup_class": {
  "lineno": 430,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph",
   "networkx.reportviews.InEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_contains_with_nbunch": {
  "lineno": 445,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_repr": {
  "lineno": 435,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView": {
  "lineno": 718,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.setup_class": {
  "lineno": 719,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph",
   "networkx.reportviews.InEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.test_contains_with_nbunch": {
  "lineno": 732,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.test_repr": {
  "lineno": 724,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView": {
  "lineno": 1291,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.reportviews.InMultiDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_getitem": {
  "lineno": 1314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_nbunch": {
  "lineno": 1307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_repr": {
  "lineno": 1302,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_str": {
  "lineno": 1295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_weight": {
  "lineno": 1326,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView": {
  "lineno": 522,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.setup_class": {
  "lineno": 523,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.reportviews.InMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_contains_with_nbunch": {
  "lineno": 538,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_repr": {
  "lineno": 528,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView": {
  "lineno": 951,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.modify_edge": {
  "lineno": 958,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.setup_class": {
  "lineno": 952,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.reportviews.InMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_contains_with_nbunch": {
  "lineno": 971,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_repr": {
  "lineno": 963,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView": {
  "lineno": 1181,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.reportviews.MultiDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_getitem": {
  "lineno": 1204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_nbunch": {
  "lineno": 1197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_repr": {
  "lineno": 1192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_str": {
  "lineno": 1185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_weight": {
  "lineno": 1216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.modify_edge": {
  "lineno": 464,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.setup_class": {
  "lineno": 459,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.reportviews.MultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_contains_with_nbunch": {
  "lineno": 477,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_repr": {
  "lineno": 467,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView": {
  "lineno": 745,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.modify_edge": {
  "lineno": 752,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.setup_class": {
  "lineno": 746,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.path_graph",
   "networkx.reportviews.MultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_and": {
  "lineno": 894,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_call": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_contains_with_nbunch": {
  "lineno": 905,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_data": {
  "lineno": 780,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iter": {
  "lineno": 788,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iterkeys": {
  "lineno": 797,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_or": {
  "lineno": 859,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_repr": {
  "lineno": 764,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_str": {
  "lineno": 757,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_sub": {
  "lineno": 869,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_xor": {
  "lineno": 879,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.setup_class": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.classes.reportviews.NodeDataView",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_contains": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_getitem": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_iter": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_pickle": {
  "lineno": 82,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_repr": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_str": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_viewtype": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.n_its": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.setup_class": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.n_its": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.setup_class": {
  "lineno": 240,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.setup_class": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_call": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_contains": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_getitem": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_iter": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_pickle": {
  "lineno": 14,
  "symbols_in_volume": [
   "pickle.dumps",
   "pickle.loads"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_repr": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_str": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.n_its": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.setup_class": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_and": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_len": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_or": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_sub": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_xor": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView": {
  "lineno": 1081,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.reportviews.OutDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_getitem": {
  "lineno": 1104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_nbunch": {
  "lineno": 1097,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_repr": {
  "lineno": 1092,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_str": {
  "lineno": 1085,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_weight": {
  "lineno": 1116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView": {
  "lineno": 383,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.setup_class": {
  "lineno": 384,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph",
   "networkx.reportviews.OutEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_contains_with_nbunch": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_len": {
  "lineno": 399,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_repr": {
  "lineno": 389,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView": {
  "lineno": 691,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.setup_class": {
  "lineno": 692,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.path_graph",
   "networkx.reportviews.OutEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.test_contains_with_nbunch": {
  "lineno": 705,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.test_repr": {
  "lineno": 697,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView": {
  "lineno": 1241,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.reportviews.OutMultiDegreeView"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_getitem": {
  "lineno": 1264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_nbunch": {
  "lineno": 1257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_repr": {
  "lineno": 1252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_str": {
  "lineno": 1245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_weight": {
  "lineno": 1276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView": {
  "lineno": 490,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.modify_edge": {
  "lineno": 496,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.setup_class": {
  "lineno": 491,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.reportviews.OutMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_contains_with_nbunch": {
  "lineno": 509,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_repr": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView": {
  "lineno": 918,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.modify_edge": {
  "lineno": 925,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.setup_class": {
  "lineno": 919,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.path_graph",
   "networkx.reportviews.OutMultiEdgeView"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_contains_with_nbunch": {
  "lineno": 938,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_repr": {
  "lineno": 930,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.test_nodedataview_unhashable": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph.setup_method": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph.setup_method.MyGraph": {
  "lineno": 104,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "networkx.DiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph.setup_method": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph.setup_method.MyGraph": {
  "lineno": 63,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "networkx.Graph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph.setup_method": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph.setup_method.MyGraph": {
  "lineno": 177,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "networkx.MultiDiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph.setup_method": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph.setup_method.MyGraph": {
  "lineno": 157,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "networkx.MultiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialDiGraph": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialDiGraph.setup_method": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialGraph": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialGraph.setup_method": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiDiGraph": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiDiGraph.setup_method": {
  "lineno": 168,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiGraph": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiGraph.setup_method": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method.MyGraph": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method.MyGraph.edge_attr_dict_factory": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinGraph": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method.MyGraph": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method.MyGraph.edge_attr_dict_factory": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_special.test_factories": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_special.test_factories.MyGraph": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict1": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict2": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict3": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict4": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict5": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.setup_class": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.edge_subgraph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_add_node": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_edges": {
  "lineno": 291,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_nodes": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_edge_attr_dict": {
  "lineno": 326,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_graph_attr_dict": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_node_attr_dict": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_readonly": {
  "lineno": 346,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_remove_node": {
  "lineno": 304,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.graphs_equal": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.same_attrdict": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.setup_class": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.complete_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_full_graph": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.induced_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_partial_subgraph": {
  "lineno": 230,
  "symbols_in_volume": [
   "networkx.induced_subgraph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.filters.hide_multidiedges",
   "networkx.filters.show_multidiedges",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView.test_inout_degree": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.filters.hide_multiedges",
   "networkx.filters.show_multiedges",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.setup_class": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_hidden_edges": {
  "lineno": 148,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_shown_edges": {
  "lineno": 169,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.filters.hide_diedges",
   "networkx.filters.show_diedges",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inout_degree": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inoutedges": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_pred": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.filters.hide_edges",
   "networkx.filters.show_edges",
   "networkx.graphviews.subgraph_view"
  ],
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_edges": {
  "lineno": 37,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_nodes": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.filters.hide_nodes",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_edges": {
  "lineno": 74,
  "symbols_in_volume": [
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_node": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.filters.show_nodes",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.conftest": {
  "lineno": null,
  "symbols_in_volume": [
   "sys.platform.startswith"
  ],
  "type": "module"
 },
 "networkx.conftest.add_nx": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx",
   "pytest.fixture"
  ],
  "type": "function"
 },
 "networkx.conftest.pytest_addoption": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.conftest.pytest_collection_modifyitems": {
  "lineno": 17,
  "symbols_in_volume": [
   "pytest.mark.skip"
  ],
  "type": "function"
 },
 "networkx.conftest.pytest_configure": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.conftest.set_warnings": {
  "lineno": 28,
  "symbols_in_volume": [
   "pytest.fixture",
   "warnings.filterwarnings"
  ],
  "type": "function"
 },
 "networkx.convert": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.convert.from_dict_of_dicts": {
  "lineno": 281,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.convert.from_dict_of_lists": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.convert.from_edgelist": {
  "lineno": 383,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.convert.to_dict_of_dicts": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert.to_dict_of_lists": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert.to_edgelist": {
  "lineno": 366,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert.to_networkx_graph": {
  "lineno": 33,
  "symbols_in_volume": [
   "collections.abc.Collection",
   "collections.abc.Generator",
   "collections.abc.Iterator",
   "networkx.NetworkXError",
   "networkx.from_numpy_matrix",
   "networkx.from_pandas_adjacency",
   "networkx.from_pandas_edgelist",
   "networkx.from_scipy_sparse_matrix",
   "networkx.nx_agraph.from_agraph",
   "numpy.matrix",
   "numpy.ndarray",
   "pandas.DataFrame",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.convert_matrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.convert_matrix._coo_gen_triples": {
  "lineno": 954,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix._csc_gen_triples": {
  "lineno": 942,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix._csr_gen_triples": {
  "lineno": 930,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix._dok_gen_triples": {
  "lineno": 963,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix._generate_weighted_edges": {
  "lineno": 972,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix.from_numpy_array": {
  "lineno": 1272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.convert_matrix.from_numpy_matrix": {
  "lineno": 557,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "numpy.asarray"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.from_pandas_adjacency": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.relabel.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.from_pandas_edgelist": {
  "lineno": 279,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.from_scipy_sparse_matrix": {
  "lineno": 989,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_array": {
  "lineno": 1093,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "numpy.asarray",
   "numpy.full",
   "numpy.isnan",
   "numpy.nan",
   "numpy.nanmax",
   "numpy.nanmin",
   "numpy.nansum"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_matrix": {
  "lineno": 442,
  "symbols_in_volume": [
   "numpy.asmatrix"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_recarray": {
  "lineno": 719,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.not_implemented_for",
   "numpy.recarray",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_pandas_adjacency": {
  "lineno": 44,
  "symbols_in_volume": [
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_pandas_edgelist": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pandas.DataFrame"
  ],
  "type": "function"
 },
 "networkx.convert_matrix.to_scipy_sparse_matrix": {
  "lineno": 793,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.selfloop_edges",
   "scipy.sparse.coo_matrix"
  ],
  "type": "function"
 },
 "networkx.drawing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.layout": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.layout._fruchterman_reingold": {
  "lineno": 512,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.random_state",
   "numpy.asarray",
   "numpy.clip",
   "numpy.einsum",
   "numpy.linalg.norm",
   "numpy.newaxis",
   "numpy.sqrt",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._kamada_kawai_costfn": {
  "lineno": 752,
  "symbols_in_volume": [
   "numpy.diag_indices",
   "numpy.einsum",
   "numpy.eye",
   "numpy.linalg.norm",
   "numpy.newaxis",
   "numpy.sum"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._kamada_kawai_solve": {
  "lineno": 730,
  "symbols_in_volume": [
   "numpy",
   "numpy.eye",
   "scipy.optimize.minimize"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._process_params": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.Graph",
   "numpy.asarray",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._sparse_fruchterman_reingold": {
  "lineno": 575,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.random_state",
   "numpy.asarray",
   "numpy.linalg.norm",
   "numpy.sqrt",
   "numpy.where",
   "numpy.zeros",
   "scipy.sparse.coo_matrix"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._sparse_spectral": {
  "lineno": 877,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "numpy.argsort",
   "numpy.asarray",
   "numpy.real",
   "numpy.sqrt",
   "scipy.sparse.linalg.eigen.eigsh",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.drawing.layout._spectral": {
  "lineno": 856,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "numpy.argsort",
   "numpy.identity",
   "numpy.linalg.eig",
   "numpy.real",
   "numpy.sum"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.bipartite_layout": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.column_stack",
   "numpy.concatenate",
   "numpy.linspace",
   "numpy.repeat"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.circular_layout": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element",
   "numpy.column_stack",
   "numpy.cos",
   "numpy.float32",
   "numpy.linspace",
   "numpy.pi",
   "numpy.sin",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.fruchterman_reingold_layout": {
  "lineno": 357,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.arbitrary_element",
   "networkx.utils.random_state",
   "numpy.asarray",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.kamada_kawai_layout": {
  "lineno": 653,
  "symbols_in_volume": [
   "networkx.shortest_path_length",
   "numpy.array",
   "numpy.linspace",
   "numpy.ones"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.multipartite_layout": {
  "lineno": 1042,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.column_stack",
   "numpy.concatenate",
   "numpy.repeat"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.planar_layout": {
  "lineno": 905,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.PlanarEmbedding",
   "networkx.check_planarity",
   "networkx.combinatorial_embedding_to_pos",
   "numpy.float64",
   "numpy.row_stack"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.random_layout": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.utils.random_state",
   "numpy.float32"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.rescale_layout": {
  "lineno": 1136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.layout.rescale_layout_dict": {
  "lineno": 1177,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.shell_layout": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element",
   "numpy.column_stack",
   "numpy.cos",
   "numpy.float32",
   "numpy.linspace",
   "numpy.pi",
   "numpy.sin"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.spectral_layout": {
  "lineno": 777,
  "symbols_in_volume": [
   "networkx.to_numpy_array",
   "networkx.to_scipy_sparse_matrix",
   "numpy.array",
   "numpy.transpose",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.drawing.layout.spiral_layout": {
  "lineno": 962,
  "symbols_in_volume": [
   "networkx.utils.arbitrary_element",
   "numpy.array",
   "numpy.cos",
   "numpy.hypot",
   "numpy.sin"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.nx_agraph.display_pygraphviz": {
  "lineno": 440,
  "symbols_in_volume": [
   "networkx.utils.default_opener",
   "os.path.splitext",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.from_agraph": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.graphviz_layout": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.pygraphviz_layout": {
  "lineno": 240,
  "symbols_in_volume": [
   "pygraphviz.Node"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.read_dot": {
  "lineno": 189,
  "symbols_in_volume": [
   "pygraphviz.AGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.to_agraph": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.number_of_selfloops",
   "pygraphviz.AGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz": {
  "lineno": 298,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.utils.default_opener",
   "networkx.utils.open_file",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.clean_attrs": {
  "lineno": 377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.func": {
  "lineno": 401,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.update_attrs": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_agraph.write_dot": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_pydot": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.nx_pydot.from_pydot": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pydot.graphviz_layout": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.nx_pydot.pydot_layout": {
  "lineno": 260,
  "symbols_in_volume": [
   "locale.getpreferredencoding",
   "pydot.Node",
   "pydot.graph_from_dot_data"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pydot.read_dot": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "pydot.graph_from_dot_data"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pydot.to_pydot": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.number_of_selfloops",
   "pydot.Dot",
   "pydot.Edge",
   "pydot.Node"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pydot.write_dot": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.nx_pylab.apply_alpha": {
  "lineno": 1204,
  "symbols_in_volume": [
   "itertools.cycle",
   "itertools.islice",
   "matplotlib.cm.ScalarMappable",
   "matplotlib.colors.colorConverter.to_rgba",
   "numbers.Number",
   "numpy.array",
   "numpy.resize"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw": {
  "lineno": 45,
  "symbols_in_volume": [
   "matplotlib.pyplot.draw_if_interactive",
   "matplotlib.pyplot.gcf"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_circular": {
  "lineno": 1084,
  "symbols_in_volume": [
   "networkx.drawing.layout.circular_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_kamada_kawai": {
  "lineno": 1100,
  "symbols_in_volume": [
   "networkx.drawing.layout.kamada_kawai_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx": {
  "lineno": 129,
  "symbols_in_volume": [
   "matplotlib.pyplot.draw_if_interactive",
   "networkx.drawing.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edge_labels": {
  "lineno": 919,
  "symbols_in_volume": [
   "matplotlib.pyplot.gca",
   "numpy.arctan2",
   "numpy.array",
   "numpy.pi"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edges": {
  "lineno": 493,
  "symbols_in_volume": [
   "matplotlib.collections.LineCollection",
   "matplotlib.colors.Colormap",
   "matplotlib.colors.Normalize",
   "matplotlib.colors.colorConverter.to_rgba_array",
   "matplotlib.patches.FancyArrowPatch",
   "matplotlib.pyplot.gca",
   "matplotlib.pyplot.get_cmap",
   "numbers.Number",
   "numpy.alltrue",
   "numpy.amax",
   "numpy.amin",
   "numpy.asarray",
   "numpy.iterable",
   "numpy.ravel"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edges.to_marker_edge": {
  "lineno": 703,
  "symbols_in_volume": [
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_labels": {
  "lineno": 795,
  "symbols_in_volume": [
   "matplotlib.pyplot.gca"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_nodes": {
  "lineno": 342,
  "symbols_in_volume": [
   "collections.abc.Iterable",
   "matplotlib.collections.PathCollection",
   "matplotlib.pyplot.gca",
   "networkx.NetworkXError",
   "numpy.asarray"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_planar": {
  "lineno": 1188,
  "symbols_in_volume": [
   "networkx.drawing.layout.planar_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_random": {
  "lineno": 1116,
  "symbols_in_volume": [
   "networkx.drawing.layout.random_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_shell": {
  "lineno": 1169,
  "symbols_in_volume": [
   "networkx.drawing.layout.shell_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spectral": {
  "lineno": 1132,
  "symbols_in_volume": [
   "networkx.drawing.layout.spectral_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spring": {
  "lineno": 1153,
  "symbols_in_volume": [
   "networkx.drawing.layout.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.drawing.tests.test_agraph": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.drawing.nx_agraph.write_dot",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.read_dot",
   "networkx.nx_agraph.to_agraph",
   "os.unlink",
   "tempfile.mkstemp",
   "tempfile.mktemp"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.assert_equal": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.build_graph": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_2d_layout": {
  "lineno": 224,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.pygraphviz_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_3d_layout": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.pygraphviz_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_directed": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_display_pygraphviz_deprecation_warning": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.display_pygraphviz",
   "networkx.nx_agraph.view_pygraphviz",
   "networkx.utils.default_opener",
   "pytest.warns"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_create_using": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.to_agraph",
   "networkx.path_graph",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_name": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.to_agraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_named_edges": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.to_agraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_AGraph_attrs": {
  "lineno": 175,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_reserved_keywords": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.to_agraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graphviz_alias": {
  "lineno": 205,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.graphviz_layout",
   "networkx.nx_agraph.pygraphviz_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_multi_directed": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_multi_undirected": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_pygraphviz_layout_root": {
  "lineno": 211,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.pygraphviz_layout",
   "networkx.nx_agraph.to_agraph",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_empty_graph": {
  "lineno": 185,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.to_agraph",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_integer_nodes": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.from_agraph",
   "networkx.nx_agraph.to_agraph",
   "networkx.testing.assert_graphs_equal",
   "pytest.mark.xfail"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_edgedata": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.nx_agraph.to_agraph",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_nodedata": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.to_agraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_undirected": {
  "lineno": 75,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.barbell_graph",
   "networkx.nx_agraph.view_pygraphviz",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_callable_edgelabel": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_callable_edgelabel.foo_label": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_edgelabel": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_file_suffix": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_leaves_input_graph_unmodified": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz",
   "pytest.mark.xfail"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_multigraph_edgelabels": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_no_added_attrs_to_input": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_path": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.nx_agraph.view_pygraphviz"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.drawing.tests.test_layout.TestLayout": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.drawing.tests.test_layout.TestLayout.check_kamada_kawai_costfn": {
  "lineno": 322,
  "symbols_in_volume": [
   "networkx.drawing.layout._kamada_kawai_costfn",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.check_scale_and_center": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.collect_node_distances": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.drawing.layout._fruchterman_reingold",
   "networkx.drawing.layout._sparse_fruchterman_reingold",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.drawing.layout._sparse_fruchterman_reingold",
   "networkx.drawing.layout._sparse_spectral",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_bipartite_layout": {
  "lineno": 258,
  "symbols_in_volume": [
   "networkx.bipartite.sets",
   "networkx.bipartite_layout",
   "networkx.complete_bipartite_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_center_parameter": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout",
   "networkx.path_graph",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_center_wrong_dimensions": {
  "lineno": 219,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout",
   "networkx.kamada_kawai_layout",
   "networkx.path_graph",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_circular_planar_and_shell_dim_error": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.path_graph",
   "networkx.planar_layout",
   "networkx.shell_layout",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_default_scale_and_center": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.complete_graph",
   "networkx.kamada_kawai_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_empty_graph": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.bipartite_layout",
   "networkx.circular_layout",
   "networkx.empty_graph",
   "networkx.fruchterman_reingold_layout",
   "networkx.kamada_kawai_layout",
   "networkx.multipartite_layout",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_fixed_node_fruchterman_reingold": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.spring_layout",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn": {
  "lineno": 353,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn_1d": {
  "lineno": 310,
  "symbols_in_volume": [
   "networkx.drawing.layout._kamada_kawai_costfn",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_multipartite_layout": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.complete_multipartite_graph",
   "networkx.multipartite_layout",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_planar_layout_non_planar_input": {
  "lineno": 123,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.complete_graph",
   "networkx.planar_layout",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_rescale_layout_dict": {
  "lineno": 390,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.random_layout",
   "networkx.rescale_layout_dict"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_scale_and_center_arg": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.complete_graph",
   "networkx.kamada_kawai_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_single_nodes": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.shell_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_empty_graph": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.bipartite_layout",
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout",
   "networkx.kamada_kawai_layout",
   "networkx.multipartite_layout",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_initial_pos_fruchterman_reingold": {
  "lineno": 186,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_int": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout",
   "networkx.kamada_kawai_layout",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_planar_layout_embedding_input": {
  "lineno": 127,
  "symbols_in_volume": [
   "networkx.PlanarEmbedding",
   "networkx.planar_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_string": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.fruchterman_reingold_layout",
   "networkx.kamada_kawai_layout",
   "networkx.planar_layout",
   "networkx.random_layout",
   "networkx.shell_layout",
   "networkx.spectral_layout",
   "networkx.spiral_layout",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spiral_layout": {
  "lineno": 367,
  "symbols_in_volume": [
   "networkx.spiral_layout",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spring_fixed_without_pos": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.spring_layout",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spring_init_pos": {
  "lineno": 37,
  "symbols_in_volume": [
   "math.isnan",
   "networkx.Graph",
   "networkx.fruchterman_reingold_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.drawing.tests.test_pydot.TestPydot": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.pydot_checks": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.nx_pydot.from_pydot",
   "networkx.nx_pydot.pydot_layout",
   "networkx.nx_pydot.read_dot",
   "networkx.nx_pydot.to_pydot",
   "networkx.testing.assert_graphs_equal",
   "tempfile.mktemp"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_directed": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_read_write": {
  "lineno": 86,
  "symbols_in_volume": [
   "io.StringIO",
   "networkx.MultiGraph",
   "networkx.nx_pydot.read_dot",
   "networkx.nx_pydot.write_dot",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_undirected": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.drawing.tests.test_pylab.TestPylab": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.setup_class": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.barbell_graph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_alpha_iter": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.draw_networkx_nodes",
   "networkx.random_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_arrows": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.draw_spring"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_axes": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.draw"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw": {
  "lineno": 19,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.draw_circular",
   "networkx.draw_kamada_kawai",
   "networkx.draw_planar",
   "networkx.draw_random",
   "networkx.draw_shell",
   "networkx.draw_spectral",
   "networkx.draw_spring",
   "os.unlink"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw_empty_nodes_return_values": {
  "lineno": 206,
  "symbols_in_volume": [
   "matplotlib.collections.LineCollection",
   "matplotlib.collections.PathCollection",
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.circular_layout",
   "networkx.draw_networkx_edges",
   "networkx.draw_networkx_nodes"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw_shell_nlist": {
  "lineno": 41,
  "symbols_in_volume": [
   "networkx.draw_shell",
   "os.unlink"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_edge_colormap": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.draw_spring"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_edge_colors_and_widths": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.circular_layout",
   "networkx.draw_networkx_edges",
   "networkx.draw_networkx_labels",
   "networkx.draw_networkx_nodes"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_empty_graph": {
  "lineno": 202,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.draw"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_error_invalid_kwds": {
  "lineno": 250,
  "symbols_in_volume": [
   "networkx.draw",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_labels_and_colors": {
  "lineno": 141,
  "symbols_in_volume": [
   "networkx.cubical_graph",
   "networkx.draw_networkx_edge_labels",
   "networkx.draw_networkx_edges",
   "networkx.draw_networkx_labels",
   "networkx.draw_networkx_nodes",
   "networkx.spring_layout"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_multigraph_edgelist_tuples": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.draw_networkx",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_np_edgelist": {
  "lineno": 254,
  "symbols_in_volume": [
   "networkx.draw_networkx",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.exception": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.exception.AmbiguousSolution": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.ExceededMaxIterations": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.HasACycle": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXAlgorithmError": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXError": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXException": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXNoCycle": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXNoPath": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXNotImplemented": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXPointlessConcept": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXUnbounded": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NetworkXUnfeasible": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.NodeNotFound": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.PowerIterationFailedConvergence": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.exception.PowerIterationFailedConvergence.__init__": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.atlas": {
  "lineno": null,
  "symbols_in_volume": [
   "os.path.abspath",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "module"
 },
 "networkx.generators.atlas._generate_graphs": {
  "lineno": 57,
  "symbols_in_volume": [
   "gzip.open",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.atlas.graph_atlas": {
  "lineno": 91,
  "symbols_in_volume": [
   "itertools.islice"
  ],
  "type": "function"
 },
 "networkx.generators.atlas.graph_atlas_g": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.classic._tree_edges": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.balanced_tree": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.barbell_graph": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.binomial_tree": {
  "lineno": 192,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.classic.circulant_graph": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.circular_ladder_graph": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.complete_graph": {
  "lineno": 220,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.utils.nodes_or_number"
  ],
  "type": "function"
 },
 "networkx.generators.classic.complete_multipartite_graph": {
  "lineno": 686,
  "symbols_in_volume": [
   "itertools.accumulate",
   "itertools.combinations",
   "itertools.product",
   "networkx.classes.Graph",
   "networkx.exception.NetworkXError",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.cycle_graph": {
  "lineno": 344,
  "symbols_in_volume": [
   "networkx.utils.nodes_or_number",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.dorogovtsev_goltsev_mendes_graph": {
  "lineno": 370,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.classic.empty_graph": {
  "lineno": 397,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.utils.nodes_or_number"
  ],
  "type": "function"
 },
 "networkx.generators.classic.full_rary_tree": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.ladder_graph": {
  "lineno": 490,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.lollipop_graph": {
  "lineno": 508,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.utils.nodes_or_number",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.null_graph": {
  "lineno": 559,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.path_graph": {
  "lineno": 569,
  "symbols_in_volume": [
   "networkx.utils.nodes_or_number",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.classic.star_graph": {
  "lineno": 588,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.utils.nodes_or_number"
  ],
  "type": "function"
 },
 "networkx.generators.classic.trivial_graph": {
  "lineno": 618,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.classic.turan_graph": {
  "lineno": 626,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.classic.wheel_graph": {
  "lineno": 659,
  "symbols_in_volume": [
   "networkx.utils.nodes_or_number",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.cographs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.cographs.random_cograph": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.disjoint_union",
   "networkx.empty_graph",
   "networkx.full_join",
   "networkx.relabel_nodes",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.community.LFR_benchmark_graph": {
  "lineno": 804,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.LFR_benchmark_graph.condition": {
  "lineno": 1036,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.community.LFR_benchmark_graph.length": {
  "lineno": 1039,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.community._generate_communities": {
  "lineno": 753,
  "symbols_in_volume": [
   "networkx.ExceededMaxIterations"
  ],
  "type": "function"
 },
 "networkx.generators.community._generate_min_degree": {
  "lineno": 729,
  "symbols_in_volume": [
   "networkx.ExceededMaxIterations",
   "scipy.special.zeta"
  ],
  "type": "function"
 },
 "networkx.generators.community._powerlaw_sequence": {
  "lineno": 697,
  "symbols_in_volume": [
   "networkx.ExceededMaxIterations"
  ],
  "type": "function"
 },
 "networkx.generators.community._zipf_rv_below": {
  "lineno": 685,
  "symbols_in_volume": [
   "networkx.utils.zipf_rv"
  ],
  "type": "function"
 },
 "networkx.generators.community.caveman_graph": {
  "lineno": 50,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.community.connected_caveman_graph": {
  "lineno": 96,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.caveman_graph"
  ],
  "type": "function"
 },
 "networkx.generators.community.gaussian_random_partition_graph": {
  "lineno": 333,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.planted_partition_graph": {
  "lineno": 278,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.random_partition_graph": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.relaxed_caveman_graph": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.caveman_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.ring_of_cliques": {
  "lineno": 409,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.community.stochastic_block_model": {
  "lineno": 516,
  "symbols_in_volume": [
   "itertools.chain",
   "itertools.combinations",
   "itertools.combinations_with_replacement",
   "itertools.islice",
   "itertools.permutations",
   "itertools.product",
   "math.floor",
   "math.log",
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXException",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.community.windmill_graph": {
  "lineno": 464,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.disjoint_union_all"
  ],
  "type": "function"
 },
 "networkx.generators.community.zeta": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq": {
  "lineno": null,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "module"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph": {
  "lineno": 752,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__": {
  "lineno": 755,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate": {
  "lineno": 767,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.p": {
  "lineno": 802,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1": {
  "lineno": 820,
  "symbols_in_volume": [
   "networkx.utils.random_weighted_sample"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2": {
  "lineno": 831,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3": {
  "lineno": 846,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.NetworkXUnfeasible"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.q": {
  "lineno": 806,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge": {
  "lineno": 811,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining": {
  "lineno": 784,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq._configuration_model": {
  "lineno": 59,
  "symbols_in_volume": [
   "itertools.zip_longest",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq._to_stublist": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.degree_seq.configuration_model": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.NetworkXNotImplemented",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.degree_sequence_tree": {
  "lineno": 644,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_configuration_model": {
  "lineno": 230,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_havel_hakimi_graph": {
  "lineno": 533,
  "symbols_in_volume": [
   "heapq.heapify",
   "heapq.heappop",
   "heapq.heappush",
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.make_list_of_ints"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.expected_degree_graph": {
  "lineno": 332,
  "symbols_in_volume": [
   "math.floor",
   "math.log",
   "networkx.empty_graph",
   "networkx.utils.py_random_state",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.havel_hakimi_graph": {
  "lineno": 441,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.is_graphical"
  ],
  "type": "function"
 },
 "networkx.generators.degree_seq.random_degree_sequence_graph": {
  "lineno": 689,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.NetworkXUnfeasible",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.directed.gn_graph": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.generators.classic.empty_graph",
   "networkx.utils.discrete_sequence",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed.gn_graph.kernel": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.directed.gnc_graph": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.generators.classic.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed.gnr_graph": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.generators.classic.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed.random_k_out_graph": {
  "lineno": 379,
  "symbols_in_volume": [
   "collections.Counter",
   "networkx.MultiDiGraph",
   "networkx.empty_graph",
   "networkx.utils.py_random_state",
   "networkx.utils.weighted_choice"
  ],
  "type": "function"
 },
 "networkx.generators.directed.random_uniform_k_out_graph": {
  "lineno": 299,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed.random_uniform_k_out_graph.sample": {
  "lineno": 367,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.directed.scale_free_graph": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.directed.scale_free_graph._choose_node": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.duplication": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.duplication.duplication_divergence_graph": {
  "lineno": 89,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.duplication.partial_duplication_graph": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.all_neighbors",
   "networkx.complete_graph",
   "networkx.exception.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.ego": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.ego.ego_graph": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.single_source_dijkstra",
   "networkx.single_source_shortest_path_length"
  ],
  "type": "function"
 },
 "networkx.generators.expanders": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.expanders.chordal_cycle_graph": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.expanders.margulis_gabber_galil_graph": {
  "lineno": 42,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.expanders.paley_graph": {
  "lineno": 147,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.geometric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.geometric._fast_edges": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.get_node_attributes",
   "scipy.spatial.cKDTree"
  ],
  "type": "function"
 },
 "networkx.generators.geometric._slow_edges": {
  "lineno": 53,
  "symbols_in_volume": [
   "itertools.combinations"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.euclidean": {
  "lineno": 29,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph": {
  "lineno": 306,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.set_node_attributes",
   "networkx.utils.nodes_or_number",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph.p_dist": {
  "lineno": 441,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph.should_join": {
  "lineno": 447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.geometric.navigable_small_world_graph": {
  "lineno": 581,
  "symbols_in_volume": [
   "bisect.bisect_left",
   "itertools.accumulate",
   "itertools.product",
   "networkx.DiGraph",
   "networkx.NetworkXException",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.random_geometric_graph": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.set_node_attributes",
   "networkx.utils.nodes_or_number",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph": {
  "lineno": 164,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.set_node_attributes",
   "networkx.utils.nodes_or_number",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph.p_dist": {
  "lineno": 281,
  "symbols_in_volume": [
   "math.exp"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph.should_join": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.geometric.thresholded_random_geometric_graph": {
  "lineno": 653,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.set_node_attributes",
   "networkx.utils.nodes_or_number",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.thresholded_random_geometric_graph.should_join": {
  "lineno": 776,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph": {
  "lineno": 457,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.set_node_attributes",
   "networkx.utils.nodes_or_number",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph.dist": {
  "lineno": 570,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph.should_join": {
  "lineno": 574,
  "symbols_in_volume": [
   "math.exp"
  ],
  "type": "function"
 },
 "networkx.generators.harary_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.harary_graph.hkn_harary_graph": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.exception.NetworkXError",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.harary_graph.hnm_harary_graph": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.__init__": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_cp_peering_link": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_customer": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_edge": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_m_peering_link": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_node": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_peering_links": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.choose_node_pref_attach": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.choose_peer_pref_attach": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.generate": {
  "lineno": 353,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.graph_regions": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.t_graph": {
  "lineno": 115,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.choose_pref_attach": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.random_internet_as_graph": {
  "lineno": 402,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.uniform_int_from_avg": {
  "lineno": 9,
  "symbols_in_volume": [
   "math.floor"
  ],
  "type": "function"
 },
 "networkx.generators.intersection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.intersection.general_random_intersection_graph": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.projected_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.intersection.k_random_intersection_graph": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.projected_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.intersection.uniform_random_intersection_graph": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.algorithms.bipartite.random_graph",
   "networkx.projected_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.interval_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.interval_graph.interval_graph": {
  "lineno": 10,
  "symbols_in_volume": [
   "collections.abc.Sequence",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.joint_degree_seq._directed_neighbor_switch": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq._directed_neighbor_switch_rev": {
  "lineno": 426,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq._neighbor_switch": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.directed_joint_degree_graph": {
  "lineno": 478,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree": {
  "lineno": 290,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.is_valid_joint_degree": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.joint_degree_graph": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.lattice": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.lattice.grid_2d_graph": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.generators.classic.empty_graph",
   "networkx.utils.iterable",
   "networkx.utils.nodes_or_number",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.lattice.grid_graph": {
  "lineno": 91,
  "symbols_in_volume": [
   "itertools.repeat",
   "networkx.algorithms.operators.product.cartesian_product",
   "networkx.generators.classic.cycle_graph",
   "networkx.generators.classic.empty_graph",
   "networkx.generators.classic.path_graph",
   "networkx.relabel.relabel_nodes",
   "networkx.utils.flatten",
   "networkx.utils.iterable"
  ],
  "type": "function"
 },
 "networkx.generators.lattice.hexagonal_lattice_graph": {
  "lineno": 269,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algorithms.minors.contracted_nodes",
   "networkx.classes.set_node_attributes",
   "networkx.exception.NetworkXError",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.lattice.hypercube_graph": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.lattice.triangular_lattice_graph": {
  "lineno": 171,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algorithms.minors.contracted_nodes",
   "networkx.classes.set_node_attributes",
   "networkx.exception.NetworkXError",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.line": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.line._edge_func": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.line._edge_func.get_edges": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.line._find_partition": {
  "lineno": 388,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.line._lg_directed": {
  "lineno": 159,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.line._lg_undirected": {
  "lineno": 189,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.line._node_func": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.line._node_func.sorted_node": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.line._odd_triangle": {
  "lineno": 345,
  "symbols_in_volume": [
   "collections.defaultdict",
   "itertools.combinations",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.line._select_starting_cell": {
  "lineno": 437,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.generators.line._sorted_edge": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.line._triangles": {
  "lineno": 331,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.line.inverse_line_graph": {
  "lineno": 241,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.utils.decorators.not_implemented_for",
   "networkx.utils.generate_unique_node"
  ],
  "type": "function"
 },
 "networkx.generators.line.line_graph": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.mycielski": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.mycielski.mycielski_graph": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.mycielski.mycielskian": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_graph": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_matrix": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_rooted_tree": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_tree": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._split_tree": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.nonisomorphic_trees": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.random_clustered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.random_clustered.random_clustered_graph": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.random_graphs._random_subset": {
  "lineno": 602,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.random_graphs.barabasi_albert_graph": {
  "lineno": 617,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.connected_watts_strogatz_graph": {
  "lineno": 437,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.dense_gnm_random_graph": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.dual_barabasi_albert_graph": {
  "lineno": 677,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.extended_barabasi_albert_graph": {
  "lineno": 765,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.fast_gnp_random_graph": {
  "lineno": 38,
  "symbols_in_volume": [
   "math.log",
   "networkx.DiGraph",
   "networkx.gnp_random_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.gnm_random_graph": {
  "lineno": 238,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.gnp_random_graph": {
  "lineno": 113,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.permutations",
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.newman_watts_strogatz_graph": {
  "lineno": 293,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.powerlaw_cluster_graph": {
  "lineno": 928,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_kernel_graph": {
  "lineno": 1216,
  "symbols_in_volume": [
   "math.ceil",
   "math.log",
   "networkx.Graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_kernel_graph.kernel_root": {
  "lineno": 1279,
  "symbols_in_volume": [
   "scipy.optimize.brentq"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_kernel_graph.kernel_root.my_function": {
  "lineno": 1280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_lobster": {
  "lineno": 1017,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree": {
  "lineno": 1124,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree_sequence": {
  "lineno": 1160,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.powerlaw_sequence",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph": {
  "lineno": 489,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._suitable": {
  "lineno": 541,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._try_creation": {
  "lineno": 560,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.random_shell_graph": {
  "lineno": 1067,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.operators.union",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.random_graphs.watts_strogatz_graph": {
  "lineno": 363,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.small": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.small.LCF_graph": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.classic.cycle_graph",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.bull_graph": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.chvatal_graph": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.cubical_graph": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.desargues_graph": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.diamond_graph": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.dodecahedral_graph": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.frucht_graph": {
  "lineno": 267,
  "symbols_in_volume": [
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.heawood_graph": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.hoffman_singleton_graph": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.convert_node_labels_to_integers"
  ],
  "type": "function"
 },
 "networkx.generators.small.house_graph": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.house_x_graph": {
  "lineno": 330,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.icosahedral_graph": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.krackhardt_kite_graph": {
  "lineno": 367,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.make_small_graph": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.make_small_undirected_graph": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.moebius_kantor_graph": {
  "lineno": 399,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.octahedral_graph": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.pappus_graph": {
  "lineno": 418,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.petersen_graph": {
  "lineno": 425,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.sedgewick_maze_graph": {
  "lineno": 448,
  "symbols_in_volume": [
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.tetrahedral_graph": {
  "lineno": 466,
  "symbols_in_volume": [
   "networkx.generators.classic.complete_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.truncated_cube_graph": {
  "lineno": 473,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.small.truncated_tetrahedron_graph": {
  "lineno": 510,
  "symbols_in_volume": [
   "networkx.generators.classic.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.small.tutte_graph": {
  "lineno": 519,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.social": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.social.davis_southern_women_graph": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.social.florentine_families_graph": {
  "lineno": 247,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.social.karate_club_graph": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.social.les_miserables_graph": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.generators.spectral_graph_forge": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.spectral_graph_forge._mat_spect_approx": {
  "lineno": 10,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.argsort",
   "numpy.diag",
   "numpy.flipud",
   "numpy.linalg.eigh",
   "numpy.ravel",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.generators.spectral_graph_forge.spectral_graph_forge": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_numpy_array",
   "networkx.to_numpy_array",
   "networkx.utils.np_random_state",
   "numpy.clip",
   "numpy.fill_diagonal",
   "numpy.ones",
   "numpy.transpose",
   "scipy.stats.bernoulli.rvs"
  ],
  "type": "function"
 },
 "networkx.generators.stochastic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.stochastic.stochastic_graph": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.classes.DiGraph",
   "networkx.classes.MultiDiGraph",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.generators.sudoku": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.sudoku.sudoku_graph": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.generators.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_atlas": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_graph": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.graph_atlas",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_large": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.generators.atlas.NUM_GRAPHS",
   "networkx.graph_atlas",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_small": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.graph_atlas",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.setup_class": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.graph_atlas_g"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_names": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_degree_sequence": {
  "lineno": 62,
  "symbols_in_volume": [
   "itertools.groupby",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_edges": {
  "lineno": 55,
  "symbols_in_volume": [
   "itertools.groupby",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_nodes": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_sizes": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_classic": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  ],
  "type": "module"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.degree_histogram",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_path": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph": {
  "lineno": 86,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.barbell_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_binomial_tree": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.binomial_tree",
   "networkx.number_of_edges",
   "networkx.number_of_nodes"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circulant_graph": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.circulant_graph",
   "networkx.complete_bipartite_graph",
   "networkx.complete_graph",
   "networkx.cycle_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.circular_ladder_graph",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_0_partite_graph": {
  "lineno": 430,
  "symbols_in_volume": [
   "networkx.complete_multipartite_graph",
   "networkx.null_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_1_partite_graph": {
  "lineno": 437,
  "symbols_in_volume": [
   "networkx.complete_multipartite_graph",
   "networkx.empty_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_2_partite_graph": {
  "lineno": 444,
  "symbols_in_volume": [
   "networkx.complete_bipartite_graph",
   "networkx.complete_multipartite_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.complete_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph": {
  "lineno": 146,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_multipartite_graph": {
  "lineno": 454,
  "symbols_in_volume": [
   "itertools.combinations",
   "itertools.combinations_with_replacement",
   "itertools.product",
   "networkx.complete_multipartite_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_create_using": {
  "lineno": 244,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.empty_graph",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.cycle_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.average_clustering",
   "networkx.dorogovtsev_goltsev_mendes_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.triangles",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph": {
  "lineno": 274,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.empty_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.petersen_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.degree_histogram",
   "networkx.full_rary_tree",
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.full_rary_tree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.balanced_tree",
   "networkx.full_rary_tree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.full_rary_tree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.full_rary_tree",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph": {
  "lineno": 304,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.empty_graph",
   "networkx.grid_graph",
   "networkx.hypercube_graph",
   "networkx.ladder_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph": {
  "lineno": 319,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.lollipop_graph",
   "networkx.number_of_edges",
   "networkx.number_of_nodes",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph": {
  "lineno": 349,
  "symbols_in_volume": [
   "networkx.null_graph",
   "networkx.number_of_nodes"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph": {
  "lineno": 352,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.empty_graph",
   "networkx.is_connected",
   "networkx.null_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph": {
  "lineno": 379,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.complete_bipartite_graph",
   "networkx.empty_graph",
   "networkx.path_graph",
   "networkx.star_graph",
   "networkx.testing.assert_edges_equal",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph": {
  "lineno": 398,
  "symbols_in_volume": [
   "networkx.number_of_nodes",
   "networkx.trivial_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_turan_graph": {
  "lineno": 401,
  "symbols_in_volume": [
   "networkx.complete_multipartite_graph",
   "networkx.number_of_edges",
   "networkx.turan_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph": {
  "lineno": 407,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.empty_graph",
   "networkx.null_graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.wheel_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_cographs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_cographs.test_random_cograph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.connected_components",
   "networkx.diameter",
   "networkx.is_connected",
   "networkx.random_cograph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_community.test_both_degrees_none": {
  "lineno": 252,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_caveman_graph": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.caveman_graph",
   "networkx.complete_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_connected_caveman_graph": {
  "lineno": 95,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.connected_caveman_graph",
   "networkx.is_isomorphic",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_gaussian_random_partition_graph": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.gaussian_random_partition_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_generator": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.community.is_partition"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_invalid_tau1": {
  "lineno": 216,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_invalid_tau2": {
  "lineno": 225,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_mu_too_large": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_mu_too_small": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_neither_degrees_none": {
  "lineno": 261,
  "symbols_in_volume": [
   "networkx.LFR_benchmark_graph",
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_planted_partition_graph": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.planted_partition_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_random_partition_graph": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.random_partition_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_relaxed_caveman_graph": {
  "lineno": 84,
  "symbols_in_volume": [
   "networkx.relaxed_caveman_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_ring_of_cliques": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.ring_of_cliques",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_stochastic_block_model": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "networkx.stochastic_block_model",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_windmill_graph": {
  "lineno": 152,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.ring_of_cliques",
   "networkx.windmill_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_sequence": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.configuration_model"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_zero": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.configuration_model"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_directed_disallowed": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.configuration_model",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_empty_degree_sequence": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.configuration_model"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_odd_degree_sum": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.configuration_model",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_random_seed": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.configuration_model",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_degree_sequence_tree": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.degree_sequence_tree",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_model": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.directed_configuration_model"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_raise_unequal": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.directed_configuration_model",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_havel_hakimi": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.directed_havel_hakimi_graph",
   "networkx.erdos_renyi_graph",
   "networkx.exception.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.expected_degree_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_empty": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.expected_degree_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_selfloops": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.expected_degree_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_skew": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.expected_degree_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.configuration_model",
   "networkx.havel_hakimi_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph": {
  "lineno": 214,
  "symbols_in_volume": [
   "networkx.random_degree_sequence_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise": {
  "lineno": 220,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "networkx.random_degree_sequence_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_large": {
  "lineno": 225,
  "symbols_in_volume": [
   "networkx.fast_gnp_random_graph",
   "networkx.random_degree_sequence_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_simple_directed_configuation_model": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.directed_configuration_model"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.classes.Graph",
   "networkx.classes.MultiDiGraph",
   "networkx.generators.directed.gn_graph",
   "networkx.generators.directed.gnc_graph",
   "networkx.generators.directed.gnr_graph",
   "networkx.generators.directed.scale_free_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.generators.directed.gn_graph",
   "networkx.generators.directed.gnc_graph",
   "networkx.generators.directed.gnr_graph",
   "networkx.generators.directed.scale_free_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph.test_no_self_loops": {
  "lineno": 76,
  "symbols_in_volume": [
   "networkx.generators.directed.random_k_out_graph",
   "networkx.number_of_selfloops"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph.test_regularity": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.generators.directed.random_k_out_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_no_self_loops": {
  "lineno": 101,
  "symbols_in_volume": [
   "networkx.generators.directed.random_uniform_k_out_graph",
   "networkx.number_of_selfloops"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_regularity": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.generators.directed.random_uniform_k_out_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_with_replacement": {
  "lineno": 109,
  "symbols_in_volume": [
   "networkx.generators.directed.random_uniform_k_out_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_without_replacement": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.generators.directed.random_uniform_k_out_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_final_size": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.generators.duplication.duplication_divergence_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_large": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.duplication.duplication_divergence_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_small": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.duplication.duplication_divergence_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_final_size": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.generators.duplication.partial_duplication_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_initial_clique_size": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.generators.duplication.partial_duplication_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_initial_size": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.duplication.partial_duplication_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_probabilities": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.duplication.partial_duplication_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_ego": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.ego_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.star_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.ego_graph",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_expanders": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_expanders.test_chordal_cycle_graph": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.generators.expanders.chordal_cycle_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.adjacency_matrix",
   "networkx.generators.expanders.margulis_gabber_galil_graph",
   "networkx.number_of_nodes",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_badinput": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.generators.expanders.margulis_gabber_galil_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_paley_graph": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.generators.expanders.paley_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_distances": {
  "lineno": 194,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.generators.geometric.euclidean",
   "networkx.geographical_threshold_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_metric": {
  "lineno": 211,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.geographical_threshold_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_number_of_nodes": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.geographical_threshold_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_p_dist_zero": {
  "lineno": 227,
  "symbols_in_volume": [
   "networkx.geographical_threshold_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_p_dist_zero.p_dist": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph.test_navigable_small_world": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.grid_2d_graph",
   "networkx.grid_graph",
   "networkx.is_isomorphic",
   "networkx.navigable_small_world_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_distances": {
  "lineno": 26,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.generators.geometric.euclidean",
   "networkx.random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_node_names": {
  "lineno": 59,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.generators.geometric.euclidean",
   "networkx.random_geometric_graph",
   "string.ascii_lowercase"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_number_of_nodes": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_p": {
  "lineno": 43,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_distances": {
  "lineno": 91,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.soft_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_distances.dist": {
  "lineno": 98,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_node_names": {
  "lineno": 122,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.soft_random_geometric_graph",
   "string.ascii_lowercase"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_node_names.dist": {
  "lineno": 132,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_number_of_nodes": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.soft_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p": {
  "lineno": 107,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.soft_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p.dist": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_default": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.random_geometric_graph",
   "networkx.soft_random_geometric_graph",
   "random.random"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_zero": {
  "lineno": 152,
  "symbols_in_volume": [
   "networkx.soft_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_zero.p_dist": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_distances": {
  "lineno": 292,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.thresholded_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_distances.dist": {
  "lineno": 299,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_node_names": {
  "lineno": 323,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.thresholded_random_geometric_graph",
   "string.ascii_lowercase"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_node_names.dist": {
  "lineno": 333,
  "symbols_in_volume": [
   "math.sqrt"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_number_of_nodes": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.thresholded_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_p": {
  "lineno": 308,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.thresholded_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_p.dist": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_theta": {
  "lineno": 341,
  "symbols_in_volume": [
   "itertools.combinations",
   "networkx.thresholded_random_geometric_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_metric": {
  "lineno": 254,
  "symbols_in_volume": [
   "networkx.waxman_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_1": {
  "lineno": 242,
  "symbols_in_volume": [
   "networkx.waxman_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_2": {
  "lineno": 248,
  "symbols_in_volume": [
   "networkx.waxman_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.join": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.l1dist": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_harary_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hkn_harary_graph": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.isomorphism.isomorph.is_isomorphic",
   "networkx.circulant_graph",
   "networkx.generators.harary_graph.hkn_harary_graph",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hnm_harary_graph": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algorithms.isomorphism.isomorph.is_isomorphic",
   "networkx.circulant_graph",
   "networkx.generators.harary_graph.hnm_harary_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_customers": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.neighbors"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_providers": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.neighbors"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.setup_class": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.generators.internet_as_graphs.random_internet_as_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_connectivity": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.is_connected"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_degree_values": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_node_numbers": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_relationships": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_wrong_input": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.generators.internet_as_graphs.random_internet_as_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_intersection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.general_random_intersection_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.k_random_intersection_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph_seeded": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.k_random_intersection_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.uniform_random_intersection_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_empty": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.generators.interval_graph.interval_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_0": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.interval_graph.interval_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_1": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.interval_graph.interval_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_2": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.interval_graph.interval_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_3": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.interval_graph.interval_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_4": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.interval_graph",
   "networkx.neighbors"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_5": {
  "lineno": 131,
  "symbols_in_volume": [
   "math.inf",
   "networkx.Graph",
   "networkx.generators.interval_graph.interval_graph",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_check_invalid": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.generators.interval_graph.interval_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_directed_joint_degree_graph": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.degree_mixing_dict",
   "networkx.generators.gnm_random_graph",
   "networkx.generators.joint_degree_seq.directed_joint_degree_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_is_valid_directed_joint_degree": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_is_valid_joint_degree": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.generators.joint_degree_seq.is_valid_joint_degree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_joint_degree_graph": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.algorithms.assortativity.degree_mixing_dict",
   "networkx.generators.joint_degree_seq.joint_degree_graph",
   "networkx.generators.powerlaw_cluster_graph",
   "time.time"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_degree_distribution": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.degree_histogram",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_directed": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_multigraph": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_node_input": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.grid_2d_graph",
   "networkx.is_isomorphic",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_number_of_vertices": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.circular_ladder_graph",
   "networkx.could_be_isomorphic",
   "networkx.cubical_graph",
   "networkx.cycle_graph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_directed": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_iterable": {
  "lineno": 53,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_multigraph": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.grid_2d_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_grid_graph": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.degree_histogram",
   "networkx.grid_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_node_input": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.grid_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_periodic_iterable": {
  "lineno": 117,
  "symbols_in_volume": [
   "itertools.product",
   "networkx.grid_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_directed": {
  "lineno": 212,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.get_node_attributes",
   "networkx.hexagonal_lattice_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_lattice_points": {
  "lineno": 196,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.hexagonal_lattice_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_multigraph": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.hexagonal_lattice_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_periodic": {
  "lineno": 229,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.hexagonal_lattice_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph.test_degree_distribution": {
  "lineno": 139,
  "symbols_in_volume": [
   "networkx.degree_histogram",
   "networkx.hypercube_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph.test_special_cases": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.could_be_isomorphic",
   "networkx.cubical_graph",
   "networkx.cycle_graph",
   "networkx.hypercube_graph",
   "networkx.null_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_directed": {
  "lineno": 164,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.triangular_lattice_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_lattice_points": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.triangular_lattice_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_multigraph": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.triangular_lattice_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_periodic": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.triangular_lattice_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_K1": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_claw": {
  "lineno": 173,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.inverse_line_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_cycle": {
  "lineno": 157,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_empty": {
  "lineno": 162,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.complete_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example_2": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_complete": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_cycle": {
  "lineno": 252,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_dgm": {
  "lineno": 270,
  "symbols_in_volume": [
   "networkx.dorogovtsev_goltsev_mendes_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_hypercube": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.hypercube_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_multipartite": {
  "lineno": 264,
  "symbols_in_volume": [
   "networkx.complete_multipartite_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_path": {
  "lineno": 240,
  "symbols_in_volume": [
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_star": {
  "lineno": 258,
  "symbols_in_volume": [
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_non_line_graph": {
  "lineno": 180,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.complete_graph",
   "networkx.inverse_line_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_pair": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_triangle_graph": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.complete_graph",
   "networkx.inverse_line_graph",
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_wrong_graph_type": {
  "lineno": 223,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.inverse_line_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create1": {
  "lineno": 79,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.line_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create2": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.line_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_cycle": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph1": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.line_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph2": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.line_graph",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_path": {
  "lineno": 56,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.line_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_star": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_isomorphic",
   "networkx.line_graph",
   "networkx.star_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_edge_func": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.generators.line._edge_func",
   "networkx.testing.utils.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_node_func": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.generators.line._node_func"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_sorted_edge": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.generators.line._sorted_edge"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_construction": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.is_isomorphic",
   "networkx.mycielskian",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_mycielski_graph_generator": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.cycle_graph",
   "networkx.empty_graph",
   "networkx.is_isomorphic",
   "networkx.mycielski_graph",
   "networkx.mycielskian",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_size": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.mycielskian",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees.f": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.nonisomorphic_trees"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees_matrix": {
  "lineno": 55,
  "symbols_in_volume": [
   "networkx.nonisomorphic_trees"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism.f": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.nonisomorphic_trees"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.number_of_nonisomorphic_trees"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.is_tree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure.f": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.nonisomorphic_trees"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.random_clustered_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.random_clustered_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.random_clustered_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.random_clustered_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_dual_barabasi_albert": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.random_graphs.barabasi_albert_graph",
   "networkx.generators.random_graphs.dual_barabasi_albert_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_extended_barabasi_albert": {
  "lineno": 163,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.random_graphs.barabasi_albert_graph",
   "networkx.generators.random_graphs.extended_barabasi_albert_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm": {
  "lineno": 255,
  "symbols_in_volume": [
   "networkx.generators.random_graphs.gnm_random_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnp": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.generators.random_graphs.binomial_graph",
   "networkx.generators.random_graphs.erdos_renyi_graph",
   "networkx.generators.random_graphs.fast_gnp_random_graph",
   "networkx.generators.random_graphs.gnp_random_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.random_graphs.barabasi_albert_graph",
   "networkx.generators.random_graphs.binomial_graph",
   "networkx.generators.random_graphs.connected_watts_strogatz_graph",
   "networkx.generators.random_graphs.dense_gnm_random_graph",
   "networkx.generators.random_graphs.erdos_renyi_graph",
   "networkx.generators.random_graphs.extended_barabasi_albert_graph",
   "networkx.generators.random_graphs.fast_gnp_random_graph",
   "networkx.generators.random_graphs.gnm_random_graph",
   "networkx.generators.random_graphs.gnp_random_graph",
   "networkx.generators.random_graphs.newman_watts_strogatz_graph",
   "networkx.generators.random_graphs.powerlaw_cluster_graph",
   "networkx.generators.random_graphs.random_lobster",
   "networkx.generators.random_graphs.random_powerlaw_tree",
   "networkx.generators.random_graphs.random_powerlaw_tree_sequence",
   "networkx.generators.random_graphs.random_regular_graph",
   "networkx.generators.random_graphs.random_shell_graph",
   "networkx.generators.random_graphs.watts_strogatz_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph.is_caterpillar": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph.is_lobster": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph": {
  "lineno": 290,
  "symbols_in_volume": [
   "networkx.generators.random_graphs.random_kernel_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph.integral": {
  "lineno": 291,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph.root": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_zero_regular_graph": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.generators.random_graphs.random_regular_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_watts_strogatz_big_k": {
  "lineno": 276,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.random_graphs.newman_watts_strogatz_graph",
   "networkx.generators.random_graphs.watts_strogatz_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_small": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
   "networkx.null_graph"
  ],
  "type": "module"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph": {
  "lineno": 26,
  "symbols_in_volume": [
   "networkx.LCF_graph",
   "networkx.complete_bipartite_graph",
   "networkx.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_make_small_graph": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.bull_graph",
   "networkx.make_small_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.bull_graph",
   "networkx.chvatal_graph",
   "networkx.cubical_graph",
   "networkx.desargues_graph",
   "networkx.diameter",
   "networkx.diamond_graph",
   "networkx.dodecahedral_graph",
   "networkx.frucht_graph",
   "networkx.heawood_graph",
   "networkx.hoffman_singleton_graph",
   "networkx.house_graph",
   "networkx.house_x_graph",
   "networkx.icosahedral_graph",
   "networkx.krackhardt_kite_graph",
   "networkx.moebius_kantor_graph",
   "networkx.octahedral_graph",
   "networkx.pappus_graph",
   "networkx.petersen_graph",
   "networkx.radius",
   "networkx.sedgewick_maze_graph",
   "networkx.tetrahedral_graph",
   "networkx.truncated_cube_graph",
   "networkx.truncated_tetrahedron_graph",
   "networkx.tutte_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_spectral_graph_forge": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_spectral_graph_forge.test_spectral_graph_forge": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.karate_club_graph",
   "networkx.generators.spectral_graph_forge.spectral_graph_forge",
   "networkx.is_isomorphic",
   "networkx.testing.assert_nodes_equal",
   "pytest.importorskip",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_arbitrary_weights": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.stochastic_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_default_weights": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_isomorphic",
   "networkx.stochastic_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_graph_disallowed": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "networkx.stochastic_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_in_place": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.stochastic_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multidigraph": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.stochastic_graph"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multigraph_disallowed": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.stochastic_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_sudoku": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_sudoku.test_sudoku_generator": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.sudoku_graph",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_sudoku.test_sudoku_negative": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.sudoku_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_trees": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree.test_basic": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.generators.trees.NIL",
   "networkx.prefix_tree",
   "networkx.utils.arbitrary_element"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree.test_basic.source_label": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.generators.tests.test_trees.test_random_tree": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.is_tree",
   "networkx.random_tree"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_triads": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.tests.test_triads.test_invalid_name": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.triad_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.generators.tests.test_triads.test_triad_graph": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.triad_graph"
  ],
  "type": "function"
 },
 "networkx.generators.trees": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.trees.prefix_tree": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.utils.generate_unique_node"
  ],
  "type": "function"
 },
 "networkx.generators.trees.prefix_tree._helper": {
  "lineno": 96,
  "symbols_in_volume": [
   "collections.defaultdict",
   "networkx.utils.generate_unique_node"
  ],
  "type": "function"
 },
 "networkx.generators.trees.random_tree": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "networkx.empty_graph",
   "networkx.from_prufer_sequence",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.generators.triads": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.generators.triads.triad_graph": {
  "lineno": 35,
  "symbols_in_volume": [
   "networkx.classes.DiGraph"
  ],
  "type": "function"
 },
 "networkx.linalg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "numpy.dot",
   "numpy.linalg.norm",
   "scipy.linalg.blas.dasum",
   "scipy.linalg.blas.ddot"
  ],
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver": {
  "lineno": 86,
  "symbols_in_volume": [
   "scikits.sparse.cholmod.cholesky"
  ],
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.__init__": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.solve": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver": {
  "lineno": 113,
  "symbols_in_volume": [
   "functools.partial",
   "scipy.sparse.linalg.splu"
  ],
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.__init__": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.solve": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.__init__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver._solve": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.zeros",
   "scipy.linalg.blas.dasum",
   "scipy.linalg.blas.daxpy",
   "scipy.linalg.blas.ddot"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.solve": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func": {
  "lineno": 299,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func.find_fiedler": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.atleast_2d",
   "numpy.ones",
   "numpy.sqrt",
   "scipy.sparse.csc_matrix",
   "scipy.sparse.linalg.eigsh",
   "scipy.sparse.linalg.lobpcg",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._preprocess_graph": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._rcm_estimate": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.utils.reverse_cuthill_mckee_ordering",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "numpy.asarray",
   "numpy.linalg.norm",
   "numpy.linalg.qr",
   "numpy.ndarray",
   "numpy.sqrt",
   "scipy.linalg.blas.dasum",
   "scipy.linalg.eigh",
   "scipy.linalg.inv",
   "scipy.sparse.csc_matrix",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler.project": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.algebraic_connectivity": {
  "lineno": 343,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.laplacian_matrix",
   "networkx.utils.not_implemented_for",
   "networkx.utils.random_state"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.daxpy": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.fiedler_vector": {
  "lineno": 429,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_connected",
   "networkx.laplacian_matrix",
   "networkx.utils.not_implemented_for",
   "networkx.utils.random_state",
   "numpy.array"
  ],
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.spectral_ordering": {
  "lineno": 516,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.connected_components",
   "networkx.laplacian_matrix",
   "networkx.utils.random_state"
  ],
  "type": "function"
 },
 "networkx.linalg.attrmatrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.attrmatrix._edge_value": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.attrmatrix._edge_value.value": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.attrmatrix._node_value": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.attrmatrix._node_value.value": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_matrix": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.asmatrix",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_sparse_matrix": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.asarray",
   "scipy.sparse.lil_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.bethehessianmatrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.bethehessianmatrix.bethe_hessian_matrix": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.degree",
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.linalg.graphmatrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.graphmatrix.adjacency_matrix": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.graphmatrix.incidence_matrix": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.laplacianmatrix._transition_matrix": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.is_aperiodic",
   "networkx.is_strongly_connected",
   "networkx.to_scipy_sparse_matrix",
   "numpy.array",
   "numpy.where",
   "scipy.sparse.identity",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.directed_combinatorial_laplacian_matrix": {
  "lineno": 214,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for",
   "scipy.sparse.linalg.eigs",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.directed_laplacian_matrix": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for",
   "numpy.identity",
   "numpy.sqrt",
   "scipy.sparse.linalg.eigs",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.laplacian_matrix": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.normalized_laplacian_matrix": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.not_implemented_for",
   "numpy.isinf",
   "numpy.sqrt",
   "scipy.errstate",
   "scipy.sparse.spdiags"
  ],
  "type": "function"
 },
 "networkx.linalg.modularitymatrix": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.modularitymatrix.directed_modularity_matrix": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.linalg.modularitymatrix.modularity_matrix": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.to_scipy_sparse_matrix",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.linalg.spectrum": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.spectrum.adjacency_spectrum": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.adjacency_matrix",
   "scipy.linalg.eigvals"
  ],
  "type": "function"
 },
 "networkx.linalg.spectrum.bethe_hessian_spectrum": {
  "lineno": 138,
  "symbols_in_volume": [
   "networkx.bethe_hessian_matrix",
   "scipy.linalg.eigvalsh"
  ],
  "type": "function"
 },
 "networkx.linalg.spectrum.laplacian_spectrum": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.laplacian_matrix",
   "scipy.linalg.eigvalsh"
  ],
  "type": "function"
 },
 "networkx.linalg.spectrum.modularity_spectrum": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.directed_modularity_matrix",
   "networkx.modularity_matrix",
   "scipy.linalg.eigvals"
  ],
  "type": "function"
 },
 "networkx.linalg.spectrum.normalized_laplacian_spectrum": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.normalized_laplacian_matrix",
   "scipy.linalg.eigvalsh"
  ],
  "type": "function"
 },
 "networkx.linalg.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.linalg.tests.test_algebraic_connectivity": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip",
   "scikits.sparse.cholmod.cholesky"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_abbreviation_of_method": {
  "lineno": 94,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.path_graph",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.normalized_laplacian_matrix",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle": {
  "lineno": 124,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algebraic_connectivity",
   "networkx.cycle_graph",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected": {
  "lineno": 57,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path": {
  "lineno": 103,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.path_graph",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_problematic_graph_issue_2381": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.path_graph",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_seed_argument": {
  "lineno": 134,
  "symbols_in_volume": [
   "math.sqrt",
   "networkx.algebraic_connectivity",
   "networkx.cycle_graph",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes": {
  "lineno": 72,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes_multigraph": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.laplacian_matrix",
   "networkx.testing.almost_equal",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.algebraic_connectivity",
   "networkx.fiedler_vector",
   "networkx.path_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering": {
  "lineno": 265,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle": {
  "lineno": 342,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.add_path",
   "networkx.laplacian_matrix",
   "networkx.spectral_ordering",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected": {
  "lineno": 326,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.spectral_ordering",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph": {
  "lineno": 268,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.spectral_ordering",
   "pytest.mark.parametrize",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path": {
  "lineno": 302,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.spectral_ordering",
   "numpy.random.shuffle",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_seed_argument": {
  "lineno": 314,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.spectral_ordering",
   "numpy.random.shuffle",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.spectral_ordering",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.spectral_ordering",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes_multigraph": {
  "lineno": 294,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.spectral_ordering",
   "pytest.mark.parametrize"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method": {
  "lineno": 282,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.path_graph",
   "networkx.spectral_ordering",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx",
   "networkx.testing.almost_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix": {
  "lineno": 9,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.attr_matrix",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix.edge_attr": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix.node_attr": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix_directed": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.attr_matrix",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix_multigraph": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.attr_matrix",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.attr_sparse_matrix",
   "numpy.testing.assert_equal",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix_directed": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.attr_sparse_matrix",
   "numpy.testing.assert_equal"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_bethehessian": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.generators.degree_seq.havel_hakimi_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian.test_bethe_hessian": {
  "lineno": 18,
  "symbols_in_volume": [
   "networkx.bethe_hessian_matrix",
   "networkx.laplacian_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setup_class": {
  "lineno": 50,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.generators.degree_seq.havel_hakimi_graph"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix": {
  "lineno": 277,
  "symbols_in_volume": [
   "networkx.adj_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix": {
  "lineno": 105,
  "symbols_in_volume": [
   "networkx.incidence_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_weighted_incidence_matrix": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.incidence_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.test_incidence_matrix_simple": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "networkx.generators.degree_seq.havel_hakimi_graph",
   "networkx.incidence_matrix",
   "networkx.random_clustered_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.generators.degree_seq.havel_hakimi_graph"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_combinatorial_laplacian": {
  "lineno": 151,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "networkx.directed_combinatorial_laplacian_matrix",
   "networkx.generators.expanders.margulis_gabber_galil_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_laplacian": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.directed_laplacian_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_laplacian": {
  "lineno": 28,
  "symbols_in_volume": [
   "networkx.laplacian_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_normalized_laplacian": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.normalized_laplacian_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_modularity.TestModularity": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.generators.degree_seq.havel_hakimi_graph"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_directed_modularity": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.directed_modularity_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_modularity": {
  "lineno": 34,
  "symbols_in_volume": [
   "networkx.modularity_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_modularity_weight": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.modularity_matrix"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.setup_class": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.add_path",
   "networkx.generators.degree_seq.havel_hakimi_graph",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.adjacency_spectrum"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_bethe_hessian_spectrum": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.bethe_hessian_spectrum",
   "networkx.laplacian_spectrum"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.laplacian_spectrum"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_modularity_spectrum": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.modularity_spectrum"
  ],
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_normalized_laplacian_spectrum": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.normalized_laplacian_spectrum"
  ],
  "type": "function"
 },
 "networkx.readwrite": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.adjlist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.adjlist.generate_adjlist": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.adjlist.parse_adjlist": {
  "lineno": 140,
  "symbols_in_volume": [
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.adjlist.read_adjlist": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.adjlist.write_adjlist": {
  "lineno": 81,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "sys.argv",
   "time.asctime",
   "time.gmtime"
  ],
  "type": "function"
 },
 "networkx.readwrite.edgelist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.edgelist.generate_edgelist": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.edgelist.parse_edgelist": {
  "lineno": 176,
  "symbols_in_volume": [
   "ast.literal_eval",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_edgelist": {
  "lineno": 297,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_weighted_edgelist": {
  "lineno": 423,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_edgelist": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_weighted_edgelist": {
  "lineno": 383,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.gexf.GEXF": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.float32",
   "numpy.float64",
   "numpy.float_",
   "numpy.int16",
   "numpy.int32",
   "numpy.int64",
   "numpy.int8",
   "numpy.int_",
   "numpy.intc",
   "numpy.intp",
   "numpy.uint16",
   "numpy.uint32",
   "numpy.uint64",
   "numpy.uint8"
  ],
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXF.set_version": {
  "lineno": 250,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader": {
  "lineno": 673,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXFReader.__call__": {
  "lineno": 682,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "xml.etree.ElementTree.ElementTree"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.__init__": {
  "lineno": 676,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_edge": {
  "lineno": 895,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_node": {
  "lineno": 774,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_parents": {
  "lineno": 865,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_slices": {
  "lineno": 874,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_spells": {
  "lineno": 884,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_start_end": {
  "lineno": 809,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_viz": {
  "lineno": 820,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.decode_attr_elements": {
  "lineno": 947,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.find_gexf_attributes": {
  "lineno": 981,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.make_graph": {
  "lineno": 695,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXFWriter.__init__": {
  "lineno": 265,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.__version__",
   "time.strftime",
   "xml.etree.ElementTree.Element",
   "xml.etree.ElementTree.SubElement",
   "xml.etree.ElementTree.register_namespace"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.__str__": {
  "lineno": 307,
  "symbols_in_volume": [
   "xml.etree.ElementTree.tostring"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_attributes": {
  "lineno": 443,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_edges": {
  "lineno": 375,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_edges.edge_key_data": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_graph": {
  "lineno": 313,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_nodes": {
  "lineno": 336,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_parents": {
  "lineno": 594,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_slices": {
  "lineno": 605,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_spells": {
  "lineno": 615,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_viz": {
  "lineno": 541,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.alter_graph_mode_timeformat": {
  "lineno": 631,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.get_attr_id": {
  "lineno": 509,
  "symbols_in_volume": [
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.indent": {
  "lineno": 656,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.write": {
  "lineno": 649,
  "symbols_in_volume": [
   "xml.etree.ElementTree.ElementTree"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.generate_gexf": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gexf.read_gexf": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.relabel_gexf_graph": {
  "lineno": 1002,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.readwrite.gexf.write_gexf": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.gml.Pattern": {
  "lineno": 262,
  "symbols_in_volume": [
   "enum.Enum"
  ],
  "type": "class"
 },
 "networkx.readwrite.gml.Token": {
  "lineno": 274,
  "symbols_in_volume": [
   "typing.Any",
   "typing.NamedTuple"
  ],
  "type": "class"
 },
 "networkx.readwrite.gml.escape": {
  "lineno": 46,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.escape.fixup": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.generate_gml": {
  "lineno": 580,
  "symbols_in_volume": [
   "re.compile"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.generate_gml.stringize": {
  "lineno": 661,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.literal_destringizer": {
  "lineno": 86,
  "symbols_in_volume": [
   "ast.literal_eval",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.literal_stringizer": {
  "lineno": 472,
  "symbols_in_volume": [
   "io.StringIO",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.literal_stringizer.stringize": {
  "lineno": 504,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml.decode_line": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml.filter_lines": {
  "lineno": 244,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines": {
  "lineno": 284,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.exception.NetworkXError",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.consume": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_dict": {
  "lineno": 390,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_graph": {
  "lineno": 399,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_kv": {
  "lineno": 337,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_kv.clean_dict_value": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.pop_attr": {
  "lineno": 422,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.tokenize": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError",
   "re.compile"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.unexpected": {
  "lineno": 327,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.read_gml": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.read_gml.filter_lines": {
  "lineno": 169,
  "symbols_in_volume": [
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.unescape": {
  "lineno": 61,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.unescape.fixup": {
  "lineno": 64,
  "symbols_in_volume": [
   "html.entities.name2codepoint"
  ],
  "type": "function"
 },
 "networkx.readwrite.gml.write_gml": {
  "lineno": 763,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.gpickle": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.gpickle.read_gpickle": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "pickle.load"
  ],
  "type": "function"
 },
 "networkx.readwrite.gpickle.write_gpickle": {
  "lineno": 31,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "pickle.HIGHEST_PROTOCOL",
   "pickle.dump"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.graph6._generate_graph6_bytes": {
  "lineno": 22,
  "symbols_in_volume": [
   "itertools.islice"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6.data_to_n": {
  "lineno": 372,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graph6.from_graph6_bytes": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6.from_graph6_bytes.bits": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graph6.n_to_data": {
  "lineno": 392,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graph6.read_graph6": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6.to_graph6_bytes": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6.write_graph6": {
  "lineno": 246,
  "symbols_in_volume": [
   "networkx.utils.not_implemented_for",
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.graph6.write_graph6_file": {
  "lineno": 307,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.utils.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml": {
  "lineno": null,
  "symbols_in_volume": [
   "lxml.etree"
  ],
  "type": "module"
 },
 "networkx.readwrite.graphml.GraphML": {
  "lineno": 344,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.float32",
   "numpy.float64",
   "numpy.float_",
   "numpy.int16",
   "numpy.int32",
   "numpy.int64",
   "numpy.int8",
   "numpy.int_",
   "numpy.intc",
   "numpy.intp",
   "numpy.uint16",
   "numpy.uint32",
   "numpy.uint64",
   "numpy.uint8"
  ],
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLReader": {
  "lineno": 759,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLReader.__call__": {
  "lineno": 768,
  "symbols_in_volume": [
   "xml.etree.ElementTree.ElementTree",
   "xml.etree.ElementTree.fromstring"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.__init__": {
  "lineno": 762,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.add_edge": {
  "lineno": 838,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.add_node": {
  "lineno": 821,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.decode_data_elements": {
  "lineno": 880,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.find_graphml_keys": {
  "lineno": 931,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.make_graph": {
  "lineno": 779,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.NetworkXError",
   "networkx.set_edge_attributes"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter": {
  "lineno": 411,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLWriter.__init__": {
  "lineno": 412,
  "symbols_in_volume": [
   "collections.defaultdict",
   "xml.etree.ElementTree.Element"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.__str__": {
  "lineno": 441,
  "symbols_in_volume": [
   "xml.etree.ElementTree.tostring"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_attributes": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_data": {
  "lineno": 498,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_edges": {
  "lineno": 526,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_graph_element": {
  "lineno": 542,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_graphs": {
  "lineno": 581,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_nodes": {
  "lineno": 519,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.attr_type": {
  "lineno": 447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.dump": {
  "lineno": 586,
  "symbols_in_volume": [
   "xml.etree.ElementTree.ElementTree"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.get_key": {
  "lineno": 472,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.indent": {
  "lineno": 592,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml": {
  "lineno": 624,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.__init__": {
  "lineno": 625,
  "symbols_in_volume": [
   "collections.defaultdict",
   "lxml.etree.Element",
   "lxml.etree.xmlfile"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.__str__": {
  "lineno": 744,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.add_attributes": {
  "lineno": 736,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.add_graph_element": {
  "lineno": 666,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.dump": {
  "lineno": 747,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.IncrementalElement": {
  "lineno": 609,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.graphml.IncrementalElement.__init__": {
  "lineno": 616,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.IncrementalElement.append": {
  "lineno": 620,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.generate_graphml": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.graphml.parse_graphml": {
  "lineno": 271,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.read_graphml": {
  "lineno": 198,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.write_graphml_lxml": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.graphml.write_graphml_xml": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_data": {
  "lineno": 9,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_graph": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.cytoscape": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.cytoscape.cytoscape_data": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.cytoscape.cytoscape_graph": {
  "lineno": 66,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.jit": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.jit.jit_data": {
  "lineno": 67,
  "symbols_in_volume": [
   "json.dumps",
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.jit.jit_graph": {
  "lineno": 36,
  "symbols_in_volume": [
   "json.loads",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.node_link.node_link_data": {
  "lineno": 11,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link.node_link_graph": {
  "lineno": 103,
  "symbols_in_volume": [
   "itertools.count",
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.utils.to_tuple"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.adjacency_data",
   "networkx.readwrite.json_graph.adjacency_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_exception": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.readwrite.json_graph.adjacency_data",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.adjacency_data",
   "networkx.readwrite.json_graph.adjacency_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes": {
  "lineno": 13,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.adjacency_data",
   "networkx.readwrite.json_graph.adjacency_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph": {
  "lineno": 39,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path",
   "networkx.readwrite.json_graph.adjacency_data",
   "networkx.readwrite.json_graph.adjacency_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multigraph": {
  "lineno": 46,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.adjacency_data",
   "networkx.readwrite.json_graph.adjacency_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_digraph": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.cytoscape_data",
   "networkx.readwrite.json_graph.cytoscape_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_exception": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.readwrite.json_graph.cytoscape_data",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_graph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.cytoscape_data",
   "networkx.readwrite.json_graph.cytoscape_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_graph_attributes": {
  "lineno": 13,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.cytoscape_data",
   "networkx.readwrite.json_graph.cytoscape_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_multidigraph": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path",
   "networkx.readwrite.json_graph.cytoscape_data",
   "networkx.readwrite.json_graph.cytoscape_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_multigraph": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.cytoscape_data",
   "networkx.readwrite.json_graph.cytoscape_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit": {
  "lineno": 8,
  "symbols_in_volume": [
   "json.loads",
   "networkx.Graph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.jit_data",
   "networkx.readwrite.json_graph.jit_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_2": {
  "lineno": 20,
  "symbols_in_volume": [
   "json.loads",
   "networkx.Graph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.jit_data",
   "networkx.readwrite.json_graph.jit_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_directed": {
  "lineno": 31,
  "symbols_in_volume": [
   "json.loads",
   "networkx.DiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.jit_data",
   "networkx.readwrite.json_graph.jit_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_multi_directed": {
  "lineno": 42,
  "symbols_in_volume": [
   "json.loads",
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.jit_data",
   "networkx.readwrite.json_graph.jit_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_round_trip": {
  "lineno": 59,
  "symbols_in_volume": [
   "json.loads",
   "networkx.Graph",
   "networkx.is_isomorphic",
   "networkx.jit_data",
   "networkx.readwrite.json_graph.jit_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_custom_attrs": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.readwrite.json_graph.node_link_data",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.is_isomorphic",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes": {
  "lineno": 13,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.path_graph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_with_tuple_nodes": {
  "lineno": 45,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.Graph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multigraph": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_string_ids": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_unicode_keys": {
  "lineno": 55,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.Graph",
   "networkx.readwrite.json_graph.node_link_data",
   "networkx.readwrite.json_graph.node_link_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_exception": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.NetworkXError",
   "networkx.readwrite.json_graph.tree_data",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.is_isomorphic",
   "networkx.readwrite.json_graph.tree_data",
   "networkx.readwrite.json_graph.tree_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph_attributes": {
  "lineno": 17,
  "symbols_in_volume": [
   "json.dumps",
   "json.loads",
   "networkx.DiGraph",
   "networkx.readwrite.json_graph.tree_data",
   "networkx.readwrite.json_graph.tree_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.json_graph.tree.tree_data": {
  "lineno": 9,
  "symbols_in_volume": [
   "itertools.chain",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_data.add_children": {
  "lineno": 74,
  "symbols_in_volume": [
   "itertools.chain"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.DiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph.add_children": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.leda": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.leda.parse_leda": {
  "lineno": 48,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.exception.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.readwrite.leda.read_leda": {
  "lineno": 21,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.multiline_adjlist.generate_multiline_adjlist": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.parse_multiline_adjlist": {
  "lineno": 190,
  "symbols_in_volume": [
   "ast.literal_eval",
   "networkx.empty_graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.read_multiline_adjlist": {
  "lineno": 295,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.write_multiline_adjlist": {
  "lineno": 136,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "sys.argv",
   "time.asctime",
   "time.gmtime"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.nx_shp.edges_from_line": {
  "lineno": 119,
  "symbols_in_volume": [
   "osgeo.ogr.Geometry",
   "osgeo.ogr.wkbLineString",
   "osgeo.ogr.wkbMultiLineString"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.read_shp": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXError",
   "osgeo.ogr.Open",
   "osgeo.ogr.wkbLineString",
   "osgeo.ogr.wkbMultiLineString",
   "osgeo.ogr.wkbPoint"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp": {
  "lineno": 184,
  "symbols_in_volume": [
   "osgeo.ogr.GetDriverByName",
   "osgeo.ogr.OFTInteger",
   "osgeo.ogr.OFTReal",
   "osgeo.ogr.OFTString",
   "osgeo.ogr.UseExceptions",
   "osgeo.ogr.wkbLineString",
   "osgeo.ogr.wkbPoint"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.add_fields_to_layer": {
  "lineno": 260,
  "symbols_in_volume": [
   "osgeo.ogr.FieldDefn",
   "osgeo.ogr.OFTString"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.create_attributes": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.create_feature": {
  "lineno": 246,
  "symbols_in_volume": [
   "osgeo.ogr.Feature"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.netgeometry": {
  "lineno": 217,
  "symbols_in_volume": [
   "osgeo.ogr.CreateGeometryFromWkb",
   "osgeo.ogr.CreateGeometryFromWkt",
   "osgeo.ogr.Geometry",
   "osgeo.ogr.wkbLineString",
   "osgeo.ogr.wkbPoint"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_yaml": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.nx_yaml.read_yaml": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "yaml.FullLoader",
   "yaml.load"
  ],
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.write_yaml": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.utils.open_file",
   "yaml.dump"
  ],
  "type": "function"
 },
 "networkx.readwrite.p2g": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.p2g.parse_p2g": {
  "lineno": 77,
  "symbols_in_volume": [
   "networkx.MultiDiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.p2g.read_p2g": {
  "lineno": 59,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.p2g.write_p2g": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.pajek": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.pajek.generate_pajek": {
  "lineno": 25,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.readwrite.pajek.make_qstr": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.pajek.parse_pajek": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "shlex.split"
  ],
  "type": "function"
 },
 "networkx.readwrite.pajek.read_pajek": {
  "lineno": 132,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.pajek.write_pajek": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.sparse6": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.sparse6._generate_sparse6_bytes": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.readwrite.graph6.n_to_data"
  ],
  "type": "function"
 },
 "networkx.readwrite.sparse6._generate_sparse6_bytes.enc": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.sparse6.from_sparse6_bytes": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.exception.NetworkXError",
   "networkx.readwrite.graph6.data_to_n"
  ],
  "type": "function"
 },
 "networkx.readwrite.sparse6.from_sparse6_bytes.parseData": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.sparse6.read_sparse6": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.sparse6.to_sparse6_bytes": {
  "lineno": 201,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers"
  ],
  "type": "function"
 },
 "networkx.readwrite.sparse6.write_sparse6": {
  "lineno": 314,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.utils.not_implemented_for",
   "networkx.utils.open_file"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_adjlist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_delimiter": {
  "lineno": 142,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.path_graph",
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph": {
  "lineno": 94,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.read_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_graphs_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_err": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "pytest.raises",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_parse_adjlist": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.parse_adjlist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1": {
  "lineno": 24,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_graphs_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setup_class": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_delimiter": {
  "lineno": 259,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.path_graph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph": {
  "lineno": 205,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph": {
  "lineno": 193,
  "symbols_in_volume": [
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers": {
  "lineno": 217,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph": {
  "lineno": 229,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.read_multiline_adjlist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_multiline_adjlist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_parse_multiline_adjlist": {
  "lineno": 166,
  "symbols_in_volume": [
   "networkx.parse_multiline_adjlist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.setup_class": {
  "lineno": 14,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph": {
  "lineno": 228,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "lineno": 215,
  "symbols_in_volume": [
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "lineno": 241,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.isolates",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph": {
  "lineno": 265,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_edgelist",
   "networkx.testing.assert_graphs_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_issue": {
  "lineno": 191,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "pytest.raises",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "lineno": 25,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_2": {
  "lineno": 36,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_edgelist",
   "networkx.read_weighted_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "lineno": 53,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_4": {
  "lineno": 70,
  "symbols_in_volume": [
   "io.BytesIO",
   "io.StringIO",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_5": {
  "lineno": 103,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_6": {
  "lineno": 124,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_edgelist",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "lineno": 179,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_edgelist",
   "networkx.testing.assert_graphs_equal",
   "networkx.write_edgelist",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "lineno": 145,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.OrderedGraph",
   "networkx.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "lineno": 153,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.OrderedGraph",
   "networkx.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "lineno": 161,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.OrderedGraph",
   "networkx.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "lineno": 170,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.OrderedGraph",
   "networkx.write_edgelist"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.setup_class": {
  "lineno": 10,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.Graph",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_add_parent": {
  "lineno": 648,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_bool": {
  "lineno": 507,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute": {
  "lineno": 248,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.add_path",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected": {
  "lineno": 175,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.read_gexf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_dynamic_mode": {
  "lineno": 559,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_edge_id_construct": {
  "lineno": 349,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.__version__",
   "networkx.generate_gexf",
   "sys.version_info",
   "time.strftime"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_key_raises": {
  "lineno": 209,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.read_gexf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_missing_viz_attributes": {
  "lineno": 588,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_multigraph_with_missing_attributes": {
  "lineno": 572,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.MultiGraph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_numpy_type": {
  "lineno": 400,
  "symbols_in_volume": [
   "networkx.__version__",
   "networkx.generate_gexf",
   "networkx.path_graph",
   "networkx.set_node_attributes",
   "numpy.arange",
   "numpy.float64",
   "sys.version_info",
   "time.strftime"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.read_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.read_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml": {
  "lineno": 156,
  "symbols_in_volume": [
   "networkx.read_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel": {
  "lineno": 230,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_serialize_ints_to_strings": {
  "lineno": 269,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_simple_list": {
  "lineno": 549,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_slice_and_spell": {
  "lineno": 622,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_specials": {
  "lineno": 517,
  "symbols_in_volume": [
   "io.BytesIO",
   "math.isnan",
   "networkx.Graph",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed": {
  "lineno": 192,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.read_gexf",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml": {
  "lineno": 145,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_gexf",
   "networkx.write_gexf"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_with_node_attributes": {
  "lineno": 291,
  "symbols_in_volume": [
   "networkx.OrderedGraph",
   "networkx.__version__",
   "networkx.generate_gexf",
   "sys.version_info",
   "time.strftime"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_gml.TestGraph": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.setup_class": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_data_types": {
  "lineno": 329,
  "symbols_in_volume": [
   "ast.literal_eval",
   "networkx.Graph",
   "networkx.generate_gml",
   "networkx.parse_gml",
   "networkx.readwrite.gml.literal_destringizer",
   "networkx.readwrite.gml.literal_stringizer"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_escape_unescape": {
  "lineno": 360,
  "symbols_in_volume": [
   "networkx.generate_gml",
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions": {
  "lineno": 380,
  "symbols_in_volume": [
   "codecs.BOM_UTF8",
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.parse_gml",
   "networkx.read_gml",
   "networkx.readwrite.gml.literal_destringizer",
   "networkx.readwrite.gml.literal_stringizer",
   "pytest.raises",
   "tempfile.TemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_generate_error": {
  "lineno": 458,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.generate_gml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_parse_error": {
  "lineno": 391,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.parse_gml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_float_label": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_gml",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_graph_types": {
  "lineno": 297,
  "symbols_in_volume": [
   "networkx.generate_gml",
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_label_kwarg": {
  "lineno": 477,
  "symbols_in_volume": [
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_labels_are_strings": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generate_gml",
   "networkx.readwrite.gml.literal_stringizer"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_name": {
  "lineno": 290,
  "symbols_in_volume": [
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_outofrange_integers": {
  "lineno": 488,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_gml",
   "networkx.write_gml",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml_cytoscape_bug": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.parse_gml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_quotes": {
  "lineno": 234,
  "symbols_in_volume": [
   "networkx.path_graph",
   "networkx.write_gml",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_read_gml": {
  "lineno": 165,
  "symbols_in_volume": [
   "networkx.parse_gml",
   "networkx.read_gml",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate": {
  "lineno": 190,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.read_gml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_tuplelabels": {
  "lineno": 212,
  "symbols_in_volume": [
   "networkx.OrderedGraph",
   "networkx.generate_gml",
   "networkx.readwrite.gml.literal_stringizer"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_unicode_node": {
  "lineno": 256,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_gml",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists": {
  "lineno": 527,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_list_property": {
  "lineno": 572,
  "symbols_in_volume": [
   "networkx.read_gml",
   "textwrap.dedent"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_single_element_list_property": {
  "lineno": 594,
  "symbols_in_volume": [
   "networkx.read_gml",
   "textwrap.dedent"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_multi_element_property_list": {
  "lineno": 528,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_gml",
   "textwrap.dedent"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_one_element_property_list": {
  "lineno": 552,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.write_gml",
   "textwrap.dedent"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.byte_file": {
  "lineno": 520,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "io.BytesIO"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.setup_class": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.freeze"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_gpickle": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.read_gpickle",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_graphs_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "networkx.write_gpickle",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_protocol": {
  "lineno": 62,
  "symbols_in_volume": [
   "networkx.read_gpickle",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_graphs_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "networkx.write_gpickle",
   "tempfile.TemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_from_graph6_bytes": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.from_graph6_bytes",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_read_equals_from_bytes": {
  "lineno": 28,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.from_graph6_bytes",
   "networkx.read_graph6",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_n_data_n_conversion": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.readwrite.graph6.data_to_n",
   "networkx.readwrite.graph6.n_to_data"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestReadGraph6": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestReadGraph6.test_read_many_graph6": {
  "lineno": 38,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_bipartite_graph": {
  "lineno": 76,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_bipartite_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_graph": {
  "lineno": 61,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_large_complete_graph": {
  "lineno": 66,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_length": {
  "lineno": 87,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.random_graphs.gnm_random_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_directed_graphs": {
  "lineno": 83,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.write_graph6",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_header": {
  "lineno": 71,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_null_graph": {
  "lineno": 51,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.null_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_relabeling": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.readwrite.graph6.to_graph6_bytes"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_roundtrip": {
  "lineno": 96,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.random_graphs.gnm_random_graph",
   "networkx.read_graph6",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_trivial_graph": {
  "lineno": 56,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.trivial_graph",
   "networkx.write_graph6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_write_path": {
  "lineno": 106,
  "symbols_in_volume": [
   "networkx.null_graph",
   "networkx.readwrite.graph6.write_graph6_file",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_graphml.BaseGraphML": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.BaseGraphML.setup_class": {
  "lineno": 11,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_bool": {
  "lineno": 609,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.parse_graphml",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_directed_edge_in_undirected": {
  "lineno": 354,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_graphml_header_line": {
  "lineno": 652,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_hyperedge_raise": {
  "lineno": 418,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_key_raise": {
  "lineno": 390,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_multigraph_keys": {
  "lineno": 448,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.parse_graphml",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_preserve_multi_edge_data": {
  "lineno": 471,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.MultiGraph",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.write_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attribute_graphml": {
  "lineno": 337,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attributes_with_groups": {
  "lineno": 703,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_directed_graphml": {
  "lineno": 280,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_undirected_graphml": {
  "lineno": 293,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_graphml": {
  "lineno": 304,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_no_multiedge_graphml": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_only_ids_for_multiedges_graphml": {
  "lineno": 326,
  "symbols_in_volume": [
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_undirected_edge_in_directed": {
  "lineno": 372,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.NetworkXError",
   "networkx.parse_graphml",
   "networkx.read_graphml",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_yfiles_extension": {
  "lineno": 516,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.parse_graphml",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML": {
  "lineno": 996,
  "symbols_in_volume": [
   "networkx.write_graphml_lxml"
  ],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.setup_class": {
  "lineno": 999,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_default_attribute": {
  "lineno": 1112,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.add_path",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_mixed_type_attributes": {
  "lineno": 1127,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.MultiGraph",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_more_multigraph_keys": {
  "lineno": 1095,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_multigraph_to_graph": {
  "lineno": 1153,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.read_graphml",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float": {
  "lineno": 1142,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_graphml",
   "os.close",
   "os.unlink",
   "pytest.importorskip",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float32": {
  "lineno": 1193,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_graphml",
   "networkx.testing.almost_equal",
   "os.close",
   "os.unlink",
   "pytest.importorskip",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64": {
  "lineno": 1177,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_graphml",
   "networkx.testing.almost_equal",
   "os.close",
   "os.unlink",
   "pytest.importorskip",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64_inference": {
  "lineno": 1209,
  "symbols_in_volume": [
   "networkx.read_graphml",
   "os.close",
   "os.unlink",
   "pytest.importorskip",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_attributes": {
  "lineno": 1220,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.read_graphml",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_escape": {
  "lineno": 1233,
  "symbols_in_volume": [
   "io.BytesIO",
   "json.dumps",
   "networkx.Graph",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_interface": {
  "lineno": 1004,
  "symbols_in_volume": [
   "networkx.write_graphml",
   "networkx.write_graphml_lxml",
   "networkx.write_graphml_xml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_named_key_ids_graphml": {
  "lineno": 1024,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "networkx.write_graphml",
   "xml.etree.ElementTree.parse"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_numeric_type_graphml": {
  "lineno": 1069,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_graphml",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal",
   "xml.etree.ElementTree.parse"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_simple_directed_graphml": {
  "lineno": 1012,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_graphml"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestXMLGraphML": {
  "lineno": 1248,
  "symbols_in_volume": [
   "networkx.write_graphml_xml"
  ],
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestXMLGraphML.setup_class": {
  "lineno": 1251,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda": {
  "lineno": 6,
  "symbols_in_volume": [
   "networkx.parse_leda"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA": {
  "lineno": 21,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.parse_leda",
   "networkx.read_leda"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.setup_class": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g": {
  "lineno": 16,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.readwrite.p2g.read_p2g",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g": {
  "lineno": 34,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.OrderedDiGraph",
   "networkx.readwrite.p2g.write_p2g"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g": {
  "lineno": 53,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.readwrite.p2g.read_p2g",
   "networkx.readwrite.p2g.write_p2g",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.setup_class": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "os.fdopen",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.teardown_class": {
  "lineno": 33,
  "symbols_in_volume": [
   "os.unlink"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_ignored_attribute": {
  "lineno": 92,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.write_pajek",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_noname": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.parse_pajek"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek": {
  "lineno": 44,
  "symbols_in_volume": [
   "networkx.parse_pajek",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.parse_pajek",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajet_mat": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.parse_pajek",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.parse_pajek",
   "networkx.read_pajek",
   "networkx.testing.assert_edges_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_unicode": {
  "lineno": 116,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.Graph",
   "networkx.read_pajek",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_pajek"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_write_pajek": {
  "lineno": 79,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.parse_pajek",
   "networkx.read_pajek",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_pajek"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.delete_shapedir": {
  "lineno": 267,
  "symbols_in_volume": [
   "os.path.exists"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.setup_method": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.setup_path": {
  "lineno": 264,
  "symbols_in_volume": [
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.teardown_method": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.test_missing_attributes": {
  "lineno": 272,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.read_shp",
   "networkx.write_shp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.create_shapedir": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.delete_shapedir": {
  "lineno": 246,
  "symbols_in_volume": [
   "os.path.exists"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.setup_method": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.setup_path": {
  "lineno": 234,
  "symbols_in_volume": [
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.teardown_method": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.test_missing_geometry": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.read_shp",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestShp.checkgeom": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.deletetmp": {
  "lineno": 82,
  "symbols_in_volume": [
   "os.path.exists"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setup_method": {
  "lineno": 14,
  "symbols_in_volume": [
   "os.mkdir",
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setup_method.createlayer": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.teardown_method": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.read_shp",
   "networkx.write_shp",
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport.testattributes": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_geometryexport": {
  "lineno": 117,
  "symbols_in_volume": [
   "networkx.read_shp",
   "networkx.write_shp",
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_nodeattributeexport": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.read_shp",
   "networkx.write_shp",
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_wkt_export": {
  "lineno": 200,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.write_shp",
   "os.path.join",
   "tempfile.gettempdir"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload": {
  "lineno": 87,
  "symbols_in_volume": [
   "networkx.read_shp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload.compare_graph_paths_names": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.test_read_shp_nofile": {
  "lineno": 220,
  "symbols_in_volume": [
   "networkx.read_shp",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_bytes_multigraph_graph": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.from_sparse6_bytes"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_sparse6_bytes": {
  "lineno": 11,
  "symbols_in_volume": [
   "networkx.from_sparse6_bytes",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_many_graph6": {
  "lineno": 67,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.read_sparse6",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_sparse6": {
  "lineno": 59,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.from_sparse6_bytes",
   "networkx.read_sparse6",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.testing.utils.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_bipartite": {
  "lineno": 137,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_bipartite_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_graph": {
  "lineno": 117,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_empty_graph": {
  "lineno": 99,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.empty_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_large_empty_graph": {
  "lineno": 105,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.empty_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_directed_graphs": {
  "lineno": 157,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.DiGraph",
   "networkx.NetworkXNotImplemented",
   "networkx.write_sparse6",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_header": {
  "lineno": 123,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.complete_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_null_graph": {
  "lineno": 87,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.null_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_padding": {
  "lineno": 129,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.path_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_read_write_inverse": {
  "lineno": 145,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.from_sparse6_bytes",
   "networkx.random_graphs.gnm_random_graph",
   "networkx.testing.utils.assert_edges_equal",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_trivial_graph": {
  "lineno": 93,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.trivial_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_very_large_empty_graph": {
  "lineno": 111,
  "symbols_in_volume": [
   "io.BytesIO",
   "networkx.empty_graph",
   "networkx.write_sparse6"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_write_path": {
  "lineno": 161,
  "symbols_in_volume": [
   "networkx.null_graph",
   "networkx.write_sparse6",
   "os.remove",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.assert_equal": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.read_yaml",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.write_yaml",
   "os.close",
   "os.unlink",
   "tempfile.mkstemp"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.build_graphs": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.setup_class": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testDirected": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testMultiGraph": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testUndirected": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.relabel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.relabel._relabel_copy": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.relabel._relabel_inplace": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.NetworkXUnfeasible",
   "networkx.selfloop_edges",
   "networkx.topological_sort"
  ],
  "type": "function"
 },
 "networkx.relabel.convert_node_labels_to_integers": {
  "lineno": 224,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.set_node_attributes"
  ],
  "type": "function"
 },
 "networkx.relabel.relabel_nodes": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.release": {
  "lineno": null,
  "symbols_in_volume": [
   "os.path.abspath",
   "os.path.split",
   "version.date",
   "version.date_info",
   "version.vcs_info",
   "version.version",
   "version.version_info"
  ],
  "type": "module"
 },
 "networkx.release.get_info": {
  "lineno": 128,
  "symbols_in_volume": [
   "datetime.datetime.utcfromtimestamp",
   "os.environ.get",
   "time.asctime",
   "time.time",
   "version.date",
   "version.date_info",
   "version.date_info.strftime",
   "version.vcs_info",
   "version.version",
   "version.version_info"
  ],
  "type": "function"
 },
 "networkx.release.get_revision": {
  "lineno": 113,
  "symbols_in_volume": [
   "os.path.isdir",
   "os.path.join"
  ],
  "type": "function"
 },
 "networkx.release.write_versionfile": {
  "lineno": 40,
  "symbols_in_volume": [
   "os.path.isfile",
   "os.path.join",
   "version.version"
  ],
  "type": "function"
 },
 "networkx.release.write_versionfile.writefile": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.testing.test": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.testing.test.run": {
  "lineno": 1,
  "symbols_in_volume": [
   "pytest.main"
  ],
  "type": "function"
 },
 "networkx.testing.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.testing.tests.test_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual": {
  "lineno": 51,
  "symbols_in_volume": [
   "networkx.testing.assert_edges_equal"
  ],
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_duplicate_edges": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_duplicate_edges_with_data": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_equal": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_not_equal": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_equal": {
  "lineno": 64,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_not_equal": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_no_edges": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_edges_with_data": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_edges_with_keys": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_multiedges": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual": {
  "lineno": 116,
  "symbols_in_volume": [
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_digraphs_equal": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_equal": {
  "lineno": 119,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_cycle",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal2": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal3": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_multidigraphs_equal": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_multigraphs_equal": {
  "lineno": 131,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.add_path",
   "networkx.path_graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_edges_with_data_not_equal": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_equal": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_not_equal": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_with_data_equal": {
  "lineno": 36,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_equal": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_not_equal": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.testing.utils.almost_equal": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.utils.assert_edges_equal": {
  "lineno": 26,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.testing.utils.assert_graphs_equal": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.testing.utils.assert_nodes_equal": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.tests.test_all_random_functions": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip",
   "random.random",
   "random.seed"
  ],
  "type": "module"
 },
 "networkx.tests.test_all_random_functions.run_all_random_functions": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.algebraic_connectivity",
   "networkx.algorithms.approximation.average_clustering",
   "networkx.algorithms.bipartite.configuration_model",
   "networkx.algorithms.bipartite.gnmk_random_graph",
   "networkx.algorithms.bipartite.preferential_attachment_graph",
   "networkx.algorithms.bipartite.random_graph",
   "networkx.algorithms.coloring.strategy_random_sequential",
   "networkx.algorithms.community.asyn_fluidc",
   "networkx.algorithms.community.kernighan_lin_bisection",
   "networkx.algorithms.connectivity.edge_augmentation.greedy_k_edge_augmentation",
   "networkx.algorithms.threshold.random_threshold_sequence",
   "networkx.algorithms.threshold.swap_d",
   "networkx.algorithms.tree.Edmonds",
   "networkx.algorithms.tree.greedy_branching",
   "networkx.approximate_current_flow_betweenness_centrality",
   "networkx.barabasi_albert_graph",
   "networkx.barbell_graph",
   "networkx.betweenness_centrality",
   "networkx.complete_graph",
   "networkx.configuration_model",
   "networkx.connected_double_edge_swap",
   "networkx.connected_watts_strogatz_graph",
   "networkx.dense_gnm_random_graph",
   "networkx.directed.random_uniform_k_out_graph",
   "networkx.directed_configuration_model",
   "networkx.double_edge_swap",
   "networkx.duplication_divergence_graph",
   "networkx.edge_betweenness",
   "networkx.edge_betweenness_centrality",
   "networkx.expected_degree_graph",
   "networkx.extended_barabasi_albert_graph",
   "networkx.fast_gnp_random_graph",
   "networkx.fiedler_vector",
   "networkx.fruchterman_reingold_layout",
   "networkx.gaussian_random_partition_graph",
   "networkx.general_random_intersection_graph",
   "networkx.generators.LFR_benchmark_graph",
   "networkx.geographical_threshold_graph",
   "networkx.gn_graph",
   "networkx.gnc_graph",
   "networkx.gnm_random_graph",
   "networkx.gnp_random_graph",
   "networkx.gnr_graph",
   "networkx.joint_degree_graph",
   "networkx.k_random_intersection_graph",
   "networkx.lattice_reference",
   "networkx.maximal_independent_set",
   "networkx.navigable_small_world_graph",
   "networkx.newman_watts_strogatz_graph",
   "networkx.omega",
   "networkx.partial_duplication_graph",
   "networkx.planted_partition_graph",
   "networkx.powerlaw_cluster_graph",
   "networkx.random_clustered_graph",
   "networkx.random_degree_sequence_graph",
   "networkx.random_geometric_graph",
   "networkx.random_internet_as_graph",
   "networkx.random_k_out_graph",
   "networkx.random_kernel_graph",
   "networkx.random_layout",
   "networkx.random_lobster",
   "networkx.random_partition_graph",
   "networkx.random_powerlaw_tree",
   "networkx.random_powerlaw_tree_sequence",
   "networkx.random_reference",
   "networkx.random_regular_graph",
   "networkx.random_shell_graph",
   "networkx.random_tree",
   "networkx.relaxed_caveman_graph",
   "networkx.rich_club_coefficient",
   "networkx.scale_free_graph",
   "networkx.sigma",
   "networkx.soft_random_geometric_graph",
   "networkx.spectral_graph_forge",
   "networkx.spectral_ordering",
   "networkx.stochastic_block_model",
   "networkx.thresholded_random_geometric_graph",
   "networkx.tournament.random_tournament",
   "networkx.uniform_random_intersection_graph",
   "networkx.utils.discrete_sequence",
   "networkx.utils.powerlaw_sequence",
   "networkx.utils.random_weighted_sample",
   "networkx.utils.weighted_choice",
   "networkx.utils.zipf_rv",
   "networkx.watts_strogatz_graph",
   "networkx.waxman_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.run_all_random_functions.kernel_integral": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.t": {
  "lineno": 19,
  "symbols_in_volume": [
   "random.random",
   "random.seed"
  ],
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.test_rng_interface": {
  "lineno": 208,
  "symbols_in_volume": [
   "pytest.mark.slow",
   "random.random",
   "random.seed"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.tests.test_convert.TestConvert": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.edgelists_equal": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_attribute_dict_integrity": {
  "lineno": 251,
  "symbols_in_volume": [
   "networkx.OrderedDiGraph",
   "networkx.OrderedGraph",
   "networkx.convert.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping": {
  "lineno": 265,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping.Custom": {
  "lineno": 269,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping.custom_dict": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_digraphs": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.convert.from_dict_of_dicts",
   "networkx.convert.from_dict_of_lists",
   "networkx.convert.to_dict_of_dicts",
   "networkx.convert.to_dict_of_lists",
   "networkx.convert.to_networkx_graph",
   "networkx.generators.classic.cycle_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_directed_to_undirected": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.MultiDiGraph",
   "networkx.MultiGraph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_edgelists": {
  "lineno": 213,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.path_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_exceptions": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.convert.to_networkx_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_exceptions.G": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_graph": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.convert.from_dict_of_dicts",
   "networkx.convert.from_dict_of_lists",
   "networkx.convert.to_dict_of_dicts",
   "networkx.convert.to_dict_of_lists",
   "networkx.convert.to_networkx_graph",
   "networkx.cycle_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_simple_graphs": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.convert.from_dict_of_dicts",
   "networkx.convert.from_dict_of_lists",
   "networkx.convert.to_dict_of_dicts",
   "networkx.convert.to_dict_of_lists",
   "networkx.convert.to_networkx_graph",
   "networkx.generators.classic.barbell_graph",
   "networkx.path_graph",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_to_edgelist": {
  "lineno": 260,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.testing.assert_edges_equal",
   "networkx.to_edgelist"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops": {
  "lineno": 134,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.convert.from_dict_of_dicts",
   "networkx.convert.from_dict_of_lists",
   "networkx.convert.to_dict_of_dicts",
   "networkx.convert.to_dict_of_lists",
   "networkx.convert.to_networkx_graph",
   "networkx.generators.classic.cycle_graph",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.assert_equal": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.create_weighted": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.identity_conversion": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.from_numpy_matrix",
   "networkx.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.setup_method": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.generators.classic.barbell_graph",
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_dtype_int_graph": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_dtype_int_multigraph": {
  "lineno": 231,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_exceptions": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.to_networkx_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_dtype": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.from_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_parallel_edges": {
  "lineno": 174,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.from_numpy_matrix",
   "networkx.testing.utils.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_type": {
  "lineno": 113,
  "symbols_in_volume": [
   "networkx.adj_matrix",
   "networkx.cycle_graph",
   "networkx.from_numpy_array",
   "networkx.from_numpy_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_array": {
  "lineno": 63,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_matrix": {
  "lineno": 58,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_array": {
  "lineno": 52,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_matrix": {
  "lineno": 47,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_array": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "lineno": 80,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_array": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_nodelist": {
  "lineno": 91,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.generators.classic.path_graph",
   "networkx.to_numpy_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_numpy_multigraph": {
  "lineno": 163,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_shape": {
  "lineno": 42,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_numpy_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_symmetric": {
  "lineno": 210,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.from_numpy_matrix",
   "networkx.testing.utils.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_to_numpy_recarray": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_recarray"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_weight_keyword": {
  "lineno": 104,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.classic.path_graph",
   "networkx.to_numpy_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.assert_equal": {
  "lineno": 255,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.create_weighted": {
  "lineno": 249,
  "symbols_in_volume": [
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.identity_conversion": {
  "lineno": 259,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.from_numpy_array",
   "networkx.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.setup_method": {
  "lineno": 243,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.generators.classic.barbell_graph",
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_graph": {
  "lineno": 416,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_multigraph": {
  "lineno": 426,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.complete_graph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_dtype": {
  "lineno": 339,
  "symbols_in_volume": [
   "networkx.from_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_parallel_edges": {
  "lineno": 369,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.utils.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_type": {
  "lineno": 315,
  "symbols_in_volume": [
   "networkx.from_numpy_array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_digraph_array": {
  "lineno": 278,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_graph_array": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_digraph_array": {
  "lineno": 288,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_graph_array": {
  "lineno": 283,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_nodelist": {
  "lineno": 293,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.generators.classic.path_graph",
   "networkx.to_numpy_array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_numpy_multigraph": {
  "lineno": 358,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_shape": {
  "lineno": 268,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_numpy_array",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_symmetric": {
  "lineno": 405,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.from_numpy_array",
   "networkx.testing.utils.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_to_numpy_recarray": {
  "lineno": 348,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_numpy_recarray"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_weight_keyword": {
  "lineno": 306,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.classic.path_graph",
   "networkx.to_numpy_array"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas": {
  "lineno": null,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "module"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas": {
  "lineno": 11,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.setup_method": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_multigraph": {
  "lineno": 238,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_normal_graph_no_action": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_exceptions": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_pandas_adjacency",
   "networkx.to_networkx_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency": {
  "lineno": 203,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_pandas_adjacency"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency_named": {
  "lineno": 225,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.from_pandas_adjacency",
   "networkx.to_pandas_adjacency"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist": {
  "lineno": 153,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.cycle_graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal",
   "networkx.to_edgelist",
   "networkx.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_all_attr": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.MultiGraph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_int_attr_name": {
  "lineno": 118,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_invalid_attr": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_pandas_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr": {
  "lineno": 49,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr_incl_target": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multidigraph_and_edge_attr": {
  "lineno": 71,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_no_attr": {
  "lineno": 148,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_one_attr": {
  "lineno": 107,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_nonexisting_edgekey_raises": {
  "lineno": 277,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.exception.NetworkXError",
   "networkx.from_pandas_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_roundtrip": {
  "lineno": 212,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.from_pandas_adjacency",
   "networkx.from_pandas_edgelist",
   "networkx.testing.assert_graphs_equal",
   "networkx.to_pandas_adjacency",
   "networkx.to_pandas_edgelist"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_custom_source_or_target_col_exists": {
  "lineno": 185,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.path_graph",
   "networkx.set_edge_attributes",
   "networkx.to_pandas_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_default_source_or_target_col_exists": {
  "lineno": 171,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.path_graph",
   "networkx.set_edge_attributes",
   "networkx.to_pandas_edgelist",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.assert_isomorphic": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.is_isomorphic"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.create_weighted": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.identity_conversion": {
  "lineno": 43,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.from_scipy_sparse_matrix",
   "networkx.to_networkx_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.setup_class": {
  "lineno": 9,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.setup_method": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.Graph",
   "networkx.generators.classic.barbell_graph",
   "networkx.generators.classic.cycle_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_empty": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_exceptions": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.to_networkx_graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_exceptions.G": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword": {
  "lineno": 124,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.classic.path_graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword_raise": {
  "lineno": 163,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.generators.classic.path_graph",
   "networkx.to_scipy_sparse_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_from_scipy_sparse_matrix_parallel_edges": {
  "lineno": 208,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.from_scipy_sparse_matrix",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_digraph_matrix": {
  "lineno": 83,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_graph_matrix": {
  "lineno": 78,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "lineno": 93,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "lineno": 88,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_nodelist": {
  "lineno": 98,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.generators.classic.path_graph",
   "networkx.to_numpy_matrix",
   "networkx.to_scipy_sparse_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_null_raise": {
  "lineno": 172,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.to_scipy_sparse_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_ordering": {
  "lineno": 182,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_digraph": {
  "lineno": 199,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_graph": {
  "lineno": 190,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_shape": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.from_scipy_sparse_matrix",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_symmetric": {
  "lineno": 248,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.from_scipy_sparse_matrix",
   "networkx.testing.assert_graphs_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_weight_keyword": {
  "lineno": 111,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.generators.classic.path_graph",
   "networkx.to_scipy_sparse_matrix"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_no_path": {
  "lineno": 32,
  "symbols_in_volume": [
   "networkx.NetworkXNoPath",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_pointless_concept": {
  "lineno": 17,
  "symbols_in_volume": [
   "networkx.NetworkXPointlessConcept",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unbounded": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.NetworkXUnbounded",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unfeasible": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.NetworkXUnfeasible",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxalgorithmerr": {
  "lineno": 22,
  "symbols_in_volume": [
   "networkx.NetworkXAlgorithmError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxerr": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxexception": {
  "lineno": 7,
  "symbols_in_volume": [
   "networkx.NetworkXException",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.tests.test_relabel.TestRelabel": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers": {
  "lineno": 8,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.generators.classic.empty_graph",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers2": {
  "lineno": 69,
  "symbols_in_volume": [
   "networkx.convert_node_labels_to_integers",
   "networkx.generators.classic.empty_graph"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers_raise": {
  "lineno": 85,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXError",
   "networkx.convert_node_labels_to_integers",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_copy_name": {
  "lineno": 155,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_isolated_nodes_to_same": {
  "lineno": 142,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_copy": {
  "lineno": 233,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_merge_nodes": {
  "lineno": 187,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_copy": {
  "lineno": 264,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_inplace": {
  "lineno": 221,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_copy": {
  "lineno": 253,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_inplace": {
  "lineno": 209,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_nonnumeric_key": {
  "lineno": 275,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.MultiGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph": {
  "lineno": 122,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function": {
  "lineno": 97,
  "symbols_in_volume": [
   "networkx.empty_graph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function.mapping": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing": {
  "lineno": 149,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.relabel_nodes",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph": {
  "lineno": 135,
  "symbols_in_volume": [
   "networkx.MultiDiGraph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph": {
  "lineno": 128,
  "symbols_in_volume": [
   "networkx.MultiGraph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_edges_equal",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_orderedgraph": {
  "lineno": 114,
  "symbols_in_volume": [
   "networkx.OrderedGraph",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_selfloop": {
  "lineno": 176,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.MultiDiGraph",
   "networkx.relabel_nodes",
   "networkx.testing.assert_nodes_equal"
  ],
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_toposort": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.is_isomorphic",
   "networkx.relabel_nodes"
  ],
  "type": "function"
 },
 "networkx.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.contextmanagers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.contextmanagers.reversed": {
  "lineno": 7,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.utils.decorators": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "module"
 },
 "networkx.utils.decorators._open_bz2": {
  "lineno": 89,
  "symbols_in_volume": [
   "bz2.BZ2File"
  ],
  "type": "function"
 },
 "networkx.utils.decorators._open_gz": {
  "lineno": 83,
  "symbols_in_volume": [
   "gzip.open"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.nodes_or_number": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.nodes_or_number._nodes_or_number": {
  "lineno": 283,
  "symbols_in_volume": [
   "decorator.decorator",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.not_implemented_for": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.not_implemented_for._not_implemented_for": {
  "lineno": 57,
  "symbols_in_volume": [
   "decorator.decorator",
   "networkx.NetworkXNotImplemented"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.open_file": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.open_file._open_file": {
  "lineno": 170,
  "symbols_in_volume": [
   "decorator.decorator",
   "networkx.NetworkXError",
   "os.path.splitext",
   "pathlib.Path"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state": {
  "lineno": 308,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state.save_random_state": {
  "lineno": 337,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "numpy.random.get_state",
   "numpy.random.set_state"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state.wrapper": {
  "lineno": 345,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.py_random_state": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.py_random_state._random_state": {
  "lineno": 453,
  "symbols_in_volume": [
   "decorator.decorator",
   "networkx.NetworkXError",
   "networkx.utils.create_py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.decorators.random_state": {
  "lineno": 356,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.decorators.random_state._random_state": {
  "lineno": 392,
  "symbols_in_volume": [
   "decorator.decorator",
   "networkx.NetworkXError",
   "networkx.utils.create_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.heaps": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.heaps.BinaryHeap": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.heaps.BinaryHeap.__init__": {
  "lineno": 307,
  "symbols_in_volume": [
   "itertools.count"
  ],
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.get": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.insert": {
  "lineno": 351,
  "symbols_in_volume": [
   "heapq.heappush"
  ],
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.min": {
  "lineno": 314,
  "symbols_in_volume": [
   "heapq.heappop",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.pop": {
  "lineno": 330,
  "symbols_in_volume": [
   "heapq.heappop",
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item.__init__": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap._Item.__repr__": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__bool__": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__contains__": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__init__": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__len__": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__nonzero__": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.get": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.insert": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.min": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.pop": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node.__init__": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.__init__": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._cut": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._link": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._merge_children": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.get": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.insert": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.min": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.pop": {
  "lineno": 183,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.heaps._inherit_doc": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.heaps._inherit_doc.func": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.mapped_queue.MappedQueue": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.mapped_queue.MappedQueue.__init__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.__len__": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._heapify": {
  "lineno": 61,
  "symbols_in_volume": [
   "heapq.heapify"
  ],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._siftdown": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._siftup": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.pop": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.push": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.remove": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.update": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.misc.PythonRandomInterface": {
  "lineno": 317,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "class"
 },
 "networkx.utils.misc.PythonRandomInterface.__init__": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.random.mtrand._rand"
  ],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.choice": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.expovariate": {
  "lineno": 359,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.gauss": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.paretovariate": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.randint": {
  "lineno": 355,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.random": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.randrange": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.sample": {
  "lineno": 352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.shuffle": {
  "lineno": 346,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.uniform": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.arbitrary_element": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.consume": {
  "lineno": 237,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "networkx.utils.misc.create_py_random_state": {
  "lineno": 378,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "numpy.random.mtrand._rand",
   "random",
   "random.Random",
   "random._inst"
  ],
  "type": "function"
 },
 "networkx.utils.misc.create_random_state": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "numpy.random.mtrand._rand"
  ],
  "type": "function"
 },
 "networkx.utils.misc.default_opener": {
  "lineno": 126,
  "symbols_in_volume": [
   "subprocess.call",
   "sys.platform"
  ],
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array1": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array2": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "networkx.utils.misc.empty_generator": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.flatten": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.generate_unique_node": {
  "lineno": 121,
  "symbols_in_volume": [
   "uuid.uuid1"
  ],
  "type": "function"
 },
 "networkx.utils.misc.groups": {
  "lineno": 253,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "networkx.utils.misc.is_iterator": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.is_list_of_ints": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.is_string_like": {
  "lineno": 28,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.utils.misc.iterable": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.misc.make_list_of_ints": {
  "lineno": 68,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "function"
 },
 "networkx.utils.misc.make_str": {
  "lineno": 114,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "networkx.utils.misc.pairwise": {
  "lineno": 244,
  "symbols_in_volume": [
   "itertools.chain",
   "itertools.tee"
  ],
  "type": "function"
 },
 "networkx.utils.misc.to_tuple": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.random_sequence": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.random_sequence.cumulative_distribution": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.random_sequence.discrete_sequence": {
  "lineno": 98,
  "symbols_in_volume": [
   "bisect.bisect_left",
   "networkx.NetworkXError",
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.random_sequence.powerlaw_sequence": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.random_sequence.random_weighted_sample": {
  "lineno": 130,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.random_sequence.weighted_choice": {
  "lineno": 144,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.random_sequence.zipf_rv": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.utils.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.rcm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.rcm.connected_cuthill_mckee_ordering": {
  "lineno": 126,
  "symbols_in_volume": [
   "collections.deque",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.utils.rcm.cuthill_mckee_ordering": {
  "lineno": 13,
  "symbols_in_volume": [
   "networkx.connected_components"
  ],
  "type": "function"
 },
 "networkx.utils.rcm.pseudo_peripheral_node": {
  "lineno": 143,
  "symbols_in_volume": [
   "networkx.shortest_path_length",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "networkx.utils.rcm.reverse_cuthill_mckee_ordering": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_contextmanager": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_contextmanager.test_reversed": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.DiGraph",
   "networkx.utils.reversed"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.read": {
  "lineno": 61,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.setup_method": {
  "lineno": 48,
  "symbols_in_volume": [
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.teardown_method": {
  "lineno": 53,
  "symbols_in_volume": [
   "os.unlink"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_pathlib": {
  "lineno": 105,
  "symbols_in_volume": [
   "pathlib.Path"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj_path_none": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_path_none": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.write": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0": {
  "lineno": 65,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1": {
  "lineno": 70,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default": {
  "lineno": 74,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.utils.decorators.open_file",
   "tempfile.NamedTemporaryFile"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_np_random_state": {
  "lineno": 172,
  "symbols_in_volume": [
   "networkx.utils.decorators.np_random_state",
   "networkx.utils.decorators.random_state",
   "networkx.utils.decorators.random_state.random_sample"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_py_random_state": {
  "lineno": 177,
  "symbols_in_volume": [
   "networkx.utils.decorators.py_random_state",
   "networkx.utils.decorators.random_state",
   "networkx.utils.decorators.random_state.random",
   "networkx.utils.misc.PythonRandomInterface",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_random_state": {
  "lineno": 167,
  "symbols_in_volume": [
   "networkx.utils.decorators.random_state",
   "networkx.utils.decorators.random_state.random_sample"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.setup_class": {
  "lineno": 162,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_None": {
  "lineno": 184,
  "symbols_in_volume": [
   "random.random",
   "random.seed"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_int": {
  "lineno": 207,
  "symbols_in_volume": [
   "random.Random",
   "random.random",
   "random.seed"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random_RandomState": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_py_random": {
  "lineno": 253,
  "symbols_in_volume": [
   "pytest.raises",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator": {
  "lineno": 19,
  "symbols_in_volume": [
   "networkx.Graph"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator.test1": {
  "lineno": 20,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.Graph",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key.test1": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.NetworkXNotImplemented",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise.test1": {
  "lineno": 40,
  "symbols_in_volume": [
   "networkx.utils.decorators.not_implemented_for"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_preserve_random_state": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.utils.decorators.preserve_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_invalid_arg_index": {
  "lineno": 293,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_invalid_arg_index.make_random_state": {
  "lineno": 296,
  "symbols_in_volume": [
   "networkx.utils.decorators.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_string_arg_index": {
  "lineno": 273,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_string_arg_index.make_random_state": {
  "lineno": 276,
  "symbols_in_volume": [
   "networkx.utils.decorators.py_random_state"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_invalid_arg_index": {
  "lineno": 283,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_invalid_arg_index.make_random_state": {
  "lineno": 286,
  "symbols_in_volume": [
   "networkx.utils.decorators.random_state"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_string_arg_index": {
  "lineno": 263,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_string_arg_index.make_random_state": {
  "lineno": 266,
  "symbols_in_volume": [
   "networkx.utils.decorators.random_state"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps": {
  "lineno": null,
  "symbols_in_volume": [
   "networkx.NetworkXError"
  ],
  "type": "module"
 },
 "networkx.utils.tests.test_heaps.X": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.tests.test_heaps.X.__eq__": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ge__": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__gt__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__hash__": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__le__": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__lt__": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ne__": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps._test_heap_class": {
  "lineno": 90,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.test_BinaryHeap": {
  "lineno": 129,
  "symbols_in_volume": [
   "networkx.utils.BinaryHeap"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.test_PairingHeap": {
  "lineno": 125,
  "symbols_in_volume": [
   "networkx.utils.PairingHeap"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue": {
  "lineno": 4,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue._check_map": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue._make_mapped_queue": {
  "lineno": 12,
  "symbols_in_volume": [
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.setup": {
  "lineno": 5,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_heapify": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_init": {
  "lineno": 24,
  "symbols_in_volume": [
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_len": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_pop": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push": {
  "lineno": 99,
  "symbols_in_volume": [
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push_duplicate": {
  "lineno": 108,
  "symbols_in_volume": [
   "networkx.utils.mapped_queue.MappedQueue"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_leaf": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_root": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_leaf": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_multiple": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_single": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_leaf": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_left_child": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_multiple": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_one_child": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_right_child": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_leaf": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_root": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_misc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.setup_class": {
  "lineno": 75,
  "symbols_in_volume": [
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array1": {
  "lineno": 92,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array1"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array2": {
  "lineno": 102,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array2"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_a": {
  "lineno": 112,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array",
   "networkx.utils.dict_to_numpy_array2"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_b": {
  "lineno": 126,
  "symbols_in_volume": [
   "networkx.utils.dict_to_numpy_array",
   "networkx.utils.dict_to_numpy_array1"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_numpy_to_list_of_ints": {
  "lineno": 82,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.make_list_of_ints",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_PythonRandomInterface": {
  "lineno": 206,
  "symbols_in_volume": [
   "networkx.utils.PythonRandomInterface",
   "pytest.importorskip"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_create_py_random_state": {
  "lineno": 188,
  "symbols_in_volume": [
   "networkx.utils.PythonRandomInterface",
   "networkx.utils.create_py_random_state",
   "pytest.importorskip",
   "pytest.raises",
   "random.Random"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_create_random_state": {
  "lineno": 175,
  "symbols_in_volume": [
   "networkx.utils.create_random_state",
   "pytest.importorskip",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_graph_iterable": {
  "lineno": 38,
  "symbols_in_volume": [
   "networkx.complete_graph",
   "networkx.utils.iterable"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_groups": {
  "lineno": 150,
  "symbols_in_volume": [
   "networkx.utils.groups"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_is_string_like": {
  "lineno": 23,
  "symbols_in_volume": [
   "networkx.utils.is_string_like"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_iterable": {
  "lineno": 29,
  "symbols_in_volume": [
   "networkx.utils.iterable"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_list_of_ints": {
  "lineno": 45,
  "symbols_in_volume": [
   "networkx.NetworkXError",
   "networkx.utils.make_list_of_ints",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_bytes": {
  "lineno": 60,
  "symbols_in_volume": [
   "networkx.utils.make_str"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_unicode": {
  "lineno": 67,
  "symbols_in_volume": [
   "networkx.utils.make_str"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_pairwise": {
  "lineno": 137,
  "symbols_in_volume": [
   "networkx.utils.pairwise"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_random_number_distribution": {
  "lineno": 54,
  "symbols_in_volume": [
   "networkx.utils.discrete_sequence",
   "networkx.utils.powerlaw_sequence"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_to_tuple": {
  "lineno": 158,
  "symbols_in_volume": [
   "networkx.utils.to_tuple"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_random_sequence.test_degree_sequences": {
  "lineno": 10,
  "symbols_in_volume": [
   "networkx.utils.powerlaw_sequence"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_choice": {
  "lineno": 33,
  "symbols_in_volume": [
   "networkx.utils.weighted_choice"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_sample": {
  "lineno": 25,
  "symbols_in_volume": [
   "networkx.utils.random_weighted_sample",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_zipf_rv": {
  "lineno": 16,
  "symbols_in_volume": [
   "networkx.utils.zipf_rv",
   "pytest.raises"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_rcm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic": {
  "lineno": 30,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.utils.reverse_cuthill_mckee_ordering"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic.smallest_degree": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee": {
  "lineno": 5,
  "symbols_in_volume": [
   "networkx.Graph",
   "networkx.utils.reverse_cuthill_mckee_ordering"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.tests.test_unionfind.test_empty_union": {
  "lineno": 37,
  "symbols_in_volume": [
   "networkx.utils.UnionFind"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_subtree_union": {
  "lineno": 15,
  "symbols_in_volume": [
   "networkx.utils.UnionFind"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_unionfind": {
  "lineno": 4,
  "symbols_in_volume": [
   "networkx.utils.UnionFind"
  ],
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_unionfind_weights": {
  "lineno": 27,
  "symbols_in_volume": [
   "networkx.utils.UnionFind"
  ],
  "type": "function"
 },
 "networkx.utils.union_find": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "networkx.utils.union_find.UnionFind": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "networkx.utils.union_find.UnionFind.__getitem__": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__init__": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__iter__": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.to_sets": {
  "lineno": 73,
  "symbols_in_volume": [
   "networkx.utils.groups"
  ],
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.union": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "networkx.version": {
  "lineno": null,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "module"
 }
}