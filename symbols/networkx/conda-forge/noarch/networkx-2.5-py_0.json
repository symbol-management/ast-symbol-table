{
 "*": {
  "data": {
   "imports": [
    "networkx.utils.contextmanagers",
    "networkx.utils.decorators",
    "networkx.utils.heaps",
    "networkx.utils.misc",
    "networkx.utils.random_sequence",
    "networkx.utils.rcm",
    "networkx.utils.union_find"
   ]
  },
  "type": "star-import"
 },
 "networkx": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "networkx.m",
    "networkx.release.authors",
    "networkx.release.date",
    "networkx.release.version",
    "networkx.sys"
   ]
  },
  "type": "module"
 },
 "networkx.__author__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.__bibtex__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "networkx.__date__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.__version__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.algorithms": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.all_node_cuts": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.all_node_cuts"
  },
  "type": "import"
 },
 "networkx.algorithms.all_pairs_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.all_pairs_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clique.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clique.clique_removal": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.algorithms.approximation.ramsey.ramsey_R2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.large_clique_size": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "_clique_heuristic",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.large_clique_size._clique_heuristic": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "_clique_heuristic",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.max_clique": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "clique_removal",
    "networkx.complement"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clique.ramsey": {
  "data": {
   "shadows": "networkx.algorithms.approximation.ramsey"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clustering_coefficient": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clustering_coefficient.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clustering_coefficient.average_clustering": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "float",
    "int",
    "len",
    "list",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clustering_coefficient.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clustering_coefficient.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity": {
  "data": {
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.approximation.connectivity.INF": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.connectivity.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_pred_succ": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "networkx.NetworkXException",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_shortest_path": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "_bidirectional_pred_succ"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "iter_func",
    "networkx.algorithms.approximation.connectivity.itertools",
    "networkx.algorithms.approximation.connectivity.local_node_connectivity",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity.local_node_connectivity": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "_bidirectional_shortest_path",
    "min",
    "networkx.NetworkXError",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.approximation.connectivity.INF",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "connected_func",
    "iter_func",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.connectivity.itertools",
    "networkx.algorithms.approximation.connectivity.local_node_connectivity",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "operator.itemgetter",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity.neighbors": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.connectivity.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.dominating_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.dominating_set.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.dominating_set.min_edge_dominating_set": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ValueError",
    "maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "len",
    "min",
    "not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set._cost": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.independent_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.independent_set.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.independent_set.clique_removal": {
  "data": {
   "shadows": "networkx.algorithms.approximation.clique_removal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.independent_set.maximum_independent_set": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.clique_removal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents": {
  "data": {
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.approximation.kcomponents.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView": {
  "data": {
   "lineno": 265
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__getitem__": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__init__": {
  "data": {
   "lineno": 268
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__iter__": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__len__": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__getitem__": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "KeyError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__init__": {
  "data": {
   "lineno": 248
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__iter__": {
  "data": {
   "lineno": 256
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__len__": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.reportviews.DegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__getitem__": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__iter__": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.__getitem__": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.adj": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.adjacency": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.degree": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.single_edge_dict": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.subgraph": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.kcomponents._AntiGraph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.kcomponents._cliques_heuristic": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "_same",
    "dict",
    "enumerate",
    "len",
    "min",
    "networkx.core_number",
    "networkx.density",
    "networkx.k_core",
    "set",
    "set.intersection",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._same": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "max",
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.k_components": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "_AntiGraph",
    "_cliques_heuristic",
    "biconnected_components",
    "collections.defaultdict",
    "combinations",
    "core_number",
    "k_core",
    "len",
    "list",
    "max",
    "networkx.algorithms.approximation.kcomponents.itertools",
    "networkx.algorithms.approximation.local_node_connectivity",
    "networkx.biconnected_components",
    "networkx.connected_components",
    "networkx.core_number",
    "networkx.density",
    "networkx.k_core",
    "node_connectivity",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.local_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.approximation.local_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.matching.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.matching.min_maximal_matching": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.ramsey": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.ramsey.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.ramsey.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.ramsey.ramsey_R2": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "arbitrary_element",
    "len",
    "max",
    "networkx.all_neighbors",
    "networkx.non_neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.steinertree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.steinertree.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.steinertree.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.steinertree.metric_closure": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.all_pairs_dijkstra",
    "networkx.utils.not_implemented_for",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.steinertree.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.steinertree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.steinertree.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.steinertree.steiner_tree": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "min",
    "networkx.algorithms.approximation.steinertree.metric_closure",
    "networkx.minimum_spanning_edges",
    "networkx.utils.not_implemented_for",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.average_clustering": {
  "data": {
   "shadows": "networkx.algorithms.approximation.average_clustering"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_complete": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_dodecahedral": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.dodecahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_empty": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen_seed": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_tetrahedral": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.tetrahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval": {
  "data": {
   "lineno": 36
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_barbell_graph": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.approximation.clique_removal",
    "networkx.algorithms.approximation.tests.test_clique.is_clique",
    "networkx.algorithms.approximation.tests.test_clique.is_independent_set",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_complete_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.approximation.clique_removal",
    "networkx.algorithms.approximation.tests.test_clique.is_clique",
    "networkx.algorithms.approximation.tests.test_clique.is_independent_set",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_trivial_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.algorithms.approximation.clique_removal",
    "networkx.algorithms.approximation.tests.test_clique.is_clique",
    "networkx.algorithms.approximation.tests.test_clique.is_independent_set",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique": {
  "data": {
   "lineno": 63
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_complete_graph": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.max_clique",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_maximal_by_cardinality": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.max_clique",
    "networkx.complete_graph",
    "networkx.lollipop_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_null_graph": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.max_clique",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.clique_removal": {
  "data": {
   "shadows": "networkx.algorithms.approximation.clique_removal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.is_clique": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.is_independent_set": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.large_clique_size": {
  "data": {
   "shadows": "networkx.algorithms.approximation.large_clique_size"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.max_clique": {
  "data": {
   "shadows": "networkx.algorithms.approximation.max_clique"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.test_large_clique_size": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.add_cycle",
    "networkx.algorithms.approximation.large_clique_size",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox": {
  "data": {
   "lineno": 133
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.setup_class": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.gnp_random_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_complete": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cutoff": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cycles": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_paths": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.approx": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_complete_graphs": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_directed_node_connectivity": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_dodecahedral": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.dodecahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_empty_graphs": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_global_node_connectivity": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.local_node_connectivity",
    "networkx.algorithms.approximation.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_source": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.algorithms.approximation.tests.test_connectivity.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_target": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.algorithms.approximation.tests.test_connectivity.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_octahedral": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.octahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_source": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.algorithms.approximation.tests.test_connectivity.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_target": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.algorithms.approximation.tests.test_connectivity.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_petersen": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_source_equals_target": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.local_node_connectivity",
    "networkx.algorithms.approximation.tests.test_connectivity.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_white_harary1": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_edge_dominating_set": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.min_edge_dominating_set",
    "networkx.complete_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_weighted_dominating_set": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.min_weighted_dominating_set",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_star_graph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.min_weighted_dominating_set",
    "networkx.relabel_nodes",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.min_edge_dominating_set": {
  "data": {
   "shadows": "networkx.algorithms.approximation.min_edge_dominating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.min_weighted_dominating_set": {
  "data": {
   "shadows": "networkx.algorithms.approximation.min_weighted_dominating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.a": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.test_independent_set": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.maximum_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph": {
  "data": {
   "lineno": 232
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.setup_class": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.approximation.kcomponents._AntiGraph",
    "networkx.complement",
    "networkx.davis_southern_women_graph",
    "networkx.gnp_random_graph",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adj": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adjacency": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_connected_components": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_core_number": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree_thingraph": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "list",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_neighbors": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_node_not_in_graph": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.tests.test_kcomponents.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_size": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._AntiGraph": {
  "data": {
   "shadows": "networkx.algorithms.approximation.kcomponents._AntiGraph"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._same": {
  "data": {
   "shadows": "networkx.algorithms.approximation.kcomponents._same"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components.items",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.k_components": {
  "data": {
   "shadows": "networkx.algorithms.approximation.k_components"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_directed": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.approximation.k_components",
    "networkx.algorithms.approximation.tests.test_kcomponents.pytest",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1_detail_3_and_4": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.algorithms.approximation.k_components",
    "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_0": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_1": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components",
    "networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_same": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.kcomponents._same"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_matching.a": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_matching.test_min_maximal_matching": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.min_maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_ramsey": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.apxa": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.test_ramsey": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.ramsey_R2",
    "networkx.barbell_graph",
    "networkx.complete_graph",
    "networkx.density",
    "networkx.trivial_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.setup_class": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_connected_metric_closure": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.steinertree.metric_closure",
    "networkx.algorithms.approximation.tests.test_steinertree.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_metric_closure": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.approximation.steinertree.metric_closure",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_multigraph_steiner_tree": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.approximation.steinertree.steiner_tree",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_steiner_tree": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.approximation.steinertree.steiner_tree",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.metric_closure": {
  "data": {
   "shadows": "networkx.algorithms.approximation.steinertree.metric_closure"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_steinertree.steiner_tree": {
  "data": {
   "shadows": "networkx.algorithms.approximation.steinertree.steiner_tree"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.MinDegreeHeuristic": {
  "data": {
   "shadows": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree": {
  "data": {
   "lineno": 38
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.setup_class": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_empty_graph": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.treewidth_min_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_abort": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_first_steps": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_treewidth.itertools",
    "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic",
    "print",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_petersen_graph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_treewidth.is_tree_decomp",
    "networkx.algorithms.approximation.treewidth_min_degree",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_small_tree_treewidth": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.treewidth_min_fill_in"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_two_component_graph": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.treewidth_min_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn": {
  "data": {
   "lineno": 168
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.setup_class": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_empty_graph": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.treewidth_min_fill_in"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_abort": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_first_steps": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_treewidth.itertools",
    "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic",
    "print",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_petersen_graph": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_treewidth.is_tree_decomp",
    "networkx.algorithms.approximation.treewidth_min_fill_in",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_small_tree_treewidth": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.treewidth_min_fill_in"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_two_component_graph": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.treewidth_min_fill_in"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.is_tree_decomp": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.min_fill_in_heuristic": {
  "data": {
   "shadows": "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.treewidth_min_degree": {
  "data": {
   "shadows": "networkx.algorithms.approximation.treewidth_min_degree"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_treewidth.treewidth_min_fill_in": {
  "data": {
   "shadows": "networkx.algorithms.approximation.treewidth_min_fill_in"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_directed": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.algorithms.approximation.min_weighted_vertex_cover",
    "networkx.algorithms.approximation.tests.test_vertex_cover.is_cover",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_undirected": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.min_weighted_vertex_cover",
    "networkx.algorithms.approximation.tests.test_vertex_cover.is_cover",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_weighted": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.min_weighted_vertex_cover",
    "networkx.algorithms.approximation.tests.test_vertex_cover.is_cover",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.is_cover": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.min_weighted_vertex_cover": {
  "data": {
   "shadows": "networkx.algorithms.approximation.min_weighted_vertex_cover"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic": {
  "data": {
   "lineno": 86
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.__init__": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "heapq.heapify",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.best_node": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "heapq.heappop",
    "heapq.heappush",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.__all__": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.treewidth.heapify": {
  "data": {
   "shadows": "heapq.heapify"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.treewidth.sys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_decomp": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "frozenset",
    "heuristic",
    "len",
    "max",
    "networkx.Graph",
    "networkx.algorithms.approximation.treewidth.itertools",
    "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_min_degree": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "MinDegreeHeuristic",
    "networkx.utils.not_implemented_for",
    "treewidth_decomp"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.treewidth.treewidth_min_fill_in": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "treewidth_decomp"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.vertex_cover": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.vertex_cover.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dict",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.connectivity.average_degree_connectivity"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.connectivity.average_degree_connectivity": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "ValueError",
    "collections.defaultdict",
    "int",
    "neighbors",
    "source_degree",
    "sum",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.connectivity.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.connectivity.k_nearest_neighbors": {
  "data": {
   "lineno": 128
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.correlation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.correlation.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.correlation.attribute_ac": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.attribute_assortativity_coefficient": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "attribute_ac",
    "networkx.algorithms.assortativity.mixing.attribute_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.attribute_mixing_matrix": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.mixing.attribute_mixing_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.correlation.degree_assortativity_coefficient": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.mixing.degree_mixing_matrix",
    "numeric_ac"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.degree_mixing_matrix": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.mixing.degree_mixing_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.correlation.degree_pearson_correlation_coefficient": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "ImportError",
    "networkx.algorithms.assortativity.pairs.node_degree_xy",
    "scipy.stats.pearsonr",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.node_degree_xy": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.pairs.node_degree_xy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.correlation.numeric_ac": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "ImportError",
    "float",
    "networkx.algorithms.assortativity.correlation.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.numeric_assortativity_coefficient": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.mixing.numeric_mixing_matrix",
    "numeric_ac"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.correlation.numeric_mixing_matrix": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.mixing.numeric_mixing_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.correlation.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.correlation.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.mixing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.mixing.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.mixing.attribute_mixing_dict": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "mixing_dict",
    "networkx.algorithms.assortativity.pairs.node_attribute_xy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.attribute_mixing_matrix": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.mixing.attribute_mixing_dict",
    "networkx.utils.dict_to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.degree_mixing_dict": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "mixing_dict",
    "networkx.algorithms.assortativity.pairs.node_degree_xy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.degree_mixing_matrix": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.assortativity.mixing.degree_mixing_dict",
    "networkx.utils.dict_to_numpy_array",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.dict_to_numpy_array": {
  "data": {
   "shadows": "networkx.utils.dict_to_numpy_array"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.mixing.mixing_dict": {
  "data": {
   "lineno": 199
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.mixing.node_attribute_xy": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.pairs.node_attribute_xy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.mixing.node_degree_xy": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.pairs.node_degree_xy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.mixing.numeric_mixing_matrix": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.assortativity.mixing.attribute_mixing_dict",
    "networkx.utils.dict_to_numpy_array",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.neighbor_degree.__all__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "float",
    "source_degree",
    "sum",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg",
    "source_degree",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.pairs.__all__": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.pairs.node_attribute_xy": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs.node_degree_xy": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "set",
    "xdeg",
    "ydeg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.base_test": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setup_class": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing": {
  "data": {
   "lineno": 41
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setup_class": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.average_degree_connectivity",
    "networkx.k_nearest_neighbors",
    "networkx.star_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_in_out_weight": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "itertools.permutations",
    "networkx.DiGraph",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_source": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "ValueError",
    "networkx.DiGraph",
    "networkx.algorithms.assortativity.tests.test_connectivity.pytest",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_target": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "ValueError",
    "networkx.DiGraph",
    "networkx.algorithms.assortativity.tests.test_connectivity.pytest",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_single_node": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "networkx.average_degree_connectivity",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation": {
  "data": {
   "lineno": 39
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "networkx.algorithms.assortativity.tests.test_correlation.np",
    "networkx.algorithms.assortativity.tests.test_correlation.npt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "networkx.algorithms.assortativity.tests.test_correlation.np",
    "networkx.algorithms.assortativity.tests.test_correlation.npt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "networkx.algorithms.assortativity.tests.test_correlation.np",
    "networkx.algorithms.assortativity.tests.test_correlation.npt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_pearson_correlation_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_multigraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_pearson_correlation_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_undirected": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_correlation.npt",
    "networkx.degree_pearson_correlation_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.attribute_ac": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.correlation.attribute_ac"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.scipy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.tests.test_mixing": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.tests.test_mixing.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict": {
  "data": {
   "lineno": 86
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix": {
  "data": {
   "lineno": 113
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.attribute_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.attribute_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.attribute_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.degree_mixing_dict",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix": {
  "data": {
   "lineno": 34
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.degree_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.degree_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.degree_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.assortativity.tests.test_mixing.np",
    "networkx.algorithms.assortativity.tests.test_mixing.npt",
    "networkx.degree_mixing_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.average_neighbor_degree",
    "networkx.star_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.average_neighbor_degree",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.average_neighbor_degree",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.average_neighbor_degree",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.average_neighbor_degree",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_pairs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY": {
  "data": {
   "lineno": 52
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected_nodes": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.asteroidal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.asteroidal.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.asteroidal.create_component_structure": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.connected_components",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.asteroidal.find_asteroidal_triple": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "create_component_structure",
    "len",
    "networkx.complement",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.asteroidal.is_at_free": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.algorithms.asteroidal.find_asteroidal_triple",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.asteroidal.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.asteroidal.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.average_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.average_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.basic.color": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.isolates"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.color.neighbors": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.basic.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.connected_components": {
  "data": {
   "shadows": "networkx.algorithms.components.connected_components"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.basic.degrees": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.density": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.number_of_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.basic.color"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite_node_set": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.algorithms.components.connected_components",
    "set",
    "sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.basic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.basic.sets": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "is_connected",
    "networkx.AmbiguousSolution",
    "networkx.algorithms.bipartite.basic.color",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.centrality.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.centrality.betweenness_centrality": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.betweenness_centrality",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.closeness_centrality": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.single_source_shortest_path_length",
    "path_length",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.degree_centrality": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.cluster.cc_dot",
    "networkx.algorithms.bipartite.cluster.cc_max",
    "networkx.algorithms.bipartite.cluster.cc_min",
    "networkx.algorithms.bipartite.cluster.latapy_clustering"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.bipartite.cluster.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster._four_cycles": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.cluster.itertools",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster._threepaths": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.average_clustering": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.bipartite.cluster.latapy_clustering",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_dot": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_max": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "float",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_min": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "float",
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.clustering": {
  "data": {
   "lineno": 132
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster.latapy_clustering": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "KeyError",
    "cc_func",
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.cluster.modes",
    "networkx.algorithms.bipartite.is_bipartite",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.modes": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster.robins_alexander_clustering": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "_four_cycles",
    "_threepaths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.covering": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.covering.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.covering._min_edge_cover": {
  "data": {
   "shadows": "networkx.algorithms.covering.min_edge_cover"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.covering.hopcroft_karp_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.covering.min_edge_cover": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
    "networkx.algorithms.covering.min_edge_cover",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.covering.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.edgelist.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.edgelist.generate_edgelist": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "AttributeError",
    "BaseException",
    "KeyError",
    "map",
    "networkx.utils.not_implemented_for",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.parse_edgelist": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "BaseException",
    "IndexError",
    "TypeError",
    "ast.literal_eval",
    "dict",
    "edge_type",
    "len",
    "networkx.empty_graph",
    "nodetype",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.read_edgelist": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.edgelist.parse_edgelist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.write_edgelist": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "generate_edgelist",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.generators.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.generators._add_nodes_with_bipartite_label": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": [
    "dict",
    "networkx.set_node_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.alternating_havel_hakimi_graph": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "len",
    "max",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.complete_bipartite_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "isinstance",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.generators.numbers",
    "networkx.empty_graph",
    "networkx.utils.nodes_or_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.configuration_model": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "len",
    "max",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.utils.py_random_state",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.gnmk_random_graph": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.complete_bipartite_graph",
    "networkx.utils.py_random_state",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.havel_hakimi_graph": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "len",
    "max",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.nodes_or_number": {
  "data": {
   "shadows": "networkx.utils.nodes_or_number"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.numbers": {
  "data": {
   "shadows": "numbers"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.preferential_attachment_graph": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "functools.reduce",
    "len",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.random_graph": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "int",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.bipartite.generators.math",
    "networkx.complete_bipartite_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.generators.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.generators.reverse_havel_hakimi_graph": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "_add_nodes_with_bipartite_label",
    "len",
    "max",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching": {
  "data": {
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.bipartite.matching.INFINITY": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching.__all__": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching._connected_by_alternating_paths": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "frozenset",
    "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "_alternating_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path._alternating_dfs": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "networkx.algorithms.bipartite.matching.itertools",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.biadjacency_matrix": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matrix.biadjacency_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.bipartite_sets": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.sets"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.sets",
    "recurse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching.recurse": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "recurse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "breadth_first_search",
    "depth_first_search",
    "dict",
    "networkx.algorithms.bipartite.matching.collections",
    "networkx.algorithms.bipartite.matching.itertools",
    "networkx.algorithms.bipartite.sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.breadth_first_search": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.INFINITY"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.depth_first_search": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "depth_first_search",
    "networkx.algorithms.bipartite.matching.INFINITY"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.maximum_matching": {
  "data": {
   "lineno": 492
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching.minimum_weight_full_matching": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "ImportError",
    "list",
    "networkx.algorithms.bipartite.matrix.biadjacency_matrix",
    "networkx.bipartite.sets",
    "numpy.full",
    "numpy.inf",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.scipy.optimize": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.to_vertex_cover": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching._connected_by_alternating_paths",
    "networkx.algorithms.bipartite.sets",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.matrix.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matrix._generate_weighted_edges": {
  "data": {
   "shadows": "networkx.convert_matrix._generate_weighted_edges"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.biadjacency_matrix": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "dict",
    "format",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.matrix.itertools",
    "scipy.sparse.coo_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.from_biadjacency_matrix": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "chain",
    "networkx.algorithms.bipartite.matrix.itertools",
    "networkx.convert_matrix._generate_weighted_edges",
    "networkx.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.projection": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.projection.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.utils.not_implemented_for",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.utils.not_implemented_for",
    "set",
    "weight_function"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph.weight_function": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.projection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "float",
    "len",
    "min",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.project": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.projection.projected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.projected_graph": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.weighted_projected_graph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.redundancy.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.redundancy.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.redundancy._node_redundancy": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.redundancy.node_redundancy": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "_node_redundancy",
    "any",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.spectral": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.spectral.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.spectral.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.spectral_bipartivity": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "len",
    "list",
    "networkx.to_numpy_array",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_basic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.random_graph",
    "networkx.algorithms.bipartite.tests.test_basic.pytest",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_order": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_basic.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_weight": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_basic.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.color",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.bipartite.degrees",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "float",
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.bipartite.density",
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.is_bipartite",
    "networkx.algorithms.bipartite.random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_directed": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_disconnected": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.AmbiguousSolution",
    "networkx.algorithms.bipartite.sets",
    "networkx.algorithms.bipartite.tests.test_basic.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_given_top_nodes": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.bipartite.degrees",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.is_bipartite",
    "networkx.complete_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.is_bipartite_node_set",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_not_bipartite_color": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.color",
    "networkx.algorithms.bipartite.tests.test_basic.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setup_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "classmethod",
    "networkx.complete_bipartite_graph",
    "networkx.cycle_graph",
    "networkx.davis_southern_women_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.betweenness_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.closeness_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.degree_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_dot": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_dot"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_max": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_max"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_min": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_min"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.average_clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_bad_mode": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.clustering",
    "networkx.algorithms.bipartite.tests.test_cluster.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_not_bipartite": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.clustering",
    "networkx.algorithms.bipartite.tests.test_cluster.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "enumerate",
    "networkx.Graph",
    "networkx.algorithms.bipartite.cluster.cc_dot",
    "networkx.algorithms.bipartite.cluster.cc_max",
    "networkx.algorithms.bipartite.cluster.cc_min",
    "networkx.algorithms.bipartite.is_bipartite",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_path_graph": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_davis": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "networkx.davis_southern_women_graph",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_square": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_zero": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_star_graph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.clustering",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_default": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.bipartite.min_edge_cover",
    "networkx.is_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.bipartite.eppstein_matching",
    "networkx.algorithms.bipartite.min_edge_cover",
    "networkx.is_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_empty_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.min_edge_cover",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_graph_single_edge": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.min_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_covering.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_covering.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.setup_class": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.convert_node_labels_to_integers",
    "networkx.isolates",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiGraph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_empty_digraph": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.tests.test_edgelist.pytest",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1_issue": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.pytest",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_raise_attribute": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.tests.test_edgelist.pytest",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_generators": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "alternating_havel_hakimi_graph",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "networkx.project",
    "range",
    "reverse_havel_hakimi_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_complete_bipartite_graph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "complete_bipartite_graph",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "networkx.cycle_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.star_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_configuration_model": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "configuration_model",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "networkx.project",
    "range",
    "reverse_havel_hakimi_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "gnmk_random_graph",
    "len",
    "list",
    "networkx.algorithms.bipartite.sets",
    "networkx.is_bipartite",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph_complete": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "gnmk_random_graph",
    "len",
    "list",
    "networkx.algorithms.bipartite.sets",
    "networkx.is_bipartite",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_havel_hakimi_graph": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "havel_hakimi_graph",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "networkx.project",
    "range",
    "reverse_havel_hakimi_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_preferential_attachment": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "preferential_attachment_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_digraph": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.sets",
    "networkx.is_bipartite",
    "random_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.sets",
    "networkx.is_bipartite",
    "random_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.tests.test_generators.pytest",
    "networkx.project",
    "range",
    "reverse_havel_hakimi_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_generators.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_match": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "all",
    "frozenset",
    "networkx.algorithms.bipartite.tests.test_matching.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_vertex_cover": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.setup": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.complete_bipartite_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.eppstein_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_disconnected": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.AmbiguousSolution",
    "networkx.algorithms.bipartite.matching.eppstein_matching",
    "networkx.algorithms.bipartite.tests.test_matching.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_simple": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.eppstein_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_disconnected": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.AmbiguousSolution",
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
    "networkx.algorithms.bipartite.tests.test_matching.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_simple": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_issue_2127": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching",
    "networkx.algorithms.bipartite.matching.to_vertex_cover",
    "networkx.transitive_closure",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_to_vertex_cover": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.maximum_matching",
    "networkx.algorithms.bipartite.matching.to_vertex_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_unorderable_nodes": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.maximum_matching",
    "networkx.algorithms.bipartite.matching.to_vertex_cover",
    "object"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_vertex_cover_issue_2384": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.maximum_matching",
    "networkx.algorithms.bipartite.matching.to_vertex_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching": {
  "data": {
   "lineno": 207
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.setup_class": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.bipartite.tests.test_matching.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_different_weight_key": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_incomplete_graph": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_negative_weights": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_left": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_right": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_top_nodes_right": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_square": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_with_no_full_matching": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.minimum_weight_full_matching",
    "networkx.algorithms.bipartite.tests.test_matching.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.eppstein_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.eppstein_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.hopcroft_karp_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.maximum_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.maximum_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.minimum_weight_full_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.minimum_weight_full_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.test_eppstein_matching": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.eppstein_matching",
    "networkx.algorithms.bipartite.matching.maximum_matching",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.to_vertex_cover": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.to_vertex_cover"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.random_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_order": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_weight": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_row": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_empty_graph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_format_keyword": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_multigraph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.sparse",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_roundtrip": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_weight": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.sparse",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_null_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.tests.test_matrix.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.sp": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.sparse": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.tests.test_project": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.star_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection": {
  "data": {
   "lineno": 144
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setup_class": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "enumerate",
    "list",
    "networkx.algorithms.bipartite.generic_weighted_projected_graph",
    "networkx.bipartite.complete_bipartite_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.jaccard": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "float",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.my_weight": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.bipartite.generic_weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple.shared": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.complete_bipartite_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.complete_bipartite_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.cycle_graph": {
  "data": {
   "shadows": "networkx.cycle_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.node_redundancy": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.node_redundancy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_no_redundant_nodes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.bipartite.complete_bipartite_graph",
    "networkx.algorithms.bipartite.node_redundancy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_not_enough_neighbors": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.complete_bipartite_graph",
    "networkx.algorithms.bipartite.node_redundancy",
    "networkx.algorithms.bipartite.tests.test_redundancy.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_redundant_nodes": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.node_redundancy",
    "networkx.cycle_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_k23_like": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.complete_bipartite_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.complete_bipartite_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.star_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.sb": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.spectral_bipartivity"
  },
  "type": "import"
 },
 "networkx.algorithms.boundary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.boundary.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.boundary.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.boundary.edge_boundary": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.boundary.node_boundary": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bridges": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bridges.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.bridges.bridges": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.chain_decomposition",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bridges.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.bridges.has_bridges": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "StopIteration",
    "networkx.algorithms.bridges.bridges",
    "networkx.utils.not_implemented_for",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bridges.local_bridges": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXNoPath",
    "networkx.shortest_path_length",
    "networkx.utils.not_implemented_for",
    "networkx.weighted._weight_function",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bridges.local_bridges.hide_edge": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "wt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bridges.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.bridges.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.capacity_scaling": {
  "data": {
   "shadows": "networkx.algorithms.flow.capacity_scaling"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_basic": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_edges": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._accumulate_endpoints": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._rescale": {
  "data": {
   "lineno": 351
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._rescale_e": {
  "data": {
   "lineno": 376
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "dict.fromkeys",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "next",
    "pop",
    "push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.betweenness_centrality": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "_accumulate_basic",
    "_accumulate_endpoints",
    "_rescale",
    "_single_source_dijkstra_path_basic",
    "_single_source_shortest_path_basic",
    "dict.fromkeys",
    "len",
    "networkx.utils.decorators.not_implemented_for",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness.edge_betweenness": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "DeprecationWarning",
    "networkx.algorithms.centrality.betweenness.edge_betweenness_centrality",
    "networkx.algorithms.centrality.betweenness.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.edge_betweenness_centrality": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "_accumulate_edges",
    "_rescale_e",
    "_single_source_dijkstra_path_basic",
    "_single_source_shortest_path_basic",
    "dict.fromkeys",
    "len",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness_subset.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_subset": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "dict.fromkeys",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale": {
  "data": {
   "lineno": 242
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale_e": {
  "data": {
   "lineno": 260
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_source": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "DeprecationWarning",
    "list",
    "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset",
    "networkx.algorithms.centrality.betweenness_subset.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "_accumulate_subset",
    "_rescale",
    "dict.fromkeys",
    "len",
    "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
    "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.dijkstra": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "_accumulate_edges_subset",
    "_rescale_e",
    "dict.fromkeys",
    "len",
    "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
    "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.shortest_path": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness_subset.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.closeness.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.closeness.closeness_centrality": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.centrality.closeness.functools",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.closeness.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness.incremental_closeness_centrality": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "abs",
    "len",
    "networkx.algorithms.centrality.closeness.closeness_centrality",
    "networkx.closeness_centrality",
    "networkx.exception.NetworkXError",
    "networkx.single_source_shortest_path_length",
    "networkx.utils.decorators.not_implemented_for",
    "path_length",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.closeness.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.CGInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.FullInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.SuperLUInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "int",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "numpy.ceil",
    "numpy.log",
    "numpy.zeros",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "sorted",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.flow_matrix_row": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.flow_matrix_row"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.laplacian_sparse_matrix": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.flow_matrix_row",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "range",
    "sorted",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.flow_matrix_row": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.flow_matrix_row"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_closeness.CGInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.FullInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.SuperLUInverseLaplacian": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian",
    "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_closeness.information_centrality": {
  "data": {
   "lineno": 97
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_closeness.laplacian_sparse_matrix": {
  "data": {
   "shadows": "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.degree_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.degree_alg.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.degree_alg.degree_centrality": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.in_degree_centrality": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "len",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.degree_alg.out_degree_centrality": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "len",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.dispersion.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.dispersion.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.dispersion.dispersion": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "_dispersion",
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion.dispersion._dispersion": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "networkx.algorithms.centrality.dispersion.dispersion",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.eigenvector.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "abs",
    "all",
    "len",
    "math.sqrt",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.PowerIterationFailedConvergence",
    "networkx.utils.not_implemented_for",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.to_scipy_sparse_matrix",
    "numpy.sign",
    "scipy.linalg.norm",
    "scipy.sparse.linalg.eigs",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "scipy.sparse.linalg.LinearOperator",
    "scipy.sparse.linalg.spilu"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "numpy.zeros",
    "scipy.sparse.linalg.cg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "numpy.zeros",
    "scipy.sparse.linalg.cg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "numpy.linalg.inv",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.dot",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian": {
  "data": {
   "lineno": 36
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "max",
    "numpy.nonzero"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "scipy.sparse.linalg.factorized"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.flow_matrix_row": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "float",
    "laplacian_sparse_matrix",
    "numpy.dot",
    "numpy.zeros",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "format",
    "networkx.to_scipy_sparse_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.group": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.group.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.group.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.group.group_betweenness_centrality": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "list",
    "networkx.NodeNotFound",
    "networkx.all_shortest_paths",
    "networkx.exception.NetworkXNoPath",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_closeness_centrality": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "KeyError",
    "ZeroDivisionError",
    "len",
    "networkx.multi_source_dijkstra_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_degree_centrality": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "len",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_in_degree_centrality": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.group.group_degree_centrality",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.group.group_out_degree_centrality": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.group.group_degree_centrality",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.group.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.group.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.harmonic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.harmonic.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.harmonic.harmonic_centrality": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.shortest_path_length",
    "spl",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.harmonic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.harmonic.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.katz.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.katz.katz_centrality": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError",
    "ZeroDivisionError",
    "abs",
    "dict.fromkeys",
    "float",
    "len",
    "math.sqrt",
    "networkx.NetworkXError",
    "networkx.PowerIterationFailedConvergence",
    "networkx.utils.not_implemented_for",
    "range",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.katz_centrality_numpy": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "AttributeError",
    "ImportError",
    "TypeError",
    "ValueError",
    "dict",
    "float",
    "len",
    "list",
    "map",
    "networkx.NetworkXError",
    "networkx.adj_matrix",
    "networkx.utils.not_implemented_for",
    "numpy.array",
    "numpy.eye",
    "numpy.linalg.norm",
    "numpy.linalg.solve",
    "numpy.ones",
    "numpy.sign",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.load": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.load.newman_betweenness_centrality"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.load.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.load._edge_betweenness": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "len",
    "networkx.predecessor",
    "operator.itemgetter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load._node_betweenness": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.edge_load_centrality": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "_edge_betweenness"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.load.load_centrality": {
  "data": {
   "lineno": 135
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.load.newman_betweenness_centrality": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "_node_betweenness"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.percolation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.percolation.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.percolation._accumulate_percolation": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.percolation.dijkstra": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.percolation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.percolation.percolation_centrality": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "_accumulate_percolation",
    "dict.fromkeys",
    "len",
    "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
    "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic",
    "networkx.get_node_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.percolation.shortest_path": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.reaching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.reaching.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.reaching._average_weight": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "len",
    "networkx.utils.pairwise",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.global_reaching_centrality": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "centrality",
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.is_negatively_weighted",
    "networkx.shortest_path",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.global_reaching_centrality.as_distance": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.local_reaching_centrality": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.reaching._average_weight",
    "networkx.is_negatively_weighted",
    "networkx.shortest_path",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.local_reaching_centrality.as_distance": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.reaching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.reaching.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.second_order": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.second_order.__all__": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.second_order.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.second_order.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.second_order.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.second_order.second_order_centrality": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "ImportError",
    "_Qj",
    "any",
    "dict",
    "len",
    "max",
    "networkx.DiGraph",
    "networkx.NetworkXException",
    "networkx.is_connected",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "numpy.empty",
    "numpy.identity",
    "numpy.linalg.solve",
    "numpy.newaxis",
    "numpy.ones",
    "numpy.sqrt",
    "numpy.sum",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.second_order.second_order_centrality._Qj": {
  "data": {
   "lineno": 124
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.subgraph_alg.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.subgraph_alg._rescale": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "_rescale",
    "dict",
    "float",
    "len",
    "list",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "numpy.diag",
    "numpy.nonzero",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.estrada_index": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.subgraph_alg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.subgraph_alg.numpy.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.subgraph_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.subgraph_alg.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict",
    "float",
    "list",
    "map",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "numpy.array",
    "numpy.dot",
    "numpy.exp",
    "numpy.linalg.eigh",
    "numpy.nonzero",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "float",
    "list",
    "map",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.florentine_families_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_les_miserables_graph": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.les_miserables_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_sample_from_P3": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality": {
  "data": {
   "lineno": 517
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": [
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality": {
  "data": {
   "lineno": 290
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.florentine_families_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_les_miserables_graph": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "networkx.betweenness_centrality",
    "networkx.les_miserables_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality": {
  "data": {
   "lineno": 567
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.edge_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources": {
  "data": {
   "lineno": 119
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.betweenness_centrality_source",
    "networkx.complete_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.betweenness_centrality_source",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality": {
  "data": {
   "lineno": 137
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.betweenness_centrality_subset",
    "networkx.complete_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_diamond_multi_path": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_add_edge": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "list",
    "networkx.utils.arbitrary_element",
    "set",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_remove_edge": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "list",
    "networkx.utils.arbitrary_element",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setup_class": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.balanced_tree",
    "networkx.closeness_centrality",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.fast_gnp_random_graph",
    "networkx.florentine_families_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.les_miserables_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_digraph": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.closeness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_directed_raises": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.centrality.tests.test_closeness_centrality.pytest",
    "networkx.gn_graph",
    "networkx.incremental_closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_incremental": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.incremental_closeness_centrality",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_les_miserables_closeness": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wf_improved": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_nodes_prev_cc_raises": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.tests.test_closeness_centrality.pytest",
    "networkx.incremental_closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_size_prev_cc_raises": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.tests.test_closeness_centrality.pytest",
    "networkx.incremental_closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_zero_centrality": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "len",
    "networkx.closeness_centrality",
    "networkx.incremental_closeness_centrality",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality": {
  "data": {
   "lineno": 83
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality",
    "networkx.grid_2d_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_seed": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_star",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality": {
  "data": {
   "lineno": 145
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.current_flow_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.current_flow_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solvers2": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_star",
    "networkx.current_flow_betweenness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality": {
  "data": {
   "lineno": 141
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.approximate_cfbc": {
  "data": {
   "shadows": "networkx.approximate_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.edge_current_flow": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.np": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.npt": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.scipy": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality": {
  "data": {
   "lineno": 94
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "list",
    "networkx.cycle_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "list",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality_subset",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "list",
    "networkx.current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality_subset",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_star",
    "networkx.current_flow_betweenness_centrality",
    "networkx.current_flow_betweenness_centrality_subset",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.edge_current_flow": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.edge_current_flow_subset": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality_subset"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.scipy": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_closeness.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.current_flow_closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.current_flow_closeness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_star",
    "networkx.current_flow_closeness_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality": {
  "data": {
   "lineno": 37
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.scipy": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.setup_method": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.complete_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "dict",
    "networkx.degree_centrality",
    "networkx.testing.almost_equal",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.degree_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "float",
    "networkx.degree_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "dict",
    "float",
    "networkx.degree_centrality",
    "networkx.testing.almost_equal",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.in_degree_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.out_degree_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_small_graph_centrality": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.degree_centrality",
    "networkx.empty_graph",
    "networkx.in_degree_centrality",
    "networkx.out_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_dispersion": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion": {
  "data": {
   "lineno": 42
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_article": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G",
    "networkx.dispersion"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_impossible_things": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.dispersion",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_results_length": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G",
    "networkx.dispersion",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.math",
    "networkx.complete_graph",
    "networkx.eigenvector_centrality",
    "networkx.eigenvector_centrality_numpy",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.eigenvector_centrality",
    "networkx.eigenvector_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3_unweighted": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.eigenvector_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_maxiter": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.PowerIterationFailedConvergence",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest",
    "networkx.eigenvector_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected": {
  "data": {
   "lineno": 55
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setup_class": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "list",
    "networkx.eigenvector_centrality",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "list",
    "networkx.eigenvector_centrality_numpy",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "list",
    "networkx.eigenvector_centrality",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "list",
    "networkx.eigenvector_centrality_numpy",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions": {
  "data": {
   "lineno": 153
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest",
    "networkx.eigenvector_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty_numpy": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest",
    "networkx.eigenvector_centrality_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest",
    "networkx.eigenvector_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph_numpy": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest",
    "networkx.eigenvector_centrality_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.np": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.scipy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_group": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_disconnected_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.group_betweenness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_node_not_in_graph": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.centrality.tests.test_group.pytest",
    "networkx.group_betweenness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_normalized": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.group_betweenness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_single_node": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.group_betweenness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_value_zero": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.group_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality": {
  "data": {
   "lineno": 61
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_disconnected": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.group_closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_multiple_node": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.group_closeness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_node_not_in_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.centrality.tests.test_group.pytest",
    "networkx.group_closeness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_single_node": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.closeness_centrality",
    "networkx.group_closeness_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality": {
  "data": {
   "lineno": 99
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_multiple_node": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.group_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_node_not_in_graph": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.tests.test_group.pytest",
    "networkx.group_degree_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_single_node": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.degree_centrality",
    "networkx.group_degree_centrality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_in_degree_centrality": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.group_in_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_out_degree_centrality": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.group_out_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_group.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_group.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.setup_class": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.balanced_tree",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_bal_tree": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_clique_complete": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C4": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C5": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_empty": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_exampleGraph": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_singleton": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_weighted_harmonic": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.harmonic_centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality.harmonic_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_K5": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.complete_graph",
    "networkx.katz_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_P3": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.katz_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta_numbe": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_dict": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.katz_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_scalar": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.katz_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_empty": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_maxiter": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.PowerIterationFailedConvergence",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality",
    "networkx.path_graph",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multigraph": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multiple_alpha": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.katz_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected": {
  "data": {
   "lineno": 252
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.setup_class": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_unweighted": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "list",
    "networkx.katz_centrality",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_weighted": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "list",
    "networkx.katz_centrality",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.setup_class": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "list",
    "networkx.katz_centrality_numpy",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "list",
    "networkx.katz_centrality_numpy",
    "networkx.testing.almost_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy": {
  "data": {
   "lineno": 121
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.setup_class": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.complete_graph",
    "networkx.eigenvector_centrality_numpy",
    "networkx.katz_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5_unweighted": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.complete_graph",
    "networkx.eigenvector_centrality_numpy",
    "networkx.katz_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.katz_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3_unweighted": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.katz_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta_numbe": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_dict": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.katz_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_scalar": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.katz_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_empty": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multigraph": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest",
    "networkx.katz_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multiple_alpha": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "networkx.katz_centrality_numpy",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz": {
  "data": {
   "lineno": 340
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.setup_class": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.centrality.tests.test_katz_centrality.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "float",
    "max",
    "networkx.adjacency_matrix",
    "networkx.eigenvector_centrality_numpy",
    "networkx.gnp_random_graph",
    "networkx.katz_centrality_numpy",
    "networkx.testing.almost_equal",
    "numpy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.eigvals": {
  "data": {
   "shadows": "numpy.linalg.eigvals"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.balanced_tree",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.florentine_families_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.les_miserables_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "networkx.edge_load_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "networkx.edge_load_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_les_miserables_load": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_not_strongly_connected": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p2_load": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.edge_load_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "networkx.edge_load_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality": {
  "data": {
   "lineno": 33
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_converge_to_betweenness": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.florentine_families_graph",
    "networkx.percolation_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1a": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_percolation_centrality.example1a_G",
    "networkx.percolation_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1b": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_percolation_centrality.example1b_G",
    "networkx.percolation_centrality",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.example1a_G": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.example1b_G": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_percolation_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_reaching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_unweighted": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.nx.DiGraph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_weighted": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.nx.DiGraph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_unweighted": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.nx.Graph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_weighted": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "grc",
    "networkx.nx.Graph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_star": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "grc",
    "networkx.nx.DiGraph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_weighted": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "grc",
    "len",
    "max",
    "networkx.nx.DiGraph",
    "networkx.nx.global_reaching_centrality",
    "networkx.testing.almost_equal",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_negatively_weighted": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_reaching.pytest",
    "networkx.nx.Graph",
    "networkx.nx.NetworkXError",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_non_positive_weights": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_reaching.pytest",
    "networkx.nx.DiGraph",
    "networkx.nx.NetworkXError",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_unweighted_star": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "grc",
    "networkx.nx.global_reaching_centrality",
    "networkx.nx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_weighted_star": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "grc",
    "networkx.nx.Graph",
    "networkx.nx.global_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality": {
  "data": {
   "lineno": 84
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_negatively_weighted": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_reaching.pytest",
    "networkx.nx.Graph",
    "networkx.nx.NetworkXError",
    "networkx.nx.local_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_non_positive_weights": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_reaching.pytest",
    "networkx.nx.DiGraph",
    "networkx.nx.NetworkXError",
    "networkx.nx.local_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_unweighted_star": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "grc",
    "networkx.nx.local_reaching_centrality",
    "networkx.nx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_weighted_star": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.nx.Graph",
    "networkx.nx.local_reaching_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_reaching.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_reaching.nx": {
  "data": {
   "shadows": "networkx.nx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_reaching.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_second_order_centrality.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_K3": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.second_order_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_P3": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.second_order_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_empty": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_second_order_centrality.pytest",
    "networkx.empty_graph",
    "networkx.second_order_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_connected": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_second_order_centrality.pytest",
    "networkx.second_order_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_negative_edge_weights": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.centrality.tests.test_second_order_centrality.pytest",
    "networkx.path_graph",
    "networkx.second_order_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_one_node_graph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.second_order_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_ring_graph": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.second_order_centrality",
    "networkx.testing.almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.np": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_second_order_centrality.scipy": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_subgraph": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_subgraph.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_communicability_betweenness_centrality": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_estrada_index": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.subgraph_alg.estrada_index",
    "networkx.karate_club_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality",
    "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality_big_graph": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.subgraph_centrality",
    "networkx.subgraph_centrality_exp"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.communicability_betweenness_centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.estrada_index": {
  "data": {
   "shadows": "networkx.algorithms.centrality.subgraph_alg.estrada_index"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.numpy": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.scipy": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.subgraph_centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_subgraph.subgraph_centrality_exp": {
  "data": {
   "shadows": "networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_trophic": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_trophic.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_trophic.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_trophic.np": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.tests.test_trophic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_trophic.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_differences": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_differences"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_cannibalism": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_incoherence_parameter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_no_cannibalism": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_incoherence_parameter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.trophic_levels"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_even_more_complex": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_levels",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_levine": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.linalg.graphmatrix.adjacency_matrix",
    "networkx.testing.almost_equal",
    "networkx.trophic_levels"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_more_complex": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_levels",
    "print",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_simple": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.from_numpy_array",
    "networkx.testing.almost_equal",
    "networkx.trophic_levels"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_matrix": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.tests.test_trophic.np",
    "networkx.algorithms.centrality.tests.test_trophic.pytest",
    "networkx.from_numpy_array",
    "networkx.trophic_levels",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_with_basal": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.tests.test_trophic.pytest",
    "networkx.trophic_levels",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_1": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.voterank"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.florentine_families_graph",
    "networkx.voterank"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_3": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.gnc_graph",
    "networkx.voterank"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_4": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.voterank"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_5": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.voterank"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_voterank.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.trophic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.trophic.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.trophic.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.trophic.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.trophic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.trophic.trophic_differences": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.trophic.trophic_levels",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.trophic.trophic_incoherence_parameter": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "ImportError",
    "list",
    "networkx.algorithms.centrality.trophic.trophic_differences",
    "networkx.selfloop_edges",
    "networkx.utils.not_implemented_for",
    "numpy.std"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.trophic.trophic_levels": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ImportError",
    "enumerate",
    "networkx.NetworkXError",
    "networkx.adjacency_matrix",
    "networkx.utils.not_implemented_for",
    "numpy.eye",
    "numpy.linalg.LinAlgError",
    "numpy.linalg.inv",
    "numpy.newaxis",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.voterank_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.voterank_alg.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.voterank_alg.voterank": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "len",
    "max",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chains": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.chains.chain_decomposition": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "_build_chain",
    "_dfs_cycle_forest",
    "list",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chains.chain_decomposition._build_chain": {
  "data": {
   "lineno": 114
  },
  "type": "function"
 },
 "networkx.algorithms.chains.chain_decomposition._dfs_cycle_forest": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chains.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.chains.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.chordal.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.chordal._chordal_graph_cliques": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "frozenset",
    "networkx.NetworkXError",
    "networkx.algorithms.chordal._is_complete_graph",
    "networkx.algorithms.chordal._max_cardinality_node",
    "networkx.algorithms.chordal.is_chordal",
    "networkx.algorithms.components.connected_components",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal._find_chordality_breaker": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.NetworkXTreewidthBoundExceeded",
    "networkx.algorithms.chordal._find_missing_edge",
    "networkx.algorithms.chordal._is_complete_graph",
    "networkx.algorithms.chordal._max_cardinality_node",
    "networkx.algorithms.chordal.sys",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal._find_missing_edge": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal._is_complete_graph": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.number_of_selfloops"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal._max_cardinality_node": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal.chordal_graph_cliques": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "DeprecationWarning",
    "_chordal_graph_cliques",
    "networkx.algorithms.chordal.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.chordal_graph_treewidth": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.algorithms.chordal.is_chordal",
    "networkx.chordal_graph_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.complete_to_chordal_graph": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.has_path",
    "networkx.is_chordal",
    "networkx.utils.not_implemented_for",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.connected_components": {
  "data": {
   "shadows": "networkx.algorithms.components.connected_components"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal.find_induced_nodes": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "_find_chordality_breaker",
    "len",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.chordal.is_chordal",
    "networkx.algorithms.chordal.sys",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.is_chordal": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "_find_chordality_breaker",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.algorithms.clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.clique.MaxWeightClique": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.clique.MaxWeightClique.__init__": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "int",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.expand": {
  "data": {
   "lineno": 636
  },
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.find_branching_nodes": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.find_max_weight_clique": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.greedily_find_independent_set": {
  "data": {
   "lineno": 609
  },
  "type": "function"
 },
 "networkx.algorithms.clique.MaxWeightClique.update_incumbent_if_improved": {
  "data": {
   "lineno": 600
  },
  "type": "function"
 },
 "networkx.algorithms.clique.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.clique.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.cliques_containing_node": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.enumerate_all_cliques": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "collections.deque",
    "enumerate",
    "filter",
    "itertools.chain",
    "itertools.islice",
    "len",
    "list",
    "map",
    "networkx.utils.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "IndexError",
    "len",
    "max",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "expand",
    "iter",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive.expand": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "expand",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.graph_clique_number": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.graph_number_of_cliques": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.make_clique_bipartite": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.clique.find_cliques",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.make_max_clique_graph": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "enumerate",
    "itertools.combinations",
    "list",
    "networkx.algorithms.clique.find_cliques",
    "networkx.empty_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.max_weight_clique": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "networkx.algorithms.clique.MaxWeightClique",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.node_clique_number": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "max",
    "networkx.algorithms.clique.find_cliques",
    "networkx.ego_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.number_of_cliques": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.cluster.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.cluster._directed_triangles_and_degree_iter": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "itertools.chain",
    "len",
    "networkx.utils.not_implemented_for",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.utils.not_implemented_for",
    "set",
    "sum",
    "wt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter.wt": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._triangles_and_degree_iter": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "collections.Counter",
    "len",
    "networkx.utils.not_implemented_for",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._weighted_triangles_and_degree_iter": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.utils.not_implemented_for",
    "set",
    "sum",
    "wt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._weighted_triangles_and_degree_iter.wt": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.average_clustering": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "clustering",
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.clustering": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "networkx.algorithms.cluster._directed_triangles_and_degree_iter",
    "networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter",
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "networkx.algorithms.cluster._weighted_triangles_and_degree_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.generalized_degree": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "networkx.utils.not_implemented_for",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.square_clustering": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "networkx.algorithms.cluster.clustering",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.transitivity": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "networkx.algorithms.cluster.triangles",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.triangles": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "_triangles_and_degree_iter",
    "networkx.utils.not_implemented_for",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.equitable_color": {
  "data": {
   "shadows": "networkx.algorithms.coloring.equitable_coloring.equitable_color"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.equitable_coloring": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.equitable_coloring.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.equitable_coloring.change_color": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.equitable_coloring.equitable_color": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "max",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.coloring.equitable_coloring.change_color",
    "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
    "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
    "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
    "networkx.algorithms.coloring.equitable_coloring.pad_graph",
    "networkx.algorithms.coloring.equitable_coloring.procedure_P",
    "networkx.relabel_nodes",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.is_coloring": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.is_equitable": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "abs",
    "collections.defaultdict",
    "int",
    "len",
    "list",
    "networkx.algorithms.coloring.equitable_coloring.is_coloring",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_C_from_F": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "collections.defaultdict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.move_witnesses": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.algorithms.coloring.equitable_coloring.change_color"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.equitable_coloring.pad_graph": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "len",
    "networkx.complete_graph",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.equitable_coloring.procedure_P": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.coloring.equitable_coloring.change_color",
    "networkx.algorithms.coloring.equitable_coloring.move_witnesses",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential",
    "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_bfs",
    "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_dfs",
    "networkx.algorithms.coloring.greedy_coloring.strategy_independent_set",
    "networkx.algorithms.coloring.greedy_coloring.strategy_largest_first",
    "networkx.algorithms.coloring.greedy_coloring.strategy_random_sequential",
    "networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first",
    "networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.coloring.greedy_coloring.STRATEGIES": {
  "data": {
   "lineno": 240
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.greedy_coloring.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.greedy_coloring._interchange": {
  "data": {
   "shadows": "greedy_coloring_with_interchange"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring._maximal_independent_set": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.greedy_color": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "callable",
    "len",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.coloring.greedy_coloring.STRATEGIES",
    "networkx.algorithms.coloring.greedy_coloring.itertools",
    "networkx.algorithms.coloring.greedy_coloring.strategy_independent_set",
    "networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first",
    "strategy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.bfs_edges",
    "networkx.connected_components",
    "networkx.dfs_edges",
    "networkx.utils.arbitrary_element",
    "traverse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_bfs": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "strategy_connected_sequential"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_dfs": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "strategy_connected_sequential"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_independent_set": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.coloring.greedy_coloring._maximal_independent_set",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_largest_first": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_random_sequential": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "list",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "len",
    "max",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "collections.defaultdict",
    "collections.deque",
    "find_min_degree",
    "float",
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last.find_min_degree": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.algorithms.coloring.greedy_coloring.itertools",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry": {
  "data": {
   "lineno": 50
  },
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__init__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__repr__": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__repr__": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.assign_color": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.clear_color": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors_color": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.greedy_coloring_with_interchange": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.itertools",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.tests.test_coloring": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.coloring.equitable_coloring.is_coloring",
    "networkx.algorithms.coloring.equitable_coloring.is_equitable",
    "networkx.algorithms.coloring.tests.test_coloring.cs_shc",
    "networkx.algorithms.coloring.tests.test_coloring.disconnected",
    "networkx.algorithms.coloring.tests.test_coloring.empty_graph",
    "networkx.algorithms.coloring.tests.test_coloring.gis_hc",
    "networkx.algorithms.coloring.tests.test_coloring.gis_shc",
    "networkx.algorithms.coloring.tests.test_coloring.lf_hc",
    "networkx.algorithms.coloring.tests.test_coloring.lf_shc",
    "networkx.algorithms.coloring.tests.test_coloring.lfi_hc",
    "networkx.algorithms.coloring.tests.test_coloring.lfi_shc",
    "networkx.algorithms.coloring.tests.test_coloring.one_node_graph",
    "networkx.algorithms.coloring.tests.test_coloring.rs_shc",
    "networkx.algorithms.coloring.tests.test_coloring.rsi_shc",
    "networkx.algorithms.coloring.tests.test_coloring.sl_hc",
    "networkx.algorithms.coloring.tests.test_coloring.sl_shc",
    "networkx.algorithms.coloring.tests.test_coloring.slf_hc",
    "networkx.algorithms.coloring.tests.test_coloring.slf_shc",
    "networkx.algorithms.coloring.tests.test_coloring.sli_hc",
    "networkx.algorithms.coloring.tests.test_coloring.sli_shc",
    "networkx.algorithms.coloring.tests.test_coloring.three_node_clique",
    "networkx.algorithms.coloring.tests.test_coloring.two_node_graph"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.coloring.tests.test_coloring.ALL_STRATEGIES": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.BASIC_TEST_CASES": {
  "data": {
   "lineno": 718
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.INTERCHANGE_INVALID": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.SPECIAL_TEST_CASES": {
  "data": {
   "lineno": 730
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring": {
  "data": {
   "lineno": 29
  },
  "type": "class"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_bad_inputs": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.coloring.tests.test_coloring.pytest",
    "networkx.coloring.greedy_color",
    "one_node_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_basic_cases": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "check_basic_case",
    "graph_func",
    "networkx.algorithms.coloring.tests.test_coloring.ALL_STRATEGIES",
    "networkx.algorithms.coloring.tests.test_coloring.INTERCHANGE_INVALID"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_basic_cases.check_basic_case": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "graph_func",
    "networkx.coloring.greedy_color",
    "verify_coloring",
    "verify_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_case_V_plus_not_in_A_cal": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "check_state",
    "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
    "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
    "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
    "networkx.algorithms.coloring.equitable_coloring.procedure_P"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cast_no_solo": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "check_state",
    "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
    "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
    "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
    "networkx.algorithms.coloring.equitable_coloring.procedure_P"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "max_degree",
    "networkx.algorithms.coloring.tests.test_coloring.is_equitable",
    "networkx.coloring.equitable_color",
    "networkx.fast_gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_empty": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "max_degree",
    "networkx.algorithms.coloring.tests.test_coloring.is_equitable",
    "networkx.coloring.equitable_color",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_large": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "max_degree",
    "networkx.algorithms.coloring.tests.test_coloring.is_equitable",
    "networkx.coloring.equitable_color",
    "networkx.fast_gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hard_prob": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "check_state",
    "make_params_from_graph",
    "networkx.Graph",
    "networkx.algorithms.coloring.equitable_coloring.procedure_P",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hardest_prob": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "check_state",
    "make_params_from_graph",
    "networkx.Graph",
    "networkx.algorithms.coloring.equitable_coloring.procedure_P",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_interchange_invalid": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.coloring.tests.test_coloring.INTERCHANGE_INVALID",
    "networkx.algorithms.coloring.tests.test_coloring.pytest",
    "networkx.coloring.greedy_color",
    "one_node_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_coloring": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.coloring.tests.test_coloring.is_coloring",
    "networkx.algorithms.coloring.tests.test_coloring.is_equitable"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_equitable": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.coloring.tests.test_coloring.is_coloring",
    "networkx.algorithms.coloring.tests.test_coloring.is_equitable"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_num_colors": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.coloring.tests.test_coloring.pytest",
    "networkx.coloring.equitable_color"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_seed_argument": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "lf_shc",
    "networkx.coloring.greedy_color",
    "networkx.coloring.strategy_random_sequential",
    "rs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_special_cases": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "check_special_case"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_special_cases.check_special_case": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "any",
    "graph_func",
    "hasattr",
    "networkx.coloring.greedy_color",
    "verify_coloring",
    "verify_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_strategy_as_function": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "lf_shc",
    "networkx.coloring.greedy_color",
    "networkx.coloring.strategy_largest_first"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.check_state": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "all",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.cs_shc": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.dict_to_sets": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "len",
    "max",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.disconnected": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.empty_graph": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.gis_hc": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.gis_shc": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.is_coloring": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.is_equitable": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lf_hc": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lf_shc": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lfi_hc": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.lfi_shc": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.make_params_from_graph": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.coloring.equitable_coloring.make_C_from_F",
    "networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N",
    "networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.max_degree": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.tests.test_coloring.one_node_graph": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.tests.test_coloring.rs_shc": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.rsi_shc": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sl_hc": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sl_shc": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.slf_hc": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.slf_shc": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sli_hc": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.sli_shc": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.three_node_clique": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.two_node_graph": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.verify_coloring": {
  "data": {
   "lineno": 434
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.tests.test_coloring.verify_length": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "dict_to_sets",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.communicability_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.communicability_alg.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.communicability_alg.communicability": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "list",
    "networkx.algorithms.communicability_alg.numpy",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.communicability_alg.communicability_exp": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "list",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.communicability_alg.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.communicability_alg.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.communicability_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.communicability_alg.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.community": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.asyn_fluid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.asyn_fluid.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.community.asyn_fluid.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.community.asyn_fluid.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.community.asyn_fluid.asyn_fluidc": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "KeyError",
    "collections.Counter",
    "enumerate",
    "int",
    "isinstance",
    "iter",
    "len",
    "list",
    "max",
    "networkx.algorithms.components.is_connected",
    "networkx.exception.NetworkXError",
    "networkx.utils.groups",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.asyn_fluid.groups": {
  "data": {
   "shadows": "networkx.utils.groups"
  },
  "type": "import"
 },
 "networkx.algorithms.community.asyn_fluid.is_connected": {
  "data": {
   "shadows": "networkx.algorithms.components.is_connected"
  },
  "type": "import"
 },
 "networkx.algorithms.community.asyn_fluid.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.community.asyn_fluid.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.community.centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.centrality.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.community.centrality._without_most_central_edges": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "len",
    "most_valuable_edge",
    "networkx.connected_components",
    "networkx.number_connected_components",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.centrality.girvan_newman": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "_without_most_central_edges",
    "networkx.connected_components",
    "networkx.selfloop_edges",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.centrality.girvan_newman.most_valuable_edge": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "max",
    "networkx.edge_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.community_utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.community_utils.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.community.community_utils.is_partition": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kclique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.kclique.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.community.kclique._get_adjacent_cliques": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kclique.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kclique.k_clique_communities": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "_get_adjacent_cliques",
    "collections.defaultdict",
    "frozenset",
    "frozenset.union",
    "len",
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.connected_components",
    "networkx.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kclique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.kernighan_lin.BinaryHeap": {
  "data": {
   "shadows": "networkx.utils.BinaryHeap"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "_update_costs",
    "itertools.count",
    "networkx.utils.BinaryHeap",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep._update_costs": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin.is_partition": {
  "data": {
   "shadows": "networkx.algorithms.community.community_utils.is_partition"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin.kernighan_lin_bisection": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "enumerate",
    "len",
    "list",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.community.community_utils.is_partition",
    "networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kernighan_lin.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kernighan_lin.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.community.label_propagation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.label_propagation.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.community.label_propagation.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.community.label_propagation._color_network": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "dict",
    "networkx.coloring.greedy_color"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._labeling_complete": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "_most_frequent_labels",
    "all",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._most_frequent_labels": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "collections.Counter",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation._update_label": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.algorithms.community.label_propagation._most_frequent_labels"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation.asyn_lpa_communities": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "collections.Counter",
    "enumerate",
    "len",
    "list",
    "max",
    "networkx.utils.groups",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation.groups": {
  "data": {
   "shadows": "networkx.utils.groups"
  },
  "type": "import"
 },
 "networkx.algorithms.community.label_propagation.label_propagation_communities": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "_color_network",
    "_labeling_complete",
    "_update_label",
    "enumerate",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.label_propagation.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.community.label_propagation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.label_propagation.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.community.lukes": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.lukes.CLUSTER_EVAL_CACHE_SIZE": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.D_EDGE_VALUE": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.D_EDGE_W": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.D_NODE_VALUE": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.D_NODE_W": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.PKEY": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.community.lukes._split_n_from": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "int",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.choice": {
  "data": {
   "shadows": "random.choice"
  },
  "type": "import"
 },
 "networkx.algorithms.community.lukes.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.algorithms.community.lukes.lru_cache": {
  "data": {
   "shadows": "functools.lru_cache"
  },
  "type": "import"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "TypeError",
    "_a_parent_of_leaves_only",
    "_concatenate_or_merge",
    "_leaves",
    "copy.deepcopy",
    "dict",
    "int",
    "isinstance",
    "len",
    "list",
    "networkx.NotATree",
    "networkx.algorithms.community.lukes.D_EDGE_VALUE",
    "networkx.algorithms.community.lukes.D_EDGE_W",
    "networkx.algorithms.community.lukes.D_NODE_VALUE",
    "networkx.algorithms.community.lukes.D_NODE_W",
    "networkx.algorithms.community.lukes.PKEY",
    "networkx.algorithms.community.lukes._split_n_from",
    "networkx.descendants",
    "networkx.dfs_tree",
    "networkx.get_node_attributes",
    "networkx.is_directed",
    "networkx.is_tree",
    "networkx.set_edge_attributes",
    "networkx.set_node_attributes",
    "random.choice",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._a_parent_of_leaves_only": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "_leaves",
    "all",
    "networkx.descendants",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._concatenate_or_merge": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "_pivot",
    "_value_of_partition",
    "_weight_of_cluster",
    "filter",
    "frozenset",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._leaves": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.descendants",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._pivot": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._value_of_cluster": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "frozenset",
    "functools.lru_cache",
    "networkx.algorithms.community.lukes.CLUSTER_EVAL_CACHE_SIZE",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._value_of_partition": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "_value_of_cluster",
    "frozenset",
    "list",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.lukes_partitioning._weight_of_cluster": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "frozenset",
    "functools.lru_cache",
    "networkx.algorithms.community.lukes.CLUSTER_EVAL_CACHE_SIZE",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.lukes.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.community.lukes.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.modularity_max": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.community.modularity_max.naive_greedy_modularity_communities"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.community.modularity_max.MappedQueue": {
  "data": {
   "shadows": "networkx.utils.mapped_queue.MappedQueue"
  },
  "type": "import"
 },
 "networkx.algorithms.community.modularity_max.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.community.modularity_max._naive_greedy_modularity_communities": {
  "data": {
   "lineno": 265
  },
  "type": "constant"
 },
 "networkx.algorithms.community.modularity_max.greedy_modularity_communities": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "IndexError",
    "enumerate",
    "frozenset",
    "len",
    "networkx.algorithms.community.quality.modularity",
    "networkx.utils.mapped_queue.MappedQueue",
    "range",
    "set",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.modularity_max.modularity": {
  "data": {
   "shadows": "networkx.algorithms.community.quality.modularity"
  },
  "type": "import"
 },
 "networkx.algorithms.community.modularity_max.naive_greedy_modularity_communities": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "enumerate",
    "frozenset",
    "len",
    "list",
    "min",
    "networkx.algorithms.community.quality.modularity",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.quality.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.community.quality.NotAPartition": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.community.quality.NotAPartition.__init__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.community.quality.coverage": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.algorithms.community.quality.intra_community_edges",
    "networkx.algorithms.community.quality.require_partition"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.inter_community_edges": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.quotient_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.inter_community_non_edges": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.algorithms.community.quality.inter_community_edges",
    "networkx.complement"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.intra_community_edges": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.is_partition": {
  "data": {
   "shadows": "networkx.algorithms.community.community_utils.is_partition"
  },
  "type": "import"
 },
 "networkx.algorithms.community.quality.modularity": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "list",
    "map",
    "networkx.algorithms.community.community_utils.is_partition",
    "networkx.algorithms.community.quality.NotAPartition",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.modularity.community_contribution": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.community.quality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.quality.performance": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.community.quality.inter_community_non_edges",
    "networkx.algorithms.community.quality.intra_community_edges",
    "networkx.algorithms.community.quality.require_partition",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.community.quality.require_partition": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.require_partition.new_func": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "func",
    "functools.wraps",
    "networkx.NetworkXError",
    "networkx.algorithms.community.community_utils.is_partition"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.quality.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.Graph": {
  "data": {
   "shadows": "networkx.Graph"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.asyn_fluidc": {
  "data": {
   "shadows": "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_exceptions": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.community.asyn_fluid.asyn_fluidc",
    "networkx.algorithms.community.tests.test_asyn_fluid.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_five_clique_ring": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_single_node": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_two_clique_communities": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_asyn_fluid.test_two_nodes": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.asyn_fluid.asyn_fluidc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman": {
  "data": {
   "lineno": 24
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_directed": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.community.girvan_newman",
    "networkx.algorithms.community.tests.test_centrality.validate_communities",
    "networkx.algorithms.community.tests.test_centrality.validate_possible_communities",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_most_valuable_edge": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.algorithms.community.girvan_newman",
    "networkx.algorithms.community.tests.test_centrality.validate_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_most_valuable_edge.heaviest": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "max",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_no_edges": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.community.girvan_newman",
    "networkx.algorithms.community.tests.test_centrality.validate_communities",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_selfloops": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.community.girvan_newman",
    "networkx.algorithms.community.tests.test_centrality.validate_communities",
    "networkx.algorithms.community.tests.test_centrality.validate_possible_communities",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_undirected": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.community.girvan_newman",
    "networkx.algorithms.community.tests.test_centrality.validate_communities",
    "networkx.algorithms.community.tests.test_centrality.validate_possible_communities",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.girvan_newman": {
  "data": {
   "shadows": "networkx.algorithms.community.girvan_newman"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_centrality.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_centrality.set_of_sets": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "frozenset",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.validate_communities": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.algorithms.community.tests.test_centrality.set_of_sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_centrality.validate_possible_communities": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "any",
    "networkx.algorithms.community.tests.test_centrality.set_of_sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub": {
  "data": {
   "lineno": 27
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub._check_communities": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.algorithms.community.k_clique_communities",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.setup": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k2": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k3": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k4": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k5": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k6": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.k_clique_communities": {
  "data": {
   "shadows": "networkx.algorithms.community.k_clique_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.test_bad_k": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.community.k_clique_communities",
    "networkx.algorithms.community.tests.test_kclique.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_isolated_K5": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "frozenset",
    "itertools.combinations",
    "networkx.Graph",
    "networkx.algorithms.community.k_clique_communities",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_overlapping_K5": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "frozenset",
    "itertools.combinations",
    "list",
    "networkx.Graph",
    "networkx.algorithms.community.k_clique_communities",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "frozenset",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.kernighan_lin_bisection": {
  "data": {
   "shadows": "networkx.algorithms.community.kernighan_lin_bisection"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_multigraph": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "dict",
    "itertools.permutations",
    "networkx.MultiGraph",
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal",
    "networkx.cycle_graph",
    "networkx.relabel_nodes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_non_disjoint_partition": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.pytest",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_partition": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_partition_argument": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_seed_argument": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kernighan_lin.test_too_many_blocks": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.community.tests.test_kernighan_lin.pytest",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities": {
  "data": {
   "lineno": 112
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities._check_communities": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "frozenset",
    "networkx.algorithms.community.asyn_lpa_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_null_graph": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.null_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_seed_argument": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.asyn_lpa_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_several_communities": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "frozenset",
    "itertools.chain.from_iterable",
    "itertools.combinations",
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_simple_communities": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_single_node": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "frozenset",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.asyn_lpa_communities": {
  "data": {
   "shadows": "networkx.algorithms.community.asyn_lpa_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.label_propagation_communities": {
  "data": {
   "shadows": "networkx.algorithms.community.label_propagation_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_connected_communities": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.label_propagation_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_directed_not_supported": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.community.label_propagation_communities",
    "networkx.algorithms.community.tests.test_label_propagation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_one_node": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.label_propagation_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_termination": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.algorithms.community.asyn_lpa_communities",
    "networkx.caveman_graph",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_label_propagation.test_unconnected_communities": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.community.label_propagation_communities"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_lukes.EWL": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.community.tests.test_lukes.NWL": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.community.tests.test_lukes.lukes_partitioning": {
  "data": {
   "shadows": "networkx.algorithms.community.lukes_partitioning"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_lukes.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_lukes.paper_1_case": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "frozenset",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.community.lukes_partitioning",
    "networkx.algorithms.community.tests.test_lukes.EWL",
    "networkx.algorithms.community.tests.test_lukes.NWL",
    "networkx.set_node_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.paper_2_case": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "frozenset",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.community.lukes_partitioning",
    "networkx.algorithms.community.tests.test_lukes.EWL",
    "networkx.algorithms.community.tests.test_lukes.NWL"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_lukes.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_lukes.test_mandatory_integrality": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "TypeError",
    "networkx.DiGraph",
    "networkx.algorithms.community.lukes_partitioning",
    "networkx.algorithms.community.tests.test_lukes.EWL",
    "networkx.algorithms.community.tests.test_lukes.NWL",
    "networkx.algorithms.community.tests.test_lukes.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_mandatory_tree": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.NotATree",
    "networkx.algorithms.community.lukes_partitioning",
    "networkx.algorithms.community.tests.test_lukes.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_paper_1_case": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "frozenset",
    "itertools.product",
    "networkx.algorithms.community.tests.test_lukes.paper_1_case"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_lukes.test_paper_2_case": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "frozenset",
    "itertools.product",
    "networkx.algorithms.community.tests.test_lukes.paper_2_case"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM._check_communities": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.algorithms.community.greedy_modularity_communities",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM.setup": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestCNM.test_karate_club": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive": {
  "data": {
   "lineno": 25
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive._check_communities": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.algorithms.community.naive_greedy_modularity_communities",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive.setup": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.TestNaive.test_karate_club": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_modularity_max.greedy_modularity_communities": {
  "data": {
   "shadows": "networkx.algorithms.community.greedy_modularity_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_modularity_max.naive_greedy_modularity_communities": {
  "data": {
   "shadows": "networkx.algorithms.community.naive_greedy_modularity_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_modularity_max.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage": {
  "data": {
   "lineno": 33
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage.test_bad_partition": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.algorithms.community.coverage",
    "networkx.barbell_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestCoverage.test_good_partition": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.community.coverage",
    "networkx.barbell_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance.test_bad_partition": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.community.performance",
    "networkx.barbell_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.TestPerformance.test_good_partition": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.algorithms.community.performance",
    "networkx.barbell_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.barbell_graph": {
  "data": {
   "shadows": "networkx.barbell_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.coverage": {
  "data": {
   "shadows": "networkx.algorithms.community.coverage"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.inter_community_edges": {
  "data": {
   "shadows": "networkx.algorithms.community.quality.inter_community_edges"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.modularity": {
  "data": {
   "shadows": "networkx.algorithms.community.modularity"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.performance": {
  "data": {
   "shadows": "networkx.algorithms.community.performance"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_quality.test_inter_community_edges_with_digraphs": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.community.quality.inter_community_edges",
    "networkx.complete_graph",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_quality.test_modularity": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.community.modularity",
    "networkx.barbell_graph",
    "networkx.erdos_renyi_graph",
    "networkx.margulis_gabber_galil_graph",
    "networkx.testing.almost_equal",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_utils.is_partition": {
  "data": {
   "shadows": "networkx.algorithms.community.is_partition"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_utils.test_is_partition": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.algorithms.community.is_partition",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_covering": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.algorithms.community.is_partition",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_disjoint": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.algorithms.community.is_partition",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_utils.test_not_node": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.algorithms.community.is_partition",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.complete_bipartite_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.complete_bipartite_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.components": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.attracting": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.attracting.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.components.attracting.attracting_components": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "list",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.is_attracting_component": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.components.attracting.attracting_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.attracting.number_attracting_components": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.algorithms.components.attracting.attracting_components",
    "networkx.utils.decorators.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.biconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.biconnected.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.components.biconnected._biconnected_dfs": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "len",
    "min",
    "networkx.utils.decorators.not_implemented_for",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.articulation_points": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "_biconnected_dfs",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.biconnected_component_edges": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "_biconnected_dfs",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.biconnected_components": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "_biconnected_dfs",
    "itertools.chain.from_iterable",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.components.biconnected.is_biconnected": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "biconnected_components",
    "len",
    "list",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.biconnected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.connected.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.components.connected._plain_bfs": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.connected.connected_components": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "_plain_bfs",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.connected.is_connected": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "_plain_bfs",
    "arbitrary_element",
    "len",
    "networkx.NetworkXPointlessConcept",
    "networkx.utils.decorators.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.connected.node_connected_component": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "_plain_bfs",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.connected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.connected.number_connected_components": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.algorithms.components.connected.connected_components",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.semiconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.semiconnected.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.components.semiconnected.is_semiconnected": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.NetworkXPointlessConcept",
    "networkx.condensation",
    "networkx.is_weakly_connected",
    "networkx.topological_sort",
    "networkx.utils.not_implemented_for",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.semiconnected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.semiconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.semiconnected.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.strongly_connected.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.components.strongly_connected.condensation": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.DiGraph",
    "networkx.set_node_attributes",
    "networkx.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.is_strongly_connected": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.strongly_connected.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_postorder_nodes",
    "networkx.dfs_preorder_nodes",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected.number_strongly_connected_components": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.algorithms.components.strongly_connected.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "min",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for",
    "visit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive.visit": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "min",
    "visit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_attracting": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_attracting.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setup_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.attracting_components",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_connected_raise": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.components.tests.test_attracting.pytest",
    "networkx.attracting_components",
    "networkx.is_attracting_component",
    "networkx.number_attracting_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.is_attracting_component"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.number_attracting_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_attracting.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_biconnected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_equal": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.add_cycle",
    "networkx.articulation_points",
    "networkx.cycle_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_articulation_points_repetitions": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.articulation_points"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_barbell": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "list",
    "networkx.add_cycle",
    "networkx.add_path",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.articulation_points",
    "networkx.barbell_graph",
    "networkx.biconnected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal",
    "networkx.articulation_points",
    "networkx.biconnected_component_edges",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal",
    "networkx.biconnected_component_edges",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "list",
    "networkx.add_cycle",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.biconnected_components",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.articulation_points",
    "networkx.biconnected_components",
    "networkx.davis_southern_women_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.biconnected_components",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.articulation_points",
    "networkx.biconnected_components",
    "networkx.karate_club_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_connected_raise": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.components.tests.test_biconnected.pytest",
    "networkx.articulation_points",
    "networkx.biconnected_component_edges",
    "networkx.biconnected_components",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_is_biconnected": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.add_cycle",
    "networkx.cycle_graph",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_null_graph": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.articulation_points",
    "networkx.biconnected_component_edges",
    "networkx.biconnected_components",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.setup_class": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph",
    "networkx.house_graph",
    "networkx.lollipop_graph",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "cc",
    "frozenset",
    "networkx.connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "cc",
    "frozenset",
    "networkx.connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_mutability": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "len",
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.tests.test_connected.pytest",
    "networkx.connected_components",
    "networkx.is_connected",
    "networkx.node_connected_component",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ncc",
    "networkx.node_connected_component"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "ncc",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ncc",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_semiconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_alternating_path": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_cycle": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.is_semiconnected",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_dumbbell": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.is_semiconnected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_empty": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.tests.test_semiconnected.pytest",
    "networkx.is_semiconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_path": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_single_node_graph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_semiconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_tree": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_undirected": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.components.tests.test_semiconnected.pytest",
    "networkx.is_semiconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_semiconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_semiconnected.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_strongly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setup_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "classmethod",
    "frozenset",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_condensation_mapping_and_members": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.condensation",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_raise": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.tests.test_strongly_connected.pytest",
    "networkx.condensation",
    "networkx.is_strongly_connected",
    "networkx.kosaraju_strongly_connected_components",
    "networkx.strongly_connected_components",
    "networkx.strongly_connected_components_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "enumerate",
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.is_directed_acyclic_graph",
    "networkx.strongly_connected_components",
    "scc",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "scc",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "len",
    "networkx.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "frozenset",
    "networkx.kosaraju_strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_null_graph": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.tests.test_strongly_connected.pytest",
    "networkx.condensation",
    "networkx.is_strongly_connected",
    "networkx.kosaraju_strongly_connected_components",
    "networkx.strongly_connected_components",
    "networkx.strongly_connected_components_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "len",
    "ncc",
    "networkx.number_strongly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "frozenset",
    "networkx.strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "frozenset",
    "networkx.strongly_connected_components_recursive",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_weakly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setup_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.components.tests.test_weakly_connected.pytest",
    "networkx.is_weakly_connected",
    "networkx.number_weakly_connected_components",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.is_connected",
    "networkx.is_weakly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_null_graph": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.tests.test_weakly_connected.pytest",
    "networkx.is_weakly_connected",
    "networkx.number_weakly_connected_components",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.number_connected_components",
    "networkx.number_weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "frozenset",
    "networkx.connected_components",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.weakly_connected.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.components.weakly_connected._plain_bfs": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.is_weakly_connected": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.weakly_connected.weakly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected.number_weakly_connected_components": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.algorithms.components.weakly_connected.weakly_connected_components",
    "networkx.utils.decorators.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected.weakly_connected_components": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "_plain_bfs",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity": {
  "data": {
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.connectivity.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.average_node_connectivity": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.boykov_kolmogorov": {
  "data": {
   "shadows": "networkx.algorithms.flow.boykov_kolmogorov"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.default_flow_func": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity.dinitz": {
  "data": {
   "shadows": "networkx.algorithms.flow.dinitz"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.edge_connectivity": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "IndexError",
    "build_auxiliary_edge_connectivity",
    "dict",
    "len",
    "list",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.dominating_set",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.local_edge_connectivity": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "build_auxiliary_edge_connectivity",
    "dict",
    "networkx.algorithms.connectivity.connectivity.default_flow_func",
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.local_node_connectivity": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.default_flow_func",
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "operator.itemgetter",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity.neighbors": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.connectivity.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.cuts.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.cuts.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.default_flow_func": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.cuts.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.minimum_edge_cut": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "IndexError",
    "build_auxiliary_edge_connectivity",
    "dict",
    "len",
    "list",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.dominating_set",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "len",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.itertools",
    "networkx.algorithms.connectivity.cuts.minimum_st_node_cut",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut.neighbors": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.cuts.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "build_auxiliary_edge_connectivity",
    "dict",
    "networkx.algorithms.connectivity.cuts.default_flow_func",
    "networkx.minimum_cut",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_node_cut": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.disjoint_paths.NetworkXNoPath": {
  "data": {
   "shadows": "networkx.exception.NetworkXNoPath"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.disjoint_paths._filterfalse": {
  "data": {
   "shadows": "itertools.filterfalse"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths._unique_everseen": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "itertools.filterfalse",
    "seen_add",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths.default_flow_func": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.disjoint_paths.edge_disjoint_paths": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "KeyError",
    "build_auxiliary_edge_connectivity",
    "dict",
    "flow_func",
    "list",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.disjoint_paths.default_flow_func",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.exception.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths.node_disjoint_paths": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "_unique_everseen",
    "build_auxiliary_node_connectivity",
    "dict",
    "flow_func",
    "list",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.disjoint_paths.edge_disjoint_paths",
    "networkx.exception.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.disjoint_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.disjoint_paths.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.edge_augmentation.MetaEdge": {
  "data": {
   "lineno": 524
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.edge_augmentation.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.edge_augmentation._compat_shuffle": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": [
    "input"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._lightest_meta_edges": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "collections.defaultdict",
    "list",
    "min",
    "networkx.algorithms.connectivity.edge_augmentation.MetaEdge",
    "networkx.algorithms.connectivity.edge_augmentation._ordered",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._minimum_rooted_branching": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": [
    "networkx.minimum_spanning_arborescence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._ordered": {
  "data": {
   "lineno": 493
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "_try_getitem",
    "dict",
    "isinstance",
    "itertools.compress",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges._try_getitem": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.bridge_augmentation": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.utils.not_implemented_for",
    "unconstrained_bridge_augmentation",
    "weighted_bridge_augmentation"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.collapse": {
  "data": {
   "lineno": 1034,
   "symbols_in_volume": [
    "enumerate",
    "networkx.set_node_attributes",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.complement_edges": {
  "data": {
   "lineno": 1105,
   "symbols_in_volume": [
    "itertools.combinations"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.greedy_k_edge_augmentation": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": [
    "len",
    "list",
    "map",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.connectivity.edge_augmentation._compat_shuffle",
    "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
    "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
    "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected",
    "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "sorted",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "networkx.edge_connectivity",
    "networkx.has_bridges",
    "networkx.is_connected",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "ValueError",
    "networkx.connectivity.local_edge_connectivity",
    "networkx.has_path",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.it": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.k_edge_augmentation": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "ValueError",
    "bridge_augmentation",
    "complement_edges",
    "greedy_k_edge_augmentation",
    "len",
    "list",
    "networkx.NetworkXUnfeasible",
    "networkx.is_k_edge_connected",
    "networkx.utils.not_implemented_for",
    "one_edge_augmentation",
    "partial_k_edge_augmentation"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.one_edge_augmentation": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "unconstrained_one_edge_augmentation",
    "weighted_one_edge_augmentation"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.partial_k_edge_augmentation": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "_edges_between_disjoint",
    "_unpack_available_edges",
    "itertools.combinations",
    "len",
    "list",
    "networkx.k_edge_augmentation",
    "networkx.k_edge_subgraphs",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.partial_k_edge_augmentation._edges_between_disjoint": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_augmentation.unconstrained_bridge_augmentation": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "StopIteration",
    "collapse",
    "collections.defaultdict",
    "int",
    "itertools.product",
    "len",
    "list",
    "networkx.algorithms.connectivity.edge_augmentation.math",
    "networkx.connected_components",
    "networkx.connectivity.bridge_components",
    "networkx.dfs_preorder_nodes",
    "next",
    "sorted",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.unconstrained_one_edge_augmentation": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "collapse",
    "collections.defaultdict",
    "list",
    "networkx.connected_components",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.weighted_bridge_augmentation": {
  "data": {
   "lineno": 840,
   "symbols_in_volume": [
    "StopIteration",
    "_minimum_rooted_branching",
    "collapse",
    "len",
    "list",
    "networkx.NetworkXException",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.connectivity.edge_augmentation._lightest_meta_edges",
    "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
    "networkx.algorithms.connectivity.edge_augmentation.one_edge_augmentation",
    "networkx.connectivity.bridge_components",
    "networkx.dfs_tree",
    "networkx.has_bridges",
    "networkx.is_connected",
    "networkx.reverse",
    "networkx.set_edge_attributes",
    "networkx.tree_all_pairs_lowest_common_ancestor",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_augmentation.weighted_one_edge_augmentation": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": [
    "collapse",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.connectivity.edge_augmentation._lightest_meta_edges",
    "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
    "networkx.connected_components",
    "networkx.is_connected",
    "networkx.minimum_spanning_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph": {
  "data": {
   "lineno": 239
  },
  "type": "class"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.construct": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "_recursive_build",
    "classmethod",
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph",
    "networkx.utils.arbitrary_element",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.construct._recursive_build": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "_recursive_build",
    "networkx.minimum_cut",
    "networkx.utils.arbitrary_element"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_components": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.connected_components",
    "networkx.get_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_subgraphs": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_kcomponents.k_edge_subgraphs",
    "networkx.connected_components",
    "networkx.get_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._high_degree_components": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "map",
    "networkx.algorithms.connectivity.edge_kcomponents._low_degree_nodes",
    "networkx.connected_components",
    "networkx.strongly_connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._k_edge_subgraphs_nodes": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "general_k_edge_subgraphs",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents._low_degree_nodes": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.bridge_components": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "networkx.algorithms.bridges",
    "networkx.connected_components",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.bridges": {
  "data": {
   "shadows": "networkx.algorithms.bridges"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "ValueError",
    "find_ccs",
    "functools.partial",
    "len",
    "networkx.algorithms.connectivity.edge_kcomponents._high_degree_components",
    "networkx.minimum_edge_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.it": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.k_edge_components": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "ValueError",
    "bridge_components",
    "networkx.connected_components",
    "networkx.strongly_connected_components",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.k_edge_subgraphs": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "ValueError",
    "_k_edge_subgraphs_nodes",
    "networkx.algorithms.connectivity.edge_kcomponents.k_edge_components",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.edge_kcomponents.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcomponents.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcomponents._consolidate": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "enumerate",
    "itertools.combinations",
    "len",
    "networkx.Graph",
    "networkx.connected_components",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "has_nbrs_in_partition",
    "len",
    "networkx.algorithms.connectivity.kcomponents._consolidate",
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition.has_nbrs_in_partition": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._reconstruct_k_components": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "any",
    "dict",
    "list",
    "max",
    "networkx.algorithms.connectivity.kcomponents._consolidate",
    "range",
    "reversed",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.build_k_number_dict": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "operator.itemgetter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.default_flow_func": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcomponents.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.k_components": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "StopIteration",
    "_generate_partition",
    "_reconstruct_k_components",
    "collections.defaultdict",
    "len",
    "list",
    "networkx.algorithms.connectivity.kcomponents.default_flow_func",
    "networkx.all_node_cuts",
    "networkx.biconnected_components",
    "networkx.connected_components",
    "networkx.node_connectivity",
    "networkx.utils.not_implemented_for",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcutsets.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcutsets._is_separating_set": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "len",
    "networkx.is_connected",
    "networkx.restricted_view"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets.all_node_cuts": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "_is_separating_set",
    "any",
    "build_auxiliary_node_connectivity",
    "collections.defaultdict",
    "dict",
    "flow_func",
    "itertools.combinations",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.kcutsets.copy",
    "networkx.algorithms.connectivity.kcutsets.default_flow_func",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.antichains",
    "networkx.condensation",
    "networkx.density",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "networkx.transitive_closure",
    "operator.itemgetter",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.default_flow_func": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcutsets.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.stoerwagner.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.stoerwagner.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner.stoer_wagner": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "arbitrary_element",
    "float",
    "heap",
    "itertools.islice",
    "len",
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.single_source_shortest_path_length",
    "not_implemented_for",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity": {
  "data": {
   "lineno": 309
  },
  "type": "class"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.setup_class": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.gnp_random_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.node_connectivity",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.node_connectivity",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.icosahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "len",
    "networkx.all_pairs_node_connectivity",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_combinations": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.complete_graph",
    "networkx.node_connectivity",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "iter",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.complete_graph",
    "networkx.node_connectivity",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_complete": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "len",
    "networkx.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_cycles": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "networkx.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_paths": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "networkx.all_pairs_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "Exception",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.local_edge_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.local_edge_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.local_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.local_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_articulation_points": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.node_connectivity",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.average_node_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity_directed": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.average_node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_brandes_erlebach": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.flow.preflow_push",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_complete_graphs": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_cutoff": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "local_func",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.flow.preflow_push",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_directed_edge_connectivity": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.cycle_graph",
    "networkx.edge_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_dodecahedral": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.dodecahedral_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_connectivity_flow_vs_stoer_wagner": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "graph_func",
    "networkx.dodecahedral_graph",
    "networkx.edge_connectivity",
    "networkx.icosahedral_graph",
    "networkx.octahedral_graph",
    "networkx.stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_source": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.edge_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_target": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.edge_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_empty_graphs": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.empty_graph",
    "networkx.node_connectivity",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_icosahedral": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.icosahedral_graph",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_source": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_target": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_invalid_auxiliary": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_source": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.node_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_target": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.pytest",
    "networkx.node_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_connected": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_weakly_connected": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_octahedral": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.octahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_petersen": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_tutte": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.tutte_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_1": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_2": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.complete_graph",
    "networkx.core_number",
    "networkx.disjoint_union",
    "networkx.edge_connectivity",
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "Exception",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.minimum_st_edge_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_st_edge_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.minimum_st_node_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_st_node_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_articulation_points": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.articulation_points",
    "networkx.minimum_node_cut",
    "next",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_brandes_erlebach_book": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.Graph",
    "networkx.algorithms.connectivity.minimum_st_node_cut",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_edge_cutset_random_graphs": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.connected_components",
    "networkx.edge_connectivity",
    "networkx.fast_gnp_random_graph",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.utils.arbitrary_element",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_empty_graphs": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_icosahedral_cutset": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.icosahedral_graph",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_source": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "interface_func",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_target": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "interface_func",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_invalid_auxiliary": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.minimum_st_node_cut",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_source": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_target": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_exception": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_random_graphs": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.connected_components",
    "networkx.fast_gnp_random_graph",
    "networkx.is_connected",
    "networkx.minimum_node_cut",
    "networkx.node_connectivity",
    "networkx.utils.arbitrary_element",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_connected": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_weakly_connected": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.pytest",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_octahedral_cutset": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.octahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_petersen_cutset": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_unbounded": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.minimum_st_edge_cut",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_white_harary_paper": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "interface_func",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete_directed": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "interface_func",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_minimum_st_node_cut": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.minimum_st_node_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.is_path",
    "networkx.utils.pairwise",
    "set",
    "set.union",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.is_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.is_path": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "all",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_cutoff_disjoint_paths": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_disjoint_paths",
    "networkx.icosahedral_graph",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_florentine_families": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.edge_disjoint_paths",
    "networkx.florentine_families_graph",
    "networkx.node_connectivity",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_graph_from_pr_2053": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.edge_disjoint_paths",
    "networkx.node_connectivity",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_icosahedral_disjoint_paths": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_disjoint_paths",
    "networkx.icosahedral_graph",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_invalid_auxiliary": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.complete_graph",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_edges": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.edge_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_nodes": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_karate": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.edge_disjoint_paths",
    "networkx.karate_club_graph",
    "networkx.node_connectivity",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_edge_paths": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.edge_disjoint_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_node_paths": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.node_disjoint_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_edge_paths": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.edge_disjoint_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_node_paths": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.node_disjoint_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_edges": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.edge_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_nodes": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_edges": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.edge_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_nodes": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.pytest",
    "networkx.node_disjoint_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_octahedral_disjoint_paths": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_disjoint_paths",
    "networkx.node_disjoint_paths",
    "networkx.octahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_disjoint_paths.test_petersen_disjoint_paths": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths",
    "networkx.algorithms.connectivity.tests.test_disjoint_paths.flow_funcs",
    "networkx.edge_disjoint_paths",
    "networkx.node_disjoint_paths",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._assert_solution_properties": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "all",
    "any",
    "len",
    "list",
    "map",
    "set",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._augment_and_check": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "Exception",
    "dict",
    "isinstance",
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
    "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation._assert_solution_properties",
    "networkx.edge_connectivity",
    "networkx.k_edge_augmentation",
    "print",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._check_augmentations": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "_check_unconstrained_bridge_property",
    "min",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges",
    "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation._augment_and_check",
    "networkx.edge_connectivity",
    "print",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._check_unconstrained_bridge_property": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "int",
    "len",
    "list",
    "networkx.algorithms.connectivity.edge_augmentation.collapse",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.math",
    "networkx.connectivity.bridge_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation._unpack_available_edges": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.collapse": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_augmentation.collapse"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.complement_edges": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_augmentation.complement_edges"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.is_k_edge_connected": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.is_locally_k_edge_connected": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.it": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.k_edge_augmentation": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_edge_augmentation"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.tarjan_bridge_graph": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_barbell": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_bridge": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_clique_and_node": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K",
    "networkx.complete_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_cliques": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K",
    "networkx.complete_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_configuration": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.Graph",
    "networkx.configuration_model",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.selfloop_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_edgeless_graph": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_gnp_augmentation": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.random",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_invalid_k": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "networkx.Graph",
    "networkx.algorithms.connectivity.k_edge_augmentation",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected",
    "networkx.barbell_graph",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected_exceptions": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "ValueError",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected_exceptions": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "ValueError",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_karate": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_null_graph": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_point_graph": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_shell": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_star": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "_check_augmentations",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_tarjan": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "_augment_and_check",
    "_check_augmentations",
    "len",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.tarjan_bridge_graph",
    "print",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_unfeasible": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "_check_augmentations",
    "list",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.connectivity.k_edge_augmentation",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.MAX_EFFICIENT_K",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.pytest",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.tarjan_bridge_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_augmentation.test_weight_key": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "_augment_and_check",
    "_check_augmentations",
    "list",
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_augmentation.complement_edges",
    "networkx.algorithms.connectivity.tests.test_edge_augmentation.random",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.EdgeComponentAuxGraph": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.EdgeComponentAuxGraph"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._all_pairs_connectivity": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "itertools.combinations",
    "min",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._memo_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_local_cc_edge_connectivity": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._all_pairs_connectivity",
    "networkx.edge_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_subgraph_edge_connectivity": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "len",
    "networkx.edge_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "all",
    "itertools.count",
    "len",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.bridge_components",
    "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_local_cc_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_subgraph_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.connected_components",
    "networkx.strongly_connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents._memo_connectivity": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.edge_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.bridge_components": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.bridge_components"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "frozenset",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.general_k_edge_subgraphs": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.it": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_bridge_cc": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.bridge_components",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.configuration_model",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.selfloop_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration_directed": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.configuration_model",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.selfloop_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_directed_aux_graph": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.strongly_connected_components",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_empty_input": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_five_clique": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "min",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.complete_graph",
    "networkx.degree",
    "networkx.disjoint_union",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_four_clique": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "frozenset",
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_general_k_edge_subgraph_quick_return": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate_directed": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference_directed": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_not_implemented": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.bridge_components",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.pytest",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp_directed": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell_directed": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_tarjan_bridge": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_triangles": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_undirected_aux_graph": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.Graph",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset",
    "networkx.k_edge_subgraphs",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_zero_k_exception": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "networkx.Graph",
    "networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct",
    "networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs",
    "networkx.algorithms.connectivity.tests.test_edge_kcomponents.pytest",
    "networkx.k_edge_components",
    "networkx.k_edge_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.node_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents._consolidate": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcomponents._consolidate"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.build_k_number_dict": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcomponents.build_k_number_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_configuration": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.configuration_model",
    "networkx.k_components",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.selfloop_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.davis_southern_women_graph",
    "networkx.k_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women_detail_3_and_4": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "len",
    "networkx.davis_southern_women_graph",
    "networkx.k_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_directed": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.connectivity.tests.test_kcomponents.pytest",
    "networkx.gnp_random_graph",
    "networkx.k_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.k_components",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate_component_number": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.kcomponents.build_k_number_dict",
    "networkx.k_components",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_random_gnp": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.connectivity.tests.test_kcomponents.pytest",
    "networkx.gnp_random_graph",
    "networkx.k_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "list_of_sets_equal",
    "networkx.algorithms.connectivity.kcomponents._consolidate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode.list_of_sets_equal": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_shell": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.connectivity.tests.test_kcomponents.pytest",
    "networkx.k_components",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.connectivity.tests.test_kcomponents.pytest",
    "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph",
    "networkx.k_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.MAX_CUTSETS_TO_TEST": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_kcutsets.MAX_CUTSETS_TO_TEST",
    "networkx.algorithms.connectivity.tests.test_kcutsets.itertools",
    "networkx.all_node_cuts",
    "networkx.connected_components",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "networkx.restricted_view"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "Exception",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._is_separating_set": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcutsets._is_separating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.flow_funcs": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_alternative_flow_functions": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_kcutsets.MAX_CUTSETS_TO_TEST",
    "networkx.algorithms.connectivity.tests.test_kcutsets.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_kcutsets.itertools",
    "networkx.algorithms.connectivity.tests.test_kcutsets.pytest",
    "networkx.all_node_cuts",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "networkx.restricted_view"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_articulation_points": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected",
    "networkx.all_node_cuts",
    "networkx.articulation_points",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_complete_graph": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.all_node_cuts",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_configuration": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.configuration_model",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.selfloop_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_cycle_graph": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.all_node_cuts",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_disconnected_graph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_kcutsets.pytest",
    "networkx.all_node_cuts",
    "networkx.fast_gnp_random_graph",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_example_1": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_grid_2d_graph": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.all_node_cuts",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.connectivity.kcutsets._is_separating_set",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set_complete_graph": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.kcutsets._is_separating_set",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_karate": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_non_repeated_cuts": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.all_node_cuts",
    "networkx.biconnected_components",
    "networkx.info",
    "networkx.karate_club_graph",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_random_gnp": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_shell": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.algorithms.connectivity.tests.test_kcutsets.pytest",
    "networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "isinstance",
    "itertools.chain.from_iterable",
    "len",
    "list",
    "map",
    "set",
    "sum",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition",
    "networkx.stoer_wagner",
    "networkx.utils.BinaryHeap",
    "networkx.utils.PairingHeap"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_exceptions": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner.pytest",
    "networkx.stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph1": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph2": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph3": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_weight_name": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.utils.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_node_connectivity": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "enumerate",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.core": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.core.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.core.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "networkx.algorithms.core._core_subgraph": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "k_filter",
    "max",
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.core_number": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "list",
    "networkx.all_neighbors",
    "networkx.exception.NetworkXError",
    "networkx.number_of_selfloops",
    "networkx.utils.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.find_cores": {
  "data": {
   "lineno": 118
  },
  "type": "constant"
 },
 "networkx.algorithms.core.k_core": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "k_filter",
    "networkx.algorithms.core._core_subgraph",
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_core.k_filter": {
  "data": {
   "lineno": 194
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_corona": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "networkx.algorithms.core._core_subgraph",
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_corona.func": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_crust": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.core.core_number",
    "networkx.algorithms.core.find_cores"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_shell": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "k_filter",
    "networkx.algorithms.core._core_subgraph",
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_shell.k_filter": {
  "data": {
   "lineno": 253
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_truss": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.isolates",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.core.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.core.onion_layers": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.all_neighbors",
    "networkx.exception.NetworkXError",
    "networkx.isolates",
    "networkx.number_of_selfloops",
    "networkx.utils.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cost_of_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.cost_of_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.covering": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.covering.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.covering.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.covering.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.covering.is_edge_cover": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.covering.min_edge_cover": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "AttributeError",
    "functools.partial",
    "matching_algorithm",
    "networkx.NetworkXException",
    "networkx.max_weight_matching",
    "networkx.number_of_isolates",
    "networkx.utils.arbitrary_element",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.covering.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.covering.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.covering.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.cuts": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.cuts.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.cuts.boundary_expansion": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "len",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.cuts.conductance": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.cuts.cut_size",
    "networkx.algorithms.cuts.volume",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.cut_size": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "itertools.chain",
    "networkx.edge_boundary",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.edge_expansion": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "len",
    "min",
    "networkx.algorithms.cuts.cut_size",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.mixing_expansion": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "networkx.algorithms.cuts.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.node_expansion": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.normalized_cut_size": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.algorithms.cuts.cut_size",
    "networkx.algorithms.cuts.volume",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cuts.volume": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "degree",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.cycles.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.cycles._min_cycle": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "_path_to_cycle",
    "dict",
    "enumerate",
    "frozenset",
    "len",
    "min",
    "networkx.Graph",
    "networkx.shortest_path",
    "networkx.shortest_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles._min_cycle_basis": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "_min_cycle",
    "frozenset",
    "len",
    "list",
    "networkx.minimum_spanning_edges",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles._path_to_cycle": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "networkx.utils.pairwise",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.cycle_basis": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.find_cycle": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "IndexError",
    "enumerate",
    "len",
    "networkx.edge_dfs",
    "networkx.exception.NetworkXNoCycle",
    "set",
    "tailhead"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.find_cycle.tailhead": {
  "data": {
   "lineno": 419
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.minimum_cycle_basis": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "_min_cycle_basis",
    "networkx.connected_components",
    "networkx.utils.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "bool",
    "circuit",
    "collections.defaultdict",
    "dict",
    "len",
    "list",
    "min",
    "networkx.strongly_connected_components",
    "networkx.utils.not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles._unblock": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "_unblock"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles.circuit": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "_unblock",
    "circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "_unblock",
    "collections.defaultdict",
    "len",
    "list",
    "networkx.strongly_connected_components",
    "networkx.utils.not_implemented_for",
    "set",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles._unblock": {
  "data": {
   "lineno": 160
  },
  "type": "function"
 },
 "networkx.algorithms.d_separation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.d_separation.AbstractSet": {
  "data": {
   "shadows": "typing.AbstractSet"
  },
  "type": "import"
 },
 "networkx.algorithms.d_separation.UnionFind": {
  "data": {
   "shadows": "networkx.utils.UnionFind"
  },
  "type": "import"
 },
 "networkx.algorithms.d_separation.__all__": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "networkx.algorithms.d_separation.d_separated": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "any",
    "bool",
    "collections.deque",
    "iter",
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.NodeNotFound",
    "networkx.is_directed_acyclic_graph",
    "networkx.utils.UnionFind",
    "networkx.utils.not_implemented_for",
    "networkx.weakly_connected_components",
    "next",
    "typing.AbstractSet"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.d_separation.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.d_separation.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.d_separation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dag": {
  "data": {
   "symbols_in_volume": [
    "itertools.chain.from_iterable"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.dag.NIL": {
  "data": {
   "shadows": "networkx.generators.trees.NIL"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.algorithms.dag.all_topological_sorts": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "all",
    "collections.deque",
    "dict",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.ancestors": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.antichains": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "list",
    "networkx.topological_sort",
    "networkx.transitive_closure_dag",
    "networkx.utils.not_implemented_for",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.chaini": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "networkx.algorithms.dag.consume": {
  "data": {
   "shadows": "networkx.utils.consume"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.dag_longest_path": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": [
    "max",
    "networkx.topological_sort",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.dag_longest_path_length": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "networkx.dag_longest_path",
    "networkx.utils.not_implemented_for",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.dag_to_branching": {
  "data": {
   "lineno": 811,
   "symbols_in_volume": [
    "networkx.HasACycle",
    "networkx.algorithms.dag.has_cycle",
    "networkx.algorithms.dag.root_to_leaf_paths",
    "networkx.generators.trees.NIL",
    "networkx.prefix_tree",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.descendants": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.descendants_at_distance": {
  "data": {
   "shadows": "networkx.algorithms.traversal.breadth_first_search.descendants_at_distance"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.gcd": {
  "data": {
   "shadows": "math.gcd"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.has_cycle": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.utils.consume",
    "topological_sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.is_aperiodic": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "len",
    "math.gcd",
    "networkx.NetworkXError",
    "networkx.is_aperiodic",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.is_directed_acyclic_graph": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.algorithms.dag.has_cycle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "KeyError",
    "RuntimeError",
    "create_tuple",
    "enumerate",
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.dag.heapq"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort.create_tuple": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "key"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.lexicographical_topological_sort.key": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "networkx.algorithms.dag.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.root_to_leaf_paths": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "functools.partial",
    "itertools.product",
    "itertools.starmap",
    "networkx.algorithms.dag.chaini",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.starmap": {
  "data": {
   "shadows": "itertools.starmap"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.topological_sort": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "KeyError",
    "RuntimeError",
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_closure": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "networkx.dfs_preorder_nodes",
    "networkx.edge_dfs",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_closure_dag": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.dag.topological_sort",
    "networkx.algorithms.traversal.breadth_first_search.descendants_at_distance",
    "networkx.utils.not_implemented_for",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_reduction": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "dict",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.descendants",
    "networkx.algorithms.dag.is_directed_acyclic_graph",
    "networkx.dfs_edges",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.distance_measures.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_measures._count_lu_permutations": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures._laplacian_submatrix": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXError",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.barycenter": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "len",
    "networkx.NetworkXNoPath",
    "networkx.shortest_path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.center": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.distance_measures.eccentricity",
    "networkx.algorithms.distance_measures.extrema_bounding",
    "networkx.algorithms.distance_measures.radius"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.diameter": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.distance_measures.eccentricity",
    "networkx.algorithms.distance_measures.extrema_bounding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.eccentricity": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "TypeError",
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.extrema_bounding": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "len",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.single_source_shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_measures.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_measures.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_measures.periphery": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.distance_measures.diameter",
    "networkx.algorithms.distance_measures.eccentricity",
    "networkx.algorithms.distance_measures.extrema_bounding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.radius": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.distance_measures.eccentricity",
    "networkx.algorithms.distance_measures.extrema_bounding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.resistance_distance": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.distance_measures._count_lu_permutations",
    "networkx.algorithms.distance_measures._laplacian_submatrix",
    "networkx.is_connected",
    "networkx.laplacian_matrix",
    "networkx.utils.not_implemented_for",
    "numpy.absolute",
    "numpy.append",
    "numpy.divide",
    "numpy.product",
    "numpy.sign",
    "numpy.sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.distance_regular.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_regular.global_parameters": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.intersection_array": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "iter",
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.all_pairs_shortest_path_length",
    "networkx.utils.not_implemented_for",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.is_distance_regular": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "intersection_array",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.is_strongly_regular": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "diameter",
    "networkx.algorithms.distance_regular.is_distance_regular",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.dominance.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.dominance.dominance_frontiers": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "len",
    "networkx.immediate_dominators",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "enumerate",
    "functools.reduce",
    "list",
    "networkx.NetworkXError",
    "networkx.dfs_postorder_nodes",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators.intersect": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "networkx.algorithms.dominating": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.dominating.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.dominating.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.dominating.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.dominating.dominating_set": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominating.is_dominating_set": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominating.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.edge_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.edge_disjoint_paths": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_disjoint_paths"
  },
  "type": "import"
 },
 "networkx.algorithms.efficiency_measures": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.efficiency_measures.NetworkXNoPath": {
  "data": {
   "shadows": "networkx.exception.NetworkXNoPath"
  },
  "type": "import"
 },
 "networkx.algorithms.efficiency_measures.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.efficiency_measures.efficiency": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.exception.NetworkXNoPath",
    "networkx.shortest_path_length",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures.global_efficiency": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "len",
    "networkx.all_pairs_shortest_path_length",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures.local_efficiency": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.efficiency_measures.global_efficiency",
    "not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.efficiency_measures.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.euler": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.euler.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.euler._find_path_start": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "arbitrary_element",
    "has_eulerian_path",
    "networkx.algorithms.euler.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler._multigraph_eulerian_circuit": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "arbitrary_element",
    "degree",
    "edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler._simplegraph_eulerian_circuit": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "arbitrary_element",
    "degree",
    "edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.euler.eulerian_circuit": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "arbitrary_element",
    "networkx.NetworkXError",
    "networkx.algorithms.euler._multigraph_eulerian_circuit",
    "networkx.algorithms.euler._simplegraph_eulerian_circuit",
    "networkx.algorithms.euler.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.eulerian_path": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.euler._find_path_start",
    "networkx.algorithms.euler._multigraph_eulerian_circuit",
    "networkx.algorithms.euler._simplegraph_eulerian_circuit",
    "networkx.algorithms.euler.has_eulerian_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.eulerize": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.is_connected",
    "networkx.max_weight_matching",
    "networkx.shortest_path",
    "networkx.utils.pairwise",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.has_eulerian_path": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "ins",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "outs",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.is_eulerian": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "all",
    "networkx.is_connected",
    "networkx.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.is_semieulerian": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "has_eulerian_path",
    "networkx.algorithms.euler.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.fast_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.fast_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.faster_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.faster_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.flow": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.boykovkolmogorov": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.boykovkolmogorov.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "boykov_kolmogorov_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "adopt",
    "augment",
    "collections.deque",
    "grow",
    "networkx.NetworkXError",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.utils.build_residual_network",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl._has_valid_root": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "enumerate",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl._is_closer": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.adopt": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "_has_valid_root",
    "operator.itemgetter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.augment": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "iter",
    "min",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl.grow": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "_is_closer"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.boykovkolmogorov.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.utils.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.boykovkolmogorov.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.boykovkolmogorov.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.boykovkolmogorov.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.capacityscaling": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.capacityscaling.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.capacityscaling._build_flow_dict": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._build_residual_network": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "abs",
    "float",
    "max",
    "min",
    "networkx.MultiDiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.capacityscaling._detect_unboundedness",
    "networkx.selfloop_edges",
    "not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._detect_unboundedness": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "generate_unique_node",
    "min",
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.negative_edge_cycle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling.capacity_scaling": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "S_add",
    "S_remove",
    "T_add",
    "T_remove",
    "any",
    "arbitrary_element",
    "float",
    "h_insert",
    "heap",
    "int",
    "itertools.chain",
    "math.log",
    "max",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.capacityscaling._build_flow_dict",
    "networkx.algorithms.flow.capacityscaling._build_residual_network",
    "networkx.selfloop_edges",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.capacityscaling.log": {
  "data": {
   "shadows": "math.log"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.capacityscaling.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.dinitz_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.dinitz_alg.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.dinitz_alg.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.utils.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.dinitz_alg.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dinitz_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "breath_first_search",
    "depth_first_search",
    "networkx.NetworkXError",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.utils.build_residual_network",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl.breath_first_search": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "collections.deque"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.dinitz_impl.depth_first_search": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "min",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.dinitz_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.dinitz_alg.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.edmondskarp": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.edmondskarp.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.edmondskarp.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.utils.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmondskarp.edmonds_karp_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "augment",
    "bidirectional_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.augment": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "iter",
    "min",
    "networkx.NetworkXUnbounded",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.bidirectional_bfs": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_impl": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.edmondskarp.edmonds_karp_core",
    "networkx.algorithms.flow.utils.build_residual_network",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.gomory_hu": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.gomory_hu.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.gomory_hu.default_flow_func": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.gomory_hu.gomory_hu_tree": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "build_residual_network",
    "iter",
    "len",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.gomory_hu.default_flow_func",
    "networkx.minimum_cut",
    "networkx.utils.not_implemented_for",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.gomory_hu.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.gomory_hu.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.maxflow": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.maxflow.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.maxflow.default_flow_func": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.maxflow.flow_funcs": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "build_flow_dict",
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow_value": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "callable",
    "dict",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func",
    "networkx.algorithms.flow.maxflow.flow_funcs",
    "networkx.shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut_value": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func",
    "networkx.algorithms.flow.maxflow.flow_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.mincost": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.mincost.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.mincost.cost_of_flow": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.max_flow_min_cost": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.mincost.min_cost_flow",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow_cost": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.networksimplex.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.networksimplex.ceil": {
  "data": {
   "shadows": "math.ceil"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "abs",
    "add_edge",
    "add_entry",
    "any",
    "augment_flow",
    "enumerate",
    "find_cycle",
    "find_entering_edges",
    "find_leaving_edge",
    "float",
    "itertools.chain",
    "itertools.repeat",
    "len",
    "list",
    "make_root",
    "max",
    "networkx.NetworkXError",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.selfloop_edges",
    "networkx.utils.not_implemented_for",
    "next",
    "range",
    "remove_edge",
    "residual_capacity",
    "sum",
    "update_potentials",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_edge": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_entry": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.augment_flow": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_apex": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_cycle": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "find_apex",
    "trace_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_entering_edges": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "int",
    "itertools.chain",
    "math.ceil",
    "math.sqrt",
    "min",
    "range",
    "reduced_cost"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_leaving_edge": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "min",
    "residual_capacity",
    "reversed",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.make_root": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "itertools.islice",
    "next",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.reduced_cost": {
  "data": {
   "lineno": 294
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.remove_edge": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.residual_capacity": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_path": {
  "data": {
   "lineno": 365
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_subtree": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.update_potentials": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "trace_subtree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.preflowpush.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.preflowpush.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.algorithms.flow.preflowpush.preflow_push_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "CurrentEdge",
    "GlobalRelabelThreshold",
    "Level",
    "arbitrary_element",
    "build_residual_network",
    "detect_unboundedness",
    "discharge",
    "gap_heuristic",
    "global_relabel",
    "len",
    "max",
    "networkx.NetworkXError",
    "push",
    "range",
    "reverse_bfs",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.activate": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.discharge": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "StopIteration",
    "activate",
    "min",
    "push",
    "relabel"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.gap_heuristic": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "itertools.islice"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.global_relabel": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "max",
    "reverse_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.push": {
  "data": {
   "lineno": 87
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.relabel": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.reverse_bfs": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "collections.deque"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "CurrentEdge",
    "StopIteration",
    "augment",
    "build_residual_network",
    "collections.deque",
    "edmonds_karp_core",
    "float",
    "int",
    "len",
    "min",
    "networkx.NetworkXError",
    "relabel",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.augment": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "iter",
    "min",
    "networkx.NetworkXUnbounded",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.relabel": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.compute_cutset": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "list",
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.minimum_edge_weight": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "min",
    "networkx.shortest_path",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_davis_southern_women_graph": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs",
    "networkx.davis_southern_women_graph",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.minimum_cut_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_default_flow_function_karate_club_graph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.karate_club_graph",
    "networkx.minimum_cut_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_directed_raises": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.flow.tests.test_gomory_hu.pytest",
    "networkx.gomory_hu_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_empty_raises": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_gomory_hu.pytest",
    "networkx.empty_graph",
    "networkx.gomory_hu_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_florentine_families_graph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs",
    "networkx.florentine_families_graph",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.minimum_cut_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.karate_club_graph",
    "networkx.minimum_cut_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph_cutset": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "len",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.karate_club_graph",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_les_miserables_graph_cutset": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs",
    "networkx.algorithms.flow.tests.test_gomory_hu.pytest",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.les_miserables_graph",
    "networkx.minimum_cut_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_wikipedia_example": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs",
    "networkx.gomory_hu_tree",
    "networkx.is_tree",
    "networkx.minimum_cut_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.boykov_kolmogorov": {
  "data": {
   "shadows": "networkx.algorithms.flow.boykov_kolmogorov"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.dinitz": {
  "data": {
   "shadows": "networkx.algorithms.flow.dinitz"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.flow_funcs": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_gomory_hu.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.flow_value_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "networkx.maximum_flow",
    "networkx.maximum_flow_value",
    "networkx.minimum_cut",
    "networkx.minimum_cut_value",
    "sum"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff": {
  "data": {
   "lineno": 524
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_complete_graph_cutoff": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "flow_func",
    "flow_func.__name__",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.complete_graph",
    "networkx.maximum_flow_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_cutoff": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface": {
  "data": {
   "lineno": 385
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.setup": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_not_callable": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_parameters": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "interface_func.__name__",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs_default_flow_func": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "interface_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest",
    "networkx.minimum_cut",
    "networkx.minimum_cut_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_reusing_residual": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "interface_func.__name__",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon": {
  "data": {
   "lineno": 87
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph1": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph2": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph3": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph5": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_edges": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_path": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "flow_func",
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_disconnected": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph1": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph2": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph_infcap_edges": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_multigraphs_raise": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "flow_func",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_optional_capacity": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_coincide": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_not_in_graph": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_wikipedia_dinitz_example": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.all_funcs": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.boykov_kolmogorov": {
  "data": {
   "shadows": "networkx.algorithms.flow.boykov_kolmogorov"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.build_flow_dict": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_flow_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "flow_func",
    "networkx.algorithms.flow.build_flow_dict",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.validate_cuts",
    "networkx.algorithms.flow.tests.test_maxflow.validate_flows",
    "networkx.minimum_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compute_cutset": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.dinitz": {
  "data": {
   "shadows": "networkx.algorithms.flow.dinitz"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.flow_funcs": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.flow_value_funcs": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.interface_funcs": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_global_relabel_freq": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.tests.test_maxflow.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_makes_enough_space": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.flow.preflow_push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_shortest_augmenting_path_two_phase": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_cuts": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.flow.tests.test_maxflow.compute_cutset",
    "networkx.is_connected",
    "networkx.is_strongly_connected",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_flows": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.boykov_kolmogorov",
    "networkx.algorithms.flow.dinitz",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph": {
  "data": {
   "lineno": 75
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.complete_graph",
    "networkx.maximum_flow_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.pytest",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid",
    "networkx.maximum_flow_value",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.boykov_kolmogorov": {
  "data": {
   "shadows": "networkx.algorithms.flow.boykov_kolmogorov"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.build_flow_dict": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_flow_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.dinitz": {
  "data": {
   "shadows": "networkx.algorithms.flow.dinitz"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.os",
    "networkx.read_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.flow.build_flow_dict",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_bone_shaped": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_deadend": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.min_cost_flow",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digon": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph1": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph2": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph3": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_exceptions": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "float",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_finite_capacity_neg_digon": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow_cost"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_infinite_capacity_neg_digon": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_large": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "networkx.algorithms.flow.tests.test_mincost.os",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.network_simplex",
    "networkx.read_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_max_flow_min_cost": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_multidigraph": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negative_selfloops": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negcycle_infcap": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_no_flow_satisfying_demands": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_simple_digraph": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_sum_demands_not_zero": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.tests.test_mincost.pytest",
    "networkx.capacity_scaling",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_transshipment": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_zero_capacity_edges": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_mincost.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_mincost.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.utils.CurrentEdge": {
  "data": {
   "lineno": 18
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.__init__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge._rewind": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.get": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.move_to_next": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold": {
  "data": {
   "lineno": 56
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.add_work": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.clear_work": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.is_reached": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.Level": {
  "data": {
   "lineno": 45
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.Level.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.utils.build_flow_dict": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.build_residual_network": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "float",
    "min",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.utils.detect_unboundedness": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "collections.deque",
    "networkx.NetworkXUnbounded"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.gomory_hu_tree": {
  "data": {
   "shadows": "networkx.algorithms.flow.gomory_hu_tree"
  },
  "type": "import"
 },
 "networkx.algorithms.graph_hashing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.graph_hashing.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.graph_hashing.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.graph_hashing.blake2b": {
  "data": {
   "shadows": "hashlib.blake2b"
  },
  "type": "import"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "collections.Counter",
    "dict",
    "hashlib.blake2b",
    "range",
    "sorted",
    "str",
    "tuple",
    "weisfeiler_lehman_step"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash.neighborhood_aggregate": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash.weisfeiler_lehman_step": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "neighborhood_aggregate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.graphical.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.graphical._basic_graphical_tests": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "len",
    "max",
    "min",
    "networkx.NetworkXUnfeasible",
    "networkx.utils.make_list_of_ints"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.algorithms.graphical.is_digraphical": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.algorithms.graphical.heapq",
    "networkx.utils.make_list_of_ints",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_graphical": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "is_valid_degree_sequence_erdos_gallai",
    "is_valid_degree_sequence_havel_hakimi",
    "list",
    "networkx.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_multigraphical": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "max",
    "networkx.NetworkXError",
    "networkx.utils.make_list_of_ints"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_pseudographical": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "min",
    "networkx.NetworkXError",
    "networkx.utils.make_list_of_ints",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.graphical._basic_graphical_tests",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.graphical._basic_graphical_tests",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.hierarchy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.hierarchy.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.hierarchy.flow_hierarchy": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "networkx.strongly_connected_components",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hierarchy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.hybrid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.hybrid.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.hybrid.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "networkx.algorithms.hybrid.is_kl_connected": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.algorithms.hybrid.copy",
    "networkx.shortest_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hybrid.kl_connected_subgraph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.hybrid.copy",
    "networkx.shortest_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hybrid.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.is_bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.is_bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.is_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.is_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.is_k_edge_connected": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.is_k_edge_connected"
  },
  "type": "import"
 },
 "networkx.algorithms.isolate": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isolate.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.isolate.is_isolate": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "networkx.algorithms.isolate.isolates": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "networkx.algorithms.isolate.number_of_isolates": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.algorithms.isolate.isolates",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.ismags": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.ismags.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS": {
  "data": {
   "lineno": 227
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.__init__": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._couple_nodes": {
  "data": {
   "lineno": 1014,
   "symbols_in_volume": [
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_compatibility": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.isomorphism.ismags.itertools",
    "next",
    "property",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_match_maker": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edge_match_maker.comparer": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "cmp",
    "functools.wraps"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._edges_of_same_color": {
  "data": {
   "lineno": 787
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_neighbor_color_count": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "collections.Counter",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_node_edge_color": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "int",
    "set",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_nodecolor_candidates": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "frozenset",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._find_permutations": {
  "data": {
   "lineno": 971,
   "symbols_in_volume": [
    "IndexError",
    "frozenset",
    "iter",
    "len",
    "next",
    "set",
    "staticmethod",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_colors": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.partition_to_color",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_partitions": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.make_partitions",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._ge_partitions.edgematch": {
  "data": {
   "lineno": 369
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._get_lookahead_candidates": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "KeyError",
    "all",
    "collections.Counter",
    "collections.defaultdict",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._get_permutations_by_length": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "collections.defaultdict",
    "len",
    "list",
    "networkx.algorithms.isomorphism.ismags.itertools",
    "sorted",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_colors": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.partition_to_color",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_partitions": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.make_partitions",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._gn_partitions.nodematch": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._largest_common_subgraph": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": [
    "StopIteration",
    "frozenset",
    "iter",
    "len",
    "min",
    "next",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._make_constraints": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._map_nodes": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": [
    "frozenset",
    "len",
    "min",
    "networkx.algorithms.isomorphism.ismags.intersect",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_compatibility": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.isomorphism.ismags.itertools",
    "next",
    "property",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_match_maker": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._node_match_maker.comparer": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "cmp",
    "functools.wraps"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._process_ordered_pair_partitions": {
  "data": {
   "lineno": 1055,
   "symbols_in_volume": [
    "all",
    "any",
    "enumerate",
    "len",
    "min",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._refine_node_partitions": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": [
    "all",
    "classmethod",
    "len",
    "list",
    "networkx.algorithms.isomorphism.ismags.are_all_equal",
    "networkx.algorithms.isomorphism.ismags.make_partitions",
    "networkx.algorithms.isomorphism.ismags.partition_to_color",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._refine_node_partitions.equal_color": {
  "data": {
   "lineno": 744
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._remove_node": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "frozenset",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_colors": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.partition_to_color",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_partitions": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.make_partitions",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sge_partitions.edgematch": {
  "data": {
   "lineno": 349
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_colors": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.partition_to_color",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_partitions": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.ismags.make_partitions",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_partitions.nodematch": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS._update_orbits": {
  "data": {
   "lineno": 991,
   "symbols_in_volume": [
    "enumerate",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.analyze_symmetry": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "hash",
    "len",
    "list",
    "map",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.find_isomorphisms": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "any",
    "frozenset",
    "len",
    "min",
    "networkx.algorithms.isomorphism.ismags.intersect"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.is_isomorphic": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.isomorphisms_iter": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.largest_common_subgraph": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_is_isomorphic": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_isomorphisms_iter": {
  "data": {
   "lineno": 653
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.__all__": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.ismags.are_all_equal": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "AttributeError",
    "NotImplementedError",
    "all",
    "iter",
    "len",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.ismags.intersect": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "functools.reduce",
    "list",
    "set",
    "set.intersection",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.ismags.make_partitions": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "iter",
    "next",
    "test"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.partition_to_color": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "dict",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.ismags.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.ismags.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorph": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.could_be_isomorphic",
    "networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic",
    "networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorph.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.could_be_isomorphic": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.number_of_cliques",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.fast_graph_could_be_isomorphic": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.faster_graph_could_be_isomorphic": {
  "data": {
   "lineno": 124
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.is_isomorphic": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "GM",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState": {
  "data": {
   "lineno": 934
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__": {
  "data": {
   "lineno": 944,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore": {
  "data": {
   "lineno": 1047,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "DiGMState"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility": {
  "data": {
   "lineno": 622
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState": {
  "data": {
   "lineno": 846
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__": {
  "data": {
   "lineno": 855,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.restore": {
  "data": {
   "lineno": 918,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher": {
  "data": {
   "lineno": 147
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "len",
    "networkx.algorithms.isomorphism.isomorphvf2.sys",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "GMState"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "StopIteration",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter": {
  "data": {
   "lineno": 289
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.sys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 321
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_monomorphic": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter": {
  "data": {
   "lineno": 379
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_monomorphisms_iter": {
  "data": {
   "lineno": 386
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.__all__": {
  "data": {
   "lineno": 144
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.matchhelpers": {
  "data": {
   "symbols_in_volume": [
    "NotImplementedError",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_doc",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.copyfunc",
    "networkx.algorithms.isomorphism.matchhelpers.generic_doc",
    "networkx.algorithms.isomorphism.matchhelpers.generic_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.generic_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_doc",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.tmpdoc"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.isomorphism.matchhelpers.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.allclose": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "abs",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_doc": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match.match": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match.match": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.close": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "abs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.copyfunc": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.types"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_doc": {
  "data": {
   "lineno": 250
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_edge_match": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.generic_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "op",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match.match": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "all",
    "itertools.permutations",
    "map",
    "op",
    "tuple",
    "z",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "op",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match.match": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "operator"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_doc": {
  "data": {
   "lineno": 148
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match.match": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.allclose",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match.match": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.allclose"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.matchhelpers.tmpdoc": {
  "data": {
   "lineno": 246
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher": {
  "data": {
   "lineno": 143
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.__init__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_pred_dates": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "isinstance",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_succ_dates": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "isinstance",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.one_hop": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.preds": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 286
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.succs": {
  "data": {
   "lineno": 246
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_one": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_two": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_pred": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_succ": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher": {
  "data": {
   "lineno": 74
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.__init__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.one_hop": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "isinstance",
    "max",
    "min",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.two_hop": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.__all__": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.temporalisomorphvf2.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph": {
  "data": {
   "lineno": 231
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_mcis": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.categorical_node_match",
    "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_symmetry_mcis": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.categorical_node_match",
    "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict",
    "range"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_directed_self_isomorphism": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.categorical_node_match",
    "networkx.algorithms.isomorphism.tests.test_ismags.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_edgecase_self_isomorphism": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_self_isomorphism": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.categorical_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism": {
  "data": {
   "lineno": 111
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.algorithms.isomorphism.ISMAGS",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism2": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_edges": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_nodes": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.algorithms.isomorphism.ISMAGS",
    "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample": {
  "data": {
   "lineno": 187
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample.test_graph": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.ISMAGS"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "frozenset",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_ismags.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.fast_could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.faster_could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas": {
  "data": {
   "lineno": 142
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setup_class": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "classmethod",
    "networkx.generators.atlas.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB": {
  "data": {
   "lineno": 86
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.struct",
    "open",
    "range",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.GraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph_mono": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.GraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.atlas": {
  "data": {
   "shadows": "networkx.generators.atlas"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.cycle_graph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_edge_match": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.categorical_edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_iter1": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_noncomparable_nodes": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.path_graph",
    "object"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop_mono": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "networkx.selfloop_edges",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.setup": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.test_generic_multiedge_match": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "flow_match",
    "full_match",
    "id_match",
    "min_flow_match",
    "networkx.algorithms.isomorphism.generic_multiedge_match",
    "operator.eq"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.eq": {
  "data": {
   "shadows": "operator.eq"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_match_helpers.test_categorical_node_match": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.isomorphism.categorical_node_match",
    "nm"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher": {
  "data": {
   "lineno": 149
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g1_topology": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.provide_g1_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g2_path_3edges": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_same_dates_returns_true": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_0"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_one_embedding": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_two_embeddings": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_zero_same_dates_returns_true": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher": {
  "data": {
   "lineno": 66
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g1_topology": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.provide_g1_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g2_path_3edges": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_timeRespecting_returnsTrue": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_notTimeRespecting_returnsFalse": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_sequence_time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_0"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_four_embedding": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_ten_embeddings": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "datetime.timedelta",
    "len",
    "list",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_datetime_timeRespecting_returnsTrue": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_datetime"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_timeRespecting_returnsTrue": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "datetime.timedelta",
    "networkx.algorithms.isomorphism.TimeRespectingGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.date": {
  "data": {
   "shadows": "datetime.date"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.provide_g1_edgelist": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_datetime": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "datetime.datetime"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "datetime.date"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_sequence_time": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "datetime.date",
    "datetime.timedelta"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_0": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "datetime.date"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_1": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "datetime.date"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_2": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "datetime.date"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.classes.function.is_directed",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.is_directed": {
  "data": {
   "shadows": "networkx.classes.function.is_directed"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.positive_single_tree": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random_swap",
    "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism",
    "networkx.is_tree",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random_swap": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.rooted_tree_isomorphism": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_hardcoded": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism",
    "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism",
    "print",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_negative": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.time",
    "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism",
    "networkx.nonisomorphic_trees",
    "print",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_positive": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.positive_single_tree",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.time",
    "networkx.nonisomorphic_trees",
    "print",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism",
    "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial_2": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_tree_isomorphism.tree_isomorphism": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setup_method": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setup_method": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.algorithms.isomorphism.MultiDiGraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph": {
  "data": {
   "lineno": 125
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.categorical_edge_match",
    "networkx.algorithms.isomorphism.categorical_multiedge_match",
    "networkx.algorithms.isomorphism.generic_edge_match",
    "networkx.algorithms.isomorphism.generic_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.close",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.algorithms.isomorphism.numerical_multiedge_match",
    "operator.eq"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setup_method": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.MultiGraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph": {
  "data": {
   "lineno": 75
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.categorical_node_match",
    "networkx.algorithms.isomorphism.numerical_edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setup_method": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.eq": {
  "data": {
   "shadows": "operator.eq"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.algorithms.isomorphism.numerical_multiedge_match",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.assign_levels": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.generate_isomorphism": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "enumerate",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.group_by_levels": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.root_trees": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "enumerate",
    "networkx.DiGraph",
    "networkx.bfs_edges",
    "networkx.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "enumerate",
    "list",
    "max",
    "networkx.algorithms.isomorphism.tree_isomorphism.assign_levels",
    "networkx.algorithms.isomorphism.tree_isomorphism.generate_isomorphism",
    "networkx.algorithms.isomorphism.tree_isomorphism.group_by_levels",
    "networkx.algorithms.isomorphism.tree_isomorphism.root_trees",
    "networkx.is_tree",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism",
    "networkx.center",
    "networkx.is_tree",
    "networkx.number_of_nodes",
    "networkx.utils.decorators.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher": {
  "data": {
   "lineno": 123
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.__all__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.vf2": {
  "data": {
   "shadows": "isomorphvf2"
  },
  "type": "import"
 },
 "networkx.algorithms.k_components": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_components"
  },
  "type": "import"
 },
 "networkx.algorithms.k_edge_augmentation": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_edge_augmentation"
  },
  "type": "import"
 },
 "networkx.algorithms.k_edge_components": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_edge_components"
  },
  "type": "import"
 },
 "networkx.algorithms.k_edge_subgraphs": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_edge_subgraphs"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.hits_alg.authority_matrix": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "Exception",
    "abs",
    "dict.fromkeys",
    "len",
    "max",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.PowerIterationFailedConvergence",
    "range",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_numpy": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "float",
    "len",
    "list",
    "map",
    "networkx.authority_matrix",
    "networkx.hub_matrix",
    "numpy.array",
    "numpy.linalg.eig",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_scipy": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "float",
    "len",
    "list",
    "map",
    "networkx.PowerIterationFailedConvergence",
    "networkx.to_scipy_sparse_matrix",
    "numpy.absolute",
    "numpy.asarray",
    "numpy.ones",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hub_matrix": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.google_matrix": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "float",
    "len",
    "list",
    "networkx.to_numpy_matrix",
    "numpy.array",
    "numpy.repeat",
    "numpy.where"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "abs",
    "dict.fromkeys",
    "float",
    "len",
    "networkx.PowerIterationFailedConvergence",
    "networkx.stochastic_graph",
    "networkx.utils.not_implemented_for",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_numpy": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "map",
    "networkx.algorithms.link_analysis.pagerank_alg.google_matrix",
    "numpy.argmax",
    "numpy.array",
    "numpy.linalg.eig",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_scipy": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "list",
    "map",
    "networkx.PowerIterationFailedConvergence",
    "networkx.to_scipy_sparse_matrix",
    "numpy.absolute",
    "numpy.array",
    "numpy.repeat",
    "numpy.where",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_hits": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.algorithms.link_analysis.tests.test_hits.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty_scipy": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.algorithms.link_analysis.tests.test_hits.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_not_convergent": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.algorithms.link_analysis.tests.test_hits.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_nstart": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.algorithms.link_analysis.tests.test_hits.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_scipy": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "networkx.algorithms.link_analysis.tests.test_hits.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setup_class": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "classmethod",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_matrix": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_numpy_pagerank": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_pagerank": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_empty": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.numpy",
    "networkx.testing.almost_equal",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_incomplete_personalization": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_one_nonzero_personalization_value": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank_max_iter": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_zero_personalization_vector": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_empty_scipy": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank_max_iter": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.numpy": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.scipy": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.link_prediction": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_prediction.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.link_prediction._apply_prediction": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "func",
    "networkx.non_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction._community": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXAlgorithmError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.adamic_adar_index": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.adamic_adar_index.predict": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "math.log",
    "networkx.common_neighbors",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.cn_soundarajan_hopcroft": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.cn_soundarajan_hopcroft.predict": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "_community",
    "len",
    "list",
    "networkx.common_neighbors",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.common_neighbor_centrality": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.shortest_path",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.common_neighbor_centrality.predict": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.common_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.jaccard_coefficient": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.jaccard_coefficient.predict": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.common_neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.log": {
  "data": {
   "shadows": "math.log"
  },
  "type": "import"
 },
 "networkx.algorithms.link_prediction.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.link_prediction.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_prediction.preferential_attachment": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.preferential_attachment.predict": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft.predict": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "_community",
    "networkx.common_neighbors",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.resource_allocation_index": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.resource_allocation_index.predict": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.common_neighbors",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.within_inter_cluster": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.link_prediction._apply_prediction",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_prediction.within_inter_cluster.predict": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "_community",
    "len",
    "networkx.common_neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.lowest_common_ancestors.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.Set": {
  "data": {
   "shadows": "collections.abc.Set"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.UnionFind": {
  "data": {
   "shadows": "networkx.utils.UnionFind"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "_compute_dag_lca_from_tree_values",
    "collections.abc.Mapping",
    "collections.abc.Set",
    "collections.defaultdict",
    "dict",
    "int",
    "isinstance",
    "itertools.chain.from_iterable",
    "itertools.count",
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.NodeNotFound",
    "networkx.algorithms.lowest_common_ancestors.tree_all_pairs_lowest_common_ancestor",
    "networkx.bfs_edges",
    "networkx.dag.ancestors",
    "networkx.depth_first_search.dfs_preorder_nodes",
    "networkx.dfs_tree",
    "networkx.is_directed_acyclic_graph",
    "networkx.utils.generate_unique_node",
    "networkx.utils.not_implemented_for",
    "next",
    "set",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor._compute_dag_lca_from_tree_values": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "get_next_in_merged_lists"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor._compute_dag_lca_from_tree_values.get_next_in_merged_lists": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.generate_unique_node": {
  "data": {
   "shadows": "networkx.utils.generate_unique_node"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.lowest_common_ancestor": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "all_pairs_lowest_common_ancestor",
    "len",
    "list",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.lowest_common_ancestors.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.lowest_common_ancestors.tree_all_pairs_lowest_common_ancestor": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "bool",
    "collections.abc.Mapping",
    "collections.abc.Set",
    "collections.defaultdict",
    "isinstance",
    "len",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.NodeNotFound",
    "networkx.dfs_postorder_nodes",
    "networkx.utils.UnionFind",
    "networkx.utils.arbitrary_element",
    "networkx.utils.not_implemented_for",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.matching.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.matching.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.matching.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.matching.is_matching": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "all",
    "dict",
    "isinstance",
    "itertools.combinations",
    "len",
    "networkx.algorithms.matching.matching_dict_to_set",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.is_maximal_matching": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "all",
    "dict",
    "frozenset",
    "isinstance",
    "map",
    "networkx.algorithms.matching.is_matching",
    "networkx.algorithms.matching.matching_dict_to_set",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.is_perfect_matching": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "all",
    "collections.Counter",
    "dict",
    "isinstance",
    "networkx.algorithms.matching.is_matching",
    "networkx.algorithms.matching.matching_dict_to_set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.matching_dict_to_set": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "frozenset",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "addBlossom",
    "assignLabel",
    "augmentMatching",
    "dict",
    "expandBlossom",
    "itertools.repeat",
    "list",
    "max",
    "min",
    "networkx.algorithms.matching.matching_dict_to_set",
    "scanBlossom",
    "set",
    "slack",
    "str",
    "type",
    "verifyOptimum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom": {
  "data": {
   "lineno": 249
  },
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom.leaves": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.NoNode": {
  "data": {
   "lineno": 244
  },
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.addBlossom": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "Blossom",
    "isinstance",
    "list",
    "slack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.assignLabel": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "assignLabel",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentBlossom": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": [
    "Blossom",
    "augmentBlossom",
    "isinstance",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentMatching": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "Blossom",
    "augmentBlossom",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.expandBlossom": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "Blossom",
    "assignLabel",
    "expandBlossom",
    "isinstance",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.scanBlossom": {
  "data": {
   "lineno": 388
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.slack": {
  "data": {
   "lineno": 358
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.verifyOptimum": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "len",
    "max",
    "min",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.maximal_matching": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "networkx.algorithms.max_flow_min_cost": {
  "data": {
   "shadows": "networkx.algorithms.flow.max_flow_min_cost"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_branching": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings.maximum_branching"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.maximum_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_flow_value": {
  "data": {
   "shadows": "networkx.algorithms.flow.maximum_flow_value"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_spanning_arborescence": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings.maximum_spanning_arborescence"
  },
  "type": "import"
 },
 "networkx.algorithms.min_cost_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.min_cost_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.min_cost_flow_cost": {
  "data": {
   "shadows": "networkx.algorithms.flow.min_cost_flow_cost"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_branching": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings.minimum_branching"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_cut": {
  "data": {
   "shadows": "networkx.algorithms.flow.minimum_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_cut_value": {
  "data": {
   "shadows": "networkx.algorithms.flow.minimum_cut_value"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_edge_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_edge_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_node_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_node_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_spanning_arborescence": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
  },
  "type": "import"
 },
 "networkx.algorithms.minors": {
  "data": {
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.algorithms.minors.contracted_nodes"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.minors.NetworkXException": {
  "data": {
   "shadows": "networkx.exception.NetworkXException"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.minors._quotient_graph": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "any",
    "edge_data",
    "edge_relation",
    "enumerate",
    "frozenset",
    "itertools.combinations",
    "itertools.permutations",
    "itertools.product",
    "networkx.algorithms.minors.chaini",
    "networkx.empty_graph",
    "networkx.exception.NetworkXException",
    "networkx.relabel_nodes",
    "node_data",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.edge_data": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.edge_relation": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "any",
    "itertools.product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors._quotient_graph.node_data": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.density"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.chaini": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.minors.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.contracted_edge": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.minors.contracted_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.contracted_nodes": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "itertools.chain",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.density": {
  "data": {
   "shadows": "networkx.density"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.equivalence_classes": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "frozenset",
    "networkx.utils.arbitrary_element",
    "relation"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.identified_nodes": {
  "data": {
   "lineno": 446
  },
  "type": "constant"
 },
 "networkx.algorithms.minors.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.quotient_graph": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "_quotient_graph",
    "callable",
    "len",
    "networkx.algorithms.minors.equivalence_classes",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.mis.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.mis.maximal_independent_set": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXUnfeasible",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "set",
    "set.intersection",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mis.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.mis.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.mis.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.moral": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.moral.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.moral.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.moral.moral_graph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.moral.itertools",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.moral.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.network_simplex": {
  "data": {
   "shadows": "networkx.algorithms.flow.network_simplex"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.assortativity": {
  "data": {
   "shadows": "networkx.algorithms.assortativity"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.chordal": {
  "data": {
   "shadows": "networkx.algorithms.chordal"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.clique": {
  "data": {
   "shadows": "networkx.algorithms.clique"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.cluster": {
  "data": {
   "shadows": "networkx.algorithms.cluster"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.coloring": {
  "data": {
   "shadows": "networkx.algorithms.coloring"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.community": {
  "data": {
   "shadows": "networkx.algorithms.community"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.components": {
  "data": {
   "shadows": "networkx.algorithms.components"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.isomorphism": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.link_analysis": {
  "data": {
   "shadows": "networkx.algorithms.link_analysis"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.lowest_common_ancestors": {
  "data": {
   "shadows": "networkx.algorithms.lowest_common_ancestors"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.node_classification": {
  "data": {
   "shadows": "networkx.algorithms.node_classification"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.operators": {
  "data": {
   "shadows": "networkx.algorithms.operators"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.shortest_paths": {
  "data": {
   "shadows": "networkx.algorithms.shortest_paths"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.tournament": {
  "data": {
   "shadows": "networkx.algorithms.tournament"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.traversal": {
  "data": {
   "shadows": "networkx.algorithms.traversal"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.tree": {
  "data": {
   "shadows": "networkx.algorithms.tree"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.node_classification.hmn": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.node_classification.hmn.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.hmn._get_label_info": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._get_label_info"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn._init_label_matrix": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._init_label_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn._predict": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._predict"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn._propagate": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._propagate"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ImportError",
    "_build_base_matrix",
    "_build_propagation_matrix",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.utils._get_label_info",
    "networkx.algorithms.node_classification.utils._init_label_matrix",
    "networkx.algorithms.node_classification.utils._predict",
    "networkx.algorithms.node_classification.utils._propagate",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function._build_base_matrix": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.hmn.harmonic_function._build_propagation_matrix": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "scipy.sparse.diags"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.hmn.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.hmn.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.node_classification.lgc.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.lgc._get_label_info": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._get_label_info"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc._init_label_matrix": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._init_label_matrix"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc._predict": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._predict"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc._propagate": {
  "data": {
   "shadows": "networkx.algorithms.node_classification.utils._propagate"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ImportError",
    "_build_base_matrix",
    "_build_propagation_matrix",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.utils._get_label_info",
    "networkx.algorithms.node_classification.utils._init_label_matrix",
    "networkx.algorithms.node_classification.utils._predict",
    "networkx.algorithms.node_classification.utils._propagate",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency._build_base_matrix": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc.local_and_global_consistency._build_propagation_matrix": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.sqrt",
    "scipy.sparse.diags"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.lgc.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.lgc.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_digraph": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_labeled_nodes_are_not_changed": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.karate_club_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_edges": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_labels": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_no_nodes": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_nodes_all_labeled": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.karate_club_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_one_labeled_node": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.TestHarmonicFunction.test_path_graph": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.node_classification": {
  "data": {
   "shadows": "networkx.algorithms.node_classification"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.numpy": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_harmonic_function.scipy": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_digraph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.node_classification.harmonic_function",
    "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_edges": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_labels": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_no_nodes": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_nodes_all_labeled": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.karate_club_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_one_labeled_node": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.TestLocalAndGlobalConsistency.test_path_graph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.algorithms.node_classification.local_and_global_consistency",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.node_classification": {
  "data": {
   "shadows": "networkx.algorithms.node_classification"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.numpy": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.node_classification.tests.test_local_and_global_consistency.scipy": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.node_classification.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.node_classification.utils._get_label_info": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "enumerate",
    "numpy.array",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._init_label_matrix": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._predict": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "numpy.argmax"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils._propagate": {
  "data": {
   "lineno": 1
  },
  "type": "function"
 },
 "networkx.algorithms.node_classification.utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.node_disjoint_paths": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.node_disjoint_paths"
  },
  "type": "import"
 },
 "networkx.algorithms.non_randomness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.non_randomness.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.non_randomness.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.non_randomness.non_randomness": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ImportError",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.NetworkXException",
    "networkx.algorithms.non_randomness.math",
    "networkx.community.label_propagation_communities",
    "networkx.is_connected",
    "networkx.selfloop_edges",
    "networkx.to_numpy_array",
    "networkx.utils.not_implemented_for",
    "numpy.linalg.eigvals",
    "numpy.real",
    "numpy.sum",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.non_randomness.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.non_randomness.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.non_randomness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.all": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.all.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.all.compose_all": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "ValueError",
    "iter",
    "networkx.compose",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.disjoint_union_all": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "ValueError",
    "iter",
    "networkx.disjoint_union",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.intersection_all": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "ValueError",
    "iter",
    "networkx.intersection",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.all.union_all": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "itertools.zip_longest",
    "networkx.union",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.zip_longest": {
  "data": {
   "shadows": "itertools.zip_longest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.binary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.binary.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.binary.compose": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.difference": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.disjoint_union": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.operators.binary.union",
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "add_prefix",
    "networkx.algorithms.operators.binary.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join.add_prefix": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.full_join.add_prefix.label": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "isinstance",
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.intersection": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.binary.symmetric_difference": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "add_prefix",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix.label": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "isinstance",
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.product.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.product._dict_product": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._directed_edges_cross_edges": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes_and_nodes": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._init_product_graph": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._node_product": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "itertools.product",
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._nodes_cross_edges": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._undirected_edges_cross_edges": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.cartesian_product": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._edges_cross_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.lexicographic_product": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._edges_cross_nodes_and_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.product.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.product.power": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.product.rooted_product": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "itertools.product",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.strong_product": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._directed_edges_cross_edges",
    "networkx.algorithms.operators.product._edges_cross_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges",
    "networkx.algorithms.operators.product._undirected_edges_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.tensor_product": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._directed_edges_cross_edges",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._undirected_edges_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_all": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_all.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_all.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_all.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_compose_all": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.compose_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_disjoint_union": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.disjoint_union_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_intersection_all": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.intersection_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_empty_union": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.union_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_input_output": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.compose_all",
    "networkx.disjoint_union_all",
    "networkx.intersection_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.intersection",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_compose": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.compose_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_disjoint_union": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.disjoint_union_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_intersection": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.intersection_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_union": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.union_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_and_compose_all": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_all.pytest",
    "networkx.complete_graph",
    "networkx.compose_all",
    "networkx.disjoint_union_all",
    "networkx.number_of_edges",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.union",
    "networkx.union_all",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_attributes": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "eval",
    "int",
    "networkx.Graph",
    "networkx.union_all",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_multigraph": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.union_all",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_binary.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_binary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_binary.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_binary.test_compose_multigraph": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.compose",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.difference",
    "networkx.symmetric_difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference2": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_attributes": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_binary.pytest",
    "networkx.difference",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_multigraph_attributes": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_raise": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_binary.pytest",
    "networkx.difference",
    "networkx.path_graph",
    "networkx.symmetric_difference"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_disjoint_union_multigraph": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.disjoint_union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_full_join_graph": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.full_join",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_full_join_multigraph": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "len",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.full_join",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_attributes": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_binary.pytest",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_union": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_binary.pytest",
    "networkx.compose",
    "networkx.difference",
    "networkx.disjoint_union",
    "networkx.intersection",
    "networkx.symmetric_difference",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_multigraph": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.symmetric_difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_and_compose": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_binary.pytest",
    "networkx.complete_graph",
    "networkx.compose",
    "networkx.disjoint_union",
    "networkx.number_of_edges",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.union",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_attributes": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "eval",
    "int",
    "networkx.Graph",
    "networkx.union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_multigraph": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_product.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_classic": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.cubical_graph",
    "networkx.grid_2d_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_multigraph": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "frozenset",
    "networkx.MultiGraph",
    "networkx.cartesian_product",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_null": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_raises": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.cartesian_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_random": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.erdos_renyi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_size": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.complete_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "list",
    "networkx.cycle_graph",
    "networkx.power",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power_negative": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.power"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power_raises": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.power"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_combinations": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.lexicographic_product",
    "networkx.number_of_nodes",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_null": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.lexicographic_product",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_raises": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.lexicographic_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_random": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.lexicographic_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_size": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.lexicographic_product",
    "networkx.number_of_nodes",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_rooted_product": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.cycle_graph",
    "networkx.rooted_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_rooted_product_raises": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.path_graph",
    "networkx.rooted_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_combinations": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.strong_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_null": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.strong_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_raises": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.strong_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_random": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.strong_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_size": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.strong_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_classic_result": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.desargues_graph",
    "networkx.is_isomorphic",
    "networkx.petersen_graph",
    "networkx.tensor_product",
    "networkx.tetrahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_combinations": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.tensor_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_null": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.tensor_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_raises": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_product.pytest",
    "networkx.tensor_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_random": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.tensor_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_size": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.tensor_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_unary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_unary.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.bull_graph",
    "networkx.complement",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement_2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complement",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_reverse1": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.operators.tests.test_unary.pytest",
    "networkx.reverse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.unary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.unary.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.unary.complement": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.algorithms.operators.unary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.unary.reverse": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.planar_drawing.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.planar_drawing.combinatorial_embedding_to_pos": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "get_canonical_ordering",
    "len",
    "range",
    "set_position",
    "sum",
    "triangulate_embedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "collections.defaultdict",
    "int",
    "is_on_outer_face",
    "is_outer_face_nbr",
    "iter",
    "len",
    "next",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering.is_on_outer_face": {
  "data": {
   "lineno": 215
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.get_canonical_ordering.is_outer_face_nbr": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.make_bi_connected": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.planar_drawing.set_position": {
  "data": {
   "lineno": 128
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.triangulate_embedding": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "iter",
    "len",
    "list",
    "make_bi_connected",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.planar_drawing.triangulate_face",
    "networkx.connected_components",
    "next",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planar_drawing.triangulate_face": {
  "data": {
   "lineno": 307
  },
  "type": "function"
 },
 "networkx.algorithms.planarity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.planarity.ConflictPair": {
  "data": {
   "lineno": 169
  },
  "type": "class"
 },
 "networkx.algorithms.planarity.ConflictPair.__init__": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.algorithms.planarity.Interval"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.ConflictPair.lowest": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.ConflictPair.swap": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval": {
  "data": {
   "lineno": 141
  },
  "type": "class"
 },
 "networkx.algorithms.planarity.Interval.__init__": {
  "data": {
   "lineno": 149
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.conflicting": {
  "data": {
   "lineno": 161
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.copy": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.algorithms.planarity.Interval"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.Interval.empty": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity": {
  "data": {
   "lineno": 204
  },
  "type": "class"
 },
 "networkx.algorithms.planarity.LRPlanarity.__init__": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "PlanarEmbedding",
    "collections.defaultdict",
    "networkx.DiGraph",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.add_constraints": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "networkx.algorithms.planarity.ConflictPair",
    "networkx.algorithms.planarity.top_of_stack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_embedding": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "collections.defaultdict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_embedding_recursive": {
  "data": {
   "lineno": 669
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_orientation": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "collections.defaultdict",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_orientation_recursive": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_testing": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "collections.defaultdict",
    "networkx.algorithms.planarity.ConflictPair",
    "networkx.algorithms.planarity.Interval",
    "networkx.algorithms.planarity.top_of_stack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.dfs_testing_recursive": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": [
    "networkx.algorithms.planarity.ConflictPair",
    "networkx.algorithms.planarity.Interval",
    "networkx.algorithms.planarity.top_of_stack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.lr_planarity": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.lr_planarity_recursive": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.remove_back_edges": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "networkx.algorithms.planarity.top_of_stack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.sign": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "collections.defaultdict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.LRPlanarity.sign_recursive": {
  "data": {
   "lineno": 707
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_ccw": {
  "data": {
   "lineno": 917
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_cw": {
  "data": {
   "lineno": 958,
   "symbols_in_volume": [
    "networkx.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_first": {
  "data": {
   "lineno": 1030
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.check_structure": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.NetworkXException",
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.connect_components": {
  "data": {
   "lineno": 1006
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.get_data": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": [
    "dict",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.is_directed": {
  "data": {
   "lineno": 1108
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.neighbors_cw_order": {
  "data": {
   "lineno": 836,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.next_face_half_edge": {
  "data": {
   "lineno": 1050
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.set_data": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.PlanarEmbedding.traverse_face": {
  "data": {
   "lineno": 1065,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.planarity.check_planarity": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "LRPlanarity",
    "get_counterexample"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.check_planarity_recursive": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "LRPlanarity",
    "get_counterexample_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.planarity.get_counterexample": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.planarity.check_planarity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.get_counterexample_recursive": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.planarity.check_planarity_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.planarity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.planarity.top_of_stack": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "networkx.algorithms.project": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.project"
  },
  "type": "import"
 },
 "networkx.algorithms.projected_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.projected_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.reciprocity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.reciprocity.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.reciprocity.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.reciprocity._reciprocity_iter": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.reciprocity.reciprocity",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.reciprocity.overall_reciprocity": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.reciprocity.reciprocity": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "_reciprocity_iter",
    "dict",
    "networkx.NetworkXError",
    "next",
    "not_implemented_for",
    "overall_reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.regular.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.regular.is_k_regular": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "all",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.is_perfect_matching": {
  "data": {
   "shadows": "networkx.algorithms.matching.is_perfect_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.regular.is_regular": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "all",
    "networkx.utils.arbitrary_element"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "LargeKGadget",
    "SmallKGadget",
    "any",
    "list",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.matching.is_perfect_matching",
    "networkx.algorithms.matching.max_weight_matching",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget": {
  "data": {
   "lineno": 91
  },
  "type": "class"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.__init__": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.replace_node": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.LargeKGadget.restore_node": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget": {
  "data": {
   "lineno": 125
  },
  "type": "class"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.replace_node": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.regular.k_factor.SmallKGadget.restore_node": {
  "data": {
   "lineno": 148
  },
  "type": "function"
 },
 "networkx.algorithms.regular.max_weight_matching": {
  "data": {
   "shadows": "networkx.algorithms.matching.max_weight_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.regular.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.richclub.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.richclub._compute_rc": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "enumerate",
    "itertools.accumulate",
    "len",
    "map",
    "networkx.degree_histogram",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.richclub.accumulate": {
  "data": {
   "shadows": "itertools.accumulate"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub.rich_club_coefficient": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "Exception",
    "_compute_rc",
    "networkx.double_edge_swap",
    "networkx.number_of_selfloops",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.astar._weight_function": {
  "data": {
   "shadows": "networkx.algorithms.shortest_paths.weighted._weight_function"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "heapq.heappop",
    "heapq.heappush",
    "heuristic",
    "itertools.count",
    "networkx.NetworkXNoPath",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "next",
    "pop",
    "push",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path.heuristic": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path_length": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "heuristic",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.astar.astar_path",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "sum",
    "weight",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.dense.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.dense.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ImportError",
    "min",
    "networkx.to_numpy_array",
    "numpy.fill_diagonal",
    "numpy.inf",
    "numpy.minimum",
    "numpy.newaxis",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "float",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.reconstruct_path": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "list",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.generic.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXNoPath",
    "next",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.all_shortest_paths": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "ValueError",
    "_build_paths_from_predecessors",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.average_shortest_path_length": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.NetworkXError",
    "networkx.NetworkXPointlessConcept",
    "networkx.floyd_warshall",
    "networkx.floyd_warshall_numpy",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.average_shortest_path_length.path_length": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "networkx.single_source_bellman_ford_path_length",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.has_path": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "list",
    "networkx.all_pairs_bellman_ford_path",
    "networkx.all_pairs_dijkstra_path",
    "networkx.all_pairs_shortest_path",
    "networkx.bellman_ford_path",
    "networkx.bidirectional_shortest_path",
    "networkx.dijkstra_path",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_shortest_path",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path_length": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.all_pairs_bellman_ford_path_length",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.all_pairs_shortest_path_length",
    "networkx.bellman_ford_path_length",
    "networkx.bidirectional_shortest_path",
    "networkx.dijkstra_path_length",
    "networkx.single_source_bellman_ford_path_length",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setup_class": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed3": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed3.h": {
  "data": {
   "lineno": 106
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed4": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_astar.pytest",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.cycle_graph",
    "networkx.dijkstra_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_multiple_optimal_paths": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_multiple_optimal_paths.h": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_unorderable_nodes": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.utils.pairwise",
    "object",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "float",
    "networkx.DiGraph",
    "networkx.floyd_warshall",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_reconstruct_path": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "KeyError",
    "networkx.DiGraph",
    "networkx.algorithms.shortest_paths.tests.test_dense.pytest",
    "networkx.floyd_warshall_predecessor_and_distance",
    "networkx.reconstruct_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_distance": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_weight": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.floyd_warshall"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_dense_numpy.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_cycle_numpy": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.floyd_warshall_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_directed_cycle_numpy": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.algorithms.shortest_paths.tests.test_dense_numpy.npt",
    "networkx.floyd_warshall_numpy",
    "networkx.floyd_warshall_predecessor_and_distance",
    "networkx.utils.dict_to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weight_parameter_numpy": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy_three_edges": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy_two_edges": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_zero_weight": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "int",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.shortest_paths.tests.test_dense_numpy.numpy",
    "networkx.floyd_warshall_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.numpy": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength": {
  "data": {
   "lineno": 287
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_bad_method": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.average_shortest_path_length",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_cycle_graph": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.average_shortest_path_length",
    "networkx.cycle_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_disconnected": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.average_shortest_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_null_graph": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.average_shortest_path_length",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_path_graph": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "networkx.average_shortest_path_length",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_specified_methods": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.add_path",
    "networkx.average_shortest_path_length",
    "networkx.testing.almost_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_trivial_graph": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "networkx.average_shortest_path_length",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_weighted": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.add_path",
    "networkx.average_shortest_path_length",
    "networkx.testing.almost_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy": {
  "data": {
   "lineno": 358
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.setup_class": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.test_specified_methods_numpy": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.add_path",
    "networkx.average_shortest_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath": {
  "data": {
   "lineno": 23
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setup_class": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.all_pairs_bellman_ford_path",
    "networkx.all_pairs_dijkstra_path",
    "networkx.all_pairs_shortest_path",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "dict",
    "networkx.all_pairs_bellman_ford_path_length",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.all_pairs_shortest_path_length",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.all_shortest_paths",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_raise": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.all_shortest_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_zero_weight_edge": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.all_shortest_paths",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_bad_method": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.all_shortest_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.has_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ValueError",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "ValueError",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_generic.pytest",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length_target": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "dict",
    "networkx.path_graph",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_target": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.shortest_path",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "dict",
    "networkx.shortest_path_length",
    "networkx.single_source_bellman_ford_path_length",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "abs",
    "isinstance",
    "len",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setup_class": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path",
    "networkx.all_pairs_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "dict",
    "networkx.all_pairs_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path",
    "networkx.bidirectional_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cutoff": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cycle": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_path": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_target": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "dict",
    "networkx.single_source_shortest_path_length",
    "pl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.single_target_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path_length": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "dict",
    "networkx.single_target_shortest_path_length",
    "pl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "abs",
    "isinstance",
    "len",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_4_cycle": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_bellman_ford": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.bellman_ford_path",
    "networkx.bellman_ford_path_length",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.path_graph",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_goldberg_radzik": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.goldberg_radzik",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_multigraph": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "networkx.bellman_ford_path",
    "networkx.bellman_ford_path_length",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.bellman_ford_path",
    "networkx.bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.cycle_graph",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle_consistency": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.random",
    "networkx.binomial_graph",
    "networkx.negative_edge_cycle",
    "range",
    "unif"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_cycle_heuristic": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.negative_edge_cycle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_not_connected": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.complete_graph",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_others": {
  "data": {
   "lineno": 710,
   "symbols_in_volume": [
    "networkx.bellman_ford_path",
    "networkx.bellman_ford_path_length",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_path_graph": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": [
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.goldberg_radzik",
    "networkx.path_graph",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_single_node_graph": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.bellman_ford_predecessor_and_distance",
    "networkx.goldberg_radzik",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_bellman_ford_path",
    "networkx.single_source_bellman_ford_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_zero_cycle_smoke": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.bellman_ford_path",
    "networkx.bidirectional_dijkstra",
    "networkx.dijkstra_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength": {
  "data": {
   "lineno": 400
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength.test_weight_function": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.dijkstra_path_length",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength.test_weight_function.weight": {
  "data": {
   "lineno": 421
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_graphs": {
  "data": {
   "lineno": 882,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_cycle": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_weights": {
  "data": {
   "lineno": 859,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_single_node_graph": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_unweighted_graph": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.johnson",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra": {
  "data": {
   "lineno": 432
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_absent_source": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.multi_source_dijkstra",
    "networkx.multi_source_dijkstra_path",
    "networkx.multi_source_dijkstra_path_length",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_no_sources": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.multi_source_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_length_no_sources": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.multi_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_no_sources": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.multi_source_dijkstra_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_simple_paths": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "list",
    "networkx.multi_source_dijkstra_path",
    "networkx.multi_source_dijkstra_path_length",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_two_sources": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.multi_source_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_absent_source": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.dijkstra_path",
    "networkx.dijkstra_path_length",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.path_graph",
    "networkx.single_source_dijkstra",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "dict",
    "networkx.all_pairs_dijkstra",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "dict",
    "networkx.all_pairs_dijkstra_path",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path_length": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "dict",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.cycle_graph",
    "pl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.bidirectional_dijkstra",
    "networkx.dijkstra_path",
    "networkx.path_graph",
    "networkx.single_source_dijkstra_path",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.bidirectional_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_no_path": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.bidirectional_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "dict",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.dijkstra_path",
    "networkx.dijkstra_path_length",
    "networkx.single_source_dijkstra",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.dijkstra_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor1": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor2": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.dijkstra_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor3": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dijkstra_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.DiGraph",
    "networkx.algorithms.shortest_paths.tests.test_weighted.pytest",
    "networkx.bidirectional_dijkstra",
    "networkx.cycle_graph",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.negative_edge_cycle",
    "networkx.single_source_dijkstra",
    "networkx.single_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_single_source_dijkstra_path_length": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "dict",
    "networkx.single_source_dijkstra_path_length",
    "pl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_function": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.single_source_dijkstra",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_function.weight": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "list",
    "networkx.bidirectional_dijkstra",
    "networkx.single_source_bellman_ford",
    "networkx.single_source_dijkstra",
    "networkx.utils.pairwise",
    "range",
    "sum",
    "vlp",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.astar": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.getpath": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "getpath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.goldberg_radzik": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "getpath",
    "networkx.goldberg_radzik"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.heuristic": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.vlp": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "F",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions.weight": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase": {
  "data": {
   "lineno": 33
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase.setup": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "cnlti",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "callable",
    "networkx.utils.pairwise",
    "sum",
    "weight_f"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path.weight_f": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.unweighted.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted._single_shortest_path": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "join"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted._single_shortest_path_length": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "length",
    "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "_bidirectional_pred_succ",
    "networkx.NodeNotFound"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.unweighted.predecessor": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "networkx.NodeNotFound"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "_single_shortest_path",
    "dict",
    "float",
    "networkx.NodeNotFound"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path.join": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "_single_shortest_path_length",
    "dict",
    "float",
    "networkx.NodeNotFound"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "dict",
    "float",
    "join",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.unweighted._single_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path.join": {
  "data": {
   "lineno": 417
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path_length": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "float",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.unweighted._single_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.weighted.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.weighted._bellman_ford": {
  "data": {
   "lineno": 1207,
   "symbols_in_volume": [
    "all",
    "collections.deque",
    "float",
    "itertools.count",
    "itertools.count.get",
    "len",
    "networkx.NetworkXUnbounded",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors",
    "next",
    "set",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._build_paths_from_predecessors": {
  "data": {
   "shadows": "networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted._dijkstra": {
  "data": {
   "lineno": 733,
   "symbols_in_volume": [
    "_dijkstra_multisource"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._dijkstra_multisource": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": [
    "ValueError",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "networkx.NodeNotFound",
    "next",
    "pop",
    "push",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted._weight_function": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "callable",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path": {
  "data": {
   "lineno": 1666,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path",
    "path",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path_length": {
  "data": {
   "lineno": 1622,
   "symbols_in_volume": [
    "dict",
    "length",
    "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path_length",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path": {
  "data": {
   "lineno": 1046,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path",
    "path",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path_length": {
  "data": {
   "lineno": 989,
   "symbols_in_volume": [
    "length",
    "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_path": {
  "data": {
   "lineno": 1341,
   "symbols_in_volume": [
    "length",
    "path",
    "single_source_bellman_ford",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_path_length": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": [
    "KeyError",
    "length",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.weighted._bellman_ford",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bellman_ford_predecessor_and_distance": {
  "data": {
   "lineno": 1097,
   "symbols_in_volume": [
    "_bellman_ford",
    "any",
    "len",
    "networkx.NetworkXUnbounded",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "networkx.selfloop_edges",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.bidirectional_dijkstra": {
  "data": {
   "lineno": 1944,
   "symbols_in_volume": [
    "ValueError",
    "dir",
    "dir.items",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "networkx.NetworkXNoPath",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "next",
    "pop",
    "push",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_path": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "single_source_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_path_length": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "KeyError",
    "_dijkstra",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.weighted._weight_function"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.dijkstra_predecessor_and_distance": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted._dijkstra",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.generate_unique_node": {
  "data": {
   "shadows": "networkx.utils.generate_unique_node"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik": {
  "data": {
   "lineno": 1704,
   "symbols_in_volume": [
    "any",
    "float",
    "len",
    "networkx.NetworkXUnbounded",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "networkx.selfloop_edges",
    "relax",
    "topo_sort",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik.relax": {
  "data": {
   "lineno": 1855,
   "symbols_in_volume": [
    "set",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.goldberg_radzik.topo_sort": {
  "data": {
   "lineno": 1799,
   "symbols_in_volume": [
    "StopIteration",
    "all",
    "int",
    "iter",
    "networkx.NetworkXUnbounded",
    "next",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson": {
  "data": {
   "lineno": 2086,
   "symbols_in_volume": [
    "dist_path",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.shortest_paths.weighted._bellman_ford",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "networkx.is_weighted",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson.dist_path": {
  "data": {
   "lineno": 2168,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted._dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.johnson.new_weight": {
  "data": {
   "lineno": 2165,
   "symbols_in_volume": [
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "_dijkstra_multisource",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.weighted._weight_function"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "multi_source_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path_length": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "ValueError",
    "_dijkstra_multisource",
    "networkx.algorithms.shortest_paths.weighted._weight_function"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.negative_edge_cycle": {
  "data": {
   "lineno": 1883,
   "symbols_in_volume": [
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.shortest_paths.weighted.bellman_ford_predecessor_and_distance",
    "networkx.utils.generate_unique_node",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford": {
  "data": {
   "lineno": 1544,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.weighted._bellman_ford",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path": {
  "data": {
   "lineno": 1447,
   "symbols_in_volume": [
    "length",
    "path",
    "single_source_bellman_ford",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path_length": {
  "data": {
   "lineno": 1492,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.weighted._bellman_ford",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "weight"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "multi_source_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "multi_source_dijkstra_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "multi_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.similarity.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.similarity._is_close": {
  "data": {
   "lineno": 1191,
   "symbols_in_volume": [
    "abs",
    "all",
    "dict",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.debug_print": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.graph_edit_distance": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "optimize_edit_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.linear_sum_assignment": {
  "data": {
   "shadows": "scipy.optimize.linear_sum_assignment"
  },
  "type": "import"
 },
 "networkx.algorithms.similarity.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.similarity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.similarity.optimal_edit_paths": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "list",
    "optimize_edit_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "MaxCost",
    "edge_del_cost",
    "edge_ins_cost",
    "edge_match",
    "edge_subst_cost",
    "get_edit_paths",
    "int",
    "len",
    "list",
    "make_CostMatrix",
    "networkx.NetworkXError",
    "networkx.NodeNotFound",
    "networkx.algorithms.similarity.time",
    "node_del_cost",
    "node_ins_cost",
    "node_match",
    "node_subst_cost",
    "numpy.array",
    "numpy.zeros",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.CostMatrix": {
  "data": {
   "lineno": 667
  },
  "type": "class"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.CostMatrix.__init__": {
  "data": {
   "lineno": 668
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.MaxCost": {
  "data": {
   "lineno": 1150
  },
  "type": "class"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.MaxCost.__init__": {
  "data": {
   "lineno": 1151
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.extract_C": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.get_edit_ops": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": [
    "CostMatrix",
    "len",
    "list",
    "make_CostMatrix",
    "match_edges",
    "min",
    "prune",
    "range",
    "reduce_C",
    "reduce_Ce",
    "reduce_ind",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.get_edit_paths": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": [
    "get_edit_ops",
    "get_edit_paths",
    "len",
    "list",
    "max",
    "min",
    "prune",
    "reversed",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.make_CostMatrix": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "CostMatrix",
    "len",
    "list",
    "range",
    "scipy.optimize.linear_sum_assignment",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.match_edges": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "CostMatrix",
    "any",
    "extract_C",
    "len",
    "list",
    "make_CostMatrix",
    "networkx.is_directed",
    "numpy.empty",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.prune": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": [
    "networkx.algorithms.similarity.time"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_C": {
  "data": {
   "lineno": 706,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_Ce": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": [
    "len",
    "make_CostMatrix",
    "reduce_C",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_edit_paths.reduce_ind": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.optimize_graph_edit_distance": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "optimize_edit_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.similarity.simrank_similarity": {
  "data": {
   "lineno": 1226,
   "symbols_in_volume": [
    "networkx.algorithms.similarity._is_close",
    "range",
    "sim"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity.avg_sim": {
  "data": {
   "lineno": 1326,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity.sim": {
  "data": {
   "lineno": 1329,
   "symbols_in_volume": [
    "avg_sim",
    "itertools.product",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.simrank_similarity_numpy": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": [
    "networkx.to_numpy_array",
    "numpy.allclose",
    "numpy.copy",
    "numpy.eye",
    "numpy.fill_diagonal",
    "numpy.float64",
    "numpy.matmul",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.similarity.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.simple_paths.PathBuffer": {
  "data": {
   "lineno": 561
  },
  "type": "class"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__init__": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "itertools.count",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__len__": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.pop": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "heapq.heappop",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.push": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "heapq.heappush",
    "next",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.simple_paths._all_simple_edge_paths_multigraph": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "iter",
    "len",
    "list",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_graph": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "dict.fromkeys",
    "iter",
    "len",
    "list",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_multigraph": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "dict.fromkeys",
    "itertools.count",
    "len",
    "list",
    "next",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra": {
  "data": {
   "lineno": 751,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "ValueError",
    "dir",
    "filter_iter",
    "filter_pred_iter",
    "filter_succ_iter",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "next",
    "pop",
    "push",
    "wt"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter": {
  "data": {
   "lineno": 872
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter.iterate": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter": {
  "data": {
   "lineno": 851
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter.iterate": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": [
    "pred_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter": {
  "data": {
   "lineno": 859
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter.iterate": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": [
    "succ_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "filter_iter",
    "filter_pred_iter",
    "filter_succ_iter",
    "len",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter": {
  "data": {
   "lineno": 705
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter.iterate": {
  "data": {
   "lineno": 706,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter": {
  "data": {
   "lineno": 684
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter.iterate": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "pred_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter": {
  "data": {
   "lineno": 692
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter.iterate": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "succ_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_shortest_path": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "_bidirectional_pred_succ",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._weight_function": {
  "data": {
   "shadows": "networkx.algorithms.shortest_paths.weighted._weight_function"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.all_simple_edge_paths": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "TypeError",
    "_all_simple_edge_paths_multigraph",
    "len",
    "list",
    "networkx.NodeNotFound",
    "networkx.algorithms.simple_paths._all_simple_paths_graph",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.all_simple_paths": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "TypeError",
    "_all_simple_paths_graph",
    "_all_simple_paths_multigraph",
    "len",
    "networkx.NodeNotFound",
    "networkx.utils.empty_generator",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.empty_generator": {
  "data": {
   "shadows": "networkx.utils.empty_generator"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.is_simple_path": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.utils.pairwise",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "PathBuffer",
    "len",
    "length_func",
    "list",
    "networkx.NetworkXNoPath",
    "networkx.NodeNotFound",
    "networkx.algorithms.shortest_paths.weighted._weight_function",
    "networkx.utils.not_implemented_for",
    "range",
    "set",
    "shortest_path_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths.length_func": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "sum",
    "wt",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smallworld": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.smallworld.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.smallworld.cumulative_distribution": {
  "data": {
   "shadows": "networkx.utils.cumulative_distribution"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.discrete_sequence": {
  "data": {
   "shadows": "networkx.utils.discrete_sequence"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.lattice_reference": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "int",
    "len",
    "list",
    "local_conn",
    "networkx.NetworkXError",
    "networkx.connectivity.local_edge_connectivity",
    "networkx.number_of_edges",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "numpy.append",
    "numpy.arange",
    "numpy.ceil",
    "numpy.where",
    "numpy.zeros",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smallworld.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.omega": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "networkx.algorithms.smallworld.lattice_reference",
    "networkx.algorithms.smallworld.random_reference",
    "networkx.average_shortest_path_length",
    "networkx.transitivity",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "numpy.mean",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smallworld.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.smallworld.random_reference": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "int",
    "len",
    "list",
    "local_conn",
    "networkx.NetworkXError",
    "networkx.connectivity.local_edge_connectivity",
    "networkx.number_of_edges",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smallworld.sigma": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.algorithms.smallworld.random_reference",
    "networkx.average_shortest_path_length",
    "networkx.transitivity",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "numpy.mean",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smetric": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.smetric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.smetric.s_metric": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.sparsifiers": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.sparsifiers.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.sparsifiers._add_edge_to_spanner": {
  "data": {
   "lineno": 269
  },
  "type": "function"
 },
 "networkx.algorithms.sparsifiers._lightest_edge_dicts": {
  "data": {
   "lineno": 223
  },
  "type": "function"
 },
 "networkx.algorithms.sparsifiers._setup_residual_graph": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.sparsifiers.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.sparsifiers.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.sparsifiers.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.sparsifiers.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.sparsifiers.spanner": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "_add_edge_to_spanner",
    "_lightest_edge_dicts",
    "_setup_residual_graph",
    "len",
    "list",
    "min",
    "networkx.algorithms.sparsifiers.math",
    "networkx.empty_graph",
    "networkx.utils.not_implemented_for",
    "networkx.utils.py_random_state",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.stoer_wagner": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.stoer_wagner"
  },
  "type": "import"
 },
 "networkx.algorithms.structuralholes": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.structuralholes.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.structuralholes.constraint": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "float",
    "len",
    "local_constraint",
    "networkx.all_neighbors",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.effective_size": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.all_neighbors",
    "networkx.ego_graph",
    "redundancy",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.effective_size.redundancy": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.structuralholes.normalized_mutual_weight",
    "networkx.all_neighbors",
    "nmw",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.local_constraint": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "networkx.algorithms.structuralholes.normalized_mutual_weight",
    "networkx.all_neighbors",
    "nmw",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.mutual_weight": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.normalized_mutual_weight": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.algorithms.structuralholes.mutual_weight",
    "networkx.all_neighbors",
    "norm",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.structuralholes.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.swap": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.swap.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.swap.connected_double_edge_swap": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "discrete_sequence",
    "int",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.swap.math",
    "networkx.has_path",
    "networkx.is_connected",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.swap.double_edge_swap": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "discrete_sequence",
    "len",
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.NetworkXError",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence",
    "networkx.utils.py_random_state",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.swap.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.swap.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.swap.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_asteroidal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_asteroidal.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_asteroidal.test_is_at_free": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "is_at_free",
    "networkx.asteroidal.is_at_free",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.line_graph",
    "networkx.path_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary": {
  "data": {
   "lineno": 86
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_complete_graph": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "ilen",
    "list",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.edge_boundary",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_complete_graph.ilen": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_directed": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.edge_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multidigraph": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.edge_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multigraph": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.cycle_graph",
    "networkx.edge_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_null_graph": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "list",
    "networkx.edge_boundary",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_path_graph": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.edge_boundary",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_complete_graph": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.node_boundary",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_directed": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multidigraph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multigraph": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.cycle_graph",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_null_graph": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.node_boundary",
    "networkx.null_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_path_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.node_boundary",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_petersen": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "cheeger",
    "networkx.petersen_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_petersen.cheeger": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "min",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_bridges": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges.test_barbell_graph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "list",
    "networkx.barbell_graph",
    "networkx.bridges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestBridges.test_single_bridge": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.bridges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges": {
  "data": {
   "lineno": 41
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.setup_class": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "classmethod",
    "networkx.barbell_graph",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_no_weight": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "float",
    "list",
    "networkx.local_bridges",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_nospan": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "list",
    "networkx.local_bridges",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.TestLocalBridges.test_weight": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "float",
    "networkx.local_bridges",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_bridges.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_chains": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition": {
  "data": {
   "lineno": 40
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.assertContainsChain": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tests.test_chains.cyclic_equals",
    "reversed",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_barbell_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.barbell_graph",
    "networkx.chain_decomposition"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_decomposition": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.chain_decomposition"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.barbell_graph",
    "networkx.chain_decomposition",
    "networkx.relabel_nodes",
    "networkx.union",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph_root_node": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.barbell_graph",
    "networkx.chain_decomposition",
    "networkx.relabel_nodes",
    "networkx.union",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.cycle": {
  "data": {
   "shadows": "itertools.cycle"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_chains.cycles": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "itertools.cycle",
    "itertools.islice",
    "len",
    "next",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.cyclic_equals": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "any",
    "networkx.algorithms.tests.test_chains.cycles",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chains.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_chains.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_chordal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "frozenset",
    "networkx.chordal_graph_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "cgc",
    "frozenset",
    "networkx.chordal_graph_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques_path": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "frozenset",
    "networkx.chordal_graph_cliques",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_complete_to_chordal_graph": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "fgrg",
    "len",
    "networkx.barbell_graph",
    "networkx.bull_graph",
    "networkx.complete_to_chordal_graph",
    "networkx.cycle_graph",
    "networkx.fast_gnp_random_graph",
    "networkx.grid_graph",
    "networkx.is_chordal",
    "networkx.ladder_graph",
    "networkx.star_graph",
    "networkx.wheel_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_induced_nodes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.NetworkXTreewidthBoundExceeded",
    "networkx.algorithms.tests.test_chordal.pytest",
    "networkx.find_induced_nodes",
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.TestMCS.test_is_chordal": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.is_chordal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_chordal.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_chordal.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_clique.TestCliques": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.setup_method": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.find_cliques",
    "networkx.generators.havel_hakimi_graph",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.graph_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number2": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.graph_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number3": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.graph_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.cliques_containing_node",
    "reversed",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_directed": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_clique.pytest",
    "networkx.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "list",
    "map",
    "networkx.find_cliques",
    "networkx.find_cliques_recursive",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "list",
    "map",
    "networkx.find_cliques",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "networkx.make_clique_bipartite",
    "networkx.project",
    "networkx.relabel_nodes",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_make_max_clique_graph": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "networkx.make_clique_bipartite",
    "networkx.make_max_clique_graph",
    "networkx.project",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "list",
    "networkx.node_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "list",
    "networkx.graph_number_of_cliques",
    "networkx.number_of_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_selfloops": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "all",
    "frozenset",
    "len",
    "list",
    "map",
    "networkx.find_cliques",
    "networkx.find_cliques_recursive",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques": {
  "data": {
   "lineno": 201
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques.test_paper_figure_4": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "len",
    "list",
    "map",
    "networkx.Graph",
    "networkx.enumerate_all_cliques",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_clique.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering": {
  "data": {
   "lineno": 245
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_clustering": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_cubical": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "list",
    "networkx.clustering",
    "networkx.cubical_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_k5": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "list",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_path": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "list",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering": {
  "data": {
   "lineno": 43
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_clustering": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_k5": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_path": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_triangle_and_edge": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.clustering",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering": {
  "data": {
   "lineno": 105
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_clustering": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_k5": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_path": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_triangle_and_edge": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.clustering",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree": {
  "data": {
   "lineno": 418
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_cubical": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "networkx.cubical_graph",
    "networkx.generalized_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_generalized_degree": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generalized_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_k5": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.generalized_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_path": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "networkx.generalized_degree",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering": {
  "data": {
   "lineno": 321
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "list",
    "networkx.complete_bipartite_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "list",
    "networkx.cubical_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "list",
    "networkx.path_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity": {
  "data": {
   "lineno": 301
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "networkx.cubical_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_path": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "list",
    "networkx.cubical_graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_empty": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_k5": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.triangles",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_path": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "list",
    "networkx.path_graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering": {
  "data": {
   "lineno": 171
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "list",
    "networkx.clustering",
    "networkx.cubical_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "list",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "list",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.clustering",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cluster.test_average_clustering": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "networkx.average_clustering",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_communicability": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_communicability.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.algorithms.communicability_alg.communicability",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability2": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "networkx.Graph",
    "networkx.algorithms.communicability_alg.communicability",
    "networkx.algorithms.communicability_alg.communicability_exp",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_communicability.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.communicability": {
  "data": {
   "shadows": "networkx.algorithms.communicability_alg.communicability"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.communicability_exp": {
  "data": {
   "shadows": "networkx.algorithms.communicability_alg.communicability_exp"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.numpy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_communicability.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_communicability.scipy": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_core": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_core.TestCore": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_core.TestCore.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod",
    "networkx.convert_node_labels_to_integers",
    "networkx.havel_hakimi_graph",
    "networkx.relabel_nodes",
    "networkx.tetrahedral_graph",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_core_number": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_directed_find_cores": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.find_cores",
    "networkx.testing.utils.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores2": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.find_cores",
    "networkx.testing.utils.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_core": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.k_core",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_corona": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.k_corona",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_crust": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.k_crust",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_shell": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.k_shell",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_truss": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "list",
    "networkx.k_truss",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_core": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.k_core",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_crust": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.k_crust",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_shell": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.k_shell",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_onion_layers": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "networkx.onion_layers",
    "networkx.testing.utils.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_trivial": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.find_cores"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_core.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_covering": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover": {
  "data": {
   "lineno": 40
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_empty_graph": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_edge_cover",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_single_edge": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_with_loop": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.bipartite.matching.eppstein_matching",
    "networkx.is_edge_cover",
    "networkx.min_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_complete_graph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len",
    "networkx.complete_graph",
    "networkx.is_edge_cover",
    "networkx.min_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_empty_graph": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.min_edge_cover",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_single_edge": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.min_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_with_loop": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.min_edge_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_covering.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cuts": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_cuts.TestBoundaryExpansion": {
  "data": {
   "lineno": 136
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestBoundaryExpansion.test_graph": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "networkx.boundary_expansion",
    "networkx.complete_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestConductance": {
  "data": {
   "lineno": 95
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestConductance.test_graph": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.conductance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_directed": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_directed_symmetric": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_multigraph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_single_edge": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestCutSize.test_symmetric": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.cut_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestEdgeExpansion": {
  "data": {
   "lineno": 109
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestEdgeExpansion.test_graph": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.edge_expansion",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestMixingExpansion": {
  "data": {
   "lineno": 151
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestMixingExpansion.test_graph": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.mixing_expansion",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNodeExpansion": {
  "data": {
   "lineno": 121
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestNodeExpansion.test_graph": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.node_expansion",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize": {
  "data": {
   "lineno": 70
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_directed": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.normalized_cut_size",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_graph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.normalized_cut_size",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume": {
  "data": {
   "lineno": 48
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_digraph": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.volume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_graph": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.volume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_multidigraph": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.volume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.TestVolume.test_multigraph": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.cycle_graph",
    "networkx.volume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_cycles.FORWARD": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_cycles.REVERSE": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permutation": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "any",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis2": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis3": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_recursive_simple_and_not": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_graph_with_reported_bug": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle": {
  "data": {
   "lineno": 171
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.setup_class": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_dag": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.REVERSE",
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_ignore": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_none": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_original": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_reverse": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.REVERSE",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_cycle": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_nocycle": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_none": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_original": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.REVERSE",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_original": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multigraph": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_no_cycle": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_prev_explored": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx",
    "networkx.algorithms.tests.test_cycles.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles": {
  "data": {
   "lineno": 315
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.setup_class": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_complete_graph": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.algorithms.minimum_cycle_basis",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_dimensionality": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.minimum_cycle_basis",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_tree_graph": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "networkx.algorithms.minimum_cycle_basis",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_unweighted_diamond": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "networkx.algorithms.minimum_cycle_basis",
    "networkx.algorithms.tests.test_cycles.assert_basis_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_weighted_diamond": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "networkx.algorithms.minimum_cycle_basis",
    "networkx.algorithms.tests.test_cycles.assert_basis_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.assert_basis_equal": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.find_cycle": {
  "data": {
   "shadows": "networkx.algorithms.find_cycle"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.minimum_cycle_basis": {
  "data": {
   "shadows": "networkx.algorithms.minimum_cycle_basis"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_d_separation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_d_separation.asia_graph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.asia_graph_fixture": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.asia_graph",
    "networkx.algorithms.tests.test_d_separation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.collider_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.collider_graph_fixture": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.collider_graph",
    "networkx.algorithms.tests.test_d_separation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_d_separation.fork_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.fork_graph_fixture": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.fork_graph",
    "networkx.algorithms.tests.test_d_separation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.naive_bayes_graph": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.naive_bayes_graph_fixture": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.naive_bayes_graph",
    "networkx.algorithms.tests.test_d_separation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_d_separation.path_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.freeze",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.path_graph_fixture": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.path_graph",
    "networkx.algorithms.tests.test_d_separation.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_d_separation.test_asia_graph_dsep": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.asia_graph",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_collider_graph_dsep": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.collider_graph",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_cyclic_graphs_raise_error": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_d_separation.pytest",
    "networkx.cycle_graph",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_fork_graph_dsep": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.fork_graph",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_invalid_nodes_raise_error": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_d_separation.asia_graph",
    "networkx.algorithms.tests.test_d_separation.pytest",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_markov_condition": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.asia_graph",
    "networkx.algorithms.tests.test_d_separation.collider_graph",
    "networkx.algorithms.tests.test_d_separation.fork_graph",
    "networkx.algorithms.tests.test_d_separation.naive_bayes_graph",
    "networkx.algorithms.tests.test_d_separation.path_graph",
    "networkx.algorithms.tests.test_d_separation.pytest",
    "networkx.d_separated",
    "networkx.descendants",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_naive_bayes_dsep": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.algorithms.tests.test_d_separation.naive_bayes_graph",
    "networkx.d_separated",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_path_graph_dsep": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_d_separation.path_graph",
    "networkx.d_separated"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_d_separation.test_undirected_graphs_are_not_supported": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_d_separation.pytest",
    "networkx.d_separated",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dag.TestDAG": {
  "data": {
   "lineno": 89
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDAG._check_antichains": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "frozenset",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.setup_class": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_1": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.all_topological_sorts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_2": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_topological_sorts",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_dag.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.not_implemented": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.all_topological_sorts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.not_implemted_2": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.all_topological_sorts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3.unfeasible": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.all_topological_sorts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_4": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "itertools.permutations",
    "list",
    "map",
    "networkx.DiGraph",
    "networkx.all_topological_sorts",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_1": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.all_topological_sorts",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_2": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.all_topological_sorts",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_ancestors": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "ancestors",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.ancestors",
    "networkx.algorithms.tests.test_dag.pytest",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_antichains": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "antichains",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.dag.antichains",
    "networkx.algorithms.tests.test_dag.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_antichains.f": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "antichains",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_descendants": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "descendants",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.descendants",
    "networkx.algorithms.tests.test_dag.pytest",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_is_directed_acyclic_graph": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.complete_graph",
    "networkx.is_directed_acyclic_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.lexicographical_topological_sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "Test_Node",
    "list",
    "networkx.DiGraph",
    "networkx.lexicographical_topological_sort",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node": {
  "data": {
   "lineno": 455
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node.__init__": {
  "data": {
   "lineno": 456
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.Test_Node.__repr__": {
  "data": {
   "lineno": 460
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2.sorting_key": {
  "data": {
   "lineno": 463
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_reflexive_transitive_closure": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.transitive_closure",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "algorithm",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.lexicographical_topological_sort",
    "networkx.topological_sort",
    "networkx.utils.consume",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.is_directed_acyclic_graph",
    "networkx.topological_sort",
    "networkx.utils.consume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.topological_sort",
    "networkx.utils.consume",
    "range",
    "validate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3.validate": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "isinstance",
    "itertools.combinations",
    "list",
    "networkx.has_path",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.topological_sort",
    "networkx.utils.consume"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.topological_sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "RuntimeError",
    "algorithm",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.lexicographical_topological_sort",
    "networkx.topological_sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.runtime_error": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "algorithm",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.runtime_error2": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "algorithm",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6.unfeasible_error": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "algorithm",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.transitive_closure",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure_dag": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.dag.transitive_closure_dag",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.testing.utils.assert_edges_equal",
    "range",
    "transitive_closure"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_reduction": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.dag.transitive_reduction",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.testing.utils.assert_edges_equal",
    "transitive_reduction"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_empty": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_undirected_not_implemented": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unorderable_nodes": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path",
    "object",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted1": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted2": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPath.test_weighted": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength": {
  "data": {
   "lineno": 58
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_undirected_not_implemented": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_longest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_unweighted": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_weighted": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_longest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching": {
  "data": {
   "lineno": 543
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_arborescence": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.balanced_tree",
    "networkx.dag_to_branching",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_branching": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.balanced_tree",
    "networkx.dag_to_branching",
    "networkx.disjoint_union",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multidigraph": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_to_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multigraph": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_to_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_multiple_roots": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_to_branching",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_not_acyclic": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.HasACycle",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_to_branching",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_single_root": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dag_to_branching",
    "networkx.is_arborescence",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDagToBranching.test_undirected": {
  "data": {
   "lineno": 623,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.dag_to_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.consume": {
  "data": {
   "shadows": "networkx.utils.consume"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.davis_southern_women_graph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_raise": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_dag.pytest",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.full_rary_tree",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_measures.Random": {
  "data": {
   "shadows": "random.Random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter": {
  "data": {
   "lineno": 188
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.barycenter_as_subgraph": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "networkx.barycenter",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_must_be_connected": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.barycenter",
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_sp_kwarg": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "list",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.barycenter",
    "networkx.complete_graph",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_this_one_specific_tree": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "list",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_trees": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "len",
    "networkx.random_tree",
    "random.Random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.setup_method": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_center": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.center",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_diameter": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.diameter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_periphery": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.periphery",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_radius": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.radius"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_center": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.center",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.diameter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.eccentricity",
    "networkx.empty_graph",
    "networkx.path_graph",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_directed_weakly_connected": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_infinite": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_undirected_not_connected": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.periphery",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.radius"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.diameter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance": {
  "data": {
   "lineno": 94
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_class": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.tests.test_distance_measures.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_method": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.algorithms.distance_measures._laplacian_submatrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix_matrix_node_dim": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.distance_measures._laplacian_submatrix",
    "networkx.algorithms.tests.test_distance_measures.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_laplacian_submatrix_square": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.distance_measures._laplacian_submatrix",
    "networkx.algorithms.tests.test_distance_measures.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_multigraph": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.resistance_distance",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_div0": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_neg_weight": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.resistance_distance",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_no_weight": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.resistance_distance",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeA_not_in_graph": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeB_not_in_graph": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_noinv": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "networkx.resistance_distance",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_not_connected": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_same_node": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_distance_measures.pytest",
    "networkx.resistance_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures._laplacian_submatrix": {
  "data": {
   "shadows": "networkx.algorithms.distance_measures._laplacian_submatrix"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_measures.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_measures.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_measures.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "list",
    "networkx.cycle_graph",
    "networkx.global_parameters",
    "networkx.intersection_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.dodecahedral_graph",
    "networkx.icosahedral_graph",
    "networkx.intersection_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.dodecahedral_graph",
    "networkx.heawood_graph",
    "networkx.icosahedral_graph",
    "networkx.is_distance_regular",
    "networkx.pappus_graph",
    "networkx.path_graph",
    "networkx.petersen_graph",
    "networkx.tetrahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.add_cycle",
    "networkx.cycle_graph",
    "networkx.is_distance_regular"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular": {
  "data": {
   "lineno": 44
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_cycle_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_strongly_regular"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_path_graph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.is_strongly_regular",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_petersen_graph": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.is_strongly_regular",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.is_strongly_regular": {
  "data": {
   "shadows": "networkx.is_strongly_regular"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominance": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers": {
  "data": {
   "lineno": 81
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_boost_example": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_cycle": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.dominance_frontiers",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_discard_issue": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_domrel_png": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_exceptions": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dominance.pytest",
    "networkx.dominance_frontiers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible1": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible2": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loop": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loops_larger": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_missing_immediate_doms": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_path": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.path_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_singleton": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_unreachable": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.path_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_boost_example": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_cycle": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "max",
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_domrel_png": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_exceptions": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_dominance.pytest",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible1": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible2": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_path": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "max",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_singleton": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_unreachable": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "max",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominance.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominating.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.test_complete": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "len",
    "networkx.complete_graph",
    "networkx.dominating_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_dominating_set": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.dominating_set",
    "networkx.gnp_random_graph",
    "networkx.is_dominating_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_is_dominating_set": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.is_dominating_set",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_raise_dominating_set": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_dominating.pytest",
    "networkx.dominating_set",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_wikipedia_is_dominating_set": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_dominating_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.setup_method": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.cycle_graph",
    "networkx.lollipop_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.efficiency"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency_disconnected_nodes": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.efficiency"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.global_efficiency"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency_complete_graph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.global_efficiency",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_complete_graph": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.local_efficiency",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_disconnected_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.local_efficiency"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.TestEfficiency.test_using_ego_graph": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.local_efficiency"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_efficiency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_euler": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit": {
  "data": {
   "lineno": 40
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_cycle": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "list",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_digraph": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.add_cycle",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph_with_keys": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.add_cycle",
    "networkx.algorithms.tests.test_euler.collections",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_not_eulerian": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_euler.pytest",
    "networkx.complete_graph",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianPath": {
  "data": {
   "lineno": 152
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.eulerian_path",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize": {
  "data": {
   "lineno": 159
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_disconnected": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_euler.pytest",
    "networkx.eulerize",
    "networkx.from_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_null_graph": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tests.test_euler.pytest",
    "networkx.eulerize"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_null_multigraph": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tests.test_euler.pytest",
    "networkx.eulerize"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_complete_graph": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.eulerize",
    "networkx.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_empty_graph": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_euler.pytest",
    "networkx.empty_graph",
    "networkx.eulerize"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.eulerize",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian_multigraph": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.cycle_graph",
    "networkx.eulerize",
    "networkx.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestFindPathStart": {
  "data": {
   "lineno": 138
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestFindPathStart.testfind_path_start": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "find_path_start",
    "networkx.DiGraph",
    "networkx.algorithms.euler._find_path_start",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath": {
  "data": {
   "lineno": 123
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_cyclic": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.has_eulerian_path",
    "networkx.hypercube_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_non_cyclic": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.has_eulerian_path",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.hypercube_graph",
    "networkx.is_eulerian",
    "networkx.path_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian2": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestIsSemiEulerian": {
  "data": {
   "lineno": 109
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestIsSemiEulerian.test_is_semieulerian": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.hypercube_graph",
    "networkx.is_semieulerian",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_euler.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_euler.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graph_hashing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_graph_hashing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_directed": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.weisfeiler_lehman_graph_hash"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_empty_graph_hash": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.weisfeiler_lehman_graph_hash"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graph_hashing.test_relabel": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.relabel_nodes",
    "networkx.weisfeiler_lehman_graph_hash"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas": {
  "data": {
   "lineno": 40
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.setup_class": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "classmethod",
    "networkx.generators.atlas.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.test_atlas": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.atlas": {
  "data": {
   "shadows": "networkx.generators.atlas"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.test_directed_degree_sequence": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.is_digraphical",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_multi_sequence": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.is_multigraphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_negative_input": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_non_integer_input": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.tests.test_graphical.pytest",
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_numpy_degree_sequence": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.tests.test_graphical.pytest",
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_pseudo_sequence": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.is_pseudographical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_directed_sequences": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.is_digraphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_false": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_true": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_string_input": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.tests.test_graphical.pytest",
    "networkx.is_graphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.is_graphical",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.barabasi_albert_graph",
    "networkx.is_graphical",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_hierarchy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_hierarchy.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_1": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_cycle": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_exception": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_hierarchy.pytest",
    "networkx.cycle_graph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_tree": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.flow_hierarchy",
    "networkx.full_rary_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_weight": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_hybrid.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_hybrid.test_2d_grid_graph": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.grid_2d_graph",
    "networkx.is_kl_connected",
    "networkx.kl_connected_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid.test_small_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_kl_connected",
    "networkx.kl_connected_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_isolate.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_isolate.test_is_isolate": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_isolate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate.test_isolates": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.isolates",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_isolate.test_number_of_isolates": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.number_of_isolates"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex": {
  "data": {
   "lineno": 116
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.setup_class": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.adamic_adar_index",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_K5": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_P3": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_S4": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_all_nonexistent_edges": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tests.test_link_prediction.math"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_equal_nodes": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_no_common_neighbor": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_notimplemented": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft": {
  "data": {
   "lineno": 214
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.setup_class": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.cn_soundarajan_hopcroft",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_K5": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_P3": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_S4": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_all_nonexistent_edges": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_custom_community_attribute_name": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_different_community": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_equal_nodes": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_insufficient_community_information": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_common_neighbor": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_community_information": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_notimplemented": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_sufficient_community_information": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient": {
  "data": {
   "lineno": 69
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.setup_class": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.jaccard_coefficient",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_K5": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_P4": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_all_nonexistent_edges": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_isolated_nodes": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_no_common_neighbor": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_notimplemented": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment": {
  "data": {
   "lineno": 168
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.setup_class": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.preferential_attachment",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_K5": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_P3": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_S4": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_all_nonexistent_edges": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_notimplemented": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_zero_degrees": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft": {
  "data": {
   "lineno": 319
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.setup_class": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.ra_index_soundarajan_hopcroft",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_K5": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_P3": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_S4": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_different_community": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_equal_nodes": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_insufficient_community_information": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_common_neighbor": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_community_information": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_notimplemented": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_sufficient_community_information": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.setup_class": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.resource_allocation_index",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_K5": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_P3": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_S4": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_all_nonexistent_edges": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_equal_nodes": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_no_common_neighbor": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_notimplemented": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster": {
  "data": {
   "lineno": 424
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.setup_class": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "classmethod",
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.within_inter_cluster",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_K5": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_P3": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_S4": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_all_nonexistent_edges": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_custom_community_attribute_name": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_different_community": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_equal_nodes": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_insufficient_community_information": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_invalid_delta": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": [
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_common_neighbor": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_community_information": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.tests.test_link_prediction.pytest",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_inter_cluster_common_neighbor": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_notimplemented": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_link_prediction.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_sufficient_community_information": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction._test_func": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "len",
    "networkx.testing.almost_equal",
    "predict_func",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_link_prediction.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_link_prediction.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_link_prediction.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors": {
  "data": {
   "symbols_in_volume": [
    "networkx.all_pairs_lowest_common_ancestor",
    "networkx.tree_all_pairs_lowest_common_ancestor"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA": {
  "data": {
   "lineno": 163
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.assert_lca_dicts_same": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "itertools.chain",
    "len",
    "max",
    "min",
    "networkx.algorithms.tests.test_lowest_common_ancestors.get_pair",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.setup_class": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor1": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor10": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor2": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "dict",
    "itertools.product",
    "list",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor3": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "dict",
    "itertools.product",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor4": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor5": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor6": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor7": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor8": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lowest_common_ancestor9": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_lowest_common_ancestor1": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.lowest_common_ancestor",
    "object"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_lowest_common_ancestor2": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.lowest_common_ancestor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA": {
  "data": {
   "lineno": 17
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.assert_has_same_pairs": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "itertools.chain",
    "max",
    "min",
    "networkx.algorithms.tests.test_lowest_common_ancestors.get_pair",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.setup_class": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "classmethod",
    "dict",
    "networkx.DiGraph",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_not_implemented_for": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca",
    "networkx.lowest_common_ancestor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor1": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor10": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "list",
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor11": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor12": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor13": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor2": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor3": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "itertools.combinations",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor4": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor5": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.NodeNotFound",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor6": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "all",
    "dict",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor7": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor8": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_lowest_common_ancestors.pytest",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lowest_common_ancestor9": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "dict",
    "iter",
    "len",
    "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs_lca": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.get_pair": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_lowest_common_ancestors.tree_all_pairs_lca": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching": {
  "data": {
   "lineno": 378
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_dict": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_edge_order": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_empty_matching": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_invalid": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_single_edge": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMatching.test_valid": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "networkx.is_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching": {
  "data": {
   "lineno": 412
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_dict": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "networkx.is_maximal_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_matching": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "networkx.is_maximal_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_maximal": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "networkx.is_maximal_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_valid": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "networkx.is_maximal_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching": {
  "data": {
   "lineno": 435
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_dict": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "networkx.is_perfect_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_maximal_but_not_perfect": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_perfect_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_not_matching": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": [
    "networkx.is_perfect_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "networkx.is_perfect_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid_not_path": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_perfect_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_floating_point_weights": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.algorithms.tests.test_matching.math",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom1": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom2": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_augmenting": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_expand_recursively": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_least_slack": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_negative_weights": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "frozenset",
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_expand": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel_expand": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom_relabel_expand": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_t_blossom": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial1": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.max_weight_matching",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial2": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.max_weight_matching",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial3": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial4": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial5": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial6": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.matching.matching_dict_to_set",
    "networkx.max_weight_matching",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching": {
  "data": {
   "lineno": 469
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_ordering": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "itertools.permutations",
    "len",
    "networkx.Graph",
    "networkx.is_maximal_matching",
    "networkx.maximal_matching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_self_loops": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.is_maximal_matching",
    "networkx.maximal_matching",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_single_edge_matching": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "len",
    "networkx.is_maximal_matching",
    "networkx.maximal_matching",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMaximalMatching.test_valid_matching": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_maximal_matching",
    "networkx.maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.matching_dict_to_set": {
  "data": {
   "shadows": "networkx.algorithms.matching.matching_dict_to_set"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_max_weight_clique": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_max_weight_clique.disconnected",
    "networkx.algorithms.tests.test_max_weight_clique.empty_graph",
    "networkx.algorithms.tests.test_max_weight_clique.one_node_graph",
    "networkx.algorithms.tests.test_max_weight_clique.three_node_clique",
    "networkx.algorithms.tests.test_max_weight_clique.three_node_independent_set",
    "networkx.algorithms.tests.test_max_weight_clique.two_node_graph"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TEST_CASES": {
  "data": {
   "lineno": 173
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_30_node_prob": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.max_weight_clique",
    "range",
    "verify_clique"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_basic_cases": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "check_basic_case",
    "graph_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_basic_cases.check_basic_case": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "graph_func",
    "networkx.algorithms.max_weight_clique",
    "verify_clique"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_error_on_non_integer_weight": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.max_weight_clique",
    "networkx.algorithms.tests.test_max_weight_clique.pytest",
    "two_node_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_key_error": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "KeyError",
    "networkx.algorithms.max_weight_clique",
    "networkx.algorithms.tests.test_max_weight_clique.pytest",
    "two_node_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_unaffected_by_self_loops": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.max_weight_clique",
    "three_node_independent_set",
    "two_node_graph",
    "verify_clique"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.disconnected": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.empty_graph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_max_weight_clique.one_node_graph": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_max_weight_clique.three_node_clique": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.three_node_independent_set": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.two_node_graph": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_max_weight_clique.verify_clique": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_minors.TestContraction": {
  "data": {
   "lineno": 239
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_contract_selfloop_graph": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_create_multigraph": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.contracted_nodes",
    "networkx.path_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction_no_copy": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_multigraph_keys": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.contracted_nodes",
    "networkx.path_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_node_attributes": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_nonexistent_edge": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.tests.test_minors.pytest",
    "networkx.contracted_edge",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_edge_contraction": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_edge",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction_no_copy": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_without_self_loops": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_barbell": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_barbell_plus": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.barbell_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_blockmodel": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.is_isomorphic",
    "networkx.quotient_graph",
    "networkx.strongly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient.same_component": {
  "data": {
   "lineno": 106
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_directed_multigraph_path": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_directed_path": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_multigraph_blockmodel": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_multigraph_path": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_overlapping_blocks": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.algorithms.tests.test_minors.pytest",
    "networkx.path_graph",
    "networkx.quotient_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_path": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.quotient_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite.same_neighbors": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.complete_multipartite_graph",
    "networkx.is_isomorphic",
    "networkx.quotient_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite.same_neighbors": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.quotient_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation.identity": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation.same_parity": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.utils.arbitrary_element"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_incomplete_partition": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_weighted_path": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.quotient_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.setup": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K5": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K55": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_bipartite": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "list",
    "networkx.complete_bipartite_graph",
    "networkx.maximal_independent_set",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_digraph_exception": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_mis.pytest",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_exception": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.tests.test_mis.pytest",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_florentine_family": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.maximal_independent_set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_graphs": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tests.test_mis.random",
    "networkx.maximal_independent_set",
    "networkx.random_graphs.erdos_renyi_graph",
    "range",
    "set",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_seed": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mis.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mis.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_moral": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_moral.moral_graph": {
  "data": {
   "shadows": "networkx.algorithms.moral.moral_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_moral.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_moral.test_get_moral_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.moral.moral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_non_randomness": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_non_randomness.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_non_randomness.npt": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_non_randomness.numpy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_non_randomness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_non_randomness.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_non_randomness.test_non_randomness": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_non_randomness.npt",
    "networkx.karate_club_graph",
    "networkx.non_randomness"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector": {
  "data": {
   "lineno": 198
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__eq__": {
  "data": {
   "lineno": 220
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__ge__": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__gt__": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__init__": {
  "data": {
   "lineno": 207
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__le__": {
  "data": {
   "lineno": 234
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__lt__": {
  "data": {
   "lineno": 223
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.Vector.__ne__": {
  "data": {
   "lineno": 231
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_edge_intersections": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXException",
    "networkx.algorithms.tests.test_planar_drawing.point_in_between"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_embedding_data": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "check_edge_intersections",
    "networkx.PlanarEmbedding",
    "networkx.combinatorial_embedding_to_pos",
    "planar_drawing_conforms_to_embedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.check_triangulation": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.algorithms.planar_drawing.triangulate_embedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.is_close": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "abs",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planar_drawing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planar_drawing.planar_drawing_conforms_to_embedding": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.algorithms.tests.test_planar_drawing.Vector"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.point_in_between": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_planar_drawing.is_close",
    "networkx.algorithms.tests.test_planar_drawing.math"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_circle_graph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_graph1": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_graph2": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_grid_graph": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_invalid_half_edge": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planar_drawing.pytest",
    "networkx.combinatorial_embedding_to_pos"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph1": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph2": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_one_node_graph": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_three_node_graph": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding1": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "check_triangulation",
    "networkx.PlanarEmbedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding2": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "check_triangulation",
    "networkx.PlanarEmbedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.test_two_node_graph": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "check_embedding_data"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planar_drawing.triangulate_embedding": {
  "data": {
   "shadows": "networkx.algorithms.planar_drawing.triangulate_embedding"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planarity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.check_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "check_counterexample",
    "check_embedding",
    "networkx.algorithms.planarity.check_planarity_recursive",
    "networkx.check_planarity",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_comp": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.planarity.get_counterexample",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar_recursive": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.algorithms.planarity.get_counterexample_recursive",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_goldner_harary": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph1": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.OrderedGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph2": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.OrderedGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph3": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.OrderedGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k3_3": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k5": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_loop": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_non_planar": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_planar": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar1": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_digraph": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_multigraph": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_with_selfloop": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_digraph": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_multigraph": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_with_selfloop": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_simple_planar_graph": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_single_component": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass": {
  "data": {
   "lineno": 371
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.get_star_embedding": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "networkx.PlanarEmbedding",
    "range",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_connect_components": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "networkx.PlanarEmbedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_get_data": {
  "data": {
   "lineno": 372
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_invalid_edge_orientation": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_edge_orientation": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_half_edge": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_reference": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_not_fulfilling_euler_formula": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_successful_face_traversal": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "networkx.PlanarEmbedding"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_unsuccessful_face_traversal": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.algorithms.tests.test_planarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.check_counterexample": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "iter",
    "len",
    "list",
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.complete_bipartite_graph",
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.check_embedding": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "isinstance",
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_planarity.check_planarity_recursive": {
  "data": {
   "shadows": "networkx.algorithms.planarity.check_planarity_recursive"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planarity.get_counterexample": {
  "data": {
   "shadows": "networkx.algorithms.planarity.get_counterexample"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planarity.get_counterexample_recursive": {
  "data": {
   "shadows": "networkx.algorithms.planarity.get_counterexample_recursive"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planarity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_planarity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_reciprocity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_overall_reciprocity_empty_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_reciprocity.pytest",
    "networkx.overall_reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_digraph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_isolated_nodes": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_reciprocity.pytest",
    "networkx.reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_node": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_nodes": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.reciprocity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_reciprocity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_reciprocity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular": {
  "data": {
   "lineno": 66
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular1": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_k_regular",
    "networkx.generators.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular2": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_k_regular",
    "networkx.generators.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular3": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_k_regular",
    "networkx.generators.lollipop_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular": {
  "data": {
   "lineno": 52
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular1": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_regular",
    "networkx.generators.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular2": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_regular",
    "networkx.generators.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular3": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.algorithms.regular.is_regular",
    "networkx.generators.lollipop_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor1": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.generators.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor2": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.generators.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor3": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.algorithms.tests.test_regular.networkx",
    "networkx.algorithms.tests.test_regular.pytest",
    "networkx.generators.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor4": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.algorithms.tests.test_regular.networkx",
    "networkx.algorithms.tests.test_regular.pytest",
    "networkx.generators.lattice.hexagonal_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor5": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.generators.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor_trivial": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.algorithms.regular.k_factor",
    "networkx.generators.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_regular.gen": {
  "data": {
   "shadows": "networkx.generators"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_regular.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_regular.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_regular.reg": {
  "data": {
   "shadows": "networkx.algorithms.regular"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_richclub": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_richclub.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_richclub.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_richclub.test_rich_club_exception2": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_richclub.pytest",
    "networkx.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub2": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub3": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.karate_club_graph",
    "networkx.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub4": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_exception": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_richclub.pytest",
    "networkx.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_normalized": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_seed": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity": {
  "data": {
   "lineno": 37
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.setup_class": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.tests.test_similarity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testCopy": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph1": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph2": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph3": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_a": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_b": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.getCanonical",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneEdgeLabelDiff": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraEdge": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNode": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNodeAndEdge": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testOneNodeLabelDiff": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.testSame": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.ematch",
    "networkx.algorithms.tests.test_similarity.nmatch"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_digraph": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.similarity.graph_edit_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.cycle_graph",
    "networkx.generators.classic.path_graph",
    "networkx.generators.classic.wheel_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_del_cost": {
  "data": {
   "lineno": 168
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_ins_cost": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost.edge_subst_cost": {
  "data": {
   "lineno": 162
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_match": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_del_cost": {
  "data": {
   "lineno": 131
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_ins_cost": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost.node_subst_cost": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_match": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_roots_and_timeout": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ValueError",
    "networkx.NetworkXError",
    "networkx.NodeNotFound",
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.algorithms.tests.test_similarity.pytest",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_upper_bound": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.algorithms.similarity.graph_edit_distance",
    "networkx.generators.classic.circular_ladder_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_multidigraph": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.algorithms.similarity.graph_edit_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_multigraph": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.similarity.graph_edit_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimal_edit_paths": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "canonical",
    "len",
    "networkx.algorithms.similarity.optimal_edit_paths",
    "networkx.generators.classic.cycle_graph",
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimal_edit_paths.canonical": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimize_graph_edit_distance": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "networkx.algorithms.similarity.optimize_graph_edit_distance",
    "networkx.generators.classic.circular_ladder_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_selfloops": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.similarity.graph_edit_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_no_source_no_target": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.similarity.simrank_similarity",
    "networkx.cycle_graph",
    "networkx.simrank_similarity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_no_source_no_target": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.simrank_similarity_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_and_target": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.simrank_similarity_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_no_target": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.simrank_similarity_numpy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_and_target": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.similarity.simrank_similarity",
    "networkx.cycle_graph",
    "networkx.simrank_similarity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_no_target": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.similarity.simrank_similarity",
    "networkx.cycle_graph",
    "networkx.simrank_similarity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.circular_ladder_graph": {
  "data": {
   "shadows": "networkx.generators.classic.circular_ladder_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.ematch": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.getCanonical": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.graph_edit_distance": {
  "data": {
   "shadows": "networkx.algorithms.similarity.graph_edit_distance"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.nmatch": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_similarity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.optimal_edit_paths": {
  "data": {
   "shadows": "networkx.algorithms.similarity.optimal_edit_paths"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.optimize_graph_edit_distance": {
  "data": {
   "shadows": "networkx.algorithms.similarity.optimize_graph_edit_distance"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_similarity.wheel_graph": {
  "data": {
   "shadows": "networkx.generators.classic.wheel_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_cycle": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_cycle": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_non_path": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_path": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_empty_list": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_missing_node": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multidigraph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multigraph": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_non_simple_path": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_simple_path": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_nonpath": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_path": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.is_simple_path",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths._bidirectional_dijkstra": {
  "data": {
   "shadows": "networkx.algorithms.simple_paths._bidirectional_dijkstra"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths._bidirectional_shortest_path": {
  "data": {
   "shadows": "networkx.algorithms.simple_paths._bidirectional_shortest_path"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.hamiltonian_edge_path": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "len",
    "networkx.all_simple_edge_paths",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.hamiltonian_path": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "len",
    "networkx.all_simple_paths",
    "networkx.utils.arbitrary_element",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.test_Greg_Bernstein": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_corner_cases": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_edge_paths",
    "networkx.empty_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_cutoff": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "networkx.all_simple_edge_paths",
    "networkx.complete_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_directed": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.all_simple_edge_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_empty": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_edge_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_ignores_cycle": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.cycle_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.add_path",
    "networkx.all_simple_edge_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph_with_cutoff": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_edge_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_on_non_trivial_graph": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_source_target": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_edge_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_cutoff": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_emits_two_paths": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.cycle_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_corner_cases": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_paths",
    "networkx.empty_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_cutoff": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.all_simple_paths",
    "networkx.complete_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_directed": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.all_simple_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_empty": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_ignores_cycle": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_paths",
    "networkx.cycle_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.add_path",
    "networkx.all_simple_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph_with_cutoff": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_paths",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_on_non_trivial_graph": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_source_target": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "list",
    "networkx.all_simple_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_cutoff": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_emits_two_paths": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_in_line_emits_two_paths": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_paths",
    "networkx.cycle_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijksta_restricted": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths._bidirectional_dijkstra",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.algorithms.tests.test_simple_paths.validate_length_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_ignore": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.simple_paths._bidirectional_dijkstra",
    "networkx.algorithms.tests.test_simple_paths.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_no_path": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.simple_paths._bidirectional_dijkstra",
    "networkx.algorithms.tests.test_simple_paths.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_ignore": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.simple_paths._bidirectional_shortest_path",
    "networkx.algorithms.tests.test_simple_paths.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_cycle": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": [
    "networkx.algorithms.simple_paths._bidirectional_shortest_path",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_directed_cycle": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths._bidirectional_shortest_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_wheel": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": [
    "networkx.algorithms.simple_paths._bidirectional_shortest_path",
    "networkx.wheel_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_cutoff_zero": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_paths",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_cutoff": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_cutoff": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_emits_two_paths": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.all_simple_paths",
    "networkx.path_graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "cost_func",
    "networkx.algorithms.tests.test_simple_paths.random",
    "networkx.complete_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path.cost_func": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path_issue2427": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_cutoff_zero": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_edge_paths",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_source_missing": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.all_simple_edge_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_edge_target_missing": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.all_simple_edge_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_hamiltonian__edge_path": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "itertools.permutations",
    "list",
    "networkx.algorithms.tests.test_simple_paths.hamiltonian_edge_path",
    "networkx.complete_graph",
    "networkx.utils.pairwise",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_hamiltonian_path": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "itertools.permutations",
    "list",
    "networkx.algorithms.tests.test_simple_paths.hamiltonian_path",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "len",
    "networkx.all_simple_paths",
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph",
    "networkx.shortest_simple_paths",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed_with_weight_fucntion": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "len",
    "networkx.all_simple_paths",
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph",
    "networkx.shortest_simple_paths",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed_with_weight_fucntion.cost": {
  "data": {
   "lineno": 463
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_with_weight_fucntion": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_with_weight_fucntion.cost": {
  "data": {
   "lineno": 476
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_source_missing": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_multigraph": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing2": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_target_missing": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_target_missing": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NodeNotFound",
    "networkx.add_path",
    "networkx.algorithms.tests.test_simple_paths.pytest",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weight_name": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "list",
    "networkx.cycle_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "cost_func",
    "networkx.algorithms.tests.test_simple_paths.random",
    "networkx.complete_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path.cost_func": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path_issue2427": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_length_path": {
  "data": {
   "lineno": 684,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_simple_paths.validate_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_path": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_smallworld.pytest",
    "networkx.algorithms.tests.test_smallworld.random"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_smallworld.lattice_reference": {
  "data": {
   "shadows": "networkx.lattice_reference"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.numpy": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_smallworld.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.omega": {
  "data": {
   "shadows": "networkx.omega"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.random_reference": {
  "data": {
   "shadows": "networkx.random_reference"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.rng": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_smallworld.sigma": {
  "data": {
   "shadows": "networkx.sigma"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smallworld.test_lattice_reference": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_smallworld.pytest",
    "networkx.algorithms.tests.test_smallworld.rng",
    "networkx.average_shortest_path_length",
    "networkx.connected_watts_strogatz_graph",
    "networkx.lattice_reference"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_omega": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_smallworld.rng",
    "networkx.connected_watts_strogatz_graph",
    "networkx.omega",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_random_reference": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.tests.test_smallworld.pytest",
    "networkx.algorithms.tests.test_smallworld.rng",
    "networkx.average_clustering",
    "networkx.connected_watts_strogatz_graph",
    "networkx.random_reference"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smallworld.test_sigma": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_smallworld.rng",
    "networkx.connected_watts_strogatz_graph",
    "networkx.sigma"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_smetric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smetric.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smetric.test_normalized": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_smetric.pytest",
    "networkx.s_metric"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric.test_smetric": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.s_metric"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_sparsifiers._assign_random_weights": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers._seed": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_sparsifiers._test_spanner": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "dict",
    "networkx.shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_sparsifiers.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_sparsifiers.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_invalid_stretch": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.tests.test_sparsifiers.pytest",
    "networkx.empty_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_trivial": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.complete_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_complete_graph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.algorithms.tests.test_sparsifiers._test_spanner",
    "networkx.complete_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_disconnected_graph": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.algorithms.tests.test_sparsifiers._test_spanner",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_gnp_graph": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.algorithms.tests.test_sparsifiers._test_spanner",
    "networkx.gnp_random_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_complete_graph": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._assign_random_weights",
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.algorithms.tests.test_sparsifiers._test_spanner",
    "networkx.complete_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_gnp_graph": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_sparsifiers._assign_random_weights",
    "networkx.algorithms.tests.test_sparsifiers._seed",
    "networkx.algorithms.tests.test_sparsifiers._test_spanner",
    "networkx.gnp_random_graph",
    "networkx.spanner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.setup": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_directed": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.constraint",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_isolated": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_structuralholes.math",
    "networkx.constraint"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_undirected": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.constraint",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_directed": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.constraint",
    "networkx.set_edge_attributes",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_undirected": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.constraint",
    "networkx.set_edge_attributes",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_borgatti_isolated": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_structuralholes.math",
    "networkx.effective_size"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_directed": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.effective_size",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_isolated": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_structuralholes.math",
    "networkx.effective_size",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.effective_size",
    "networkx.set_edge_attributes",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected_borgatti": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.effective_size",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_directed": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.effective_size",
    "networkx.set_edge_attributes",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_undirected": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.effective_size",
    "networkx.set_edge_attributes",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_structuralholes.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_structuralholes.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_structuralholes.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_swap": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_swap.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_swap.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.barabasi_albert_graph",
    "networkx.connected_double_edge_swap",
    "networkx.is_connected",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_not_connected": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.algorithms.tests.test_swap.pytest",
    "networkx.connected_double_edge_swap",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_small": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_swap.pytest",
    "networkx.connected_double_edge_swap",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_degree_seq_c4": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.double_edge_swap",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.barabasi_albert_graph",
    "networkx.double_edge_swap",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_seed": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.barabasi_albert_graph",
    "networkx.double_edge_swap",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_small": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_swap.pytest",
    "networkx.double_edge_swap",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_tries": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.tests.test_swap.pytest",
    "networkx.double_edge_swap",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold": {
  "data": {
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.random_threshold_sequence": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.random_threshold_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_create_using": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.threshold_graph",
    "networkx.exception.NetworkXError",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequence_to_weights": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "TypeError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.creation_sequence_to_weights"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.threshold_graph",
    "networkx.algorithms.threshold.uncompact",
    "networkx.generators.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "abs",
    "dot",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.eigenvectors",
    "networkx.algorithms.threshold.threshold_graph",
    "networkx.laplacian_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "abs",
    "list",
    "networkx.algorithms.threshold.betweenness_sequence",
    "networkx.algorithms.threshold.cluster_sequence",
    "networkx.algorithms.threshold.degree_correlation",
    "networkx.algorithms.threshold.degree_sequence",
    "networkx.algorithms.threshold.density",
    "networkx.algorithms.threshold.eigenvalues",
    "networkx.algorithms.threshold.threshold_graph",
    "networkx.algorithms.threshold.triangle_sequence",
    "networkx.algorithms.threshold.triangles",
    "networkx.betweenness_centrality",
    "networkx.clustering",
    "networkx.density",
    "networkx.testing.almost_equal",
    "networkx.triangles",
    "sorted",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_find_alternating_4_cycle": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.threshold.find_alternating_4_cycle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_finding_routines": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.find_alternating_4_cycle",
    "networkx.algorithms.threshold.find_creation_sequence",
    "networkx.algorithms.threshold.find_threshold_graph",
    "networkx.algorithms.threshold.is_threshold_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_left_d_threshold_sequence": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.left_d_threshold_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_make_compact": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "TypeError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.make_compact"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_right_d_threshold_sequence": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.right_d_threshold_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "enumerate",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.shortest_path",
    "networkx.algorithms.threshold.shortest_path_length",
    "networkx.generators.havel_hakimi_graph",
    "networkx.shortest_path",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path_length": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "TypeError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.shortest_path",
    "networkx.algorithms.threshold.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "networkx.algorithms.threshold.left_d_threshold_sequence",
    "networkx.algorithms.threshold.right_d_threshold_sequence",
    "networkx.algorithms.threshold.swap_d"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.threshold.is_threshold_graph",
    "networkx.algorithms.threshold.is_threshold_sequence",
    "networkx.complete_graph",
    "networkx.generators.havel_hakimi_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_uncompact": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "TypeError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.uncompact"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "abs",
    "enumerate",
    "float",
    "list",
    "networkx.algorithms.threshold.creation_sequence_to_weights",
    "networkx.algorithms.threshold.uncompact",
    "networkx.algorithms.threshold.weights_to_creation_sequence",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_to_creation_sequence": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.tests.test_threshold.pytest",
    "networkx.algorithms.threshold.weights_to_creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_threshold.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_threshold.cnlti": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_threshold.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_threshold.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_threshold.nxt": {
  "data": {
   "shadows": "networkx.algorithms.threshold"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_threshold.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_tournament.DiGraph": {
  "data": {
   "shadows": "networkx.DiGraph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath": {
  "data": {
   "lineno": 68
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath.test_hamiltonian_cycle": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.DiGraph",
    "networkx.algorithms.tournament.hamiltonian_path",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestHamiltonianPath.test_path_is_hamiltonian": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.DiGraph",
    "networkx.algorithms.tournament.hamiltonian_path",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_bidirectional_edges": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_tournament"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_is_tournament": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_tournament"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_missing_edges": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_tournament"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestIsTournament.test_self_loops": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_tournament"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament": {
  "data": {
   "lineno": 51
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament.test_graph_is_tournament": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.algorithms.tournament.is_tournament",
    "networkx.algorithms.tournament.random_tournament",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestRandomTournament.test_graph_is_tournament_seed": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.algorithms.tournament.is_tournament",
    "networkx.algorithms.tournament.random_tournament",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability": {
  "data": {
   "lineno": 95
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_reachable_pair": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_reachable"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_same_node_is_reachable": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "all",
    "itertools.combinations",
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_reachable",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestReachability.test_unreachable_pair": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_reachable"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected": {
  "data": {
   "lineno": 118
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected.test_is_strongly_connected": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.TestStronglyConnected.test_not_strongly_connected": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tournament.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_tournament.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.hamiltonian_path": {
  "data": {
   "shadows": "networkx.algorithms.tournament.hamiltonian_path"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.is_reachable": {
  "data": {
   "shadows": "networkx.algorithms.tournament.is_reachable"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.is_strongly_connected": {
  "data": {
   "shadows": "networkx.algorithms.tournament.is_strongly_connected"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.is_tournament": {
  "data": {
   "shadows": "networkx.algorithms.tournament.is_tournament"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_tournament.random_tournament": {
  "data": {
   "shadows": "networkx.algorithms.tournament.random_tournament"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_triads.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads.sample": {
  "data": {
   "shadows": "random.sample"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads.test_all_triads": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "all",
    "any",
    "list",
    "networkx.DiGraph",
    "networkx.all_triads",
    "networkx.is_isomorphic",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_all_triplets": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "all",
    "any",
    "list",
    "networkx.DiGraph",
    "networkx.all_triplets",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_is_triad": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.is_triad",
    "networkx.karate_club_graph",
    "random.sample",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_random_triad": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.is_triad",
    "networkx.karate_club_graph",
    "networkx.random_triad",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triad_type": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.triad_type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triadic_census": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.triadic_census"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads.test_triads_by_type": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "any",
    "collections.defaultdict",
    "list",
    "networkx.DiGraph",
    "networkx.all_triads",
    "networkx.is_isomorphic",
    "networkx.triad_type",
    "networkx.triads_by_type",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_disconnecting_graph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "float",
    "networkx.closeness_vitality",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.closeness_vitality",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted_digraph": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.closeness_vitality",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_digraph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_cycle",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_multidigraph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_cycle",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_voronoi": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_inward": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.utils.pairwise",
    "networkx.voronoi_cells",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_unweighted": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.utils.pairwise",
    "networkx.voronoi_cells",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_weighted": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_isolates": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_unweighted": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.utils.pairwise",
    "networkx.voronoi_cells",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_weighted": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_unweighted": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_weighted": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_unweighted": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_weighted": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.voronoi_cells"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_voronoi.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_voronoi.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_wiener": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_wiener.DiGraph": {
  "data": {
   "shadows": "networkx.DiGraph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_complete_graph": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.wiener_index"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_directed": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.wiener_index"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_disconnected_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float",
    "networkx.empty_graph",
    "networkx.wiener_index"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.TestWienerIndex.test_path_graph": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.wiener_index",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_wiener.complete_graph": {
  "data": {
   "shadows": "networkx.complete_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_wiener.empty_graph": {
  "data": {
   "shadows": "networkx.empty_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_wiener.path_graph": {
  "data": {
   "shadows": "networkx.path_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_wiener.wiener_index": {
  "data": {
   "shadows": "networkx.wiener_index"
  },
  "type": "import"
 },
 "networkx.algorithms.threshold": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.threshold.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.threshold.betweenness_sequence": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "enumerate",
    "float",
    "len",
    "networkx.algorithms.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.cluster_sequence": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "degree_sequence",
    "enumerate",
    "float",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.triangle_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.creation_sequence": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "enumerate",
    "isinstance",
    "len",
    "make_compact"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.creation_sequence_to_weights": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "TypeError",
    "enumerate",
    "float",
    "int",
    "isinstance",
    "list",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.uncompact",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.degree_correlation": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "float",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.degree_sequence",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.degree_sequence": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.density": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.degree_sequence",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.eigenvalues": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.eigenvectors": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "len",
    "math.sqrt",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.make_compact",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.find_alternating_4_cycle": {
  "data": {
   "lineno": 353
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.find_creation_sequence": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "dict",
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.find_threshold_graph": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "find_creation_sequence",
    "networkx.algorithms.threshold.threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.is_threshold_graph": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "is_threshold_sequence",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.is_threshold_sequence": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.left_d_threshold_sequence": {
  "data": {
   "lineno": 891,
   "symbols_in_volume": [
    "ValueError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.make_compact": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "len",
    "networkx.algorithms.threshold.creation_sequence",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.threshold.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.threshold.random_threshold_sequence": {
  "data": {
   "lineno": 822,
   "symbols_in_volume": [
    "ValueError",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.right_d_threshold_sequence": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": [
    "ValueError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.shortest_path": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "int",
    "isinstance",
    "len",
    "max",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.uncompact",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.shortest_path_length": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "len",
    "list",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.uncompact",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.spectral_projection": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.threshold.swap_d": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.threshold_graph": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "isinstance",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.threshold.creation_sequence",
    "networkx.algorithms.threshold.uncompact",
    "networkx.empty_graph",
    "print",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.triangle_sequence": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.triangles": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.uncompact": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "networkx.algorithms.threshold.creation_sequence",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.threshold.weights_to_creation_sequence": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "enumerate",
    "isinstance",
    "len",
    "networkx.algorithms.threshold.make_compact"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tournament.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.algorithms.tournament.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.hamiltonian_path": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.tournament.index_satisfying",
    "networkx.utils.arbitrary_element",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.index_satisfying": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "NameError",
    "ValueError",
    "condition",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.is_path": {
  "data": {
   "shadows": "networkx.algorithms.simple_paths.is_simple_path"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.is_reachable": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "all",
    "is_closed",
    "networkx.utils.not_implemented_for",
    "two_neighborhood"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.is_reachable.is_closed": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "all",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.is_reachable.two_neighborhood": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "any",
    "networkx.algorithms.simple_paths.is_simple_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.is_strongly_connected": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.tournament.is_reachable",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.is_tournament": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "all",
    "itertools.combinations",
    "networkx.number_of_selfloops",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.tournament.random_tournament": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.DiGraph",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.score_sequence": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tournament.tournament_matrix": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.adjacency_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.beamsearch": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.beamsearch.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.beamsearch.bfs_beam_edges": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "generic_bfs_edges",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.beamsearch.bfs_beam_edges.successors": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "iter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.breadth_first_search.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_edges": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.breadth_first_search.generic_bfs_edges",
    "sort_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges",
    "sort_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_successors": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges",
    "sort_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_tree": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges",
    "sort_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.breadth_first_search.descendants_at_distance": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.generic_bfs_edges": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "StopIteration",
    "_neighbors",
    "callable",
    "collections.deque",
    "iter",
    "len",
    "neighbors",
    "next",
    "sort_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.depth_first_search": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.depth_first_search.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.depth_first_search.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_edges": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "len",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "len",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_predecessors": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_successors": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "list",
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_tree": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.edgebfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.edgebfs.FORWARD": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgebfs.REVERSE": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgebfs.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgebfs.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "collections.deque",
    "edge_id",
    "edges_from",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.traversal.edgebfs.REVERSE",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs.edge_id": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs.edge_bfs.edges_from": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.edgebfs.FORWARD",
    "networkx.algorithms.traversal.edgebfs.REVERSE"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgebfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.edgedfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.edgedfs.FORWARD": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.REVERSE": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "StopIteration",
    "edge_id",
    "edges_from",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.traversal.edgedfs.REVERSE",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs.edge_id": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs.edges_from": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.edgedfs.FORWARD",
    "networkx.algorithms.traversal.edgedfs.REVERSE"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_narrow": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.traversal.tests.test_beamsearch.identity",
    "networkx.bfs_beam_edges",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_wide": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.traversal.tests.test_beamsearch.identity",
    "networkx.bfs_beam_edges",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.identity": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_beamsearch.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_bfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.setup_class": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "list",
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_reverse": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_sorting": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "functools.partial",
    "list",
    "networkx.DiGraph",
    "networkx.bfs_edges",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.bfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree_isolates": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.bfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "dict",
    "networkx.bfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict",
    "networkx.bfs_successors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch": {
  "data": {
   "lineno": 52
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.setup_class": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.add_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_edges": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "list",
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_predecessor": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "dict",
    "networkx.bfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_successor": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "dict",
    "networkx.bfs_successors",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_tree": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.bfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_bfs.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_dfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.setup_class": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.dfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree_isolates": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.dfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_postorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.dfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_preorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.dfs_successors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch": {
  "data": {
   "lineno": 76
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.setup_class": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.add_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_edges": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_disconnected_edges": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_edges": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_postorder_nodes": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_postorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_predecessor": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.dfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_preorder_nodes": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_preorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_successor": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "networkx.dfs_successors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_tree": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.dfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.edgedfs.FORWARD",
    "networkx.algorithms.edgedfs.REVERSE",
    "networkx.edge_bfs"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.FORWARD": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph2": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore2": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgebfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_invalid": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs",
    "networkx.algorithms.traversal.tests.test_edgebfs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_none": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_original": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev2": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_empty": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph_single_source": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_ignore": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_rev": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multigraph": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.edge_bfs": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_edgebfs.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.edge_dfs",
    "networkx.algorithms.edgedfs.FORWARD",
    "networkx.algorithms.edgedfs.REVERSE"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS": {
  "data": {
   "lineno": 21
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.setup_class": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph2": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore2": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_invalid": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "networkx.algorithms.traversal.tests.test_edgedfs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_none": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_original": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev2": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_empty": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_graph": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_ignore": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_rev": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multigraph": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.branchings": {
  "data": {
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.tree.branchings.docstring_arborescence",
    "networkx.algorithms.tree.branchings.docstring_branching",
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tree.branchings.Edmonds": {
  "data": {
   "lineno": 256
  },
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.Edmonds.__init__": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.random_string"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds._init": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "enumerate",
    "networkx.NetworkXException",
    "networkx.algorithms.tree.branchings.KINDS",
    "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey",
    "networkx.algorithms.tree.branchings._max_weight",
    "networkx.algorithms.tree.branchings._min_weight",
    "networkx.algorithms.tree.branchings.random_string",
    "networkx.utils.UnionFind",
    "trans"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "Exception",
    "StopIteration",
    "desired_edge",
    "is_branching",
    "is_root",
    "iter",
    "len",
    "list",
    "networkx.algorithms.tree.branchings.INF",
    "networkx.algorithms.tree.branchings.get_path",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.desired_edge": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.INF"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.is_root": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.INF": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.KINDS": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.__init__": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edge": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edges_from": {
  "data": {
   "lineno": 216
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edge_with_key": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edges_from": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_node": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_nodes_from": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.STYLES": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.__all__": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings._max_weight": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings._min_weight": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.branching_weight": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.docstring_arborescence": {
  "data": {
   "lineno": 701
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.docstring_branching": {
  "data": {
   "lineno": 679
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.get_path": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "enumerate",
    "first_key",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.get_path.first_key": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.greedy_branching": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "TypeError",
    "enumerate",
    "networkx.DiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.tree.branchings.KINDS",
    "networkx.algorithms.tree.branchings.random_string",
    "networkx.utils.UnionFind",
    "networkx.utils.py_random_state",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.maximum_branching": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.maximum_spanning_arborescence": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "is_arborescence",
    "networkx.algorithms.tree.branchings.Edmonds",
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_branching": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_spanning_arborescence": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "is_arborescence",
    "networkx.algorithms.tree.branchings.Edmonds",
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.random_string": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.string",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.coding": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.coding.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.coding.NotATree": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.coding.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.coding.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.coding.from_nested_tuple": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "_make_tree",
    "enumerate",
    "itertools.chain",
    "networkx.bfs_edges",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.from_nested_tuple._make_tree": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "_make_tree",
    "len",
    "networkx.empty_graph",
    "networkx.tree.join"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.from_prufer_sequence": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "collections.Counter",
    "itertools.chain",
    "len",
    "networkx.empty_graph",
    "next",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.coding.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.coding.to_nested_tuple": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "_make_tuple",
    "networkx.NodeNotFound",
    "networkx.NotATree",
    "networkx.is_tree",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_nested_tuple._make_tuple": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "_make_tuple",
    "len",
    "set",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_prufer_sequence": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "len",
    "networkx.NetworkXPointlessConcept",
    "networkx.NotATree",
    "networkx.is_tree",
    "networkx.utils.not_implemented_for",
    "next",
    "parents",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.coding.to_prufer_sequence.parents": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.decomposition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.decomposition.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.decomposition.chordal_graph_cliques": {
  "data": {
   "shadows": "networkx.algorithms.chordal_graph_cliques"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.decomposition.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.decomposition.complete_to_chordal_graph": {
  "data": {
   "shadows": "networkx.algorithms.complete_to_chordal_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.decomposition.junction_tree": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "list",
    "networkx.Graph",
    "networkx.algorithms.chordal_graph_cliques",
    "networkx.algorithms.complete_to_chordal_graph",
    "networkx.algorithms.moral.moral_graph",
    "networkx.maximum_spanning_tree",
    "networkx.utils.not_implemented_for",
    "set",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.decomposition.moral": {
  "data": {
   "shadows": "networkx.algorithms.moral"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.decomposition.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.decomposition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tree.mst.boruvka_mst_edges",
    "networkx.algorithms.tree.mst.kruskal_mst_edges",
    "networkx.algorithms.tree.mst.prim_mst_edges"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tree.mst.ALGORITHMS": {
  "data": {
   "lineno": 299
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.mst.UnionFind": {
  "data": {
   "shadows": "networkx.utils.UnionFind"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.mst.boruvka_mst_edges": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "best_edge",
    "networkx.utils.UnionFind",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.boruvka_mst_edges.best_edge": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "math.isnan",
    "networkx.edge_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.isnan": {
  "data": {
   "shadows": "math.isnan"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.kruskal_mst_edges": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "filter_nan_edges",
    "networkx.utils.UnionFind",
    "operator.itemgetter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.kruskal_mst_edges.filter_nan_edges": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "ValueError",
    "math.isnan"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.maximum_spanning_edges": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "algo",
    "networkx.algorithms.tree.mst.ALGORITHMS",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.maximum_spanning_tree": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tree.mst.maximum_spanning_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.minimum_spanning_edges": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "algo",
    "networkx.algorithms.tree.mst.ALGORITHMS",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.minimum_spanning_tree": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "networkx.algorithms.tree.mst.minimum_spanning_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.mst.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.mst.prim_mst_edges": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "ValueError",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "math.isnan",
    "next",
    "pop",
    "push",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.operations": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.operations.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.operations.accumulate": {
  "data": {
   "shadows": "itertools.accumulate"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.operations.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.operations.join": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "functools.partial",
    "itertools.accumulate",
    "itertools.chain",
    "itertools.chain.from_iterable",
    "len",
    "networkx.convert_node_labels_to_integers",
    "networkx.empty_graph",
    "next",
    "relabel",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.operations.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.operations.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.recognition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.recognition.__all__": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.recognition.is_arborescence": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "is_tree",
    "max",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_branching": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "is_forest",
    "max",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_forest": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.connected_components",
    "networkx.exception.NetworkXPointlessConcept",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_tree": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "is_connected",
    "len",
    "networkx.exception.NetworkXPointlessConcept",
    "networkx.is_connected",
    "networkx.is_weakly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_branchings": {
  "data": {
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.tree.tests.test_branchings.np",
    "networkx.algorithms.tree.tests.test_branchings.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_branchings.G1": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.from_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.G2": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.algorithms.tree.tests.test_branchings.np",
    "networkx.from_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.G_array": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.np",
    "networkx.algorithms.tree.tests.test_branchings.sorted_edges",
    "print",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.branchings": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.build_branching": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1a": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2b": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.recognition": {
  "data": {
   "shadows": "networkx.algorithms.tree.recognition"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.sorted_edges": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_discard": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "KeyError",
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.Edmonds",
    "networkx.algorithms.tree.tests.test_branchings.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_multigraph": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_normal_graph": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxarbor": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxbranch": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_minbranch": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1",
    "networkx.from_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxarbor": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxbranch": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_minarbor": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch1": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch2": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max1": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max2": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max3": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_min": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1a": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1b": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mixed_nodetypes": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mst": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_arborescence2": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching1": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2a": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2b": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple": {
  "data": {
   "lineno": 75
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_canonical_form": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_nested_tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_decoding": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.from_nested_tuple",
    "networkx.full_rary_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_encoding": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.full_rary_tree",
    "networkx.testing.assert_nodes_equal",
    "networkx.to_nested_tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_nontree": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.NotATree",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.cycle_graph",
    "networkx.to_nested_tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_sensible_relabeling": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "list",
    "networkx.from_nested_tuple",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_unknown_root": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.NodeNotFound",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.path_graph",
    "networkx.to_nested_tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_bad_integer_labels": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "KeyError",
    "networkx.Graph",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.to_prufer_sequence",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "list",
    "networkx.from_prufer_sequence",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding2": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "list",
    "networkx.from_prufer_sequence",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_encoding": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_prufer_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_inverse": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "itertools.product",
    "list",
    "networkx.from_prufer_sequence",
    "networkx.nonisomorphic_trees",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.to_prufer_sequence",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_nontree": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.NotATree",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.cycle_graph",
    "networkx.to_prufer_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_null_graph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.null_graph",
    "networkx.to_prufer_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_trivial_graph": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_coding.pytest",
    "networkx.to_prufer_sequence",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_coding.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_coding.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_coding.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_coding.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_coding.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_decomposition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_decomposition.junction_tree": {
  "data": {
   "shadows": "networkx.algorithms.tree.decomposition.junction_tree"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_decomposition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_cascade": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.tree.decomposition.junction_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_confounders": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.tree.decomposition.junction_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_edges": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.tree.decomposition.junction_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_nodes": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.tree.decomposition.junction_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_undirected": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tree.decomposition.junction_tree",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.setup_method": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_attributes": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_disconnected": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.Graph",
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_empty_graph": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "list",
    "networkx.empty_graph",
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_isolated_node": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.Graph",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_edges": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.maximum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_tree": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.maximum_spanning_tree",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_edges": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_tree": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "list",
    "max",
    "min",
    "networkx.algorithms.tree.tests.test_mst.pytest",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights_order": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "float",
    "max",
    "min",
    "networkx.Graph",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_weight_attribute": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.maximum_spanning_tree",
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_without_data": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_max": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "list",
    "max_edges",
    "networkx.MultiGraph",
    "networkx.maximum_spanning_edges",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_min": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "list",
    "min_edges",
    "networkx.MultiGraph",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestBoruvka": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestBoruvka.test_unicode_name": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.minimum_spanning_edges",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestKruskal": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.minimum_spanning_tree",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree_max": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.maximum_spanning_tree",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_mst.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_mst.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_mst.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_mst.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_mst.test_unknown_algorithm": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.algorithms.tree.tests.test_mst.pytest",
    "networkx.minimum_spanning_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_basic": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.full_rary_tree",
    "networkx.is_isomorphic",
    "networkx.join",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_empty_sequence": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "len",
    "networkx.join"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations.TestJoin.test_single": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "list",
    "networkx.empty_graph",
    "networkx.join",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_operations.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_operations.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_operations.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_recognition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestDirectedTreeRecognition": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.setup_class": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "networkx.compose",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_forest": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_forest": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_tree": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_tree": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_recognition.pytest",
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest2": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_recognition.pytest",
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_recognition.pytest",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree2": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.tree.tests.test_recognition.pytest",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_recognition.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_dag_nontree": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_directed_acyclic_graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_disconnected_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_emptybranch": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_multicycle": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.is_directed_acyclic_graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence1": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence2": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching1": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching2": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_path": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads": {
  "data": {
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.triads.TRIAD_NAMES",
    "networkx.algorithms.triads.TRICODES"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.triads.TRIAD_NAMES": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.TRICODES": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.TRICODE_TO_NAME": {
  "data": {
   "lineno": 117
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.triads._tricode": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.all_triads": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.all_triplets": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.is_triad": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "any",
    "isinstance",
    "networkx.Graph",
    "networkx.is_directed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.random_triad": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "random.sample"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.sample": {
  "data": {
   "shadows": "random.sample"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.triad_type": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "itertools.permutations",
    "len",
    "networkx.NetworkXAlgorithmError",
    "networkx.algorithms.triads.is_triad",
    "networkx.utils.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.triadic_census": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.algorithms.triads.TRIAD_NAMES",
    "networkx.algorithms.triads.TRICODE_TO_NAME",
    "networkx.algorithms.triads._tricode",
    "networkx.utils.not_implemented_for",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.triads_by_type": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "collections.defaultdict",
    "list",
    "networkx.algorithms.triads.all_triads",
    "networkx.utils.not_implemented_for",
    "triad_type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.vitality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.vitality.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.vitality.closeness_vitality": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.wiener_index",
    "set",
    "vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.vitality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.vitality.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.voronoi": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.voronoi.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.voronoi.groups": {
  "data": {
   "shadows": "networkx.utils.groups"
  },
  "type": "import"
 },
 "networkx.algorithms.voronoi.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.voronoi.voronoi_cells": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.multi_source_dijkstra_path",
    "networkx.utils.groups",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.wiener": {
  "data": {
   "symbols_in_volume": [
    "itertools.chain.from_iterable"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.wiener.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.wiener.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.wiener.chaini": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.wiener.spl": {
  "data": {
   "shadows": "shortest_path_length"
  },
  "type": "import"
 },
 "networkx.algorithms.wiener.wiener_index": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "is_connected",
    "is_strongly_connected",
    "networkx.algorithms.wiener.chaini",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.coreviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.coreviews.AdjacencyView": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AtlasView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.AdjacencyView.__getitem__": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AtlasView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AdjacencyView.copy": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.AtlasView.__getitem__": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__getstate__": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__init__": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__iter__": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__len__": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__repr__": {
  "data": {
   "lineno": 59
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__setstate__": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.__str__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.AtlasView.copy": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.FilterAdjacency.__getitem__": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.coreviews.FilterAtlas"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__getitem__.new_node_ok": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__init__": {
  "data": {
   "lineno": 303
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__iter__": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__len__": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__repr__": {
  "data": {
   "lineno": 354
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.__str__": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAdjacency.copy": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.FilterAtlas.__getitem__": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__init__": {
  "data": {
   "lineno": 265
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__iter__": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__len__": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__repr__": {
  "data": {
   "lineno": 298
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.__str__": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterAtlas.copy": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "networkx.classes.coreviews.FilterAdjacency"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.__getitem__": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.coreviews.FilterMultiInner"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.__getitem__.edge_ok": {
  "data": {
   "lineno": 409
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiAdjacency.copy": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "networkx.classes.coreviews.FilterAdjacency"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.FilterMultiInner.__getitem__": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.coreviews.FilterAtlas"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.__getitem__.new_node_ok": {
  "data": {
   "lineno": 381
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.__iter__": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.FilterMultiInner.copy": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "AttributeError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "networkx.classes.coreviews.MultiAdjacencyView": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.MultiAdjacencyView.__getitem__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.MultiAdjacencyView.copy": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.UnionAdjacency.__getitem__": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAtlas"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__getstate__": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__init__": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__iter__": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__len__": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__repr__": {
  "data": {
   "lineno": 210
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__setstate__": {
  "data": {
   "lineno": 185
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.__str__": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAdjacency.copy": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "collections.abc.Mapping"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.UnionAtlas.__getitem__": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__getstate__": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__init__": {
  "data": {
   "lineno": 130
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__iter__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "iter",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__len__": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__repr__": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__setstate__": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.__str__": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionAtlas.copy": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiAdjacency": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAdjacency"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.UnionMultiAdjacency.__getitem__": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionMultiInner"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiInner": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAtlas"
   ]
  },
  "type": "class"
 },
 "networkx.classes.coreviews.UnionMultiInner.__getitem__": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAtlas"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.UnionMultiInner.copy": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.coreviews.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.classes.digraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.digraph.AdjacencyView": {
  "data": {
   "shadows": "networkx.classes.coreviews.AdjacencyView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.DiDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.DiDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.DiGraph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.classes.graph.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.digraph.DiGraph.__init__": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edge": {
  "data": {
   "lineno": 574
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edges_from": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_node": {
  "data": {
   "lineno": 378
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_nodes_from": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.adj": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.clear": {
  "data": {
   "lineno": 1075
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.clear_edges": {
  "data": {
   "lineno": 1095
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.degree": {
  "data": {
   "lineno": 934,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.edges": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutEdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_predecessor": {
  "data": {
   "lineno": 773
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_successor": {
  "data": {
   "lineno": 766
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_degree": {
  "data": {
   "lineno": 981,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_edges": {
  "data": {
   "lineno": 903,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InEdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_directed": {
  "data": {
   "lineno": 1117
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_multigraph": {
  "data": {
   "lineno": 1113
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.out_degree": {
  "data": {
   "lineno": 1028,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.pred": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.predecessors": {
  "data": {
   "lineno": 812,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edge": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edges_from": {
  "data": {
   "lineno": 734
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_node": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_nodes_from": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.reverse": {
  "data": {
   "lineno": 1200,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.graphviews.reverse_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.succ": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.successors": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.to_undirected": {
  "data": {
   "lineno": 1121,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.graph.Graph",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.Graph": {
  "data": {
   "shadows": "networkx.classes.graph.Graph"
  },
  "type": "import"
 },
 "networkx.classes.digraph.InDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.InDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.InEdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.InEdgeView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.digraph.OutDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.OutDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.OutEdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.OutEdgeView"
  },
  "type": "import"
 },
 "networkx.classes.digraph.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.classes.digraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.digraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.filters": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.filters.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.classes.filters.hide_diedges": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.classes.filters.hide_edges": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.filters.hide_multidiedges": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "networkx.classes.filters.hide_multiedges": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.filters.hide_nodes": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.filters.no_filter": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "networkx.classes.filters.show_diedges": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "networkx.classes.filters.show_edges": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.filters.show_multidiedges": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "networkx.classes.filters.show_multiedges": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.filters.show_nodes": {
  "data": {
   "lineno": 50
  },
  "type": "class"
 },
 "networkx.classes.filters.show_nodes.__call__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "networkx.classes.filters.show_nodes.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.function.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.classes.function.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.classes.function.add_cycle": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "itertools.chain",
    "networkx.utils.pairwise",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.add_path": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "itertools.chain",
    "networkx.utils.pairwise",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.add_star": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "networkx.classes.function.edges",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.all_neighbors": {
  "data": {
   "lineno": 851,
   "symbols_in_volume": [
    "itertools.chain"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.classes.function.common_neighbors": {
  "data": {
   "lineno": 921,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.create_empty_copy": {
  "data": {
   "lineno": 531
  },
  "type": "function"
 },
 "networkx.classes.function.degree": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "networkx.classes.function.degree_histogram": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "collections.Counter",
    "max",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.density": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.classes.function.number_of_edges",
    "networkx.classes.function.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.edge_subgraph": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "networkx.classes.function.edges",
    "networkx.classes.function.nodes",
    "networkx.filters",
    "networkx.graphviews.subgraph_view",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.edges": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "networkx.classes.function.freeze": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.classes.function.frozen"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.frozen": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.get_edge_attributes": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "networkx.classes.function.edges"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.get_node_attributes": {
  "data": {
   "lineno": 694
  },
  "type": "function"
 },
 "networkx.classes.function.induced_subgraph": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "networkx.filters.show_nodes",
    "networkx.graphviews.subgraph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.info": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.NetworkXError",
    "str",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_directed": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "networkx.classes.function.is_empty": {
  "data": {
   "lineno": 1065,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_frozen": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_negatively_weighted": {
  "data": {
   "lineno": 1012,
   "symbols_in_volume": [
    "any",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_path": {
  "data": {
   "lineno": 1237,
   "symbols_in_volume": [
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_weighted": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": [
    "all",
    "is_empty",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.neighbors": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "networkx.classes.function.nodes": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "networkx.classes.function.nodes_with_selfloops": {
  "data": {
   "lineno": 1088
  },
  "type": "function"
 },
 "networkx.classes.function.non_edges": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": [
    "networkx.classes.function.nodes",
    "networkx.classes.function.non_neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.non_neighbors": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "networkx.classes.function.neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.classes.function.number_of_edges": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "networkx.classes.function.number_of_nodes": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "networkx.classes.function.number_of_selfloops": {
  "data": {
   "lineno": 1212,
   "symbols_in_volume": [
    "networkx.selfloop_edges",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.function.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.classes.function.path_weight": {
  "data": {
   "lineno": 1260,
   "symbols_in_volume": [
    "min",
    "networkx.NetworkXNoPath",
    "networkx.is_path",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.restricted_view": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "networkx.classes.function.edges",
    "networkx.classes.function.nodes",
    "networkx.filters",
    "networkx.graphviews.subgraph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.reverse_view": {
  "data": {
   "shadows": "networkx.classes.graphviews.reverse_view"
  },
  "type": "import"
 },
 "networkx.classes.function.selfloop_edges": {
  "data": {
   "lineno": 1115,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.set_edge_attributes": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.set_node_attributes": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.subgraph": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "networkx.classes.function.subgraph_view": {
  "data": {
   "shadows": "networkx.classes.graphviews.subgraph_view"
  },
  "type": "import"
 },
 "networkx.classes.function.to_directed": {
  "data": {
   "lineno": 511
  },
  "type": "function"
 },
 "networkx.classes.function.to_undirected": {
  "data": {
   "lineno": 521
  },
  "type": "function"
 },
 "networkx.classes.graph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.graph.AdjacencyView": {
  "data": {
   "shadows": "networkx.classes.coreviews.AdjacencyView"
  },
  "type": "import"
 },
 "networkx.classes.graph.DegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.DegreeView"
  },
  "type": "import"
 },
 "networkx.classes.graph.EdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.EdgeView"
  },
  "type": "import"
 },
 "networkx.classes.graph.Graph": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.graph.Graph.__contains__": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__getitem__": {
  "data": {
   "lineno": 441
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__init__": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__iter__": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__len__": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__str__": {
  "data": {
   "lineno": 372
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edge": {
  "data": {
   "lineno": 820
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edges_from": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": [
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_node": {
  "data": {
   "lineno": 467
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_nodes_from": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_weighted_edges_from": {
  "data": {
   "lineno": 943
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.adj": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.adjacency": {
  "data": {
   "lineno": 1345,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.clear": {
  "data": {
   "lineno": 1405
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.clear_edges": {
  "data": {
   "lineno": 1424
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.copy": {
  "data": {
   "lineno": 1447,
   "symbols_in_volume": [
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.degree": {
  "data": {
   "lineno": 1365,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.edge_subgraph": {
  "data": {
   "lineno": 1713,
   "symbols_in_volume": [
    "networkx.edge_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.edges": {
  "data": {
   "lineno": 1242,
   "symbols_in_volume": [
    "networkx.classes.reportviews.EdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.get_edge_data": {
  "data": {
   "lineno": 1299,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_edge": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_node": {
  "data": {
   "lineno": 794,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_directed": {
  "data": {
   "lineno": 1443
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_multigraph": {
  "data": {
   "lineno": 1439
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.name": {
  "data": {
   "lineno": 368
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter": {
  "data": {
   "lineno": 1848,
   "symbols_in_volume": [
    "bunch_iter",
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter.bunch_iter": {
  "data": {
   "lineno": 1894,
   "symbols_in_volume": [
    "TypeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.neighbors": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nodes": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "networkx.classes.reportviews.NodeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_edges": {
  "data": {
   "lineno": 1796,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_nodes": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.order": {
  "data": {
   "lineno": 774,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edge": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edges_from": {
  "data": {
   "lineno": 1008
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_node": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_nodes_from": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": [
    "KeyError",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.size": {
  "data": {
   "lineno": 1753,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.subgraph": {
  "data": {
   "lineno": 1649,
   "symbols_in_volume": [
    "hasattr",
    "networkx.filters.show_nodes",
    "networkx.graphviews.subgraph_view",
    "subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_directed": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": [
    "copy.deepcopy",
    "graph_class",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_directed_class": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_undirected": {
  "data": {
   "lineno": 1592,
   "symbols_in_volume": [
    "copy.deepcopy",
    "graph_class",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_undirected_class": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.classes.graph.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.update": {
  "data": {
   "lineno": 1042,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.graph.NodeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.NodeView"
  },
  "type": "import"
 },
 "networkx.classes.graph.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.classes.graph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.graphviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.graphviews.FilterAdjacency": {
  "data": {
   "shadows": "networkx.classes.coreviews.FilterAdjacency"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.FilterAtlas": {
  "data": {
   "shadows": "networkx.classes.coreviews.FilterAtlas"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.FilterMultiAdjacency": {
  "data": {
   "shadows": "networkx.classes.coreviews.FilterMultiAdjacency"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.UnionAdjacency": {
  "data": {
   "shadows": "networkx.classes.coreviews.UnionAdjacency"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.UnionMultiAdjacency": {
  "data": {
   "shadows": "networkx.classes.coreviews.UnionMultiAdjacency"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.__all__": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "networkx.classes.graphviews.generic_graph_view": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAdjacency",
    "networkx.classes.coreviews.UnionMultiAdjacency",
    "networkx.empty_graph",
    "networkx.exception.NetworkXError",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graphviews.no_filter": {
  "data": {
   "shadows": "networkx.classes.filters.no_filter"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.graphviews.reverse_view": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.classes.graphviews.generic_graph_view",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graphviews.subgraph_view": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "Adj",
    "filter_edge",
    "networkx.classes.coreviews.FilterAdjacency",
    "networkx.classes.coreviews.FilterAtlas",
    "networkx.classes.coreviews.FilterMultiAdjacency",
    "networkx.classes.filters.no_filter",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graphviews.subgraph_view.reverse_edge": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "filter_edge"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.multidigraph.DiGraph": {
  "data": {
   "shadows": "networkx.classes.digraph.DiGraph"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.DiMultiDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.DiMultiDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.InMultiDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.InMultiDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.InMultiEdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.InMultiEdgeView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.MultiAdjacencyView": {
  "data": {
   "shadows": "networkx.classes.coreviews.MultiAdjacencyView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.MultiDiGraph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.digraph.DiGraph",
    "networkx.classes.multigraph.MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.multidigraph.MultiDiGraph.__init__": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.classes.digraph.DiGraph.__init__"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.add_edge": {
  "data": {
   "lineno": 357
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.adj": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "networkx.classes.coreviews.MultiAdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.degree": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiMultiDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.edges": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutMultiEdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_degree": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InMultiDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_edges": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InMultiEdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_directed": {
  "data": {
   "lineno": 770
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_multigraph": {
  "data": {
   "lineno": 766
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.out_degree": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutMultiDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.pred": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "networkx.classes.coreviews.MultiAdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.remove_edge": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.reverse": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.graphviews.reverse_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.succ": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "networkx.classes.coreviews.MultiAdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.to_undirected": {
  "data": {
   "lineno": 774,
   "symbols_in_volume": [
    "copy.deepcopy",
    "graph_class",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiGraph": {
  "data": {
   "shadows": "networkx.classes.multigraph.MultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.OutMultiDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.OutMultiDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.OutMultiEdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.OutMultiEdgeView"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.multigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.multigraph.Graph": {
  "data": {
   "shadows": "networkx.classes.graph.Graph"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiAdjacencyView": {
  "data": {
   "shadows": "networkx.classes.coreviews.MultiAdjacencyView"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiDegreeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.MultiDegreeView"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiEdgeView": {
  "data": {
   "shadows": "networkx.classes.reportviews.MultiEdgeView"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiGraph": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.graph.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.multigraph.MultiGraph.__init__": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "networkx.classes.graph.Graph.__init__"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edge": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edges_from": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.adj": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "networkx.classes.coreviews.MultiAdjacencyView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.copy": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": [
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.degree": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": [
    "networkx.classes.reportviews.MultiDegreeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.edges": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "networkx.classes.reportviews.MultiEdgeView",
    "property"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.get_edge_data": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.has_edge": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_directed": {
  "data": {
   "lineno": 874
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_multigraph": {
  "data": {
   "lineno": 870
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.new_edge_key": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "KeyError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.number_of_edges": {
  "data": {
   "lineno": 1078,
   "symbols_in_volume": [
    "KeyError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edge": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edges_from": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_directed": {
  "data": {
   "lineno": 968,
   "symbols_in_volume": [
    "copy.deepcopy",
    "graph_class",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_directed_class": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_undirected": {
  "data": {
   "lineno": 1025,
   "symbols_in_volume": [
    "copy.deepcopy",
    "graph_class",
    "networkx.graphviews.generic_graph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_undirected_class": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "networkx.classes.multigraph.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.networkx.classes.coreviews": {
  "data": {
   "shadows": "networkx.classes.coreviews"
  },
  "type": "import"
 },
 "networkx.classes.networkx.classes.filters": {
  "data": {
   "shadows": "networkx.classes.filters"
  },
  "type": "import"
 },
 "networkx.classes.networkx.classes.graphviews": {
  "data": {
   "shadows": "networkx.classes.graphviews"
  },
  "type": "import"
 },
 "networkx.classes.networkx.classes.reportviews": {
  "data": {
   "shadows": "networkx.classes.reportviews"
  },
  "type": "import"
 },
 "networkx.classes.ordered": {
  "data": {
   "symbols_in_volume": [
    "networkx.classes.ordered.__all__"
   ]
  },
  "type": "module"
 },
 "networkx.classes.ordered.OrderedDiGraph": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "networkx.classes.ordered.OrderedGraph": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiDiGraph": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiGraph": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.__all__": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "networkx.classes.reportviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.reportviews.DegreeView": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.DegreeView.__getitem__": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DegreeView.__iter__": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView": {
  "data": {
   "lineno": 306
  },
  "type": "class"
 },
 "networkx.classes.reportviews.DiDegreeView.__call__": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__getitem__": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__init__": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "hasattr",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__iter__": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__len__": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__repr__": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiDegreeView.__str__": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiMultiDegreeView": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.DiMultiDegreeView.__getitem__": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.DiMultiDegreeView.__iter__": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.EdgeDataView.__contains__": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView.__iter__": {
  "data": {
   "lineno": 772
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeDataView.__len__": {
  "data": {
   "lineno": 769,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView": {
  "data": {
   "lineno": 1037,
   "symbols_in_volume": [
    "networkx.classes.reportviews.EdgeDataView",
    "networkx.classes.reportviews.OutEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.EdgeView.__contains__": {
  "data": {
   "lineno": 1125,
   "symbols_in_volume": [
    "KeyError",
    "ValueError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView.__iter__": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.EdgeView.__len__": {
  "data": {
   "lineno": 1112,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InDegreeView": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InDegreeView.__getitem__": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InDegreeView.__iter__": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeDataView": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InEdgeDataView.__contains__": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeDataView.__iter__": {
  "data": {
   "lineno": 797
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView": {
  "data": {
   "lineno": 1133,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InEdgeDataView",
    "networkx.classes.reportviews.OutEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InEdgeView.__contains__": {
  "data": {
   "lineno": 1155,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__getitem__": {
  "data": {
   "lineno": 1162
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__init__": {
  "data": {
   "lineno": 1145,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__iter__": {
  "data": {
   "lineno": 1150
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InEdgeView.__setstate__": {
  "data": {
   "lineno": 1138,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiDegreeView": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiDegreeView.__getitem__": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiDegreeView.__iter__": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutMultiEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView.__contains__": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeDataView.__iter__": {
  "data": {
   "lineno": 946
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView": {
  "data": {
   "lineno": 1235,
   "symbols_in_volume": [
    "networkx.classes.reportviews.InMultiEdgeDataView",
    "networkx.classes.reportviews.OutMultiEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__contains__": {
  "data": {
   "lineno": 1258,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__getitem__": {
  "data": {
   "lineno": 1272
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__init__": {
  "data": {
   "lineno": 1247,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__iter__": {
  "data": {
   "lineno": 1252
  },
  "type": "function"
 },
 "networkx.classes.reportviews.InMultiEdgeView.__setstate__": {
  "data": {
   "lineno": 1240,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.Mapping": {
  "data": {
   "shadows": "collections.abc.Mapping"
  },
  "type": "import"
 },
 "networkx.classes.reportviews.MultiDegreeView": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.MultiDegreeView.__getitem__": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.MultiDegreeView.__iter__": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeDataView": {
  "data": {
   "lineno": 902,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutMultiEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.MultiEdgeDataView.__contains__": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeDataView.__iter__": {
  "data": {
   "lineno": 907
  },
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeView": {
  "data": {
   "lineno": 1214,
   "symbols_in_volume": [
    "networkx.classes.reportviews.MultiEdgeDataView",
    "networkx.classes.reportviews.OutMultiEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.MultiEdgeView.__iter__": {
  "data": {
   "lineno": 1224
  },
  "type": "function"
 },
 "networkx.classes.reportviews.MultiEdgeView.__len__": {
  "data": {
   "lineno": 1221,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "collections.abc.Set"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.NodeDataView.__contains__": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "TypeError",
    "ValueError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__getitem__": {
  "data": {
   "lineno": 286
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__getstate__": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__init__": {
  "data": {
   "lineno": 243
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__iter__": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__len__": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__repr__": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "dict",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__setstate__": {
  "data": {
   "lineno": 238
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView.__str__": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeDataView._from_iterable": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "TypeError",
    "classmethod",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "collections.abc.Mapping",
    "collections.abc.Set"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.NodeView.__call__": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "NodeDataView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__contains__": {
  "data": {
   "lineno": 190
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__getitem__": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__getstate__": {
  "data": {
   "lineno": 170
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__init__": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__iter__": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__len__": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__repr__": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__setstate__": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.__str__": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView._from_iterable": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "classmethod",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.NodeView.data": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "NodeDataView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutDegreeView": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutDegreeView.__getitem__": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutDegreeView.__iter__": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView": {
  "data": {
   "lineno": 663
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__contains__": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__getstate__": {
  "data": {
   "lineno": 676
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__init__": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__iter__": {
  "data": {
   "lineno": 714
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__len__": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__repr__": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__setstate__": {
  "data": {
   "lineno": 684
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeDataView.__str__": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView": {
  "data": {
   "lineno": 973,
   "symbols_in_volume": [
    "collections.abc.Mapping",
    "collections.abc.Set",
    "networkx.classes.reportviews.OutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutEdgeView.__call__": {
  "data": {
   "lineno": 1019
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__contains__": {
  "data": {
   "lineno": 1006,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__getitem__": {
  "data": {
   "lineno": 1014
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__getstate__": {
  "data": {
   "lineno": 978
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__init__": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__iter__": {
  "data": {
   "lineno": 1001
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__len__": {
  "data": {
   "lineno": 998,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__repr__": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__setstate__": {
  "data": {
   "lineno": 981,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.__str__": {
  "data": {
   "lineno": 1030,
   "symbols_in_volume": [
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView._from_iterable": {
  "data": {
   "lineno": 986,
   "symbols_in_volume": [
    "classmethod",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutEdgeView.data": {
  "data": {
   "lineno": 1024
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiDegreeView": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "networkx.classes.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiDegreeView.__getitem__": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiDegreeView.__iter__": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView": {
  "data": {
   "lineno": 815,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__contains__": {
  "data": {
   "lineno": 881,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__getstate__": {
  "data": {
   "lineno": 820
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__init__": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": [
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__iter__": {
  "data": {
   "lineno": 873
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__len__": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeDataView.__setstate__": {
  "data": {
   "lineno": 829
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": [
    "networkx.classes.reportviews.OutEdgeView",
    "networkx.classes.reportviews.OutMultiEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__call__": {
  "data": {
   "lineno": 1203
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__contains__": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__getitem__": {
  "data": {
   "lineno": 1199
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__iter__": {
  "data": {
   "lineno": 1179
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.__len__": {
  "data": {
   "lineno": 1174,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.reportviews.OutMultiEdgeView.data": {
  "data": {
   "lineno": 1208
  },
  "type": "function"
 },
 "networkx.classes.reportviews.Set": {
  "data": {
   "shadows": "collections.abc.Set"
  },
  "type": "import"
 },
 "networkx.classes.reportviews.__all__": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "networkx.classes.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.historical_tests": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.setup_class": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "TypeError",
    "networkx.classes.tests.historical_tests.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from": {
  "data": {
   "lineno": 187
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "list",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.classes.tests.historical_tests.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_contains": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_copy": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree2": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.classes.tests.historical_tests.pytest",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_iterators": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.historical_tests.pytest",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.testing.assert_edges_equal",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_name": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "set",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "list",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.historical_tests.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_issue": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.historical_tests.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_order_size": {
  "data": {
   "lineno": 314
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "TypeError",
    "list",
    "networkx.classes.tests.historical_tests.pytest",
    "set",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "list",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "iter",
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_coreviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView": {
  "data": {
   "lineno": 62
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.setup": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AdjacencyView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_copy": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_getitem": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_items": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_iter": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_len": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_pickle": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_repr": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAdjacencyView.test_str": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "dict",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.setup": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.classes.coreviews.AtlasView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_copy": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_getitem": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_items": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_iter": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_len": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_pickle": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_repr": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestAtlasView.test_str": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs": {
  "data": {
   "lineno": 315
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.setup": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.graphviews.subgraph_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_copy": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "SubGraph",
    "networkx.filters.hide_nodes",
    "networkx.path_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_hide_show_nodes": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "SubGraph",
    "networkx.filters.hide_nodes",
    "networkx.path_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_str_repr": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "SubGraph",
    "networkx.filters.hide_nodes",
    "networkx.path_graph",
    "repr",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.TestAdjacencyView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.setup": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.classes.coreviews.MultiAdjacencyView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_copy": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_getitem": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency": {
  "data": {
   "lineno": 199
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.setup": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAdjacency"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_copy": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_getitem": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_iter": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_len": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_pickle": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_repr": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_str": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "dict",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas": {
  "data": {
   "lineno": 143
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.setup": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionAtlas"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_copy": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_getitem": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_items": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_iter": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_len": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_pickle": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_repr": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionAtlas.test_str": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "dict",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.TestUnionAdjacency"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.setup": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionMultiAdjacency"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_copy": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_getitem": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.classes.tests.test_coreviews.TestUnionAdjacency"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.setup": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "networkx.classes.coreviews.UnionMultiInner"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_copy": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_getitem": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "KeyError",
    "networkx.classes.tests.test_coreviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_len": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_coreviews.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_coreviews.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_coreviews.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph.BaseDiGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_edges_data": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_in_degree_weighted": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_out_degree_weighted": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_data": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_data": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_hashable": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "Foo",
    "list",
    "networkx.DiGraph",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_hashable.Foo": {
  "data": {
   "lineno": 124
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.setup_method": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge": {
  "data": {
   "lineno": 210
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "TypeError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_clear": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_clear_edges": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_data_input": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_digraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 244
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph": {
  "data": {
   "lineno": 273
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph.setup_method": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestEdgeSubgraph.test_pred_succ": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph._TestGraph": {
  "data": {
   "shadows": "TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph._TestGraphEdgeSubgraph": {
  "data": {
   "shadows": "TestEdgeSubgraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setup_class": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "networkx.classes.tests.test_digraph_historical.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "networkx.classes.tests.test_digraph_historical.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "networkx.classes.tests.test_digraph_historical.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph_historical.networkx",
    "networkx.classes.tests.test_digraph_historical.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_filters": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_diedges": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.hide_diedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_edges": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.hide_edges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multidiedges": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.hide_multidiedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multiedges": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.hide_multiedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_hide_nodes": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "TypeError",
    "f",
    "networkx.classes.filters.hide_nodes",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_no_filter": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.filters.no_filter",
    "nf"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_diedges": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.show_diedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_edges": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.show_edges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_multidiedges": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.show_multidiedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_multiedges": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "f",
    "factory",
    "networkx.classes.filters.show_multiedges",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.TestFilterFactory.test_show_nodes": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "TypeError",
    "f",
    "networkx.classes.filters.show_nodes",
    "networkx.classes.tests.test_filters.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_filters.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_filters.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors": {
  "data": {
   "lineno": 460
  },
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setup_class": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "classmethod",
    "networkx.common_neighbors",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setup_class.test_func": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_K5": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_P3": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_S4": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom1": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom2": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_digraph": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.classes.tests.test_function.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_nonexistent_nodes": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_function.pytest",
    "networkx.common_neighbors",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestFunction.setup_method": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_cycle": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "list",
    "networkx.add_cycle",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_path": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "iter",
    "list",
    "networkx.add_path",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_add_star": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "list",
    "networkx.add_star",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_create_empty_copy": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "list",
    "networkx.create_empty_copy",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "list",
    "networkx.degree",
    "networkx.testing.utils.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree_histogram": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.degree_histogram"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.density"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density_selfloop": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.density"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edge_subgraph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "networkx.edge_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edges": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "list",
    "networkx.edges",
    "networkx.testing.utils.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_freeze": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_function.pytest",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_function.pytest",
    "networkx.info",
    "networkx.path_graph",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info_digraph": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.classes.tests.test_function.pytest",
    "networkx.info"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_directed": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.is_directed"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_frozen": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "networkx.freeze",
    "networkx.is_frozen"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_negatively_weighted": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_function.pytest",
    "networkx.is_negatively_weighted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_weighted": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_function.pytest",
    "networkx.is_weighted",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_neighbors": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "list",
    "networkx.neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_neighbors_complete_graph": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.classes.tests.test_function.random",
    "networkx.complete_graph",
    "networkx.neighbors",
    "networkx.path_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_nodes": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "list",
    "networkx.nodes",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_edges": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.non_edges",
    "networkx.path_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_neighbors": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.classes.tests.test_function.random",
    "networkx.complete_graph",
    "networkx.non_neighbors",
    "networkx.path_graph",
    "networkx.star_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_edges": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.number_of_edges"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_nodes": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_restricted_view": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.restricted_view",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_subgraph": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.induced_subgraph",
    "networkx.subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.test_get_edge_attributes": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.get_edge_attributes",
    "networkx.path_graph",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_get_node_attributes": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.get_node_attributes",
    "networkx.path_graph",
    "networkx.set_node_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_is_empty": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.is_empty",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_ispath": {
  "data": {
   "lineno": 710,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.is_path"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_pathweight": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "dict",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNoPath",
    "networkx.classes.tests.test_function.pytest",
    "networkx.path_weight"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_selfloops": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "RuntimeError",
    "TypeError",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.classes.tests.test_function.pytest",
    "networkx.complete_graph",
    "networkx.nodes_with_selfloops",
    "networkx.number_of_selfloops",
    "networkx.selfloop_edges",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes_multi": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "len",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_node_attributes": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.set_node_attributes",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.BaseGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr": {
  "data": {
   "lineno": 245
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr": {
  "data": {
   "lineno": 250
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict": {
  "data": {
   "lineno": 297
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal": {
  "data": {
   "lineno": 310
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy": {
  "data": {
   "lineno": 260
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict": {
  "data": {
   "lineno": 284
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr": {
  "data": {
   "lineno": 279
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr": {
  "data": {
   "lineno": 269
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr": {
  "data": {
   "lineno": 274
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_class_copy": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_lookup": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_fresh_copy": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr": {
  "data": {
   "lineno": 330
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_chain": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "networkx.selfloop_edges",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph": {
  "data": {
   "lineno": 444
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "dict",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_contains": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_degree": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "dict",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_edges": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_node": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "MyGraph",
    "count_objects_of_type",
    "networkx.classes.tests.test_graph.gc"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak.MyGraph": {
  "data": {
   "lineno": 68
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak.count_objects_of_type": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "isinstance",
    "networkx.classes.tests.test_graph.gc",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter_node_format_raise": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nodes": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_order": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "networkx.nodes_with_selfloops",
    "networkx.number_of_selfloops",
    "networkx.selfloop_edges",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_size": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph": {
  "data": {
   "lineno": 732
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.setup_method": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": [
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_add_node": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_edges": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_nodes": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_edge_attr_dict": {
  "data": {
   "lineno": 785
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_graph_attr_dict": {
  "data": {
   "lineno": 798
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_node_attr_dict": {
  "data": {
   "lineno": 772
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestEdgeSubgraph.test_remove_node": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.BaseAttrGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.TestGraph.setup_method": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edge": {
  "data": {
   "lineno": 580
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edges_from": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "TypeError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_node": {
  "data": {
   "lineno": 518
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from": {
  "data": {
   "lineno": 537
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_adjacency": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_clear": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_clear_edges": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_data_input": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_edges_data": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_get_edge_data": {
  "data": {
   "lineno": 651
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_getitem": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "networkx.classes.tests.test_graph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_pickle": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edge": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from": {
  "data": {
   "lineno": 618
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_node": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from": {
  "data": {
   "lineno": 574
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_update": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_graph.pytest",
    "networkx.testing.utils.assert_graphs_equal",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.gc": {
  "data": {
   "shadows": "gc"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph_historical": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical.setup_class": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "classmethod",
    "networkx.classes.tests.test_graph_historical.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph_historical.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph_historical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graphviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews": {
  "data": {
   "lineno": 166
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.setup_class": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.to_directed",
    "networkx.to_undirected"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_disubgraph": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multidisubgraph": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multisubgraph": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_of_view": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "networkx.OrderedMultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_subgraph": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_pickle": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graphviews.pickle",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_restricted_induced_subgraph_chains": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.induced_subgraph",
    "networkx.restricted_view",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_reverse_copy": {
  "data": {
   "lineno": 271
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_subgraph_toundirected": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph.my_method": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass.MyGraph.to_directed_class": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_copy": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_edgesubgraph_toundirected": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_of_subgraph": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "list",
    "networkx.induced_subgraph",
    "networkx.subgraph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_todirected": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.induced_subgraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_toundirected": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "list",
    "networkx.induced_subgraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView": {
  "data": {
   "lineno": 56
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.setup": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.reverse_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_contains": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_exceptions": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.classes.tests.test_graphviews.pytest",
    "networkx.graphviews"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_iter": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestMultiReverseView.test_pickle": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graphviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.setup": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.path_graph",
    "networkx.reverse_view"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_contains": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_exceptions": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.classes.tests.test_graphviews.pytest",
    "networkx.graphviews"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_iter": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "reversed",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_pickle": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graphviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "MyGraph",
    "networkx.reverse_view",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph.my_method": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestReverseView.test_subclass.MyGraph.to_directed_class": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected": {
  "data": {
   "lineno": 89
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.setup": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.to_directed"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_already_directed": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.testing.assert_edges_equal",
    "networkx.to_directed"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_contains": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_directed": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_iter": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "list",
    "reversed",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToDirected.test_pickle": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graphviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected": {
  "data": {
   "lineno": 128
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.setup": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.to_undirected"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_already_directed": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.testing.assert_edges_equal",
    "networkx.to_undirected"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_contains": {
  "data": {
   "lineno": 155
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_directed": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_iter": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.TestToUndirected.test_pickle": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "hasattr",
    "networkx.classes.tests.test_graphviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graphviews.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graphviews.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graphviews.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graphviews.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graphviews.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_multi": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor": {
  "data": {
   "lineno": 165
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_data": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_no_keys": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "dict",
    "iter",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_data": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_multi": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "AssertionError",
    "networkx.MultiGraph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal": {
  "data": {
   "lineno": 219
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestEdgeSubgraph": {
  "data": {
   "lineno": 378
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.TestEdgeSubgraph.setup_method": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "range",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setup_method": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "TypeError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multidigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph._TestMultiGraph": {
  "data": {
   "shadows": "TestMultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph._TestMultiGraphEdgeSubgraph": {
  "data": {
   "shadows": "TestEdgeSubgraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.graphs_equal": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_lookup": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_number_of_edges_selfloops": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph": {
  "data": {
   "lineno": 297
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.setup_method": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.add_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_add_node": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_edges": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_nodes": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_edge_attr_dict": {
  "data": {
   "lineno": 357
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_graph_attr_dict": {
  "data": {
   "lineno": 370
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_node_attr_dict": {
  "data": {
   "lineno": 344
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_remove_node": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multigraph.BaseMultiGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.setup_method": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "TypeError",
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "networkx.classes.tests.test_multigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_multigraph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph._TestGraph": {
  "data": {
   "shadows": "TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_ordered": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_ordered.TestOrdered": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_digraph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.OrderedDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.OrderedGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_multidigraph": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.OrderedMultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrdered.test_multigraph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.OrderedMultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures.setup_class": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "classmethod",
    "networkx.OrderedDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.TestOrderedFeatures.test_subgraph_order": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "list",
    "networkx.induced_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_reportviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_reportviews.NodeDataView": {
  "data": {
   "shadows": "networkx.classes.reportviews.NodeDataView"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.reportviews.DegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.setup_class": {
  "data": {
   "lineno": 989,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_getitem": {
  "data": {
   "lineno": 1040,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_iter": {
  "data": {
   "lineno": 1014,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_len": {
  "data": {
   "lineno": 1066,
   "symbols_in_volume": [
    "dv",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_nbunch": {
  "data": {
   "lineno": 1033,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_pickle": {
  "data": {
   "lineno": 995,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.tests.test_reportviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_repr": {
  "data": {
   "lineno": 1009,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_str": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDegreeView.test_weight": {
  "data": {
   "lineno": 1052,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDiDegreeView": {
  "data": {
   "lineno": 1071,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.DiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDiDegreeView.test_repr": {
  "data": {
   "lineno": 1075,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestDiMultiDegreeView": {
  "data": {
   "lineno": 1231,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.classes.tests.test_reportviews.TestMultiDegreeView",
    "networkx.reportviews.DiMultiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestDiMultiDegreeView.test_repr": {
  "data": {
   "lineno": 1235,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView": {
  "data": {
   "lineno": 262
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.modify_edge": {
  "data": {
   "lineno": 276
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.setup_class": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph",
    "networkx.reportviews.EdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iter": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "evr",
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iterdata": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "evr",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_len": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "evr",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_pickle": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "list",
    "networkx.classes.tests.test_reportviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_repr": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeDataView.test_str": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView": {
  "data": {
   "lineno": 552
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.modify_edge": {
  "data": {
   "lineno": 566
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.setup_class": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph",
    "networkx.reportviews.EdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_and": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_call": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "ev",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_contains": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_data": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": [
    "ev",
    "ev.data",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_iter": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "ev",
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_len": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "ev",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_or": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_pickle": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_repr": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_str": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_sub": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestEdgeView.test_xor": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView": {
  "data": {
   "lineno": 1131,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.InDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_getitem": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_nbunch": {
  "data": {
   "lineno": 1147,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_repr": {
  "data": {
   "lineno": 1142,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_str": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": [
    "dv",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInDegreeView.test_weight": {
  "data": {
   "lineno": 1166,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestOutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.setup_class": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.path_graph",
    "networkx.reportviews.InEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_repr": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView": {
  "data": {
   "lineno": 718,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.setup_class": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.path_graph",
    "networkx.reportviews.InEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInEdgeView.test_repr": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": [
    "ev",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView": {
  "data": {
   "lineno": 1291,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.InMultiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_getitem": {
  "data": {
   "lineno": 1314,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_nbunch": {
  "data": {
   "lineno": 1307,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_repr": {
  "data": {
   "lineno": 1302,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_str": {
  "data": {
   "lineno": 1295,
   "symbols_in_volume": [
    "dv",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_weight": {
  "data": {
   "lineno": 1326,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.setup_class": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.reportviews.InMultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_repr": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView": {
  "data": {
   "lineno": 951,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestMultiEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.modify_edge": {
  "data": {
   "lineno": 958,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.setup_class": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.reportviews.InMultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 971,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_repr": {
  "data": {
   "lineno": 963,
   "symbols_in_volume": [
    "ev",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView": {
  "data": {
   "lineno": 1181,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.MultiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_getitem": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_nbunch": {
  "data": {
   "lineno": 1197,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_repr": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_str": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": [
    "dv",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_weight": {
  "data": {
   "lineno": 1216,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.modify_edge": {
  "data": {
   "lineno": 464
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.setup_class": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.reportviews.MultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_repr": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.modify_edge": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.setup_class": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.reportviews.MultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_and": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_call": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": [
    "ev",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_data": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "ev",
    "ev.data",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iter": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": [
    "ev",
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iterkeys": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": [
    "ev",
    "evr",
    "len",
    "list",
    "print",
    "range",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_or": {
  "data": {
   "lineno": 859,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_repr": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "ev",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_str": {
  "data": {
   "lineno": 757,
   "symbols_in_volume": [
    "ev",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_sub": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_xor": {
  "data": {
   "lineno": 879,
   "symbols_in_volume": [
    "ev",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView": {
  "data": {
   "lineno": 68
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.setup_class": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "classmethod",
    "networkx.classes.reportviews.NodeDataView",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_contains": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "nv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_getitem": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "nv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_iter": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "enumerate",
    "iter",
    "next",
    "nv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_pickle": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.pickle",
    "nv",
    "nv.__slots__"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_repr": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_str": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataView.test_viewtype": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "nv",
    "nv.data"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.n_its": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.setup_class": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestNodeViewSetOps"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.n_its": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.setup_class": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.setup_class": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_call": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_contains": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_getitem": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_iter": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "enumerate",
    "iter",
    "list",
    "next",
    "nv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_pickle": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.pickle"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_repr": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeView.test_str": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps": {
  "data": {
   "lineno": 190
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.n_its": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.setup_class": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_and": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "nv",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_len": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "len",
    "nv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_or": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "nv",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_sub": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "nv",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_xor": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "nodes",
    "nv",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.OutDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_getitem": {
  "data": {
   "lineno": 1104,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_nbunch": {
  "data": {
   "lineno": 1097,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_repr": {
  "data": {
   "lineno": 1092,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_str": {
  "data": {
   "lineno": 1085,
   "symbols_in_volume": [
    "dv",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutDegreeView.test_weight": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.setup_class": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.path_graph",
    "networkx.reportviews.OutEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_len": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "evr",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_repr": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.setup_class": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.path_graph",
    "networkx.reportviews.OutEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutEdgeView.test_repr": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "ev",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView": {
  "data": {
   "lineno": 1241,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.classes.tests.test_reportviews.TestDegreeView",
    "networkx.reportviews.OutMultiDegreeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_getitem": {
  "data": {
   "lineno": 1264,
   "symbols_in_volume": [
    "dv"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_nbunch": {
  "data": {
   "lineno": 1257,
   "symbols_in_volume": [
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_repr": {
  "data": {
   "lineno": 1252,
   "symbols_in_volume": [
    "dv",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_str": {
  "data": {
   "lineno": 1245,
   "symbols_in_volume": [
    "dv",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_weight": {
  "data": {
   "lineno": 1276,
   "symbols_in_volume": [
    "dict",
    "dv",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestOutEdgeDataView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.modify_edge": {
  "data": {
   "lineno": 496
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.setup_class": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.reportviews.OutMultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_contains_with_nbunch": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "evr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_repr": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView": {
  "data": {
   "lineno": 918,
   "symbols_in_volume": [
    "networkx.classes.tests.test_reportviews.TestMultiEdgeView"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.modify_edge": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.setup_class": {
  "data": {
   "lineno": 919,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "networkx.reportviews.OutMultiEdgeView"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_contains_with_nbunch": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": [
    "ev"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_repr": {
  "data": {
   "lineno": 930,
   "symbols_in_volume": [
    "ev",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_reportviews.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_reportviews.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_reportviews.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_reportviews.test_nodedataview_unhashable": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "TypeError",
    "eval",
    "locals",
    "networkx.classes.tests.test_reportviews.pytest",
    "networkx.path_graph",
    "nv",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_special.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph": {
  "data": {
   "lineno": 100
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph.setup_method": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedDiGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph": {
  "data": {
   "lineno": 59
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph.setup_method": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph": {
  "data": {
   "lineno": 173
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph.setup_method": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiDiGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "networkx.MultiDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph": {
  "data": {
   "lineno": 153
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph.setup_method": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestOrderedMultiGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "networkx.MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialDiGraph": {
  "data": {
   "lineno": 94
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialDiGraph.setup_method": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialGraph": {
  "data": {
   "lineno": 53
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialGraph.setup_method": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiDiGraph": {
  "data": {
   "lineno": 167
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiDiGraph.setup_method": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiGraph": {
  "data": {
   "lineno": 147
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestSpecialMultiGraph.setup_method": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph": {
  "data": {
   "lineno": 113
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinDiGraph.setup_method.MyGraph.edge_attr_dict_factory": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinGraph": {
  "data": {
   "lineno": 72
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "MyGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method.MyGraph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.TestThinGraph.setup_method.MyGraph.edge_attr_dict_factory": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special._TestDiGraph": {
  "data": {
   "shadows": "TestDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special._TestGraph": {
  "data": {
   "shadows": "TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special._TestMultiDiGraph": {
  "data": {
   "shadows": "TestMultiDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special._TestMultiGraph": {
  "data": {
   "shadows": "TestMultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.test_factories": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "MyGraph",
    "isinstance",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.test_factories.MyGraph": {
  "data": {
   "lineno": 29
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict1": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict2": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict3": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict4": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.test_factories.mydict5": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph": {
  "data": {
   "lineno": 273
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.setup_class": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "classmethod",
    "networkx.edge_subgraph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_add_node": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_edges": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_nodes": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_edge_attr_dict": {
  "data": {
   "lineno": 326
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_graph_attr_dict": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_node_attr_dict": {
  "data": {
   "lineno": 313
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_readonly": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.classes.tests.test_subgraphviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_remove_node": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph": {
  "data": {
   "lineno": 212
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.graphs_equal": {
  "data": {
   "lineno": 251
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.same_attrdict": {
  "data": {
   "lineno": 239
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.setup_class": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "classmethod",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_full_graph": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "networkx.induced_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_partial_subgraph": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "dict",
    "networkx.induced_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "gview",
    "networkx.MultiDiGraph",
    "networkx.classes.tests.test_subgraphviews.TestMultiGraphView",
    "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView",
    "networkx.filters.hide_multidiedges",
    "networkx.filters.show_multidiedges",
    "networkx.graphviews.subgraph_view",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView.test_inout_degree": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.filters.hide_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "gview",
    "networkx.MultiGraph",
    "networkx.classes.tests.test_subgraphviews.TestSubGraphView",
    "networkx.filters.hide_multiedges",
    "networkx.filters.show_multiedges",
    "networkx.graphviews.subgraph_view",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.setup_class": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_hidden_edges": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_shown_edges": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "gview",
    "networkx.DiGraph",
    "networkx.classes.tests.test_subgraphviews.TestSubGraphView",
    "networkx.filters.hide_diedges",
    "networkx.filters.show_diedges",
    "networkx.graphviews.subgraph_view",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inout_degree": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.filters.hide_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inoutedges": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.filters.hide_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_pred": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "list",
    "networkx.filters.hide_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.filters.hide_edges",
    "networkx.filters.show_edges",
    "networkx.graphviews.subgraph_view",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_edges": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "KeyError",
    "gview",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_nodes": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "KeyError",
    "gview",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest",
    "networkx.filters.hide_nodes",
    "print",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_edges": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_node": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "KeyError",
    "gview",
    "list",
    "networkx.classes.tests.test_subgraphviews.pytest",
    "networkx.filters.show_nodes",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_subgraphviews.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_subgraphviews.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.conftest": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "networkx.conftest.collect_ignore",
    "networkx.conftest.has_matplotlib",
    "networkx.conftest.has_numpy",
    "networkx.conftest.has_ogr",
    "networkx.conftest.has_pandas",
    "networkx.conftest.has_pydot",
    "networkx.conftest.has_pygraphviz",
    "networkx.conftest.has_scipy",
    "networkx.conftest.has_yaml",
    "networkx.conftest.needs_matplotlib",
    "networkx.conftest.needs_numpy",
    "networkx.conftest.needs_ogr",
    "networkx.conftest.needs_pandas",
    "networkx.conftest.needs_pydot",
    "networkx.conftest.needs_pygraphviz",
    "networkx.conftest.needs_scipy",
    "networkx.conftest.needs_yaml",
    "networkx.conftest.sys"
   ]
  },
  "type": "module"
 },
 "networkx.conftest.add_nx": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.conftest.networkx",
    "networkx.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.conftest.collect_ignore": {
  "data": {
   "lineno": 135
  },
  "type": "constant"
 },
 "networkx.conftest.has_matplotlib": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "networkx.conftest.has_numpy": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "networkx.conftest.has_ogr": {
  "data": {
   "lineno": 130
  },
  "type": "constant"
 },
 "networkx.conftest.has_pandas": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "networkx.conftest.has_pydot": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "networkx.conftest.has_pygraphviz": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "networkx.conftest.has_scipy": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "networkx.conftest.has_yaml": {
  "data": {
   "lineno": 116
  },
  "type": "constant"
 },
 "networkx.conftest.matplotlib": {
  "data": {
   "shadows": "matplotlib"
  },
  "type": "import"
 },
 "networkx.conftest.needs_matplotlib": {
  "data": {
   "lineno": 174
  },
  "type": "constant"
 },
 "networkx.conftest.needs_numpy": {
  "data": {
   "lineno": 137
  },
  "type": "constant"
 },
 "networkx.conftest.needs_ogr": {
  "data": {
   "lineno": 179
  },
  "type": "constant"
 },
 "networkx.conftest.needs_pandas": {
  "data": {
   "lineno": 175
  },
  "type": "constant"
 },
 "networkx.conftest.needs_pydot": {
  "data": {
   "lineno": 178
  },
  "type": "constant"
 },
 "networkx.conftest.needs_pygraphviz": {
  "data": {
   "lineno": 177
  },
  "type": "constant"
 },
 "networkx.conftest.needs_scipy": {
  "data": {
   "lineno": 146
  },
  "type": "constant"
 },
 "networkx.conftest.needs_yaml": {
  "data": {
   "lineno": 176
  },
  "type": "constant"
 },
 "networkx.conftest.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.conftest.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.conftest.ogr": {
  "data": {
   "shadows": "ogr"
  },
  "type": "import"
 },
 "networkx.conftest.pandas": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.conftest.pydot": {
  "data": {
   "shadows": "pydot"
  },
  "type": "import"
 },
 "networkx.conftest.pygraphviz": {
  "data": {
   "shadows": "pygraphviz"
  },
  "type": "import"
 },
 "networkx.conftest.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.conftest.pytest_addoption": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.conftest.pytest_collection_modifyitems": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.conftest.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.conftest.pytest_configure": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "networkx.conftest.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.conftest.set_warnings": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "DeprecationWarning",
    "PendingDeprecationWarning",
    "networkx.conftest.pytest",
    "networkx.conftest.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.conftest.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.conftest.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.conftest.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "networkx.convert": {
  "data": {},
  "type": "module"
 },
 "networkx.convert.Collection": {
  "data": {
   "shadows": "collections.abc.Collection"
  },
  "type": "import"
 },
 "networkx.convert.Generator": {
  "data": {
   "shadows": "collections.abc.Generator"
  },
  "type": "import"
 },
 "networkx.convert.Iterator": {
  "data": {
   "shadows": "collections.abc.Iterator"
  },
  "type": "import"
 },
 "networkx.convert.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.convert.from_dict_of_dicts": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.convert.from_dict_of_lists": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.convert.from_edgelist": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "networkx.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.convert.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.convert.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.convert.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.convert.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.convert.to_dict_of_dicts": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "networkx.convert.to_dict_of_lists": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "networkx.convert.to_edgelist": {
  "data": {
   "lineno": 366
  },
  "type": "function"
 },
 "networkx.convert.to_networkx_graph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "Exception",
    "ImportError",
    "ImportWarning",
    "TypeError",
    "collections.abc.Collection",
    "collections.abc.Generator",
    "collections.abc.Iterator",
    "dict",
    "from_dict_of_dicts",
    "from_dict_of_lists",
    "from_edgelist",
    "hasattr",
    "isinstance",
    "networkx.NetworkXError",
    "networkx.convert.numpy",
    "networkx.convert.warnings",
    "networkx.from_numpy_matrix",
    "networkx.from_pandas_adjacency",
    "networkx.from_pandas_edgelist",
    "networkx.from_scipy_sparse_matrix",
    "networkx.nx_agraph.from_agraph",
    "pandas.DataFrame"
   ]
  },
  "type": "function"
 },
 "networkx.convert.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.convert_matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.convert_matrix.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.convert_matrix._coo_gen_triples": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._csc_gen_triples": {
  "data": {
   "lineno": 942,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._csr_gen_triples": {
  "data": {
   "lineno": 930,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._dok_gen_triples": {
  "data": {
   "lineno": 963
  },
  "type": "function"
 },
 "networkx.convert_matrix._generate_weighted_edges": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": [
    "networkx.convert_matrix._coo_gen_triples",
    "networkx.convert_matrix._csc_gen_triples",
    "networkx.convert_matrix._csr_gen_triples",
    "networkx.convert_matrix._dok_gen_triples"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_numpy_array": {
  "data": {
   "lineno": 1272,
   "symbols_in_volume": [
    "networkx.convert_matrix.from_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_numpy_matrix": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "Exception",
    "TypeError",
    "bool",
    "chain",
    "complex",
    "dict",
    "float",
    "int",
    "networkx.NetworkXError",
    "networkx.convert_matrix.itertools",
    "networkx.empty_graph",
    "numpy.asarray",
    "python_type",
    "range",
    "sorted",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_pandas_adjacency": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "Exception",
    "dict",
    "enumerate",
    "from_numpy_array",
    "list",
    "networkx.NetworkXError",
    "networkx.relabel.relabel_nodes",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_pandas_edgelist": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "isinstance",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_scipy_sparse_matrix": {
  "data": {
   "lineno": 989,
   "symbols_in_volume": [
    "chain",
    "networkx.NetworkXError",
    "networkx.convert_matrix._generate_weighted_edges",
    "networkx.convert_matrix.itertools",
    "networkx.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.convert_matrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.convert_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.convert_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.convert_matrix.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.convert_matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.convert_matrix.to_numpy_array": {
  "data": {
   "lineno": 1093,
   "symbols_in_volume": [
    "Exception",
    "KeyError",
    "ValueError",
    "dict",
    "len",
    "list",
    "max",
    "min",
    "networkx.NetworkXError",
    "numpy.asarray",
    "numpy.full",
    "numpy.isnan",
    "numpy.nan",
    "numpy.nanmax",
    "numpy.nanmin",
    "numpy.nansum",
    "op",
    "range",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_matrix": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "numpy.asmatrix",
    "sum",
    "to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_recarray": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for",
    "numpy.recarray",
    "numpy.zeros",
    "range",
    "set",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_pandas_adjacency": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "list",
    "pandas.DataFrame",
    "sum",
    "to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_pandas_edgelist": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "pandas.DataFrame",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_scipy_sparse_matrix": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "dict",
    "format",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.selfloop_edges",
    "range",
    "scipy.sparse.coo_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.layout": {
  "data": {
   "symbols_in_volume": [
    "networkx.drawing.layout.fruchterman_reingold_layout"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.layout.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.drawing.layout._fruchterman_reingold": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "AttributeError",
    "float",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.utils.random_state",
    "numpy.asarray",
    "numpy.clip",
    "numpy.einsum",
    "numpy.linalg.norm",
    "numpy.newaxis",
    "numpy.sqrt",
    "numpy.where",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._kamada_kawai_costfn": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "numpy.diag_indices",
    "numpy.einsum",
    "numpy.eye",
    "numpy.linalg.norm",
    "numpy.newaxis",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._kamada_kawai_solve": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": [
    "numpy",
    "numpy.eye",
    "scipy.optimize.minimize"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._process_params": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "len",
    "networkx.Graph",
    "numpy.asarray",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._sparse_fruchterman_reingold": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": [
    "AttributeError",
    "ImportError",
    "float",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.utils.random_state",
    "numpy.asarray",
    "numpy.linalg.norm",
    "numpy.sqrt",
    "numpy.where",
    "numpy.zeros",
    "range",
    "scipy.sparse.coo_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._sparse_spectral": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": [
    "AttributeError",
    "int",
    "max",
    "networkx.NetworkXError",
    "numpy.argsort",
    "numpy.asarray",
    "numpy.real",
    "numpy.sqrt",
    "scipy.sparse.linalg.eigen.eigsh",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout._spectral": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.NetworkXError",
    "numpy.argsort",
    "numpy.identity",
    "numpy.linalg.eig",
    "numpy.real",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.bipartite_layout": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "len",
    "list",
    "networkx.drawing.layout._process_params",
    "numpy.column_stack",
    "numpy.concatenate",
    "numpy.linspace",
    "numpy.repeat",
    "rescale_layout",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.circular_layout": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "len",
    "max",
    "networkx.drawing.layout._process_params",
    "networkx.utils.arbitrary_element",
    "numpy.column_stack",
    "numpy.cos",
    "numpy.float32",
    "numpy.linspace",
    "numpy.pi",
    "numpy.sin",
    "numpy.zeros",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.coo_matrix": {
  "data": {
   "shadows": "scipy.sparse.coo_matrix"
  },
  "type": "import"
 },
 "networkx.drawing.layout.eigsh": {
  "data": {
   "shadows": "scipy.sparse.linalg.eigen.eigsh"
  },
  "type": "import"
 },
 "networkx.drawing.layout.fruchterman_reingold_layout": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "ValueError",
    "_fruchterman_reingold",
    "_sparse_fruchterman_reingold",
    "dict",
    "enumerate",
    "len",
    "max",
    "networkx.drawing.layout._process_params",
    "networkx.to_numpy_array",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.arbitrary_element",
    "networkx.utils.random_state",
    "numpy.asarray",
    "numpy.sqrt",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.kamada_kawai_layout": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "_kamada_kawai_solve",
    "dict",
    "enumerate",
    "len",
    "networkx.drawing.layout._process_params",
    "networkx.drawing.layout.circular_layout",
    "networkx.drawing.layout.random_layout",
    "networkx.shortest_path_length",
    "numpy.array",
    "numpy.linspace",
    "numpy.ones",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.minimize": {
  "data": {
   "shadows": "scipy.optimize.minimize"
  },
  "type": "import"
 },
 "networkx.drawing.layout.multipartite_layout": {
  "data": {
   "lineno": 1042,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "dict",
    "float",
    "len",
    "networkx.drawing.layout._process_params",
    "numpy.arange",
    "numpy.column_stack",
    "numpy.concatenate",
    "numpy.repeat",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.drawing.layout.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.layout.planar_layout": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance",
    "len",
    "list",
    "networkx.NetworkXException",
    "networkx.PlanarEmbedding",
    "networkx.check_planarity",
    "networkx.combinatorial_embedding_to_pos",
    "networkx.drawing.layout._process_params",
    "numpy.float64",
    "numpy.row_stack",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.random_layout": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.drawing.layout._process_params",
    "networkx.utils.random_state",
    "numpy.float32",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.random_state": {
  "data": {
   "shadows": "networkx.utils.random_state"
  },
  "type": "import"
 },
 "networkx.drawing.layout.rescale_layout": {
  "data": {
   "lineno": 1136,
   "symbols_in_volume": [
    "abs",
    "max",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.rescale_layout_dict": {
  "data": {
   "lineno": 1177,
   "symbols_in_volume": [
    "list",
    "networkx.drawing.layout.rescale_layout",
    "numpy.array",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.shell_layout": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "networkx.drawing.layout._process_params",
    "networkx.utils.arbitrary_element",
    "numpy.column_stack",
    "numpy.cos",
    "numpy.float32",
    "numpy.linspace",
    "numpy.pi",
    "numpy.sin",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.spdiags": {
  "data": {
   "shadows": "scipy.sparse.spdiags"
  },
  "type": "import"
 },
 "networkx.drawing.layout.spectral_layout": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": [
    "ImportError",
    "ValueError",
    "_sparse_spectral",
    "_spectral",
    "dict",
    "len",
    "networkx.drawing.layout._process_params",
    "networkx.to_numpy_array",
    "networkx.to_scipy_sparse_matrix",
    "numpy.array",
    "numpy.transpose",
    "numpy.zeros",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.spiral_layout": {
  "data": {
   "lineno": 962,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "len",
    "networkx.drawing.layout._process_params",
    "networkx.utils.arbitrary_element",
    "numpy.array",
    "numpy.cos",
    "numpy.hypot",
    "numpy.sin",
    "range",
    "rescale_layout",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.layout.spring_layout": {
  "data": {
   "lineno": 509
  },
  "type": "constant"
 },
 "networkx.drawing.nx_agraph": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_agraph.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.drawing.nx_agraph.display_pygraphviz": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "DeprecationWarning",
    "format",
    "networkx.drawing.nx_agraph.os",
    "networkx.drawing.nx_agraph.warnings",
    "networkx.utils.default_opener"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.from_agraph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "dict",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.empty_graph",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.graphviz_layout": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "pygraphviz_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.pygraphviz": {
  "data": {
   "shadows": "pygraphviz"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.pygraphviz_layout": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "ImportError",
    "float",
    "networkx.drawing.nx_agraph.pygraphviz",
    "networkx.drawing.nx_agraph.to_agraph",
    "print",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.read_dot": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "ImportError",
    "networkx.drawing.nx_agraph.from_agraph",
    "networkx.drawing.nx_agraph.pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.to_agraph": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "ImportError",
    "networkx.drawing.nx_agraph.pygraphviz",
    "networkx.number_of_selfloops",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "clean_attrs",
    "func",
    "hasattr",
    "len",
    "networkx.NetworkXException",
    "networkx.drawing.nx_agraph.tempfile",
    "networkx.drawing.nx_agraph.to_agraph",
    "networkx.utils.default_opener",
    "networkx.utils.open_file",
    "str",
    "update_attrs"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.clean_attrs": {
  "data": {
   "lineno": 377
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.func": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.update_attrs": {
  "data": {
   "lineno": 369
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.write_dot": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.drawing.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_pydot.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.drawing.nx_pydot.from_pydot": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "IndexError",
    "TypeError",
    "isinstance",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.getpreferredencoding": {
  "data": {
   "shadows": "locale.getpreferredencoding"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.graphviz_layout": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "pydot_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.pydot": {
  "data": {
   "shadows": "pydot"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.pydot_layout": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "float",
    "isinstance",
    "len",
    "list",
    "locale.getpreferredencoding",
    "networkx.drawing.nx_pydot.pydot",
    "networkx.drawing.nx_pydot.to_pydot",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.read_dot": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "from_pydot",
    "networkx.drawing.nx_pydot.pydot",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.to_pydot": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "KeyError",
    "networkx.drawing.nx_pydot.pydot",
    "networkx.number_of_selfloops",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.write_dot": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.utils.open_file",
    "to_pydot"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_pylab.Colormap": {
  "data": {
   "shadows": "matplotlib.colors.Colormap"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.FancyArrowPatch": {
  "data": {
   "shadows": "matplotlib.patches.FancyArrowPatch"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.Iterable": {
  "data": {
   "shadows": "collections.abc.Iterable"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.LineCollection": {
  "data": {
   "shadows": "matplotlib.collections.LineCollection"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.Normalize": {
  "data": {
   "shadows": "matplotlib.colors.Normalize"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.Number": {
  "data": {
   "shadows": "numbers.Number"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.PathCollection": {
  "data": {
   "shadows": "matplotlib.collections.PathCollection"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.drawing.nx_pylab.apply_alpha": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": [
    "ImportError",
    "TypeError",
    "ValueError",
    "isinstance",
    "itertools.cycle",
    "itertools.islice",
    "len",
    "list",
    "matplotlib.cm.ScalarMappable",
    "matplotlib.colors.colorConverter.to_rgba",
    "numbers.Number",
    "numpy.array",
    "numpy.resize"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.circular_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.circular_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.cm": {
  "data": {
   "shadows": "matplotlib.cm"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.colorConverter": {
  "data": {
   "shadows": "matplotlib.colors.colorConverter"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.cycle": {
  "data": {
   "shadows": "itertools.cycle"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.draw": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "draw_networkx",
    "matplotlib.pyplot.draw_if_interactive",
    "matplotlib.pyplot.gcf",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_circular": {
  "data": {
   "lineno": 1084,
   "symbols_in_volume": [
    "networkx.drawing.layout.circular_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_kamada_kawai": {
  "data": {
   "lineno": 1100,
   "symbols_in_volume": [
    "networkx.drawing.layout.kamada_kawai_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "ValueError",
    "any",
    "draw_networkx_edges",
    "draw_networkx_labels",
    "draw_networkx_nodes",
    "matplotlib.pyplot.draw_if_interactive",
    "networkx.drawing.spring_layout",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edge_labels": {
  "data": {
   "lineno": 919,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "dict",
    "isinstance",
    "matplotlib.pyplot.gca",
    "numpy.arctan2",
    "numpy.array",
    "numpy.pi",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edges": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "color_normal",
    "edge_cmap",
    "enumerate",
    "isinstance",
    "len",
    "list",
    "matplotlib.collections.LineCollection",
    "matplotlib.colors.Colormap",
    "matplotlib.colors.Normalize",
    "matplotlib.colors.colorConverter.to_rgba_array",
    "matplotlib.patches.FancyArrowPatch",
    "matplotlib.pyplot.gca",
    "matplotlib.pyplot.get_cmap",
    "max",
    "min",
    "numbers.Number",
    "numpy.alltrue",
    "numpy.amax",
    "numpy.amin",
    "numpy.asarray",
    "numpy.iterable",
    "numpy.ravel",
    "print",
    "to_marker_edge"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edges.to_marker_edge": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": [
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_labels": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "isinstance",
    "matplotlib.pyplot.gca",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_nodes": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "ImportError",
    "KeyError",
    "RuntimeError",
    "ValueError",
    "apply_alpha",
    "collections.abc.Iterable",
    "isinstance",
    "len",
    "list",
    "matplotlib.collections.PathCollection",
    "matplotlib.pyplot.gca",
    "networkx.NetworkXError",
    "numpy.asarray",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_planar": {
  "data": {
   "lineno": 1188,
   "symbols_in_volume": [
    "networkx.drawing.layout.planar_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_random": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": [
    "networkx.drawing.layout.random_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_shell": {
  "data": {
   "lineno": 1169,
   "symbols_in_volume": [
    "networkx.drawing.layout.shell_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spectral": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": [
    "networkx.drawing.layout.spectral_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spring": {
  "data": {
   "lineno": 1153,
   "symbols_in_volume": [
    "networkx.drawing.layout.spring_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.kamada_kawai_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.kamada_kawai_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.planar_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.planar_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.random_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.random_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.shell_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.shell_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.spectral_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.spectral_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.spring_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.spring_layout"
  },
  "type": "import"
 },
 "networkx.drawing.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.tests.test_agraph": {
  "data": {
   "symbols_in_volume": [
    "networkx.drawing.tests.test_agraph.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.drawing.nx_agraph.write_dot",
    "networkx.drawing.tests.test_agraph.os",
    "networkx.drawing.tests.test_agraph.tempfile",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.read_dot",
    "networkx.nx_agraph.to_agraph",
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.assert_equal": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.build_graph": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_2d_layout": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.nx_agraph.pygraphviz_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_3d_layout": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.Graph",
    "networkx.nx_agraph.pygraphviz_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_directed": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_display_pygraphviz_deprecation_warning": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "DeprecationWarning",
    "networkx.complete_graph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.display_pygraphviz",
    "networkx.nx_agraph.view_pygraphviz",
    "networkx.utils.default_opener",
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_create_using": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "isinstance",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_name": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_named_edges": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "isinstance",
    "networkx.Graph",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_AGraph_attrs": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_reserved_keywords": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_graphviz_alias": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.graphviz_layout",
    "networkx.nx_agraph.pygraphviz_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_multi_directed": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_multi_undirected": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_pygraphviz_layout_root": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "dict",
    "float",
    "networkx.complete_graph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.pygraphviz_layout",
    "networkx.nx_agraph.to_agraph",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_empty_graph": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_integer_nodes": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_edgedata": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "dict",
    "graph_class",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_nodedata": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_undirected": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.barbell_graph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_callable_edgelabel": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_callable_edgelabel.foo_label": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_edgelabel": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_file_suffix": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_leaves_input_graph_unmodified": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.drawing.tests.test_agraph.pytest",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_multigraph_edgelabels": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "len",
    "networkx.MultiGraph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_no_added_attrs_to_input": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.nx_agraph.view_pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_path": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "len",
    "networkx.complete_graph",
    "networkx.nx_agraph.view_pygraphviz",
    "open",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.pygraphviz": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_agraph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout": {
  "data": {
   "symbols_in_volume": [
    "networkx.drawing.tests.test_layout.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.tests.test_layout.TestLayout": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_layout.TestLayout.check_kamada_kawai_costfn": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "costfn",
    "networkx.drawing.layout._kamada_kawai_costfn",
    "networkx.drawing.tests.test_layout.numpy",
    "networkx.testing.almost_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.check_scale_and_center": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "list",
    "networkx.drawing.tests.test_layout.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.collect_node_distances": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.drawing.tests.test_layout.numpy",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.drawing.layout._fruchterman_reingold",
    "networkx.drawing.layout._sparse_fruchterman_reingold",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.drawing.layout._sparse_fruchterman_reingold",
    "networkx.drawing.layout._sparse_spectral",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_bipartite_layout": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "networkx.bipartite.sets",
    "networkx.bipartite_layout",
    "networkx.complete_bipartite_graph",
    "networkx.drawing.tests.test_layout.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_center_parameter": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.path_graph",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_center_wrong_dimensions": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "ValueError",
    "id",
    "networkx.circular_layout",
    "networkx.drawing.tests.test_layout.pytest",
    "networkx.fruchterman_reingold_layout",
    "networkx.kamada_kawai_layout",
    "networkx.path_graph",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_circular_planar_and_shell_dim_error": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "ValueError",
    "networkx.circular_layout",
    "networkx.drawing.tests.test_layout.pytest",
    "networkx.path_graph",
    "networkx.planar_layout",
    "networkx.shell_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_default_scale_and_center": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.complete_graph",
    "networkx.kamada_kawai_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout",
    "sc"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_empty_graph": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.bipartite_layout",
    "networkx.circular_layout",
    "networkx.empty_graph",
    "networkx.fruchterman_reingold_layout",
    "networkx.kamada_kawai_layout",
    "networkx.multipartite_layout",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_fixed_node_fruchterman_reingold": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.spring_layout",
    "networkx.testing.almost_equal",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "networkx.drawing.tests.test_layout.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn_1d": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "costfn",
    "networkx.drawing.layout._kamada_kawai_costfn",
    "networkx.drawing.tests.test_layout.numpy",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_multipartite_layout": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "len",
    "networkx.complete_multipartite_graph",
    "networkx.drawing.tests.test_layout.pytest",
    "networkx.multipartite_layout",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_planar_layout_non_planar_input": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.complete_graph",
    "networkx.drawing.tests.test_layout.pytest",
    "networkx.planar_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_rescale_layout_dict": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "networkx.drawing.tests.test_layout.numpy",
    "networkx.empty_graph",
    "networkx.random_layout",
    "networkx.rescale_layout_dict",
    "norm",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_scale_and_center_arg": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.complete_graph",
    "networkx.kamada_kawai_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout",
    "sc"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_single_nodes": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.drawing.tests.test_layout.numpy",
    "networkx.path_graph",
    "networkx.shell_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_empty_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.bipartite_layout",
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.kamada_kawai_layout",
    "networkx.multipartite_layout",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_initial_pos_fruchterman_reingold": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_int": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.kamada_kawai_layout",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_planar_layout_embedding_input": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.PlanarEmbedding",
    "networkx.planar_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_string": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.kamada_kawai_layout",
    "networkx.planar_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spiral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spiral_layout": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "len",
    "networkx.spiral_layout",
    "networkx.testing.almost_equal",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spring_fixed_without_pos": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "ValueError",
    "networkx.drawing.tests.test_layout.pytest",
    "networkx.path_graph",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spring_init_pos": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "any",
    "networkx.Graph",
    "networkx.drawing.tests.test_layout.math",
    "networkx.fruchterman_reingold_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.numpy": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_layout.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.test_smoke_empty_graphscipy": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_pydot": {
  "data": {
   "symbols_in_volume": [
    "networkx.drawing.tests.test_pydot.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.tests.test_pydot.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.TestPydot": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.pydot_checks": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "len",
    "networkx.drawing.tests.test_pydot.pydot",
    "networkx.drawing.tests.test_pydot.tempfile",
    "networkx.nx_pydot.from_pydot",
    "networkx.nx_pydot.pydot_layout",
    "networkx.nx_pydot.read_dot",
    "networkx.nx_pydot.to_pydot",
    "networkx.testing.assert_graphs_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_directed": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_read_write": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "io.StringIO",
    "networkx.MultiGraph",
    "networkx.nx_pydot.read_dot",
    "networkx.nx_pydot.write_dot",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.test_undirected": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.pydot": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_pydot.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab": {
  "data": {
   "symbols_in_volume": [
    "networkx.drawing.tests.test_pylab.mpl",
    "networkx.drawing.tests.test_pylab.plt",
    "networkx.drawing.tests.test_pylab.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.tests.test_pylab.LineCollection": {
  "data": {
   "shadows": "matplotlib.collections.LineCollection"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.PathCollection": {
  "data": {
   "shadows": "matplotlib.collections.PathCollection"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.TestPylab": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.setup_class": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod",
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_alpha_iter": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "len",
    "networkx.draw_networkx_nodes",
    "networkx.drawing.tests.test_pylab.plt",
    "networkx.random_layout",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_arrows": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.draw_spring"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_axes": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "networkx.draw",
    "networkx.drawing.tests.test_pylab.plt"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "OSError",
    "function",
    "networkx.draw_circular",
    "networkx.draw_kamada_kawai",
    "networkx.draw_planar",
    "networkx.draw_random",
    "networkx.draw_shell",
    "networkx.draw_spectral",
    "networkx.draw_spring",
    "networkx.drawing.tests.test_pylab.itertools",
    "networkx.drawing.tests.test_pylab.os",
    "networkx.drawing.tests.test_pylab.plt"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw_empty_nodes_return_values": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "isinstance",
    "matplotlib.collections.LineCollection",
    "matplotlib.collections.PathCollection",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.circular_layout",
    "networkx.draw_networkx_edges",
    "networkx.draw_networkx_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw_shell_nlist": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "OSError",
    "list",
    "networkx.draw_shell",
    "networkx.drawing.tests.test_pylab.os",
    "networkx.drawing.tests.test_pylab.plt",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_edge_colormap": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.draw_spring",
    "networkx.drawing.tests.test_pylab.plt",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_edge_colors_and_widths": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.draw_networkx_edges",
    "networkx.draw_networkx_labels",
    "networkx.draw_networkx_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_empty_graph": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_error_invalid_kwds": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "ValueError",
    "networkx.draw",
    "networkx.drawing.tests.test_pylab.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_labels_and_colors": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "networkx.cubical_graph",
    "networkx.draw_networkx_edge_labels",
    "networkx.draw_networkx_edges",
    "networkx.draw_networkx_labels",
    "networkx.draw_networkx_nodes",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_multigraph_edgelist_tuples": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.draw_networkx",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_np_edgelist": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "networkx.draw_networkx",
    "networkx.drawing.tests.test_pylab.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.mpl": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_pylab.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.plt": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.drawing.tests.test_pylab.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.exception": {
  "data": {},
  "type": "module"
 },
 "networkx.exception.AmbiguousSolution": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.ExceededMaxIterations": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.HasACycle": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXAlgorithmError": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXError": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXException": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNoCycle": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.exception.NetworkXUnfeasible"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNoPath": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.exception.NetworkXUnfeasible"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNotImplemented": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXPointlessConcept": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXUnbounded": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.exception.NetworkXAlgorithmError"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXUnfeasible": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.exception.NetworkXAlgorithmError"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NodeNotFound": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.PowerIterationFailedConvergence": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.exception.ExceededMaxIterations"
   ]
  },
  "type": "class"
 },
 "networkx.exception.PowerIterationFailedConvergence.__init__": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "super",
    "superinit"
   ]
  },
  "type": "function"
 },
 "networkx.exception.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.generators": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.atlas": {
  "data": {
   "symbols_in_volume": [
    "networkx.generators.atlas.THIS_DIR",
    "networkx.generators.atlas.os"
   ]
  },
  "type": "module"
 },
 "networkx.generators.atlas.ATLAS_FILE": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "networkx.generators.atlas.NUM_GRAPHS": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.generators.atlas.THIS_DIR": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.generators.atlas.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.generators.atlas._generate_graphs": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "int",
    "map",
    "networkx.Graph",
    "networkx.generators.atlas.ATLAS_FILE",
    "networkx.generators.atlas.gzip",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.atlas.graph_atlas": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "ValueError",
    "itertools.islice",
    "networkx.generators.atlas.NUM_GRAPHS",
    "networkx.generators.atlas._generate_graphs",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.generators.atlas.graph_atlas_g": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "list",
    "networkx.generators.atlas._generate_graphs"
   ]
  },
  "type": "function"
 },
 "networkx.generators.atlas.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "networkx.generators.atlas.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.generators.atlas.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.atlas.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.generators.atlas.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "networkx.generators.classic": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.classic.Graph": {
  "data": {
   "shadows": "networkx.classes.Graph"
  },
  "type": "import"
 },
 "networkx.generators.classic.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.classic.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.generators.classic._tree_edges": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.accumulate": {
  "data": {
   "shadows": "itertools.accumulate"
  },
  "type": "import"
 },
 "networkx.generators.classic.balanced_tree": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "networkx.generators.classic.full_rary_tree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.barbell_graph": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "complete_graph",
    "networkx.exception.NetworkXError",
    "networkx.utils.pairwise",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.binomial_tree": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.circulant_graph": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.circular_ladder_graph": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "ladder_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.complete_graph": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "empty_graph",
    "len",
    "networkx.generators.classic.itertools",
    "networkx.utils.nodes_or_number"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.complete_multipartite_graph": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "TypeError",
    "enumerate",
    "itertools.accumulate",
    "len",
    "networkx.classes.Graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.itertools",
    "networkx.utils.pairwise",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.cycle_graph": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "empty_graph",
    "networkx.utils.nodes_or_number",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.dorogovtsev_goltsev_mendes_graph": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "empty_graph",
    "len",
    "list",
    "networkx.exception.NetworkXError",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.empty_graph": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "create_using",
    "default",
    "hasattr",
    "networkx.Graph",
    "networkx.utils.nodes_or_number"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.full_rary_tree": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "empty_graph",
    "networkx.generators.classic._tree_edges"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.classic.ladder_graph": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "create_using",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.pairwise",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.lollipop_graph": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "create_using",
    "int",
    "isinstance",
    "len",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.complete_graph",
    "networkx.utils.nodes_or_number",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.nodes_or_number": {
  "data": {
   "shadows": "networkx.utils.nodes_or_number"
  },
  "type": "import"
 },
 "networkx.generators.classic.null_graph": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": [
    "create_using",
    "networkx.generators.classic.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.classic.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.generators.classic.path_graph": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "create_using",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.nodes_or_number",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.star_graph": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "create_using",
    "int",
    "isinstance",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.nodes_or_number"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.trivial_graph": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": [
    "create_using",
    "networkx.generators.classic.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.turan_graph": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "complete_multipartite_graph",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.generators.classic.wheel_graph": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "create_using",
    "len",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.classic.star_graph",
    "networkx.utils.nodes_or_number",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.cographs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.cographs.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.generators.cographs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.cographs.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.cographs.random_cograph": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "len",
    "networkx.disjoint_union",
    "networkx.empty_graph",
    "networkx.full_join",
    "networkx.relabel_nodes",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.generators.community.LFR_benchmark_graph": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": [
    "condition",
    "length",
    "list",
    "max",
    "min",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.community._generate_communities",
    "networkx.generators.community._generate_min_degree",
    "networkx.generators.community._powerlaw_sequence",
    "networkx.utils.py_random_state",
    "range",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.LFR_benchmark_graph.condition": {
  "data": {
   "lineno": 1036,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.LFR_benchmark_graph.length": {
  "data": {
   "lineno": 1039,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.__all__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "networkx.generators.community._generate_communities": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.ExceededMaxIterations",
    "range",
    "round",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community._generate_min_degree": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": [
    "abs",
    "int",
    "networkx.ExceededMaxIterations",
    "range",
    "round",
    "scipy.special.zeta"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community._powerlaw_sequence": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "condition",
    "length",
    "networkx.ExceededMaxIterations",
    "networkx.generators.community._zipf_rv_below",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community._zeta": {
  "data": {
   "shadows": "scipy.special.zeta"
  },
  "type": "import"
 },
 "networkx.generators.community._zipf_rv_below": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "networkx.utils.zipf_rv"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.caveman_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.generators.community.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.connected_caveman_graph": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.caveman_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.gaussian_random_partition_graph": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.NetworkXError",
    "networkx.generators.community.random_partition_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.community.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.community.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.community.planted_partition_graph": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "networkx.generators.community.random_partition_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.community.random_partition_graph": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.utils.py_random_state",
    "range",
    "stochastic_block_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.relaxed_caveman_graph": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "list",
    "networkx.caveman_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.ring_of_cliques": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.community.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.stochastic_block_model": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "StopIteration",
    "abs",
    "enumerate",
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXException",
    "networkx.generators.community.itertools",
    "networkx.generators.community.math",
    "networkx.utils.py_random_state",
    "next",
    "range",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.windmill_graph": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.disjoint_union_all",
    "networkx.generators.community.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.zeta": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "abs",
    "float"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq": {
  "data": {
   "symbols_in_volume": [
    "itertools.chain.from_iterable"
   ]
  },
  "type": "module"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph": {
  "data": {
   "lineno": 752
  },
  "type": "class"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "max",
    "networkx.NetworkXUnfeasible",
    "networkx.is_graphical",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "len",
    "list",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.p": {
  "data": {
   "lineno": 802
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "networkx.utils.random_weighted_sample",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2": {
  "data": {
   "lineno": 831,
   "symbols_in_volume": [
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3": {
  "data": {
   "lineno": 846,
   "symbols_in_volume": [
    "itertools.combinations",
    "list",
    "networkx.Graph",
    "networkx.NetworkXUnfeasible",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.q": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": [
    "float",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge": {
  "data": {
   "lineno": 811,
   "symbols_in_volume": [
    "any",
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining": {
  "data": {
   "lineno": 784
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.degree_seq._configuration_model": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "itertools.zip_longest",
    "len",
    "networkx.empty_graph",
    "networkx.generators.degree_seq._to_stublist",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq._to_stublist": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "enumerate",
    "list",
    "networkx.generators.degree_seq.chaini"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.chaini": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.generators.degree_seq.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.configuration_model": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.empty_graph",
    "networkx.generators.degree_seq._configuration_model",
    "networkx.utils.py_random_state",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.degree_sequence_tree": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.empty_graph",
    "range",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_configuration_model": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.generators.degree_seq._configuration_model",
    "networkx.utils.py_random_state",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_havel_hakimi_graph": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.heapq",
    "networkx.utils.make_list_of_ints",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.expected_degree_graph": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "len",
    "max",
    "min",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.math",
    "networkx.utils.py_random_state",
    "operator.itemgetter",
    "range",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.havel_hakimi_graph": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.is_graphical",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.random_degree_sequence_graph": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": [
    "DegreeSequenceRandomGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.random_weighted_sample": {
  "data": {
   "shadows": "networkx.utils.random_weighted_sample"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.zip_longest": {
  "data": {
   "shadows": "itertools.zip_longest"
  },
  "type": "import"
 },
 "networkx.generators.directed": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.directed.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "networkx.generators.directed.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.directed.discrete_sequence": {
  "data": {
   "shadows": "networkx.utils.discrete_sequence"
  },
  "type": "import"
 },
 "networkx.generators.directed.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.directed.gn_graph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "kernel",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.discrete_sequence",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.gn_graph.kernel": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "networkx.generators.directed.gnc_graph": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.gnr_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.py_random_state",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.directed.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.directed.random_k_out_graph": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "ValueError",
    "collections.Counter",
    "networkx.MultiDiGraph",
    "networkx.empty_graph",
    "networkx.utils.py_random_state",
    "networkx.utils.weighted_choice",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.random_uniform_k_out_graph": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.empty_graph",
    "networkx.utils.py_random_state",
    "sample",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.random_uniform_k_out_graph.sample": {
  "data": {
   "lineno": 367
  },
  "type": "function"
 },
 "networkx.generators.directed.scale_free_graph": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "ValueError",
    "_choose_node",
    "abs",
    "hasattr",
    "len",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.scale_free_graph._choose_node": {
  "data": {
   "lineno": 241
  },
  "type": "function"
 },
 "networkx.generators.directed.weighted_choice": {
  "data": {
   "shadows": "networkx.utils.weighted_choice"
  },
  "type": "import"
 },
 "networkx.generators.duplication": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.duplication.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.duplication.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.generators.duplication.duplication_divergence_graph": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.duplication.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.duplication.partial_duplication_graph": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "list",
    "networkx.all_neighbors",
    "networkx.complete_graph",
    "networkx.exception.NetworkXError",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.duplication.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.ego": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.ego.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.generators.ego.ego_graph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "dict",
    "networkx.single_source_dijkstra",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.generators.ego.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.expanders": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.expanders.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.generators.expanders.chordal_cycle_graph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "pow",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.expanders.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.expanders.margulis_gabber_galil_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.expanders.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.expanders.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.expanders.paley_graph": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.generators.geometric.KDTree": {
  "data": {
   "shadows": "scipy.spatial.cKDTree"
  },
  "type": "import"
 },
 "networkx.generators.geometric.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.generators.geometric._fast_edges": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "list",
    "networkx.get_node_attributes",
    "scipy.spatial.cKDTree",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric._is_scipy_available": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.geometric._slow_edges": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "abs",
    "itertools.combinations",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.accumulate": {
  "data": {
   "shadows": "itertools.accumulate"
  },
  "type": "import"
 },
 "networkx.generators.geometric.bisect_left": {
  "data": {
   "shadows": "bisect.bisect_left"
  },
  "type": "import"
 },
 "networkx.generators.geometric.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.generators.geometric.euclidean": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "math.sqrt",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "filter",
    "itertools.combinations",
    "networkx.Graph",
    "networkx.generators.geometric.euclidean",
    "networkx.set_node_attributes",
    "networkx.utils.nodes_or_number",
    "networkx.utils.py_random_state",
    "p_dist",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph.p_dist": {
  "data": {
   "lineno": 441
  },
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph.should_join": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "metric",
    "p_dist"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.geometric.navigable_small_world_graph": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": [
    "abs",
    "bisect.bisect_left",
    "itertools.accumulate",
    "itertools.product",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXException",
    "networkx.utils.py_random_state",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.nodes_or_number": {
  "data": {
   "shadows": "networkx.utils.nodes_or_number"
  },
  "type": "import"
 },
 "networkx.generators.geometric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.geometric.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.generators.geometric.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.geometric.random_geometric_graph": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.geometric._fast_edges",
    "networkx.generators.geometric._is_scipy_available",
    "networkx.generators.geometric._slow_edges",
    "networkx.set_node_attributes",
    "networkx.utils.nodes_or_number",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "filter",
    "itertools.combinations",
    "networkx.Graph",
    "networkx.generators.geometric._fast_edges",
    "networkx.generators.geometric._is_scipy_available",
    "networkx.set_node_attributes",
    "networkx.utils.nodes_or_number",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph.p_dist": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.generators.geometric.math"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.soft_random_geometric_graph.should_join": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "abs",
    "p_dist",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.generators.geometric.thresholded_random_geometric_graph": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "filter",
    "itertools.combinations",
    "networkx.Graph",
    "networkx.generators.geometric._fast_edges",
    "networkx.generators.geometric._is_scipy_available",
    "networkx.set_node_attributes",
    "networkx.utils.nodes_or_number",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.thresholded_random_geometric_graph.should_join": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "abs",
    "dist",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": [
    "filter",
    "itertools.combinations",
    "max",
    "metric",
    "networkx.Graph",
    "networkx.generators.geometric.euclidean",
    "networkx.set_node_attributes",
    "networkx.utils.nodes_or_number",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph.dist": {
  "data": {
   "lineno": 570
  },
  "type": "function"
 },
 "networkx.generators.geometric.waxman_graph.should_join": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "dist",
    "networkx.generators.geometric.math"
   ]
  },
  "type": "function"
 },
 "networkx.generators.harary_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.harary_graph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.harary_graph.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.generators.harary_graph.hkn_harary_graph": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.exception.NetworkXError",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.harary_graph.hnm_harary_graph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.exception.NetworkXError",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.harary_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.internet_as_graphs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator": {
  "data": {
   "lineno": 71
  },
  "type": "class"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.__init__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "int",
    "max",
    "min",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_cp_peering_link": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_customer": {
  "data": {
   "lineno": 165
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_edge": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_m_peering_link": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_node": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.generators.internet_as_graphs.uniform_int_from_avg",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.add_peering_links": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "networkx.generators.internet_as_graphs.uniform_int_from_avg",
    "peer_link_method",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.choose_node_pref_attach": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "dict",
    "networkx.generators.internet_as_graphs.choose_pref_attach"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.choose_peer_pref_attach": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.generators.internet_as_graphs.choose_pref_attach"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.generate": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "len",
    "list",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.graph_regions": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "range",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.AS_graph_generator.t_graph": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.Graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.internet_as_graphs.choose_pref_attach": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "len",
    "list",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.floor": {
  "data": {
   "shadows": "math.floor"
  },
  "type": "import"
 },
 "networkx.generators.internet_as_graphs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.internet_as_graphs.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.internet_as_graphs.random_internet_as_graph": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "networkx.generators.internet_as_graphs.AS_graph_generator",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.internet_as_graphs.uniform_int_from_avg": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "int",
    "math.floor",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.intersection.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.generators.intersection.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.generators.intersection.general_random_intersection_graph": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.empty_graph",
    "networkx.projected_graph",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection.k_random_intersection_graph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "len",
    "networkx.empty_graph",
    "networkx.projected_graph",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.intersection.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.intersection.uniform_random_intersection_graph": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.random_graph",
    "networkx.projected_graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.interval_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.interval_graph.Sequence": {
  "data": {
   "shadows": "collections.abc.Sequence"
  },
  "type": "import"
 },
 "networkx.generators.interval_graph.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.generators.interval_graph.interval_graph": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "collections.abc.Sequence",
    "isinstance",
    "len",
    "list",
    "networkx.Graph",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.interval_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.joint_degree_seq": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.joint_degree_seq.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.joint_degree_seq._directed_neighbor_switch": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq._directed_neighbor_switch_rev": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq._neighbor_switch": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.directed_joint_degree_graph": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.joint_degree_seq._directed_neighbor_switch",
    "networkx.generators.joint_degree_seq._directed_neighbor_switch_rev",
    "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree",
    "networkx.utils.py_random_state",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "float",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.is_valid_joint_degree": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.joint_degree_graph": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "int",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.joint_degree_seq._neighbor_switch",
    "networkx.generators.joint_degree_seq.is_valid_joint_degree",
    "networkx.utils.py_random_state",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.joint_degree_seq.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.joint_degree_seq.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.lattice": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.lattice.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.lattice.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.generators.lattice.cartesian_product": {
  "data": {
   "shadows": "networkx.algorithms.operators.product.cartesian_product"
  },
  "type": "import"
 },
 "networkx.generators.lattice.contracted_nodes": {
  "data": {
   "shadows": "networkx.algorithms.minors.contracted_nodes"
  },
  "type": "import"
 },
 "networkx.generators.lattice.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.generators.lattice.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.lattice.flatten": {
  "data": {
   "shadows": "networkx.utils.flatten"
  },
  "type": "import"
 },
 "networkx.generators.lattice.grid_2d_graph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "len",
    "networkx.generators.classic.empty_graph",
    "networkx.utils.iterable",
    "networkx.utils.nodes_or_number",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.lattice.grid_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "itertools.repeat",
    "networkx.algorithms.operators.product.cartesian_product",
    "networkx.generators.classic.cycle_graph",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.classic.path_graph",
    "networkx.relabel.relabel_nodes",
    "networkx.utils.flatten",
    "networkx.utils.iterable",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.generators.lattice.hexagonal_lattice_graph": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algorithms.minors.contracted_nodes",
    "networkx.classes.set_node_attributes",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.lattice.hypercube_graph": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.generators.lattice.grid_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.lattice.iterable": {
  "data": {
   "shadows": "networkx.utils.iterable"
  },
  "type": "import"
 },
 "networkx.generators.lattice.nodes_or_number": {
  "data": {
   "shadows": "networkx.utils.nodes_or_number"
  },
  "type": "import"
 },
 "networkx.generators.lattice.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.generators.lattice.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.generators.lattice.relabel_nodes": {
  "data": {
   "shadows": "networkx.relabel.relabel_nodes"
  },
  "type": "import"
 },
 "networkx.generators.lattice.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "networkx.generators.lattice.set_node_attributes": {
  "data": {
   "shadows": "networkx.classes.set_node_attributes"
  },
  "type": "import"
 },
 "networkx.generators.lattice.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.generators.lattice.triangular_lattice_graph": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algorithms.minors.contracted_nodes",
    "networkx.classes.set_node_attributes",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.line.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.generators.line._edge_func": {
  "data": {
   "lineno": 128
  },
  "type": "function"
 },
 "networkx.generators.line._edge_func.get_edges": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "networkx.generators.line._find_partition": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "list",
    "networkx.NetworkXError",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._lg_directed": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "get_edges",
    "networkx.empty_graph",
    "networkx.generators.line._edge_func"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._lg_undirected": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "enumerate",
    "get_edges",
    "len",
    "networkx.empty_graph",
    "networkx.generators.line._edge_func",
    "networkx.generators.line._node_func",
    "networkx.generators.line._sorted_edge",
    "set",
    "sorted_node"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._node_func": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "networkx.generators.line._node_func.sorted_node": {
  "data": {
   "lineno": 122
  },
  "type": "function"
 },
 "networkx.generators.line._odd_triangle": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "collections.defaultdict",
    "int",
    "itertools.combinations",
    "list",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._select_starting_cell": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.line._odd_triangle",
    "networkx.generators.line._triangles",
    "networkx.utils.arbitrary_element",
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._sorted_edge": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "networkx.generators.line._triangles": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.generators.line.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.generators.line.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.generators.line.generate_unique_node": {
  "data": {
   "shadows": "networkx.utils.generate_unique_node"
  },
  "type": "import"
 },
 "networkx.generators.line.inverse_line_graph": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "_find_partition",
    "_select_starting_cell",
    "itertools.combinations",
    "len",
    "list",
    "max",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.utils.decorators.not_implemented_for",
    "networkx.utils.generate_unique_node",
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line.line_graph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "_lg_directed",
    "_lg_undirected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.generators.line.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.mycielski": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.mycielski.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.generators.mycielski.mycielski_graph": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.mycielski.mycielskian",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.mycielski.mycielskian": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.utils.not_implemented_for",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.mycielski.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.generators.mycielski.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.nonisomorphic_trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.nonisomorphic_trees.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_graph": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_matrix": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_rooted_tree": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "len",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_tree": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "_split_tree",
    "len",
    "max",
    "networkx.generators.nonisomorphic_trees._next_rooted_tree",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._split_tree": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.nonisomorphic_trees": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ValueError",
    "_layout_to_graph",
    "_layout_to_matrix",
    "_next_rooted_tree",
    "_next_tree",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.generators.nonisomorphic_trees.nonisomorphic_trees",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.random_clustered.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.random_clustered.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered.random_clustered_graph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs": {
  "data": {
   "symbols_in_volume": [
    "networkx.generators.random_graphs.gnp_random_graph"
   ]
  },
  "type": "module"
 },
 "networkx.generators.random_graphs.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs._random_subset": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.barabasi_albert_graph": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": [
    "empty_graph",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs._random_subset",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.binomial_graph": {
  "data": {
   "lineno": 173
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs.connected_watts_strogatz_graph": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.random_graphs.watts_strogatz_graph",
    "networkx.is_connected",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.dense_gnm_random_graph": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "complete_graph",
    "empty_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.dual_barabasi_albert_graph": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "empty_graph",
    "list",
    "max",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs._random_subset",
    "networkx.generators.random_graphs.barabasi_albert_graph",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.erdos_renyi_graph": {
  "data": {
   "lineno": 174
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs.extended_barabasi_albert_graph": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": [
    "empty_graph",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs._random_subset",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.fast_gnp_random_graph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "empty_graph",
    "int",
    "networkx.DiGraph",
    "networkx.generators.random_graphs.math",
    "networkx.gnp_random_graph",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.gnm_random_graph": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "complete_graph",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.gnp_random_graph": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "complete_graph",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.random_graphs.itertools",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.newman_watts_strogatz_graph": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "empty_graph",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.optimize": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.powerlaw_cluster_graph": {
  "data": {
   "lineno": 928,
   "symbols_in_volume": [
    "empty_graph",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs._random_subset",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.random_kernel_graph": {
  "data": {
   "lineno": 1216,
   "symbols_in_volume": [
    "int",
    "kernel_integral",
    "kernel_root",
    "networkx.Graph",
    "networkx.generators.random_graphs.math",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_kernel_graph.kernel_root": {
  "data": {
   "lineno": 1279,
   "symbols_in_volume": [
    "scipy.optimize.brentq"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_kernel_graph.kernel_root.my_function": {
  "data": {
   "lineno": 1280,
   "symbols_in_volume": [
    "kernel_integral"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_lobster": {
  "data": {
   "lineno": 1017,
   "symbols_in_volume": [
    "abs",
    "any",
    "int",
    "networkx.NetworkXError",
    "networkx.utils.py_random_state",
    "path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree": {
  "data": {
   "lineno": 1124,
   "symbols_in_volume": [
    "degree_sequence_tree",
    "networkx.utils.py_random_state",
    "random_powerlaw_tree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree_sequence": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": [
    "int",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.utils.powerlaw_sequence",
    "networkx.utils.py_random_state",
    "round",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "_try_creation",
    "empty_graph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._suitable": {
  "data": {
   "lineno": 541
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._try_creation": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "_suitable",
    "collections.defaultdict",
    "iter",
    "list",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_shell_graph": {
  "data": {
   "lineno": 1067,
   "symbols_in_volume": [
    "empty_graph",
    "int",
    "len",
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.generators.random_graphs.gnm_random_graph",
    "networkx.operators.union",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.watts_strogatz_graph": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.utils.py_random_state",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.small.LCF_graph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.cycle_graph",
    "networkx.generators.classic.empty_graph",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.small.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.small.bull_graph": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.chvatal_graph": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.complete_graph": {
  "data": {
   "shadows": "networkx.generators.classic.complete_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.cubical_graph": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.desargues_graph": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.diamond_graph": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.dodecahedral_graph": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.frucht_graph": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.heawood_graph": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.hoffman_singleton_graph": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.convert_node_labels_to_integers",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.house_graph": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.house_x_graph": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.icosahedral_graph": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.krackhardt_kite_graph": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.make_small_graph": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "len",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.make_small_undirected_graph": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "make_small_graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.moebius_kantor_graph": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.small.octahedral_graph": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.pappus_graph": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.petersen_graph": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.sedgewick_maze_graph": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "networkx.generators.classic.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.tetrahedral_graph": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "networkx.generators.classic.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.truncated_cube_graph": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.truncated_tetrahedron_graph": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.tutte_graph": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.social.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.social.davis_southern_women_graph": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "events",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.florentine_families_graph": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.karate_club_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "networkx.Graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.les_miserables_graph": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.spectral_graph_forge": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.spectral_graph_forge.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.generators.spectral_graph_forge._mat_spect_approx": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "len",
    "numpy.abs",
    "numpy.argsort",
    "numpy.diag",
    "numpy.flipud",
    "numpy.linalg.eigh",
    "numpy.ravel",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.spectral_graph_forge.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.generators.spectral_graph_forge.np_random_state": {
  "data": {
   "shadows": "networkx.utils.np_random_state"
  },
  "type": "import"
 },
 "networkx.generators.spectral_graph_forge.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.spectral_graph_forge.spectral_graph_forge": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "int",
    "networkx.NetworkXError",
    "networkx.from_numpy_array",
    "networkx.generators.spectral_graph_forge._mat_spect_approx",
    "networkx.to_numpy_array",
    "networkx.utils.np_random_state",
    "numpy.clip",
    "numpy.fill_diagonal",
    "numpy.ones",
    "numpy.transpose",
    "range",
    "round",
    "scipy.stats.bernoulli.rvs"
   ]
  },
  "type": "function"
 },
 "networkx.generators.spectral_graph_forge.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "networkx.generators.stochastic": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.stochastic.DiGraph": {
  "data": {
   "shadows": "networkx.classes.DiGraph"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.MultiDiGraph": {
  "data": {
   "shadows": "networkx.classes.MultiDiGraph"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.generators.stochastic.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.stochastic_graph": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.DiGraph",
    "networkx.classes.MultiDiGraph",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.generators.sudoku": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.sudoku.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.sudoku.__all__": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "networkx.generators.sudoku.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.sudoku.sudoku_graph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.exception.NetworkXError",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_atlas": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_atlas.NUM_GRAPHS": {
  "data": {
   "shadows": "networkx.generators.atlas.NUM_GRAPHS"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_graph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.graph_atlas",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_large": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError",
    "networkx.generators.atlas.NUM_GRAPHS",
    "networkx.generators.tests.test_atlas.pytest",
    "networkx.graph_atlas"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_small": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ValueError",
    "networkx.generators.tests.test_atlas.pytest",
    "networkx.graph_atlas"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG": {
  "data": {
   "lineno": 30
  },
  "type": "class"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.setup_class": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "classmethod",
    "networkx.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_names": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "enumerate",
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_degree_sequence": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "itertools.groupby",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.utils.pairwise",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_edges": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "itertools.groupby",
    "map",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_nodes": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "len",
    "map",
    "networkx.utils.pairwise"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlasGraphG.test_sizes": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.graph_atlas": {
  "data": {
   "shadows": "networkx.graph_atlas"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.graph_atlas_g": {
  "data": {
   "shadows": "networkx.graph_atlas_g"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.groupby": {
  "data": {
   "shadows": "itertools.groupby"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
   ]
  },
  "type": "module"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "len",
    "networkx.balanced_tree",
    "networkx.degree_histogram",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_path": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.barbell_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_binomial_tree": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "networkx.binomial_tree",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circulant_graph": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.circulant_graph",
    "networkx.complete_bipartite_graph",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.circular_ladder_graph",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_0_partite_graph": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.null_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_1_partite_graph": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.empty_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_2_partite_graph": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.complete_multipartite_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_multipartite_graph": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.generators.tests.test_classic.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_create_using": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.empty_graph",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.cycle_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.average_clustering",
    "networkx.dorogovtsev_goltsev_mendes_graph",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.triangles",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.empty_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "len",
    "networkx.degree_histogram",
    "networkx.full_rary_tree",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.full_rary_tree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.balanced_tree",
    "networkx.full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.grid_graph",
    "networkx.hypercube_graph",
    "networkx.ladder_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.lollipop_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "networkx.null_graph",
    "networkx.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.empty_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.is_connected",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.complete_bipartite_graph",
    "networkx.empty_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.path_graph",
    "networkx.star_graph",
    "networkx.testing.assert_edges_equal",
    "sorted",
    "star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "networkx.number_of_nodes",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_turan_graph": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.number_of_edges",
    "networkx.turan_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "networkx.generators.tests.test_classic.pytest",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.wheel_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.is_isomorphic": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_classic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_cographs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_cographs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_cographs.test_random_cograph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "len",
    "networkx.connected_components",
    "networkx.diameter",
    "networkx.is_connected",
    "networkx.random_cograph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_community.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_community.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_community.test_both_degrees_none": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_caveman_graph": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "len",
    "networkx.caveman_graph",
    "networkx.complete_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_connected_caveman_graph": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.connected_caveman_graph",
    "networkx.generators.tests.test_community.pytest",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_gaussian_random_partition_graph": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.gaussian_random_partition_graph",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_generator": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "frozenset",
    "len",
    "networkx.LFR_benchmark_graph",
    "networkx.community.is_partition"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_invalid_tau1": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_invalid_tau2": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_mu_too_large": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_mu_too_small": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_neither_degrees_none": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "networkx.LFR_benchmark_graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_planted_partition_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest",
    "networkx.planted_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_random_partition_graph": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest",
    "networkx.random_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_relaxed_caveman_graph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "len",
    "networkx.relaxed_caveman_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_ring_of_cliques": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest",
    "networkx.ring_of_cliques",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_stochastic_block_model": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXException",
    "networkx.generators.tests.test_community.pytest",
    "networkx.stochastic_block_model",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_windmill_graph": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.tests.test_community.pytest",
    "networkx.ring_of_cliques",
    "networkx.windmill_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_sequence": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "len",
    "networkx.configuration_model",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_zero": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "len",
    "networkx.configuration_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_directed_disallowed": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.configuration_model",
    "networkx.generators.tests.test_degree_seq.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_empty_degree_sequence": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "len",
    "networkx.configuration_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_odd_degree_sum": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.configuration_model",
    "networkx.generators.tests.test_degree_seq.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_random_seed": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.configuration_model",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_degree_seq.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_degree_seq.test_degree_sequence_tree": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.degree_sequence_tree",
    "networkx.generators.tests.test_degree_seq.pytest",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_model": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "len",
    "networkx.directed_configuration_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_raise_unequal": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.directed_configuration_model",
    "networkx.generators.tests.test_degree_seq.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_havel_hakimi": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "list",
    "networkx.directed_havel_hakimi_graph",
    "networkx.erdos_renyi_graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_degree_seq.pytest",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "len",
    "networkx.expected_degree_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_empty": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "dict",
    "networkx.expected_degree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_selfloops": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "len",
    "networkx.expected_degree_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_skew": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "len",
    "networkx.expected_degree_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.configuration_model",
    "networkx.generators.tests.test_degree_seq.pytest",
    "networkx.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "networkx.random_degree_sequence_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.generators.tests.test_degree_seq.pytest",
    "networkx.random_degree_sequence_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_large": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "networkx.fast_gnp_random_graph",
    "networkx.random_degree_sequence_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_simple_directed_configuation_model": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "len",
    "networkx.directed_configuration_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_directed.Graph": {
  "data": {
   "shadows": "networkx.classes.Graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.MultiDiGraph": {
  "data": {
   "shadows": "networkx.classes.MultiDiGraph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected": {
  "data": {
   "lineno": 17
  },
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ValueError",
    "networkx.NetworkXError",
    "networkx.classes.Graph",
    "networkx.classes.MultiDiGraph",
    "networkx.generators.directed.gn_graph",
    "networkx.generators.directed.gnc_graph",
    "networkx.generators.directed.gnr_graph",
    "networkx.generators.directed.scale_free_graph",
    "networkx.generators.tests.test_directed.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.generators.directed.gn_graph",
    "networkx.generators.directed.gnc_graph",
    "networkx.generators.directed.gnr_graph",
    "networkx.generators.directed.scale_free_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph": {
  "data": {
   "lineno": 60
  },
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph.test_no_self_loops": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.generators.directed.random_k_out_graph",
    "networkx.number_of_selfloops"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestRandomKOutGraph.test_regularity": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "all",
    "networkx.generators.directed.random_k_out_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph": {
  "data": {
   "lineno": 85
  },
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_no_self_loops": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "all",
    "networkx.generators.directed.random_uniform_k_out_graph",
    "networkx.number_of_selfloops"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_regularity": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "all",
    "networkx.generators.directed.random_uniform_k_out_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_with_replacement": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "all",
    "networkx.generators.directed.random_uniform_k_out_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_without_replacement": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "all",
    "networkx.generators.directed.random_uniform_k_out_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.gn_graph": {
  "data": {
   "shadows": "networkx.generators.directed.gn_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.gnc_graph": {
  "data": {
   "shadows": "networkx.generators.directed.gnc_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.gnr_graph": {
  "data": {
   "shadows": "networkx.generators.directed.gnr_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.random_k_out_graph": {
  "data": {
   "shadows": "networkx.generators.directed.random_k_out_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.random_uniform_k_out_graph": {
  "data": {
   "shadows": "networkx.generators.directed.random_uniform_k_out_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed.scale_free_graph": {
  "data": {
   "shadows": "networkx.generators.directed.scale_free_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_duplication": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_duplication.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_final_size": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "len",
    "networkx.generators.duplication.duplication_divergence_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_large": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.duplication.duplication_divergence_graph",
    "networkx.generators.tests.test_duplication.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_small": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.duplication.duplication_divergence_graph",
    "networkx.generators.tests.test_duplication.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph": {
  "data": {
   "lineno": 33
  },
  "type": "class"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_final_size": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "len",
    "networkx.generators.duplication.partial_duplication_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_initial_clique_size": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "len",
    "networkx.generators.duplication.partial_duplication_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_initial_size": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.duplication.partial_duplication_graph",
    "networkx.generators.tests.test_duplication.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_probabilities": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.duplication.partial_duplication_graph",
    "networkx.generators.tests.test_duplication.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_duplication.duplication_divergence_graph": {
  "data": {
   "shadows": "networkx.generators.duplication.duplication_divergence_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_duplication.partial_duplication_graph": {
  "data": {
   "shadows": "networkx.generators.duplication.partial_duplication_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_duplication.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_ego": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.ego_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.star_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.ego_graph",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_ego.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_ego.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_ego.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_expanders.adjacency_matrix": {
  "data": {
   "shadows": "networkx.adjacency_matrix"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.chordal_cycle_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.chordal_cycle_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.margulis_gabber_galil_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.margulis_gabber_galil_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.number_of_nodes": {
  "data": {
   "shadows": "networkx.number_of_nodes"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.paley_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.paley_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.test_chordal_cycle_graph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "len",
    "networkx.generators.expanders.chordal_cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.adjacency_matrix",
    "networkx.generators.expanders.margulis_gabber_galil_graph",
    "networkx.generators.tests.test_expanders.pytest",
    "networkx.number_of_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_badinput": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.expanders.margulis_gabber_galil_graph",
    "networkx.generators.tests.test_expanders.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_paley_graph": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "len",
    "networkx.generators.expanders.paley_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph": {
  "data": {
   "lineno": 182
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_distances": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.generators.geometric.euclidean",
    "networkx.generators.tests.test_geometric.join",
    "networkx.geographical_threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_metric": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.generators.tests.test_geometric.join",
    "networkx.generators.tests.test_geometric.l1dist",
    "networkx.geographical_threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_number_of_nodes": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "len",
    "networkx.geographical_threshold_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_p_dist_zero": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "len",
    "networkx.geographical_threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_p_dist_zero.p_dist": {
  "data": {
   "lineno": 232
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph": {
  "data": {
   "lineno": 265
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph.test_navigable_small_world": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.grid_2d_graph",
    "networkx.grid_graph",
    "networkx.is_isomorphic",
    "networkx.navigable_small_world_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_distances": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.generators.geometric.euclidean",
    "networkx.random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_node_names": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "len",
    "list",
    "networkx.generators.geometric.euclidean",
    "networkx.generators.tests.test_geometric.string",
    "networkx.random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_number_of_nodes": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "len",
    "networkx.random_geometric_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_p": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.generators.tests.test_geometric.l1dist",
    "networkx.random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph": {
  "data": {
   "lineno": 79
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_distances": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.soft_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_distances.dist": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "math.sqrt",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_node_names": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "len",
    "list",
    "networkx.generators.tests.test_geometric.string",
    "networkx.soft_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_node_names.dist": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "math.sqrt",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_number_of_nodes": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "len",
    "networkx.soft_random_geometric_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.soft_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p.dist": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "abs",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_default": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "len",
    "networkx.generators.tests.test_geometric.random",
    "networkx.random_geometric_graph",
    "networkx.soft_random_geometric_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_zero": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "len",
    "networkx.soft_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_zero.p_dist": {
  "data": {
   "lineno": 157
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph": {
  "data": {
   "lineno": 280
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_distances": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.thresholded_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_distances.dist": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "math.sqrt",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_node_names": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "len",
    "list",
    "networkx.generators.tests.test_geometric.string",
    "networkx.thresholded_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_node_names.dist": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "math.sqrt",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_number_of_nodes": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "len",
    "networkx.thresholded_random_geometric_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_p": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "dist",
    "itertools.combinations",
    "networkx.thresholded_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_p.dist": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "abs",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_theta": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.thresholded_random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph": {
  "data": {
   "lineno": 239
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_metric": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "dist",
    "len",
    "networkx.generators.tests.test_geometric.l1dist",
    "networkx.waxman_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_1": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "len",
    "networkx.waxman_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_2": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "len",
    "networkx.waxman_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_geometric.euclidean": {
  "data": {
   "shadows": "networkx.generators.geometric.euclidean"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_geometric.join": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "metric"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.l1dist": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "abs",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_geometric.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_geometric.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_geometric.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_harary_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hkn_harary_graph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.isomorphism.isomorph.is_isomorphic",
    "networkx.circulant_graph",
    "networkx.generators.harary_graph.hkn_harary_graph",
    "networkx.generators.tests.test_harary_graph.pytest",
    "networkx.path_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hnm_harary_graph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.isomorphism.isomorph.is_isomorphic",
    "networkx.circulant_graph",
    "networkx.generators.harary_graph.hnm_harary_graph",
    "networkx.generators.tests.test_harary_graph.pytest",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_harary_graph.hkn_harary_graph": {
  "data": {
   "shadows": "networkx.generators.harary_graph.hkn_harary_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_harary_graph.hnm_harary_graph": {
  "data": {
   "shadows": "networkx.generators.harary_graph.hnm_harary_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_harary_graph.is_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.is_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_harary_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_harary_graph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_internet_as_graphs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_customers": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "ValueError",
    "classmethod",
    "int",
    "networkx.neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_providers": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "ValueError",
    "classmethod",
    "int",
    "networkx.neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.setup_class": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "ValueError",
    "classmethod",
    "networkx.generators.internet_as_graphs.random_internet_as_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_connectivity": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_degree_values": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "len",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_node_numbers": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "int",
    "len",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_relationships": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_wrong_input": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "len",
    "networkx.generators.internet_as_graphs.random_internet_as_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_internet_as_graphs.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_internet_as_graphs.is_connected": {
  "data": {
   "shadows": "networkx.is_connected"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_internet_as_graphs.neighbors": {
  "data": {
   "shadows": "networkx.neighbors"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_internet_as_graphs.random_internet_as_graph": {
  "data": {
   "shadows": "networkx.generators.internet_as_graphs.random_internet_as_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_intersection": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.general_random_intersection_graph",
    "networkx.generators.tests.test_intersection.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "len",
    "networkx.k_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph_seeded": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "len",
    "networkx.k_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "len",
    "networkx.uniform_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_intersection.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_interval_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_empty": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "len",
    "networkx.generators.interval_graph.interval_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_0": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_1": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_2": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_3": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_4": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.interval_graph",
    "networkx.neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_5": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.generators.tests.test_interval_graph.math",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_check_invalid": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "networkx.generators.interval_graph.interval_graph",
    "networkx.generators.tests.test_interval_graph.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_interval_graph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_interval_graph.interval_graph": {
  "data": {
   "shadows": "networkx.generators.interval_graph.interval_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_interval_graph.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_interval_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_interval_graph.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_joint_degree_seq.degree_mixing_dict": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.degree_mixing_dict"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.directed_joint_degree_graph": {
  "data": {
   "shadows": "networkx.generators.joint_degree_seq.directed_joint_degree_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.gnm_random_graph": {
  "data": {
   "shadows": "networkx.generators.gnm_random_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.is_valid_directed_joint_degree": {
  "data": {
   "shadows": "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.is_valid_joint_degree": {
  "data": {
   "shadows": "networkx.generators.joint_degree_seq.is_valid_joint_degree"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.joint_degree_graph": {
  "data": {
   "shadows": "networkx.generators.joint_degree_seq.joint_degree_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.powerlaw_cluster_graph": {
  "data": {
   "shadows": "networkx.generators.powerlaw_cluster_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_directed_joint_degree_graph": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.algorithms.assortativity.degree_mixing_dict",
    "networkx.generators.gnm_random_graph",
    "networkx.generators.joint_degree_seq.directed_joint_degree_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_is_valid_directed_joint_degree": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.generators.joint_degree_seq.is_valid_directed_joint_degree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_is_valid_joint_degree": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.generators.joint_degree_seq.is_valid_joint_degree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.test_joint_degree_graph": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.assortativity.degree_mixing_dict",
    "networkx.generators.joint_degree_seq.joint_degree_graph",
    "networkx.generators.powerlaw_cluster_graph",
    "networkx.generators.tests.test_joint_degree_seq.time",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_joint_degree_seq.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_lattice": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_degree_distribution": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.degree_histogram",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_directed": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_multigraph": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_node_input": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.grid_2d_graph",
    "networkx.is_isomorphic",
    "networkx.testing.assert_edges_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_number_of_vertices": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "len",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "dict",
    "networkx.circular_ladder_graph",
    "networkx.could_be_isomorphic",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_directed": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_iterable": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "itertools.product",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_multigraph": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph": {
  "data": {
   "lineno": 82
  },
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_grid_graph": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "len",
    "networkx.degree_histogram",
    "networkx.grid_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_node_input": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "len",
    "networkx.grid_graph",
    "networkx.is_isomorphic",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestGridGraph.test_periodic_iterable": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "itertools.product",
    "networkx.grid_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph": {
  "data": {
   "lineno": 193
  },
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_directed": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.get_node_attributes",
    "networkx.hexagonal_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_lattice_points": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "len",
    "networkx.cycle_graph",
    "networkx.hexagonal_lattice_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_multigraph": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.hexagonal_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_periodic": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_lattice.pytest",
    "networkx.hexagonal_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph": {
  "data": {
   "lineno": 126
  },
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph.test_degree_distribution": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.degree_histogram",
    "networkx.hypercube_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestHypercubeGraph.test_special_cases": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.could_be_isomorphic",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.hypercube_graph",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph": {
  "data": {
   "lineno": 146
  },
  "type": "class"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_directed": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.triangular_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_lattice_points": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "len",
    "networkx.triangular_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_multigraph": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.triangular_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_periodic": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_lattice.pytest",
    "networkx.triangular_lattice_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_lattice.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_lattice.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_lattice.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_lattice.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine": {
  "data": {
   "lineno": 92
  },
  "type": "class"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_K1": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_claw": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.tests.test_line.pytest",
    "networkx.inverse_line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_cycle": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_empty": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.complete_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example_2": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_complete": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_cycle": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_dgm": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "networkx.dorogovtsev_goltsev_mendes_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_hypercube": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "networkx.hypercube_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_multipartite": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_path": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_star": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_non_line_graph": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.generators.tests.test_line.pytest",
    "networkx.inverse_line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_pair": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_triangle_graph": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.complete_graph",
    "networkx.inverse_line_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorInverseLine.test_wrong_graph_type": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.generators.tests.test_line.pytest",
    "networkx.inverse_line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine": {
  "data": {
   "lineno": 50
  },
  "type": "class"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create1": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.line_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create2": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.line_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_cycle": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph1": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph2": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.line_graph",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_path": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_star": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.line": {
  "data": {
   "shadows": "networkx.generators.line"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.test_edge_func": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "ef",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.generators.line._edge_func",
    "networkx.testing.utils.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_node_func": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.line._node_func",
    "nf"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_sorted_edge": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.generators.line._sorted_edge"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_construction": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "networkx.mycielskian",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_mycielski_graph_generator": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.mycielski_graph",
    "networkx.mycielskian",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski.TestMycielski.test_size": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "len",
    "networkx.mycielskian",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_mycielski.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_nonisomorphic_trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "f",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees.f": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "list",
    "networkx.nonisomorphic_trees"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees_matrix": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "list",
    "networkx.nonisomorphic_trees"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "f",
    "len",
    "networkx.is_isomorphic",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism.f": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "list",
    "networkx.nonisomorphic_trees"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.number_of_nonisomorphic_trees"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "f",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure.f": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "list",
    "networkx.nonisomorphic_trees"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_clustered": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "TypeError",
    "networkx.generators.tests.test_random_clustered.networkx",
    "networkx.generators.tests.test_random_clustered.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "TypeError",
    "networkx.generators.tests.test_random_clustered.networkx",
    "networkx.generators.tests.test_random_clustered.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.generators.tests.test_random_clustered.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.generators.tests.test_random_clustered.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_clustered.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_random_graphs.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom": {
  "data": {
   "lineno": 28
  },
  "type": "class"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_dual_barabasi_albert": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.random_graphs.barabasi_albert_graph",
    "networkx.generators.random_graphs.dual_barabasi_albert_graph",
    "networkx.generators.tests.test_random_graphs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_extended_barabasi_albert": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.random_graphs.barabasi_albert_graph",
    "networkx.generators.random_graphs.extended_barabasi_albert_graph",
    "networkx.generators.tests.test_random_graphs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "len",
    "networkx.generators.random_graphs.gnm_random_graph",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnp": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "abs",
    "float",
    "generator",
    "len",
    "networkx.generators.random_graphs.binomial_graph",
    "networkx.generators.random_graphs.erdos_renyi_graph",
    "networkx.generators.random_graphs.fast_gnp_random_graph",
    "networkx.generators.random_graphs.gnp_random_graph",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "is_caterpillar",
    "is_lobster",
    "len",
    "max",
    "networkx.exception.NetworkXError",
    "networkx.generators.random_graphs.barabasi_albert_graph",
    "networkx.generators.random_graphs.binomial_graph",
    "networkx.generators.random_graphs.connected_watts_strogatz_graph",
    "networkx.generators.random_graphs.dense_gnm_random_graph",
    "networkx.generators.random_graphs.erdos_renyi_graph",
    "networkx.generators.random_graphs.extended_barabasi_albert_graph",
    "networkx.generators.random_graphs.fast_gnp_random_graph",
    "networkx.generators.random_graphs.gnm_random_graph",
    "networkx.generators.random_graphs.gnp_random_graph",
    "networkx.generators.random_graphs.newman_watts_strogatz_graph",
    "networkx.generators.random_graphs.powerlaw_cluster_graph",
    "networkx.generators.random_graphs.random_lobster",
    "networkx.generators.random_graphs.random_powerlaw_tree",
    "networkx.generators.random_graphs.random_powerlaw_tree_sequence",
    "networkx.generators.random_graphs.random_regular_graph",
    "networkx.generators.random_graphs.random_shell_graph",
    "networkx.generators.random_graphs.watts_strogatz_graph",
    "networkx.generators.tests.test_random_graphs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph.is_caterpillar": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph.is_lobster": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "is_caterpillar"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "len",
    "networkx.generators.random_graphs.random_kernel_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph.integral": {
  "data": {
   "lineno": 291
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph.root": {
  "data": {
   "lineno": 294
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_zero_regular_graph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "len",
    "networkx.generators.random_graphs.random_regular_graph",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_watts_strogatz_big_k": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.random_graphs.newman_watts_strogatz_graph",
    "networkx.generators.random_graphs.watts_strogatz_graph",
    "networkx.generators.tests.test_random_graphs.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.barabasi_albert_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.barabasi_albert_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.binomial_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.binomial_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.connected_watts_strogatz_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.connected_watts_strogatz_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.dense_gnm_random_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.dense_gnm_random_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.dual_barabasi_albert_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.dual_barabasi_albert_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.erdos_renyi_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.erdos_renyi_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.extended_barabasi_albert_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.extended_barabasi_albert_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.fast_gnp_random_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.fast_gnp_random_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.gnm_random_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.gnm_random_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.gnp_random_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.gnp_random_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.newman_watts_strogatz_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.newman_watts_strogatz_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.powerlaw_cluster_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.powerlaw_cluster_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_kernel_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_kernel_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_lobster": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_lobster"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_powerlaw_tree": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_powerlaw_tree"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_powerlaw_tree_sequence": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_powerlaw_tree_sequence"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_regular_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_regular_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.random_shell_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.random_shell_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs.watts_strogatz_graph": {
  "data": {
   "shadows": "networkx.generators.random_graphs.watts_strogatz_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_small": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
    "networkx.null_graph"
   ]
  },
  "type": "module"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.LCF_graph",
    "networkx.complete_bipartite_graph",
    "networkx.cycle_graph",
    "networkx.generators.tests.test_small.is_isomorphic",
    "networkx.generators.tests.test_small.null"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_make_small_graph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.bull_graph",
    "networkx.generators.tests.test_small.is_isomorphic",
    "networkx.generators.tests.test_small.pytest",
    "networkx.make_small_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.bull_graph",
    "networkx.chvatal_graph",
    "networkx.cubical_graph",
    "networkx.desargues_graph",
    "networkx.diameter",
    "networkx.diamond_graph",
    "networkx.dodecahedral_graph",
    "networkx.frucht_graph",
    "networkx.generators.tests.test_small.pytest",
    "networkx.heawood_graph",
    "networkx.hoffman_singleton_graph",
    "networkx.house_graph",
    "networkx.house_x_graph",
    "networkx.icosahedral_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.moebius_kantor_graph",
    "networkx.octahedral_graph",
    "networkx.pappus_graph",
    "networkx.petersen_graph",
    "networkx.radius",
    "networkx.sedgewick_maze_graph",
    "networkx.tetrahedral_graph",
    "networkx.truncated_cube_graph",
    "networkx.truncated_tetrahedron_graph",
    "networkx.tutte_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_small.is_isomorphic": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_small.null": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_small.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_small.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_spectral_graph_forge.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.is_isomorphic": {
  "data": {
   "shadows": "networkx.is_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.karate_club_graph": {
  "data": {
   "shadows": "networkx.generators.karate_club_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.spectral_graph_forge": {
  "data": {
   "shadows": "networkx.generators.spectral_graph_forge.spectral_graph_forge"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_spectral_graph_forge.test_spectral_graph_forge": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.karate_club_graph",
    "networkx.generators.spectral_graph_forge.spectral_graph_forge",
    "networkx.generators.tests.test_spectral_graph_forge.pytest",
    "networkx.is_isomorphic",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_arbitrary_weights": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.stochastic_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_default_weights": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "networkx.stochastic_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_graph_disallowed": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.generators.tests.test_stochastic.pytest",
    "networkx.stochastic_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_in_place": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.stochastic_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multidigraph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.stochastic_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multigraph_disallowed": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.generators.tests.test_stochastic.pytest",
    "networkx.stochastic_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_stochastic.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_sudoku": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_sudoku.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_sudoku.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_sudoku.test_sudoku_generator": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "all",
    "networkx.generators.tests.test_sudoku.pytest",
    "networkx.sudoku_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_sudoku.test_sudoku_negative": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.tests.test_sudoku.pytest",
    "networkx.sudoku_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_trees.NIL": {
  "data": {
   "shadows": "networkx.generators.trees.NIL"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree.test_basic": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "len",
    "networkx.generators.trees.NIL",
    "networkx.prefix_tree",
    "networkx.utils.arbitrary_element",
    "sorted",
    "source_label"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_trees.TestPrefixTree.test_basic.source_label": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "networkx.generators.tests.test_trees.arbitrary_element": {
  "data": {
   "shadows": "networkx.utils.arbitrary_element"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_trees.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_trees.test_random_tree": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.is_tree",
    "networkx.random_tree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_triads": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_triads.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_triads.test_invalid_name": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ValueError",
    "networkx.generators.tests.test_triads.pytest",
    "networkx.triad_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_triads.test_triad_graph": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.triad_graph",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_triads.triad_graph": {
  "data": {
   "shadows": "networkx.triad_graph"
  },
  "type": "import"
 },
 "networkx.generators.trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.trees.NIL": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.trees.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.generators.trees.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.generators.trees.generate_unique_node": {
  "data": {
   "shadows": "networkx.utils.generate_unique_node"
  },
  "type": "import"
 },
 "networkx.generators.trees.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.trees.prefix_tree": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "_helper",
    "networkx.DiGraph",
    "networkx.generators.trees.NIL",
    "networkx.utils.generate_unique_node"
   ]
  },
  "type": "function"
 },
 "networkx.generators.trees.prefix_tree._helper": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "_helper",
    "collections.defaultdict",
    "list",
    "networkx.generators.trees.NIL",
    "networkx.utils.generate_unique_node"
   ]
  },
  "type": "function"
 },
 "networkx.generators.trees.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.generators.trees.random_tree": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.empty_graph",
    "networkx.from_prufer_sequence",
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.triads": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.triads.DiGraph": {
  "data": {
   "shadows": "networkx.classes.DiGraph"
  },
  "type": "import"
 },
 "networkx.generators.triads.TRIAD_EDGES": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.triads.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.generators.triads.triad_graph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ValueError",
    "networkx.classes.DiGraph",
    "networkx.generators.triads.TRIAD_EDGES"
   ]
  },
  "type": "function"
 },
 "networkx.linalg": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "functools.partial",
    "networkx.linalg.algebraicconnectivity.__all__",
    "numpy.dot",
    "numpy.linalg.norm",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.blas.ddot"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ImportError",
    "scikits.sparse.cholmod.cholesky"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.__init__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "A",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.solve": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "ImportError",
    "functools.partial",
    "scipy.sparse.linalg.splu"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.__init__": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "A",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.solve": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.ndarray",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver": {
  "data": {
   "lineno": 35
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.__init__": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver._solve": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "A",
    "M",
    "numpy.zeros",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.blas.daxpy",
    "scipy.linalg.blas.ddot"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.solve": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.ndarray",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func.find_fiedler": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "M",
    "float",
    "numpy.asarray",
    "numpy.atleast_2d",
    "numpy.ones",
    "numpy.sqrt",
    "scipy.sparse.csc_matrix",
    "scipy.sparse.linalg.eigsh",
    "scipy.sparse.linalg.lobpcg",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._preprocess_graph": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "abs",
    "networkx.Graph",
    "networkx.MultiGraph",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._rcm_estimate": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "float",
    "len",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.ndarray",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "A",
    "A.indptr.argmax",
    "abs",
    "float",
    "networkx.NetworkXError",
    "networkx.linalg.algebraicconnectivity._CholeskySolver",
    "networkx.linalg.algebraicconnectivity._LUSolver",
    "networkx.linalg.algebraicconnectivity._PCGSolver",
    "numpy.asarray",
    "numpy.linalg.norm",
    "numpy.linalg.qr",
    "numpy.ndarray",
    "numpy.sqrt",
    "project",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.eigh",
    "scipy.linalg.inv",
    "scipy.sparse.csc_matrix",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler.project": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "numpy.asarray",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.algebraic_connectivity": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "networkx.utils.not_implemented_for",
    "networkx.utils.random_state"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.asarray": {
  "data": {
   "shadows": "numpy.asarray"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.atleast_2d": {
  "data": {
   "shadows": "numpy.atleast_2d"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.cholesky": {
  "data": {
   "shadows": "scikits.sparse.cholmod.cholesky"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.csc_matrix": {
  "data": {
   "shadows": "scipy.sparse.csc_matrix"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.dasum": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.daxpy": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.ddot": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.dot": {
  "data": {
   "shadows": "numpy.dot"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.eigh": {
  "data": {
   "shadows": "scipy.linalg.eigh"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.eigsh": {
  "data": {
   "shadows": "scipy.sparse.linalg.eigsh"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.fiedler_vector": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "networkx.utils.not_implemented_for",
    "networkx.utils.random_state",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.inv": {
  "data": {
   "shadows": "scipy.linalg.inv"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.lobpcg": {
  "data": {
   "shadows": "scipy.sparse.linalg.lobpcg"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.norm": {
  "data": {
   "shadows": "numpy.linalg.norm"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.ones": {
  "data": {
   "shadows": "numpy.ones"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.qr": {
  "data": {
   "shadows": "numpy.linalg.qr"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.random_state": {
  "data": {
   "shadows": "networkx.utils.random_state"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.spdiags": {
  "data": {
   "shadows": "scipy.sparse.spdiags"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.spectral_ordering": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.connected_components",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "networkx.utils.random_state",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.splu": {
  "data": {
   "shadows": "scipy.sparse.linalg.splu"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.sqrt": {
  "data": {
   "shadows": "numpy.sqrt"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.zeros": {
  "data": {
   "shadows": "numpy.zeros"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.attrmatrix.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.attrmatrix._edge_value": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix._edge_value.value": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix._node_value": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix._node_value.value": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_matrix": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "edge_value",
    "len",
    "list",
    "networkx.linalg.attrmatrix._edge_value",
    "networkx.linalg.attrmatrix._node_value",
    "node_value",
    "numpy.asmatrix",
    "numpy.zeros",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_sparse_matrix": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "edge_value",
    "enumerate",
    "len",
    "list",
    "networkx.linalg.attrmatrix._edge_value",
    "networkx.linalg.attrmatrix._node_value",
    "node_value",
    "numpy.asarray",
    "range",
    "scipy.sparse.lil_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.bethehessianmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.bethehessianmatrix.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.bethehessianmatrix.bethe_hessian_matrix": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "list",
    "networkx.degree",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.bethehessianmatrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.bethehessianmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.bethehessianmatrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.graphmatrix.adjacency_matrix"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.graphmatrix.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.linalg.graphmatrix.adj_matrix": {
  "data": {
   "lineno": 156
  },
  "type": "constant"
 },
 "networkx.linalg.graphmatrix.adjacency_matrix": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.graphmatrix.incidence_matrix": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "KeyError",
    "enumerate",
    "len",
    "list",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.graphmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.laplacianmatrix.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.linalg.laplacianmatrix._transition_matrix": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "networkx.is_aperiodic",
    "networkx.is_strongly_connected",
    "networkx.to_scipy_sparse_matrix",
    "numpy.array",
    "numpy.where",
    "scipy.sparse.identity",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.directed_combinatorial_laplacian_matrix": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "_transition_matrix",
    "networkx.utils.not_implemented_for",
    "scipy.sparse.linalg.eigs",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.directed_laplacian_matrix": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "_transition_matrix",
    "len",
    "networkx.utils.not_implemented_for",
    "numpy.identity",
    "numpy.sqrt",
    "scipy.sparse.linalg.eigs",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.identity": {
  "data": {
   "shadows": "scipy.sparse.identity"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.laplacian_matrix": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "list",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.normalized_laplacian_matrix": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "list",
    "networkx.linalg.laplacianmatrix.scipy",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for",
    "numpy.isinf",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.spdiags": {
  "data": {
   "shadows": "scipy.sparse.spdiags"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.modularitymatrix.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.linalg.modularitymatrix.directed_modularity_matrix": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "list",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.modularitymatrix.modularity_matrix": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "list",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.modularitymatrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.attrmatrix": {
  "data": {
   "shadows": "networkx.linalg.attrmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.bethehessianmatrix": {
  "data": {
   "shadows": "networkx.linalg.bethehessianmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.graphmatrix": {
  "data": {
   "shadows": "networkx.linalg.graphmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.laplacianmatrix": {
  "data": {
   "shadows": "networkx.linalg.laplacianmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.modularitymatrix": {
  "data": {
   "shadows": "networkx.linalg.modularitymatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.spectrum": {
  "data": {
   "shadows": "networkx.linalg.spectrum"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.spectrum.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.linalg.spectrum.adjacency_spectrum": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.adjacency_matrix",
    "scipy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.bethe_hessian_spectrum": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.bethe_hessian_matrix",
    "scipy.linalg.eigvalsh"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.eigvals": {
  "data": {
   "shadows": "scipy.linalg.eigvals"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.eigvalsh": {
  "data": {
   "shadows": "scipy.linalg.eigvalsh"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.laplacian_spectrum": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.laplacian_matrix",
    "scipy.linalg.eigvalsh"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.modularity_spectrum": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.directed_modularity_matrix",
    "networkx.modularity_matrix",
    "scipy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.normalized_laplacian_spectrum": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.normalized_laplacian_matrix",
    "scipy.linalg.eigvalsh"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.tests.test_algebraic_connectivity": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "networkx.linalg.tests.test_algebraic_connectivity._cholesky",
    "networkx.linalg.tests.test_algebraic_connectivity.numpy",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.linalg.tests.test_algebraic_connectivity.scipy",
    "scikits.sparse.cholmod.cholesky"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity": {
  "data": {
   "lineno": 39
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_abbreviation_of_method": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "laplacian_fn",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.normalized_laplacian_matrix",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.cycle_graph",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_problematic_graph_issue_2381": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.path_graph",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_seed_argument": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.cycle_graph",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes_multigraph": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.add_path",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "graph",
    "networkx.NetworkXError",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "numpy.random.shuffle",
    "range",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_seed_argument": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "numpy.random.shuffle",
    "range",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "graph",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes_multigraph": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.spectral_ordering",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.linalg.tests.test_algebraic_connectivity.pytest",
    "networkx.path_graph",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity._cholesky": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx",
    "networkx.linalg.tests.test_algebraic_connectivity.numpy",
    "networkx.testing.almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.cholesky": {
  "data": {
   "shadows": "scikits.sparse.cholmod.cholesky"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.methods": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.numpy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.scipy": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.shuffle": {
  "data": {
   "shadows": "numpy.random.shuffle"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_attrmatrix": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_attrmatrix.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_attrmatrix.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_attrmatrix.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_attrmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_attrmatrix.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.attr_matrix",
    "networkx.linalg.tests.test_attrmatrix.np",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix.edge_attr": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix.node_attr": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix_directed": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.attr_matrix",
    "networkx.linalg.tests.test_attrmatrix.np",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_matrix_multigraph": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.attr_matrix",
    "networkx.linalg.tests.test_attrmatrix.np",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "float",
    "networkx.Graph",
    "networkx.attr_sparse_matrix",
    "networkx.linalg.tests.test_attrmatrix.np",
    "networkx.linalg.tests.test_attrmatrix.pytest",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix_directed": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.attr_sparse_matrix",
    "networkx.linalg.tests.test_attrmatrix.np",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_bethehessian": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_bethehessian.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_bethehessian.TestBetheHessian.test_bethe_hessian": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.bethe_hessian_matrix",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_bethehessian.np",
    "networkx.linalg.tests.test_bethehessian.npt"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_bethehessian.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_bethehessian.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_bethehessian.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_bethehessian.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_bethehessian.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_bethehessian.sp": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_graphmatrix": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_graphmatrix.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_graphmatrix.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix": {
  "data": {
   "lineno": 49
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setup_class": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.linalg.tests.test_graphmatrix.np"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "networkx.adj_matrix",
    "networkx.linalg.tests.test_graphmatrix.npt"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "int",
    "networkx.incidence_matrix",
    "networkx.linalg.tests.test_graphmatrix.np",
    "networkx.linalg.tests.test_graphmatrix.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_weighted_incidence_matrix": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.incidence_matrix",
    "networkx.linalg.tests.test_graphmatrix.np",
    "networkx.linalg.tests.test_graphmatrix.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_graphmatrix.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_graphmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.scipy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_graphmatrix.test_incidence_matrix_simple": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "int",
    "networkx.exception.NetworkXError",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.incidence_matrix",
    "networkx.linalg.tests.test_graphmatrix.np",
    "networkx.linalg.tests.test_graphmatrix.npt",
    "networkx.linalg.tests.test_graphmatrix.pytest",
    "networkx.random_clustered_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_laplacian.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_combinatorial_laplacian": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.directed_combinatorial_laplacian_matrix",
    "networkx.generators.expanders.margulis_gabber_galil_graph",
    "networkx.linalg.tests.test_laplacian.np",
    "networkx.linalg.tests.test_laplacian.npt",
    "networkx.linalg.tests.test_laplacian.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_laplacian": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.directed_laplacian_matrix",
    "networkx.linalg.tests.test_laplacian.np",
    "networkx.linalg.tests.test_laplacian.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_laplacian": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_laplacian.np",
    "networkx.linalg.tests.test_laplacian.npt"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_normalized_laplacian": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_laplacian.np",
    "networkx.linalg.tests.test_laplacian.npt",
    "networkx.normalized_laplacian_matrix",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.margulis_gabber_galil_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.margulis_gabber_galil_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_laplacian.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_laplacian.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_modularity.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_modularity.TestModularity": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_directed_modularity": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.directed_modularity_matrix",
    "networkx.linalg.tests.test_modularity.np",
    "networkx.linalg.tests.test_modularity.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_modularity": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_modularity.np",
    "networkx.linalg.tests.test_modularity.npt",
    "networkx.modularity_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_modularity_weight": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_modularity.np",
    "networkx.linalg.tests.test_modularity.npt",
    "networkx.modularity_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_modularity.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_modularity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.scipy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_spectrum": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.tests.test_spectrum.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.setup_class": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.adjacency_spectrum",
    "networkx.linalg.tests.test_spectrum.np",
    "networkx.linalg.tests.test_spectrum.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_bethe_hessian_spectrum": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.bethe_hessian_spectrum",
    "networkx.laplacian_spectrum",
    "networkx.linalg.tests.test_spectrum.np",
    "networkx.linalg.tests.test_spectrum.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.laplacian_spectrum",
    "networkx.linalg.tests.test_spectrum.np",
    "networkx.linalg.tests.test_spectrum.npt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_modularity_spectrum": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_spectrum.np",
    "networkx.linalg.tests.test_spectrum.npt",
    "networkx.modularity_spectrum",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_normalized_laplacian_spectrum": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_spectrum.np",
    "networkx.linalg.tests.test_spectrum.npt",
    "networkx.normalized_laplacian_spectrum",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_spectrum.npt": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_spectrum.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.scipy": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.m": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.networkx.algorithms": {
  "data": {
   "shadows": "networkx.algorithms"
  },
  "type": "import"
 },
 "networkx.networkx.classes": {
  "data": {
   "shadows": "networkx.classes"
  },
  "type": "import"
 },
 "networkx.networkx.classes.filters": {
  "data": {
   "shadows": "networkx.classes.filters"
  },
  "type": "import"
 },
 "networkx.networkx.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.networkx.convert_matrix": {
  "data": {
   "shadows": "networkx.convert_matrix"
  },
  "type": "import"
 },
 "networkx.networkx.drawing": {
  "data": {
   "shadows": "networkx.drawing"
  },
  "type": "import"
 },
 "networkx.networkx.generators": {
  "data": {
   "shadows": "networkx.generators"
  },
  "type": "import"
 },
 "networkx.networkx.linalg": {
  "data": {
   "shadows": "networkx.linalg"
  },
  "type": "import"
 },
 "networkx.networkx.readwrite": {
  "data": {
   "shadows": "networkx.readwrite"
  },
  "type": "import"
 },
 "networkx.networkx.relabel": {
  "data": {
   "shadows": "networkx.relabel"
  },
  "type": "import"
 },
 "networkx.networkx.utils": {
  "data": {
   "shadows": "networkx.utils"
  },
  "type": "import"
 },
 "networkx.readwrite": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.adjlist.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "networkx.readwrite.adjlist.generate_adjlist": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "len",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.parse_adjlist": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "BaseException",
    "TypeError",
    "len",
    "list",
    "map",
    "networkx.empty_graph",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.read_adjlist": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.readwrite.adjlist.parse_adjlist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.write_adjlist": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "networkx.readwrite.adjlist.generate_adjlist",
    "networkx.readwrite.adjlist.sys",
    "networkx.readwrite.adjlist.time",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.edgelist.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "networkx.readwrite.edgelist.generate_edgelist": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "map",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.parse_edgelist": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "Exception",
    "IndexError",
    "TypeError",
    "ast.literal_eval",
    "dict",
    "edge_type",
    "len",
    "networkx.empty_graph",
    "nodetype",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_edgelist": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "isinstance",
    "networkx.readwrite.edgelist.parse_edgelist",
    "networkx.utils.open_file",
    "nodetype",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_weighted_edgelist": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "float",
    "networkx.readwrite.edgelist.read_edgelist",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_edgelist": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.generate_edgelist",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_weighted_edgelist": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.gexf.Element": {
  "data": {
   "shadows": "xml.etree.ElementTree.Element"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.ElementTree": {
  "data": {
   "shadows": "xml.etree.ElementTree.ElementTree"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.GEXF": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "ImportError",
    "bool",
    "dict",
    "float",
    "int",
    "list",
    "numpy.float16",
    "numpy.float32",
    "numpy.float64",
    "numpy.float_",
    "numpy.int16",
    "numpy.int32",
    "numpy.int64",
    "numpy.int8",
    "numpy.int_",
    "numpy.intc",
    "numpy.intp",
    "numpy.uint16",
    "numpy.uint32",
    "numpy.uint64",
    "numpy.uint8",
    "reversed",
    "str"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXF.set_version": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": [
    "networkx.readwrite.gexf.GEXF"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXFReader.__call__": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "xml.etree.ElementTree.ElementTree"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.__init__": {
  "data": {
   "lineno": 676
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_edge": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_node": {
  "data": {
   "lineno": 774
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_parents": {
  "data": {
   "lineno": 865
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_slices": {
  "data": {
   "lineno": 874
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_spells": {
  "data": {
   "lineno": 884
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_start_end": {
  "data": {
   "lineno": 809
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.add_viz": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "float",
    "int",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.decode_attr_elements": {
  "data": {
   "lineno": 947,
   "symbols_in_volume": [
    "KeyError",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.find_gexf_attributes": {
  "data": {
   "lineno": 981
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFReader.make_graph": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.readwrite.gexf.GEXF"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.gexf.GEXFWriter.__init__": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.__version__",
    "networkx.readwrite.gexf.itertools",
    "networkx.readwrite.gexf.time",
    "set",
    "xml.etree.ElementTree.Element",
    "xml.etree.ElementTree.SubElement",
    "xml.etree.ElementTree.register_namespace"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.__str__": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "xml.etree.ElementTree.tostring"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_attributes": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "TypeError",
    "bool",
    "float",
    "isinstance",
    "len",
    "list",
    "str",
    "type",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_edges": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "KeyError",
    "edge_key_data",
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_edges.edge_key_data": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "next",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_graph": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_nodes": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "KeyError",
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_parents": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": [
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_slices": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_spells": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.add_viz": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.alter_graph_mode_timeformat": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "float",
    "int",
    "isinstance",
    "networkx.NetworkXError",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.get_attr_id": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "KeyError",
    "next",
    "str",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.indent": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.GEXFWriter.write": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "xml.etree.ElementTree.ElementTree"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.SubElement": {
  "data": {
   "shadows": "xml.etree.ElementTree.SubElement"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.readwrite.gexf.generate_gexf": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "GEXFWriter",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.read_gexf": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "GEXFReader",
    "networkx.utils.open_file",
    "reader",
    "relabel_gexf_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.register_namespace": {
  "data": {
   "shadows": "xml.etree.ElementTree.register_namespace"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.relabel_gexf_graph": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "len",
    "networkx.NetworkXError",
    "networkx.relabel_nodes",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gexf.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.tostring": {
  "data": {
   "shadows": "xml.etree.ElementTree.tostring"
  },
  "type": "import"
 },
 "networkx.readwrite.gexf.write_gexf": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "GEXFWriter",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.gml.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.LIST_START_VALUE": {
  "data": {
   "lineno": 281
  },
  "type": "constant"
 },
 "networkx.readwrite.gml.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.Pattern": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "enum.Enum"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.gml.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.Token": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "int",
    "networkx.readwrite.gml.Pattern",
    "typing.Any",
    "typing.NamedTuple"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.gml.__all__": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "networkx.readwrite.gml.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.escape": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "isinstance",
    "networkx.readwrite.gml.re",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.escape.fixup": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "ord",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.generate_gml": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.readwrite.gml.re",
    "range",
    "str",
    "stringize",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.generate_gml.stringize": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "dict",
    "float",
    "int",
    "isinstance",
    "len",
    "list",
    "networkx.exception.NetworkXError",
    "networkx.readwrite.gml.LIST_START_VALUE",
    "networkx.readwrite.gml.escape",
    "repr",
    "str",
    "stringize",
    "stringizer",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.htmlentitydefs": {
  "data": {
   "shadows": "html.entities"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.literal_destringizer": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "DeprecationWarning",
    "SyntaxError",
    "ValueError",
    "ast.literal_eval",
    "isinstance",
    "networkx.readwrite.gml.warnings",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.literal_stringizer": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "DeprecationWarning",
    "io.StringIO",
    "networkx.readwrite.gml.warnings",
    "stringize"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.literal_stringizer.stringize": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "ValueError",
    "bool",
    "bytes",
    "complex",
    "dict",
    "float",
    "int",
    "isinstance",
    "len",
    "list",
    "repr",
    "set",
    "str",
    "stringize",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.parse_gml": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "filter_lines",
    "parse_gml_lines"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml.decode_line": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "UnicodeDecodeError",
    "bytes",
    "isinstance",
    "networkx.exception.NetworkXError",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml.filter_lines": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "decode_line",
    "isinstance",
    "networkx.exception.NetworkXError",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "enumerate",
    "id",
    "isinstance",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.exception.NetworkXError",
    "networkx.relabel_nodes",
    "parse_graph",
    "pop_attr",
    "set",
    "tokenize"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.consume": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "next",
    "unexpected"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_dict": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "consume",
    "networkx.readwrite.gml.Pattern",
    "parse_kv"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_graph": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "networkx.exception.NetworkXError",
    "next",
    "parse_kv",
    "unexpected"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_kv": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "clean_dict_value",
    "collections.defaultdict",
    "destringizer",
    "list",
    "networkx.readwrite.gml.Pattern",
    "networkx.readwrite.gml.unescape",
    "next",
    "parse_dict",
    "str",
    "unexpected"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.parse_kv.clean_dict_value": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "networkx.readwrite.gml.LIST_START_VALUE"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.pop_attr": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.tokenize": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "float",
    "int",
    "len",
    "networkx.exception.NetworkXError",
    "networkx.readwrite.gml.Pattern",
    "networkx.readwrite.gml.Token",
    "networkx.readwrite.gml.re",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.parse_gml_lines.unexpected": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.read_gml": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "filter_lines",
    "networkx.utils.open_file",
    "parse_gml_lines"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.read_gml.filter_lines": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "UnicodeDecodeError",
    "isinstance",
    "networkx.exception.NetworkXError",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.unescape": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.readwrite.gml.re"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.unescape.fixup": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "KeyError",
    "OverflowError",
    "ValueError",
    "chr",
    "html.entities.name2codepoint",
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gml.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.readwrite.gml.write_gml": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": [
    "networkx.readwrite.gml.generate_gml",
    "networkx.utils.open_file",
    "stringizer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gpickle": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.gpickle.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.readwrite.gpickle.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.read_gpickle": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "networkx.readwrite.gpickle.pickle",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gpickle.write_gpickle": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.readwrite.gpickle.pickle",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.graph6.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.readwrite.graph6._generate_graph6_bytes": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "enumerate",
    "itertools.islice",
    "len",
    "list",
    "n_to_data",
    "range",
    "str.encode",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.data_to_n": {
  "data": {
   "lineno": 372
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.from_graph6_bytes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "bits",
    "data_to_n",
    "len",
    "networkx.Graph",
    "networkx.exception.NetworkXError",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.from_graph6_bytes.bits": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.n_to_data": {
  "data": {
   "lineno": 392
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.read_graph6": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "len",
    "networkx.readwrite.graph6.from_graph6_bytes",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.to_graph6_bytes": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.readwrite.graph6._generate_graph6_bytes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.write_graph6": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for",
    "networkx.utils.open_file",
    "write_graph6_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.write_graph6_file": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.readwrite.graph6._generate_graph6_bytes",
    "networkx.utils.not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "lxml.etree",
    "networkx.readwrite.graphml.write_graphml_lxml",
    "networkx.readwrite.graphml.write_graphml_xml"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.graphml.Element": {
  "data": {
   "shadows": "xml.etree.ElementTree.Element"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.ElementTree": {
  "data": {
   "shadows": "xml.etree.ElementTree.ElementTree"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.GraphML": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "bool",
    "dict",
    "float",
    "int",
    "numpy.float16",
    "numpy.float32",
    "numpy.float64",
    "numpy.float_",
    "numpy.int16",
    "numpy.int32",
    "numpy.int64",
    "numpy.int8",
    "numpy.int_",
    "numpy.intc",
    "numpy.intp",
    "numpy.uint16",
    "numpy.uint32",
    "numpy.uint64",
    "numpy.uint8",
    "reversed",
    "str"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLReader": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": [
    "networkx.readwrite.graphml.GraphML"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLReader.__call__": {
  "data": {
   "lineno": 768,
   "symbols_in_volume": [
    "ValueError",
    "xml.etree.ElementTree.ElementTree",
    "xml.etree.ElementTree.fromstring"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.__init__": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": [
    "int",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.add_edge": {
  "data": {
   "lineno": 838,
   "symbols_in_volume": [
    "ValueError",
    "networkx.NetworkXError",
    "networkx.readwrite.graphml.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.add_node": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": [
    "networkx.readwrite.graphml.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.decode_data_elements": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": [
    "KeyError",
    "bool",
    "data_type",
    "len",
    "list",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.find_graphml_keys": {
  "data": {
   "lineno": 931,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.readwrite.graphml.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLReader.make_graph": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.set_edge_attributes",
    "python_type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "networkx.readwrite.graphml.GraphML"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLWriter.__init__": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "collections.defaultdict",
    "list",
    "set",
    "xml.etree.ElementTree.Element"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.__str__": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "xml.etree.ElementTree.tostring"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_attributes": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_data": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_edges": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_graph_element": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_graphs": {
  "data": {
   "lineno": 581
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.add_nodes": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.attr_type": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "float",
    "int",
    "len",
    "list",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.dump": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": [
    "xml.etree.ElementTree.ElementTree"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.get_key": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriter.indent": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "networkx.readwrite.graphml.GraphMLWriter"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.__init__": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": [
    "collections.defaultdict",
    "lxml.etree.Element",
    "lxml.etree.xmlfile",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.__str__": {
  "data": {
   "lineno": 744,
   "symbols_in_volume": [
    "object.__str__"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.add_attributes": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.add_graph_element": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "networkx.readwrite.graphml.IncrementalElement",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.GraphMLWriterLxml.dump": {
  "data": {
   "lineno": 747
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.IncrementalElement": {
  "data": {
   "lineno": 609
  },
  "type": "class"
 },
 "networkx.readwrite.graphml.IncrementalElement.__init__": {
  "data": {
   "lineno": 616
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.IncrementalElement.append": {
  "data": {
   "lineno": 620
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "networkx.readwrite.graphml.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.fromstring": {
  "data": {
   "shadows": "xml.etree.ElementTree.fromstring"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.generate_graphml": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "GraphMLWriter",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.lxmletree": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "networkx.readwrite.graphml.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.parse_graphml": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "GraphMLReader",
    "int",
    "len",
    "list",
    "networkx.NetworkXError",
    "reader",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.read_graphml": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "GraphMLReader",
    "int",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.open_file",
    "reader",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.tostring": {
  "data": {
   "shadows": "xml.etree.ElementTree.tostring"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.readwrite.graphml.write_graphml": {
  "data": {
   "lineno": 756
  },
  "type": "constant"
 },
 "networkx.readwrite.graphml.write_graphml_lxml": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "GraphMLWriterLxml",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graphml.write_graphml_xml": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "GraphMLWriter",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.adjacency._attrs": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_data": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "list",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.adjacency._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_graph": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.readwrite.json_graph.adjacency._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.adjacency.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.adjacency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.cytoscape": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.cytoscape.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.cytoscape._attrs": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.cytoscape.cytoscape_data": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.cytoscape._attrs",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.cytoscape.cytoscape_graph": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.cytoscape._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.cytoscape.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.jit": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.jit.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.jit.jit_data": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.readwrite.json_graph.jit.json",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.jit.jit_graph": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "isinstance",
    "networkx.Graph",
    "networkx.readwrite.json_graph.jit.json",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.jit.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.jit.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.jit.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.node_link.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.node_link._attrs": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.node_link.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.node_link_data": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "len",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.node_link._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link.node_link_graph": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "isinstance",
    "itertools.count",
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.readwrite.json_graph.node_link._attrs",
    "networkx.utils.to_tuple",
    "next",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.to_tuple": {
  "data": {
   "shadows": "networkx.utils.to_tuple"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.adjacency_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_exception": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.tests.test_adjacency.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.adjacency_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.adjacency_graph",
    "networkx.readwrite.json_graph.tests.test_adjacency.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.adjacency_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multigraph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.adjacency_data",
    "networkx.readwrite.json_graph.adjacency_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.adjacency_data": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.adjacency_data"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.adjacency_graph": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.adjacency_graph"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_digraph": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.cytoscape_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_exception": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.tests.test_cytoscape.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.cytoscape_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_graph_attributes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.cytoscape_graph",
    "networkx.readwrite.json_graph.tests.test_cytoscape.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_multidigraph": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.cytoscape_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.TestCytoscape.test_multigraph": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.cytoscape_data",
    "networkx.readwrite.json_graph.cytoscape_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.cytoscape_data": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.cytoscape_data"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.cytoscape_graph": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.cytoscape_graph"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_cytoscape.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_jit": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.jit_data",
    "networkx.readwrite.json_graph.jit_graph",
    "networkx.readwrite.json_graph.tests.test_jit.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_2": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.jit_data",
    "networkx.readwrite.json_graph.jit_graph",
    "networkx.readwrite.json_graph.tests.test_jit.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_directed": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.jit_data",
    "networkx.readwrite.json_graph.jit_graph",
    "networkx.readwrite.json_graph.tests.test_jit.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_multi_directed": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.jit_data",
    "networkx.readwrite.json_graph.jit_graph",
    "networkx.readwrite.json_graph.tests.test_jit.json",
    "networkx.readwrite.json_graph.tests.test_jit.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.TestJIT.test_jit_round_trip": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.is_isomorphic",
    "networkx.jit_data",
    "networkx.readwrite.json_graph.jit_graph",
    "networkx.readwrite.json_graph.tests.test_jit.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_jit.jit_data": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.jit_data"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_jit.jit_graph": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.jit_graph"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_jit.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_jit.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_jit.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_custom_attrs": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "dict",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.tests.test_node_link.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph",
    "networkx.readwrite.json_graph.tests.test_node_link.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_with_tuple_nodes": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph",
    "networkx.readwrite.json_graph.tests.test_node_link.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multigraph": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_string_ids": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_unicode_keys": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.json_graph.node_link_data",
    "networkx.readwrite.json_graph.node_link_graph",
    "networkx.readwrite.json_graph.tests.test_node_link.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.node_link_data": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.node_link_data"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.node_link_graph": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.node_link_graph"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_exception": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.tests.test_tree.pytest",
    "networkx.readwrite.json_graph.tree_data"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "networkx.readwrite.json_graph.tree_data",
    "networkx.readwrite.json_graph.tree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph_attributes": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.readwrite.json_graph.tests.test_tree.json",
    "networkx.readwrite.json_graph.tree_data",
    "networkx.readwrite.json_graph.tree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.tree_data": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.tree_data"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.tree_graph": {
  "data": {
   "shadows": "networkx.readwrite.json_graph.tree_graph"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.tree.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.tree._attrs": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.tree.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.tree_data": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "TypeError",
    "add_children",
    "dict",
    "itertools.chain",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.tree._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_data.add_children": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "add_children",
    "dict",
    "itertools.chain",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "add_children",
    "networkx.DiGraph",
    "networkx.readwrite.json_graph.tree._attrs",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph.add_children": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "add_children",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.leda": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.leda.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.readwrite.leda.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.parse_leda": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "BaseException",
    "int",
    "isinstance",
    "iter",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.exception.NetworkXError",
    "next",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.leda.read_leda": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.utils.open_file",
    "parse_leda"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.multiline_adjlist.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.readwrite.multiline_adjlist.generate_multiline_adjlist": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "len",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.parse_multiline_adjlist": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "BaseException",
    "StopIteration",
    "TypeError",
    "ast.literal_eval",
    "edgetype",
    "int",
    "len",
    "networkx.empty_graph",
    "next",
    "nodetype",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.read_multiline_adjlist": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "edgetype",
    "networkx.readwrite.multiline_adjlist.parse_multiline_adjlist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.write_multiline_adjlist": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.readwrite.multiline_adjlist.generate_multiline_adjlist",
    "networkx.readwrite.multiline_adjlist.sys",
    "networkx.readwrite.multiline_adjlist.time",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.nx_shp.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_shp.edges_from_line": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "ImportError",
    "osgeo.ogr.Geometry",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbMultiLineString",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_shp.ogr": {
  "data": {
   "shadows": "osgeo.ogr"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_shp.read_shp": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "dict",
    "edges_from_line",
    "isinstance",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "osgeo.ogr.Open",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbMultiLineString",
    "osgeo.ogr.wkbPoint",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "ImportError",
    "create_attributes",
    "create_feature",
    "float",
    "int",
    "netgeometry",
    "osgeo.ogr.GetDriverByName",
    "osgeo.ogr.OFTInteger",
    "osgeo.ogr.OFTReal",
    "osgeo.ogr.OFTString",
    "osgeo.ogr.UseExceptions",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbPoint",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.add_fields_to_layer": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "osgeo.ogr.FieldDefn",
    "osgeo.ogr.OFTString",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.create_attributes": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "add_fields_to_layer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.create_feature": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "osgeo.ogr.Feature"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.netgeometry": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "TypeError",
    "float",
    "osgeo.ogr.CreateGeometryFromWkb",
    "osgeo.ogr.CreateGeometryFromWkt",
    "osgeo.ogr.Geometry",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbPoint",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.nx_yaml.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_yaml.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_yaml.read_yaml": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "ImportError",
    "networkx.readwrite.nx_yaml.yaml",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.write_yaml": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ImportError",
    "networkx.readwrite.nx_yaml.yaml",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.p2g.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g.parse_p2g": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "int",
    "map",
    "networkx.readwrite.p2g.networkx",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.p2g.read_p2g": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.utils.open_file",
    "parse_p2g"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.p2g.write_p2g": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.utils.open_file",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.pajek.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.readwrite.pajek.generate_pajek": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "id",
    "int",
    "isinstance",
    "len",
    "list",
    "make_qstr",
    "map",
    "networkx.readwrite.pajek.warnings",
    "range",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.make_qstr": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "isinstance",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.parse_pajek": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "enumerate",
    "float",
    "id",
    "int",
    "isinstance",
    "iter",
    "len",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.readwrite.pajek.shlex",
    "next",
    "range",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.read_pajek": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.utils.open_file",
    "parse_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.write_pajek": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.readwrite.pajek.generate_pajek",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.sparse6.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.readwrite.sparse6._generate_sparse6_bytes": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "enc",
    "len",
    "max",
    "min",
    "networkx.readwrite.graph6.n_to_data",
    "range",
    "sorted",
    "str.encode"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6._generate_sparse6_bytes.enc": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.data_to_n": {
  "data": {
   "shadows": "networkx.readwrite.graph6.data_to_n"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.from_sparse6_bytes": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.exception.NetworkXError",
    "networkx.readwrite.graph6.data_to_n",
    "parseData",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.from_sparse6_bytes.parseData": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.n_to_data": {
  "data": {
   "shadows": "networkx.readwrite.graph6.n_to_data"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.read_sparse6": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "len",
    "networkx.readwrite.sparse6.from_sparse6_bytes",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.to_sparse6_bytes": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.readwrite.sparse6._generate_sparse6_bytes"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.write_sparse6": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.readwrite.sparse6._generate_sparse6_bytes",
    "networkx.utils.not_implemented_for",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_delimiter": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.path_graph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "list",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiDiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_err": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "chr",
    "networkx.Graph",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.pytest",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_parse_adjlist": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "networkx.parse_adjlist",
    "networkx.readwrite.tests.test_adjlist.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist": {
  "data": {
   "lineno": 152
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setup_class": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_delimiter": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.path_graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "list",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiDiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_parse_multiline_adjlist": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "iter",
    "networkx.parse_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.pytest",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.setup_class": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "list",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.isolates",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiDiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.MultiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_issue": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "chr",
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.pytest",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_2": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.read_weighted_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_4": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_5": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_6": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.setup_class": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.readwrite.tests.test_gexf.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_add_parent": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_bool": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.readwrite.tests.test_gexf.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_dynamic_mode": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_edge_id_construct": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.__version__",
    "networkx.generate_gexf",
    "networkx.readwrite.tests.test_gexf.sys",
    "networkx.readwrite.tests.test_gexf.time"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_key_raises": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.readwrite.tests.test_gexf.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_missing_viz_attributes": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_multigraph_with_missing_attributes": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_numpy_type": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "ImportError",
    "networkx.__version__",
    "networkx.generate_gexf",
    "networkx.path_graph",
    "networkx.readwrite.tests.test_gexf.numpy",
    "networkx.readwrite.tests.test_gexf.sys",
    "networkx.readwrite.tests.test_gexf.time",
    "networkx.set_node_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.read_gexf",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.read_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.read_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_serialize_ints_to_strings": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_simple_list": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_slice_and_spell": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_specials": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "float",
    "int",
    "math.isnan",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.readwrite.tests.test_gexf.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_with_node_attributes": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.__version__",
    "networkx.generate_gexf",
    "networkx.readwrite.tests.test_gexf.sys",
    "networkx.readwrite.tests.test_gexf.time",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.isnan": {
  "data": {
   "shadows": "math.isnan"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_gml.TestGraph": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.setup_class": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_data_types": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "ValueError",
    "ast.literal_eval",
    "chr",
    "dict",
    "list",
    "networkx.Graph",
    "networkx.generate_gml",
    "networkx.parse_gml",
    "networkx.readwrite.gml.literal_destringizer",
    "networkx.readwrite.gml.literal_stringizer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_escape_unescape": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "chr",
    "networkx.generate_gml",
    "networkx.parse_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "ValueError",
    "assert_generate_error",
    "assert_parse_error",
    "frozenset",
    "len",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.parse_gml",
    "networkx.read_gml",
    "networkx.readwrite.gml.literal_destringizer",
    "networkx.readwrite.gml.literal_stringizer",
    "networkx.readwrite.tests.test_gml.codecs",
    "networkx.readwrite.tests.test_gml.pytest",
    "networkx.readwrite.tests.test_gml.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_generate_error": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.generate_gml",
    "networkx.readwrite.tests.test_gml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_parse_error": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_gml",
    "networkx.readwrite.tests.test_gml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_float_label": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.write_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_graph_types": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "bool",
    "int",
    "networkx.generate_gml",
    "networkx.parse_gml",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_label_kwarg": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "networkx.parse_gml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_labels_are_strings": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generate_gml",
    "networkx.readwrite.gml.literal_stringizer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_name": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "networkx.parse_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_outofrange_integers": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.os",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.write_gml",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.parse_gml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml_cytoscape_bug": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.parse_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_quotes": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "chr",
    "networkx.path_graph",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.write_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_read_gml": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "networkx.parse_gml",
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.os",
    "networkx.readwrite.tests.test_gml.tempfile",
    "open",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.io",
    "networkx.readwrite.tests.test_gml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_tuplelabels": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "networkx.OrderedGraph",
    "networkx.generate_gml",
    "networkx.readwrite.gml.literal_stringizer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_unicode_node": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.write_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists": {
  "data": {
   "lineno": 527
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_list_property": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.byte_file",
    "textwrap.dedent"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_single_element_list_property": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": [
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.byte_file",
    "textwrap.dedent"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_multi_element_property_list": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_gml.byte_file",
    "networkx.write_gml",
    "textwrap.dedent"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_one_element_property_list": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_gml.byte_file",
    "networkx.write_gml",
    "textwrap.dedent"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.byte_file": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "networkx.readwrite.tests.test_gml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.codecs": {
  "data": {
   "shadows": "codecs"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_destringizer": {
  "data": {
   "shadows": "networkx.readwrite.gml.literal_destringizer"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_stringizer": {
  "data": {
   "shadows": "networkx.readwrite.gml.literal_stringizer"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.setup_class": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_gpickle": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "list",
    "networkx.read_gpickle",
    "networkx.readwrite.tests.test_gpickle.os",
    "networkx.readwrite.tests.test_gpickle.tempfile",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "networkx.write_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_protocol": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "list",
    "networkx.read_gpickle",
    "networkx.readwrite.tests.test_gpickle.tempfile",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "networkx.write_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_graph6.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_from_graph6_bytes": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.from_graph6_bytes",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_read_equals_from_bytes": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.from_graph6_bytes",
    "networkx.read_graph6",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_n_data_n_conversion": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.readwrite.graph6.data_to_n",
    "networkx.readwrite.graph6.n_to_data"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestReadGraph6": {
  "data": {
   "lineno": 37
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestReadGraph6.test_read_many_graph6": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "io.BytesIO",
    "len",
    "list",
    "networkx.read_graph6",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6": {
  "data": {
   "lineno": 48
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_bipartite_graph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_bipartite_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_graph": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_large_complete_graph": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_length": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "io.BytesIO",
    "len",
    "list",
    "networkx.random_graphs.gnm_random_graph",
    "networkx.write_graph6",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_directed_graphs": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.readwrite.tests.test_graph6.pytest",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_header": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_null_graph": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.null_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_relabeling": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.graph6.to_graph6_bytes"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_roundtrip": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "io.BytesIO",
    "list",
    "networkx.random_graphs.gnm_random_graph",
    "networkx.read_graph6",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "networkx.write_graph6",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_trivial_graph": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.trivial_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_write_path": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.null_graph",
    "networkx.readwrite.graph6.write_graph6_file",
    "networkx.readwrite.tests.test_graph6.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.g6": {
  "data": {
   "shadows": "networkx.readwrite.graph6"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_graphml.BaseGraphML": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.BaseGraphML.setup_class": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_graphml.BaseGraphML"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_bool": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_directed_edge_in_undirected": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_graphml_header_line": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_hyperedge_raise": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_key_raise": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_multigraph_keys": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_preserve_multi_edge_data": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "dict",
    "int",
    "networkx.MultiGraph",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.write_graphml",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attribute_graphml": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.testing.utils.assert_nodes_equal",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attributes_with_groups": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": [
    "len",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_directed_graphml": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_undirected_graphml": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_graphml": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_no_multiedge_graphml": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_only_ids_for_multiedges_graphml": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_undirected_edge_in_directed": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestReadGraphML.test_yfiles_extension": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "list",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML": {
  "data": {
   "lineno": 996,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_graphml.BaseGraphML",
    "networkx.write_graphml_lxml",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.setup_class": {
  "data": {
   "lineno": 999,
   "symbols_in_volume": [
    "classmethod",
    "networkx.readwrite.tests.test_graphml.BaseGraphML",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_default_attribute": {
  "data": {
   "lineno": 1112,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.add_path",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_mixed_type_attributes": {
  "data": {
   "lineno": 1127,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_more_multigraph_keys": {
  "data": {
   "lineno": 1095,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.tempfile",
    "networkx.testing.utils.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_multigraph_to_graph": {
  "data": {
   "lineno": 1153,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float": {
  "data": {
   "lineno": 1142,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.pytest",
    "networkx.readwrite.tests.test_graphml.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float32": {
  "data": {
   "lineno": 1193,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.pytest",
    "networkx.readwrite.tests.test_graphml.tempfile",
    "networkx.testing.almost_equal",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64": {
  "data": {
   "lineno": 1177,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.pytest",
    "networkx.readwrite.tests.test_graphml.tempfile",
    "networkx.testing.almost_equal",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64_inference": {
  "data": {
   "lineno": 1209,
   "symbols_in_volume": [
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.pytest",
    "networkx.readwrite.tests.test_graphml.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_attributes": {
  "data": {
   "lineno": 1220,
   "symbols_in_volume": [
    "chr",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.tempfile",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_escape": {
  "data": {
   "lineno": 1233,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.readwrite.tests.test_graphml.json"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_interface": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": [
    "ImportError",
    "networkx.write_graphml",
    "networkx.write_graphml_lxml",
    "networkx.write_graphml_xml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_named_key_ids_graphml": {
  "data": {
   "lineno": 1024,
   "symbols_in_volume": [
    "all",
    "len",
    "list",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "networkx.write_graphml",
    "xml.etree.ElementTree.parse",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_numeric_type_graphml": {
  "data": {
   "lineno": 1069,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "xml.etree.ElementTree.parse"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_simple_directed_graphml": {
  "data": {
   "lineno": 1012,
   "symbols_in_volume": [
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestXMLGraphML": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_graphml.TestWriteGraphML",
    "networkx.write_graphml_xml",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestXMLGraphML.setup_class": {
  "data": {
   "lineno": 1251,
   "symbols_in_volume": [
    "classmethod",
    "networkx.readwrite.tests.test_graphml.TestWriteGraphML",
    "networkx.readwrite.tests.test_graphml.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.almost_equal": {
  "data": {
   "shadows": "networkx.testing.almost_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.lxml.etree": {
  "data": {
   "shadows": "lxml.etree"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.parse": {
  "data": {
   "shadows": "xml.etree.ElementTree.parse"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.parse_leda",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.parse_leda",
    "networkx.read_leda",
    "networkx.readwrite.tests.test_leda.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.setup_class": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.readwrite.p2g.read_p2g",
    "networkx.readwrite.tests.test_p2g.io",
    "networkx.testing.assert_edges_equal",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.OrderedDiGraph",
    "networkx.readwrite.p2g.write_p2g",
    "networkx.readwrite.tests.test_p2g.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.readwrite.p2g.read_p2g",
    "networkx.readwrite.p2g.write_p2g",
    "networkx.readwrite.tests.test_p2g.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.read_p2g": {
  "data": {
   "shadows": "networkx.readwrite.p2g.read_p2g"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.write_p2g": {
  "data": {
   "shadows": "networkx.readwrite.p2g.write_p2g"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.setup_class": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "classmethod",
    "networkx.MultiDiGraph",
    "networkx.readwrite.tests.test_pajek.os",
    "networkx.readwrite.tests.test_pajek.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.teardown_class": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "classmethod",
    "networkx.readwrite.tests.test_pajek.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_ignored_attribute": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.readwrite.tests.test_pajek.io",
    "networkx.readwrite.tests.test_pajek.warnings",
    "networkx.write_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_noname": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.parse_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.parse_pajek",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.parse_pajek",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajet_mat": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.parse_pajek",
    "networkx.testing.assert_edges_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.parse_pajek",
    "networkx.read_pajek",
    "networkx.testing.assert_edges_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_unicode": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "chr",
    "list",
    "networkx.Graph",
    "networkx.read_pajek",
    "networkx.readwrite.tests.test_pajek.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_write_pajek": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "list",
    "networkx.parse_pajek",
    "networkx.read_pajek",
    "networkx.readwrite.tests.test_pajek.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp": {
  "data": {
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite": {
  "data": {
   "lineno": 256
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.delete_shapedir": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.setup_method": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.setup_path": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.teardown_method": {
  "data": {
   "lineno": 261
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingAttrWrite.test_missing_attributes": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.read_shp",
    "networkx.write_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry": {
  "data": {
   "lineno": 225
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.create_shapedir": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.ogr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.delete_shapedir": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.setup_method": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.setup_path": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.teardown_method": {
  "data": {
   "lineno": 231
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestMissingGeometry.test_missing_geometry": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestShp.checkgeom": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.deletetmp": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setup_method": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "createlayer",
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setup_method.createlayer": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.ogr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.teardown_method": {
  "data": {
   "lineno": 216
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp",
    "testattributes"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport.testattributes": {
  "data": {
   "lineno": 162
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_geometryexport": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_nodeattributeexport": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_wkt_export": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "Exception",
    "networkx.DiGraph",
    "networkx.readwrite.tests.test_shp.ogr",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "compare_graph_paths_names",
    "networkx.read_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload.compare_graph_paths_names": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.ogr": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.readwrite.tests.test_shp.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.test_read_shp_nofile": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "RuntimeError",
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_sparse6.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_bytes_multigraph_graph": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.from_sparse6_bytes",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_sparse6_bytes": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.from_sparse6_bytes",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_many_graph6": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "io.BytesIO",
    "len",
    "networkx.read_sparse6",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_sparse6": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.from_sparse6_bytes",
    "networkx.read_sparse6",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6": {
  "data": {
   "lineno": 80
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_bipartite": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_bipartite_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_graph": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_empty_graph": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.empty_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_large_empty_graph": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.empty_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_directed_graphs": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.readwrite.tests.test_sparse6.pytest",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_header": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.complete_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_null_graph": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.null_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_padding": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "enumerate",
    "io.BytesIO",
    "networkx.path_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_read_write_inverse": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "io.BytesIO",
    "list",
    "min",
    "networkx.from_sparse6_bytes",
    "networkx.random_graphs.gnm_random_graph",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.write_sparse6",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_trivial_graph": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.trivial_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_very_large_empty_graph": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "io.BytesIO",
    "networkx.empty_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_write_path": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.null_graph",
    "networkx.readwrite.tests.test_sparse6.os",
    "networkx.readwrite.tests.test_sparse6.tempfile",
    "networkx.write_sparse6",
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml": {
  "data": {
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_yaml.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.assert_equal": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "list",
    "networkx.read_yaml",
    "networkx.readwrite.tests.test_yaml.os",
    "networkx.readwrite.tests.test_yaml.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_yaml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.build_graphs": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "classmethod",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.setup_class": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testDirected": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testMultiGraph": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testUndirected": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.yaml": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.relabel": {
  "data": {},
  "type": "module"
 },
 "networkx.relabel.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.relabel._relabel_copy": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "enumerate",
    "float",
    "int",
    "isinstance",
    "mapping.get",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.relabel._relabel_inplace": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "KeyError",
    "enumerate",
    "float",
    "int",
    "isinstance",
    "len",
    "list",
    "mapping",
    "mapping.items",
    "mapping.keys",
    "mapping.values",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.selfloop_edges",
    "networkx.topological_sort",
    "reversed",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.relabel.convert_node_labels_to_integers": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "dict",
    "mapping",
    "mapping.items",
    "networkx.NetworkXError",
    "networkx.relabel.relabel_nodes",
    "networkx.set_node_attributes",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.relabel.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.relabel.relabel_nodes": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "_relabel_copy",
    "_relabel_inplace",
    "hasattr",
    "mapping"
   ]
  },
  "type": "function"
 },
 "networkx.release": {
  "data": {
   "shadows": "networkx.release"
  },
  "type": "import"
 },
 "networkx.release.authors": {
  "data": {
   "lineno": 183
  },
  "type": "constant"
 },
 "networkx.release.basedir": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "networkx.release.classifiers": {
  "data": {
   "lineno": 206
  },
  "type": "constant"
 },
 "networkx.release.date": {
  "data": {
   "shadows": "version.date"
  },
  "type": "import"
 },
 "networkx.release.date_info": {
  "data": {
   "shadows": "version.date_info"
  },
  "type": "import"
 },
 "networkx.release.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "networkx.release.description": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "networkx.release.dev": {
  "data": {
   "lineno": 179
  },
  "type": "constant"
 },
 "networkx.release.get_info": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "ImportError",
    "int",
    "networkx.release.datetime",
    "networkx.release.get_revision",
    "networkx.release.os",
    "networkx.release.time",
    "str",
    "version.date",
    "version.date_info",
    "version.date_info.strftime",
    "version.vcs_info",
    "version.version",
    "version.version_info"
   ]
  },
  "type": "function"
 },
 "networkx.release.get_revision": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.release.basedir",
    "networkx.release.os"
   ]
  },
  "type": "function"
 },
 "networkx.release.keywords": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "networkx.release.maintainer": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "networkx.release.maintainer_email": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "networkx.release.major": {
  "data": {
   "lineno": 173
  },
  "type": "constant"
 },
 "networkx.release.minor": {
  "data": {
   "lineno": 174
  },
  "type": "constant"
 },
 "networkx.release.name": {
  "data": {
   "lineno": 172
  },
  "type": "constant"
 },
 "networkx.release.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.release.platforms": {
  "data": {
   "lineno": 196
  },
  "type": "constant"
 },
 "networkx.release.project_urls": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "networkx.release.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.release.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.release.url": {
  "data": {
   "lineno": 190
  },
  "type": "constant"
 },
 "networkx.release.vcs_info": {
  "data": {
   "shadows": "version.vcs_info"
  },
  "type": "import"
 },
 "networkx.release.version": {
  "data": {
   "shadows": "version.version"
  },
  "type": "import"
 },
 "networkx.release.version_info": {
  "data": {
   "shadows": "version.version_info"
  },
  "type": "import"
 },
 "networkx.release.write_versionfile": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "get_info",
    "networkx.release.basedir",
    "networkx.release.os",
    "version.version",
    "writefile"
   ]
  },
  "type": "function"
 },
 "networkx.release.write_versionfile.writefile": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.test": {
  "data": {
   "shadows": "networkx.testing.test.run"
  },
  "type": "import"
 },
 "networkx.testing": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.run": {
  "data": {
   "shadows": "networkx.testing.test.run"
  },
  "type": "import"
 },
 "networkx.testing.test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "networkx.testing.test.run"
   ]
  },
  "type": "module"
 },
 "networkx.testing.test.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.testing.test.run": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "SystemExit",
    "int",
    "networkx.testing.test.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.testing.assert_edges_equal",
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_duplicate_edges": {
  "data": {
   "lineno": 85
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_duplicate_edges_with_data": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_equal": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_not_equal": {
  "data": {
   "lineno": 59
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_equal": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.add_path"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_not_equal": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.add_path"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_no_edges": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_edges_with_data": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_edges_with_keys": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_order_of_multiedges": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "networkx.testing.assert_graphs_equal",
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_digraphs_equal": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_equal": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_cycle",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal2": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal3": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_multidigraphs_equal": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_multigraphs_equal": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.add_path",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.testing.assert_nodes_equal",
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_edges_with_data_not_equal": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_equal": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_not_equal": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_with_data_equal": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_equal": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_not_equal": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "AssertionError",
    "classmethod"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.testing.tests.test_utils.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.testing.tests.test_utils.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.testing.tests.test_utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.testing.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.utils.__all__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "networkx.testing.utils.almost_equal": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "abs",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.assert_edges_equal": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.assert_graphs_equal": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "networkx.testing.utils.assert_nodes_equal": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "dict.fromkeys",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_all_random_functions": {
  "data": {
   "symbols_in_volume": [
    "networkx.tests.test_all_random_functions.np",
    "networkx.tests.test_all_random_functions.pytest",
    "networkx.tests.test_all_random_functions.random"
   ]
  },
  "type": "module"
 },
 "networkx.tests.test_all_random_functions.approx": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.tests.test_all_random_functions.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.tests.test_all_random_functions.np_rv": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.tests.test_all_random_functions.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_all_random_functions.progress": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.tests.test_all_random_functions.py_rv": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.tests.test_all_random_functions.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_all_random_functions.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.tests.test_all_random_functions.run_all_random_functions": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.algebraic_connectivity",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.algorithms.bipartite.configuration_model",
    "networkx.algorithms.bipartite.gnmk_random_graph",
    "networkx.algorithms.bipartite.preferential_attachment_graph",
    "networkx.algorithms.bipartite.random_graph",
    "networkx.algorithms.coloring.strategy_random_sequential",
    "networkx.algorithms.community.asyn_fluidc",
    "networkx.algorithms.community.kernighan_lin_bisection",
    "networkx.algorithms.connectivity.edge_augmentation.greedy_k_edge_augmentation",
    "networkx.algorithms.threshold.random_threshold_sequence",
    "networkx.algorithms.threshold.swap_d",
    "networkx.algorithms.tree.Edmonds",
    "networkx.algorithms.tree.greedy_branching",
    "networkx.approximate_current_flow_betweenness_centrality",
    "networkx.barabasi_albert_graph",
    "networkx.barbell_graph",
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "networkx.configuration_model",
    "networkx.connected_double_edge_swap",
    "networkx.connected_watts_strogatz_graph",
    "networkx.dense_gnm_random_graph",
    "networkx.directed.random_uniform_k_out_graph",
    "networkx.directed_configuration_model",
    "networkx.double_edge_swap",
    "networkx.duplication_divergence_graph",
    "networkx.edge_betweenness",
    "networkx.edge_betweenness_centrality",
    "networkx.expected_degree_graph",
    "networkx.extended_barabasi_albert_graph",
    "networkx.fast_gnp_random_graph",
    "networkx.fiedler_vector",
    "networkx.fruchterman_reingold_layout",
    "networkx.gaussian_random_partition_graph",
    "networkx.general_random_intersection_graph",
    "networkx.generators.LFR_benchmark_graph",
    "networkx.geographical_threshold_graph",
    "networkx.gn_graph",
    "networkx.gnc_graph",
    "networkx.gnm_random_graph",
    "networkx.gnp_random_graph",
    "networkx.gnr_graph",
    "networkx.joint_degree_graph",
    "networkx.k_random_intersection_graph",
    "networkx.lattice_reference",
    "networkx.maximal_independent_set",
    "networkx.navigable_small_world_graph",
    "networkx.newman_watts_strogatz_graph",
    "networkx.omega",
    "networkx.partial_duplication_graph",
    "networkx.planted_partition_graph",
    "networkx.powerlaw_cluster_graph",
    "networkx.random_clustered_graph",
    "networkx.random_degree_sequence_graph",
    "networkx.random_geometric_graph",
    "networkx.random_internet_as_graph",
    "networkx.random_k_out_graph",
    "networkx.random_kernel_graph",
    "networkx.random_layout",
    "networkx.random_lobster",
    "networkx.random_partition_graph",
    "networkx.random_powerlaw_tree",
    "networkx.random_powerlaw_tree_sequence",
    "networkx.random_reference",
    "networkx.random_regular_graph",
    "networkx.random_shell_graph",
    "networkx.random_tree",
    "networkx.relaxed_caveman_graph",
    "networkx.rich_club_coefficient",
    "networkx.scale_free_graph",
    "networkx.sigma",
    "networkx.soft_random_geometric_graph",
    "networkx.spectral_graph_forge",
    "networkx.spectral_ordering",
    "networkx.stochastic_block_model",
    "networkx.tests.test_all_random_functions.t",
    "networkx.thresholded_random_geometric_graph",
    "networkx.tournament.random_tournament",
    "networkx.uniform_random_intersection_graph",
    "networkx.utils.discrete_sequence",
    "networkx.utils.powerlaw_sequence",
    "networkx.utils.random_weighted_sample",
    "networkx.utils.weighted_choice",
    "networkx.utils.zipf_rv",
    "networkx.watts_strogatz_graph",
    "networkx.waxman_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.run_all_random_functions.kernel_integral": {
  "data": {
   "lineno": 130
  },
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.t": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "f",
    "networkx.tests.test_all_random_functions.np",
    "networkx.tests.test_all_random_functions.np_rv",
    "networkx.tests.test_all_random_functions.progress",
    "networkx.tests.test_all_random_functions.py_rv",
    "networkx.tests.test_all_random_functions.random",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.test_rng_interface": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.tests.test_all_random_functions.np",
    "networkx.tests.test_all_random_functions.np_rv",
    "networkx.tests.test_all_random_functions.progress",
    "networkx.tests.test_all_random_functions.py_rv",
    "networkx.tests.test_all_random_functions.pytest",
    "networkx.tests.test_all_random_functions.random",
    "networkx.tests.test_all_random_functions.run_all_random_functions"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_all_random_functions.threshold": {
  "data": {
   "shadows": "networkx.algorithms.threshold"
  },
  "type": "import"
 },
 "networkx.tests.test_convert": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert.TestConvert": {
  "data": {
   "lineno": 15
  },
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.edgelists_equal": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_attribute_dict_integrity": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "list",
    "networkx.OrderedDiGraph",
    "networkx.OrderedGraph",
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "Custom",
    "dict",
    "isinstance",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping.Custom": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping.custom_dict": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_digraphs": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "dest",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.convert.from_dict_of_dicts",
    "networkx.convert.from_dict_of_lists",
    "networkx.convert.to_dict_of_dicts",
    "networkx.convert.to_dict_of_lists",
    "networkx.convert.to_networkx_graph",
    "networkx.generators.classic.cycle_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "sorted",
    "source"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_directed_to_undirected": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_edgelists": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_exceptions": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "TypeError",
    "networkx.NetworkXError",
    "networkx.convert.to_networkx_graph",
    "networkx.tests.test_convert.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_exceptions.G": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.test_graph": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.convert.from_dict_of_dicts",
    "networkx.convert.from_dict_of_lists",
    "networkx.convert.to_dict_of_dicts",
    "networkx.convert.to_dict_of_lists",
    "networkx.convert.to_networkx_graph",
    "networkx.cycle_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_simple_graphs": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dest",
    "networkx.Graph",
    "networkx.convert.from_dict_of_dicts",
    "networkx.convert.from_dict_of_lists",
    "networkx.convert.to_dict_of_dicts",
    "networkx.convert.to_dict_of_lists",
    "networkx.convert.to_networkx_graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.path_graph",
    "networkx.testing.assert_graphs_equal",
    "source"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_to_edgelist": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.testing.assert_edges_equal",
    "networkx.to_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.convert.from_dict_of_dicts",
    "networkx.convert.from_dict_of_lists",
    "networkx.convert.to_dict_of_dicts",
    "networkx.convert.to_dict_of_lists",
    "networkx.convert.to_networkx_graph",
    "networkx.generators.classic.cycle_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.from_dict_of_dicts": {
  "data": {
   "shadows": "networkx.convert.from_dict_of_dicts"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.from_dict_of_lists": {
  "data": {
   "shadows": "networkx.convert.from_dict_of_lists"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.to_dict_of_dicts": {
  "data": {
   "shadows": "networkx.convert.to_dict_of_dicts"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.to_dict_of_lists": {
  "data": {
   "shadows": "networkx.convert.to_dict_of_lists"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.to_networkx_graph": {
  "data": {
   "shadows": "networkx.convert.to_networkx_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy": {
  "data": {
   "symbols_in_volume": [
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.assert_equal": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.create_weighted": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.identity_conversion": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.from_numpy_matrix",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.setup_method": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_dtype_int_graph": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "int",
    "networkx.complete_graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_dtype_int_multigraph": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_exceptions": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_dtype": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.from_numpy_matrix",
    "networkx.tests.test_convert_numpy.np",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_parallel_edges": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.from_numpy_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.tests.test_convert_numpy.np",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_type": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "bool",
    "complex",
    "float",
    "int",
    "networkx.adj_matrix",
    "networkx.cycle_graph",
    "networkx.from_numpy_array",
    "networkx.from_numpy_matrix",
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_array": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.tests.test_convert_numpy.np",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_matrix": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_array": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.tests.test_convert_numpy.np",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_matrix": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_array": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.tests.test_convert_numpy.np",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_array": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.tests.test_convert_numpy.np",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_nodelist": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_numpy.pytest",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_numpy_multigraph": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.MultiGraph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_shape": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_numpy_matrix",
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_symmetric": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.from_numpy_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.tests.test_convert_numpy.np"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_to_numpy_recarray": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.Graph",
    "networkx.to_numpy_recarray",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_weight_keyword": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_numpy.np_assert_equal",
    "networkx.to_numpy_matrix",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray": {
  "data": {
   "lineno": 242
  },
  "type": "class"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.assert_equal": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.create_weighted": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.identity_conversion": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.from_numpy_array",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.setup_method": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_graph": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "int",
    "networkx.complete_graph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_multigraph": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_dtype": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.from_numpy_array",
    "networkx.tests.test_convert_numpy.np",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_parallel_edges": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.from_numpy_array",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.tests.test_convert_numpy.np",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_type": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "TypeError",
    "bool",
    "complex",
    "float",
    "int",
    "networkx.from_numpy_array",
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_digraph_array": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_graph_array": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_digraph_array": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_graph_array": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_nodelist": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_numpy.pytest",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_numpy_multigraph": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.MultiGraph",
    "networkx.to_numpy_array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_shape": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_numpy_array",
    "networkx.tests.test_convert_numpy.np",
    "networkx.tests.test_convert_numpy.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_symmetric": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.from_numpy_array",
    "networkx.testing.utils.assert_graphs_equal",
    "networkx.tests.test_convert_numpy.np"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_to_numpy_recarray": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.Graph",
    "networkx.to_numpy_recarray",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_weight_keyword": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_numpy.np_assert_equal",
    "networkx.to_numpy_array",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.np": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.tests.test_convert_numpy.np_assert_equal": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.tests.test_convert_numpy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas": {
  "data": {
   "symbols_in_volume": [
    "networkx.tests.test_convert_pandas.pytest"
   ]
  },
  "type": "module"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.setup_method": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.tests.test_convert_pandas.np",
    "networkx.tests.test_convert_pandas.pd"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_multigraph": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal",
    "networkx.tests.test_convert_pandas.pd"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_normal_graph_no_action": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_exceptions": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "int",
    "networkx.NetworkXError",
    "networkx.from_pandas_adjacency",
    "networkx.tests.test_convert_pandas.pd",
    "networkx.tests.test_convert_pandas.pytest",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.tests.test_convert_pandas.pd",
    "networkx.to_pandas_adjacency"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency_named": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.from_pandas_adjacency",
    "networkx.tests.test_convert_pandas.np",
    "networkx.tests.test_convert_pandas.pd",
    "networkx.to_pandas_adjacency"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.cycle_graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.tests.test_convert_pandas.pd",
    "networkx.to_edgelist",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_all_attr": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_int_attr_name": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_invalid_attr": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_pandas_edgelist",
    "networkx.tests.test_convert_pandas.pd",
    "networkx.tests.test_convert_pandas.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr_incl_target": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multidigraph_and_edge_attr": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal",
    "networkx.tests.test_convert_pandas.pd"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_no_attr": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_one_attr": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_nonexisting_edgekey_raises": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.exception.NetworkXError",
    "networkx.from_pandas_edgelist",
    "networkx.tests.test_convert_pandas.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_roundtrip": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "int",
    "networkx.Graph",
    "networkx.from_pandas_adjacency",
    "networkx.from_pandas_edgelist",
    "networkx.testing.assert_graphs_equal",
    "networkx.to_pandas_adjacency",
    "networkx.to_pandas_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_custom_source_or_target_col_exists": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "networkx.tests.test_convert_pandas.pytest",
    "networkx.to_pandas_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_default_source_or_target_col_exists": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "networkx.tests.test_convert_pandas.pytest",
    "networkx.to_pandas_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.np": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.tests.test_convert_pandas.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.pd": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.tests.test_convert_pandas.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.assert_isomorphic": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.create_weighted": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "list",
    "networkx.generators.classic.cycle_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.identity_conversion": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.from_scipy_sparse_matrix",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.setup_class": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "classmethod",
    "networkx.tests.test_convert_scipy.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.setup_method": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_empty": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_exceptions": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.tests.test_convert_scipy.pytest",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_exceptions.G": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "format"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword_raise": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_scipy.pytest",
    "networkx.to_scipy_sparse_matrix",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_from_scipy_sparse_matrix_parallel_edges": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.from_scipy_sparse_matrix",
    "networkx.testing.assert_graphs_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_digraph_matrix": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_graph_matrix": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_nodelist": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.tests.test_convert_scipy.pytest",
    "networkx.to_numpy_matrix",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_null_raise": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.tests.test_convert_scipy.pytest",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_ordering": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_digraph": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_graph": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_shape": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_scipy_sparse_matrix",
    "networkx.tests.test_convert_scipy.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_symmetric": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.from_scipy_sparse_matrix",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_weight_keyword": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_exceptions.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_no_path": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_pointless_concept": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unbounded": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.NetworkXUnbounded",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unfeasible": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxalgorithmerr": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.NetworkXAlgorithmError",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxerr": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkxexception": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.tests.test_exceptions.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_relabel.TestRelabel": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "list",
    "networkx.convert_node_labels_to_integers",
    "networkx.generators.classic.empty_graph",
    "networkx.testing.assert_nodes_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers2": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.generators.classic.empty_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers_raise": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.convert_node_labels_to_integers",
    "networkx.tests.test_relabel.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_copy_name": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_isolated_nodes_to_same": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_copy": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "len",
    "networkx.MultiDiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_merge_nodes": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "MG",
    "len",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_copy": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_inplace": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_copy": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_inplace": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_nonnumeric_key": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "MG",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function.mapping": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ord"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "KeyError",
    "networkx.Graph",
    "networkx.relabel_nodes",
    "networkx.tests.test_relabel.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_orderedgraph": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "list",
    "networkx.OrderedGraph",
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_selfloop": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.relabel_nodes",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_toposort": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_relabel.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_relabel.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_relabel.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_relabel.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.contextmanagers": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.contextmanagers.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.utils.contextmanagers.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "networkx.utils.contextmanagers.reversed": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "DeprecationWarning",
    "contextlib.contextmanager",
    "networkx.utils.contextmanagers.warnings"
   ]
  },
  "type": "function"
 },
 "networkx.utils.contextmanagers.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.utils.decorators": {
  "data": {
   "symbols_in_volume": [
    "collections.defaultdict",
    "networkx.utils.decorators._dispatch_dict",
    "networkx.utils.decorators._open_bz2",
    "networkx.utils.decorators._open_gz",
    "networkx.utils.decorators.random_state",
    "open"
   ]
  },
  "type": "module"
 },
 "networkx.utils.decorators.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "networkx.utils.decorators.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.utils.decorators._dispatch_dict": {
  "data": {
   "lineno": 97
  },
  "type": "constant"
 },
 "networkx.utils.decorators._open_bz2": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "networkx.utils.decorators.bz2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators._open_gz": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.utils.decorators.gzip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.bz2": {
  "data": {
   "shadows": "bz2"
  },
  "type": "import"
 },
 "networkx.utils.decorators.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "networkx.utils.decorators.create_py_random_state": {
  "data": {
   "shadows": "networkx.utils.create_py_random_state"
  },
  "type": "import"
 },
 "networkx.utils.decorators.create_random_state": {
  "data": {
   "shadows": "networkx.utils.create_random_state"
  },
  "type": "import"
 },
 "networkx.utils.decorators.decorator": {
  "data": {
   "shadows": "decorator.decorator"
  },
  "type": "import"
 },
 "networkx.utils.decorators.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.utils.decorators.get_state": {
  "data": {
   "shadows": "numpy.random.get_state"
  },
  "type": "import"
 },
 "networkx.utils.decorators.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "networkx.utils.decorators.nodes_or_number": {
  "data": {
   "lineno": 249
  },
  "type": "function"
 },
 "networkx.utils.decorators.nodes_or_number._nodes_or_number": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "TypeError",
    "decorator.decorator",
    "func_to_be_decorated",
    "iter",
    "list",
    "networkx.NetworkXError",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.not_implemented_for": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.utils.decorators.not_implemented_for._not_implemented_for": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "KeyError",
    "decorator.decorator",
    "networkx.NetworkXNotImplemented",
    "not_implement_for_func"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.np_random_state": {
  "data": {
   "lineno": 413
  },
  "type": "constant"
 },
 "networkx.utils.decorators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.decorators.open_file": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "networkx.utils.decorators.open_file._open_file": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "IndexError",
    "KeyError",
    "TypeError",
    "decorator.decorator",
    "func_to_be_decorated",
    "hasattr",
    "isinstance",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.decorators._dispatch_dict",
    "os.path.splitext",
    "pathlib.Path",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "ImportError",
    "func",
    "func.__name__"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state.save_random_state": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "numpy.random.get_state",
    "numpy.random.set_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.preserve_random_state.wrapper": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "func",
    "numpy.random.seed",
    "save_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.py_random_state": {
  "data": {
   "lineno": 416
  },
  "type": "function"
 },
 "networkx.utils.decorators.py_random_state._random_state": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "IndexError",
    "TypeError",
    "decorator.decorator",
    "func",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.create_py_random_state",
    "networkx.utils.decorators.random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.random_state": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "networkx.utils.decorators.random_state._random_state": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "IndexError",
    "TypeError",
    "decorator.decorator",
    "func",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.create_random_state",
    "networkx.utils.decorators.random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.seed": {
  "data": {
   "shadows": "numpy.random.seed"
  },
  "type": "import"
 },
 "networkx.utils.decorators.set_state": {
  "data": {
   "shadows": "numpy.random.set_state"
  },
  "type": "import"
 },
 "networkx.utils.decorators.splitext": {
  "data": {
   "shadows": "os.path.splitext"
  },
  "type": "import"
 },
 "networkx.utils.heaps": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.heaps.BinaryHeap": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.BinaryHeap.__init__": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "itertools.count",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.get": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.insert": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "dict",
    "heapq.heappush",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.min": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "dict",
    "heapq.heappop",
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "pop"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.pop": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "dict",
    "heapq.heappop",
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "pop"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item.__init__": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap._Item.__repr__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__bool__": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__contains__": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__init__": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__len__": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__nonzero__": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.get": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.insert": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.min": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.pop": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node.__init__": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.utils.heaps.PairingHeap",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.__init__": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._cut": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "next",
    "next.prev"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._link": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "next",
    "next.prev"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._merge_children": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "link",
    "next",
    "next.next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.get": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.insert": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.min": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.pop": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.utils.heaps._inherit_doc": {
  "data": {
   "lineno": 136
  },
  "type": "function"
 },
 "networkx.utils.heaps._inherit_doc.func": {
  "data": {
   "lineno": 140
  },
  "type": "function"
 },
 "networkx.utils.heaps.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.utils.heaps.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.utils.heaps.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.utils.heaps.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.mapped_queue": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.mapped_queue.MappedQueue": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.utils.mapped_queue.MappedQueue.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "dict",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.__len__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._heapify": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "AssertionError",
    "enumerate",
    "len",
    "networkx.utils.mapped_queue.heapq"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._siftdown": {
  "data": {
   "lineno": 164
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue._siftup": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "IndexError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.pop": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.push": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.remove": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "KeyError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.MappedQueue.update": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "networkx.utils.mapped_queue.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.utils.mapped_queue.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.utils.misc": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.misc.PythonRandomInterface": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "ImportError",
    "ImportWarning",
    "networkx.utils.misc.warnings"
   ]
  },
  "type": "class"
 },
 "networkx.utils.misc.PythonRandomInterface.__init__": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "networkx.utils.misc.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.choice": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.expovariate": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.gauss": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.paretovariate": {
  "data": {
   "lineno": 363
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.randint": {
  "data": {
   "lineno": 355
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.random": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.randrange": {
  "data": {
   "lineno": 337
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.sample": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.shuffle": {
  "data": {
   "lineno": 346
  },
  "type": "function"
 },
 "networkx.utils.misc.PythonRandomInterface.uniform": {
  "data": {
   "lineno": 334
  },
  "type": "function"
 },
 "networkx.utils.misc.arbitrary_element": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "ValueError",
    "iter",
    "networkx.utils.misc.is_iterator",
    "networkx.utils.misc.iterable",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.call": {
  "data": {
   "shadows": "subprocess.call"
  },
  "type": "import"
 },
 "networkx.utils.misc.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.utils.misc.consume": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "collections.deque"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.create_py_random_state": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "ImportError",
    "ValueError",
    "int",
    "isinstance",
    "networkx.utils.misc.PythonRandomInterface",
    "networkx.utils.misc.numpy",
    "networkx.utils.misc.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.create_random_state": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "networkx.utils.misc.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.default_opener": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.utils.misc.sys",
    "subprocess.call"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.utils.misc.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.utils.misc.dict_to_numpy_array": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "dict_to_numpy_array1",
    "dict_to_numpy_array2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array1": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.utils.misc.numpy",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array2": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "len",
    "networkx.utils.misc.numpy",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.empty_generator": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "networkx.utils.misc.flatten": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.utils.misc.is_string_like",
    "networkx.utils.misc.iterable"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.generate_unique_node": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "networkx.utils.misc.uuid",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.groups": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.is_iterator": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "hasattr",
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.is_list_of_ints": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.is_string_like": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "DeprecationWarning",
    "isinstance",
    "networkx.utils.misc.warnings",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.iterable": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "hasattr",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.make_list_of_ints": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "isinstance",
    "list",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.make_str": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "DeprecationWarning",
    "networkx.utils.misc.warnings",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.utils.misc.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.utils.misc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.misc.pairwise": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "itertools.chain",
    "itertools.tee",
    "networkx.utils.misc.iterable",
    "next",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.utils.misc.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.utils.misc.tee": {
  "data": {
   "shadows": "itertools.tee"
  },
  "type": "import"
 },
 "networkx.utils.misc.to_tuple": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "map",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "networkx.utils.misc.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.random_sequence.bisect": {
  "data": {
   "shadows": "bisect"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.cumulative_distribution": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "float",
    "len",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.discrete_sequence": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.py_random_state",
    "networkx.utils.random_sequence.bisect",
    "networkx.utils.random_sequence.cumulative_distribution",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.powerlaw_sequence": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.utils.py_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.py_random_state": {
  "data": {
   "shadows": "networkx.utils.py_random_state"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.random_weighted_sample": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "networkx.utils.py_random_state",
    "set",
    "weighted_choice"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.weighted_choice": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "networkx.utils.py_random_state",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.zipf_rv": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "networkx.utils.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.rcm.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.utils.rcm.connected_cuthill_mckee_ordering": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "collections.deque",
    "heuristic",
    "list",
    "operator.itemgetter",
    "pseudo_peripheral_node",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.cuthill_mckee_ordering": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "connected_cuthill_mckee_ordering",
    "networkx.connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.utils.rcm.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.utils.rcm.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.rcm.pseudo_peripheral_node": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "arbitrary_element",
    "dict",
    "max",
    "min",
    "networkx.shortest_path_length",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.reverse_cuthill_mckee_ordering": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "list",
    "networkx.utils.rcm.cuthill_mckee_ordering",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_contextmanager": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_contextmanager.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_contextmanager.test_reversed": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "Exception",
    "networkx.DiGraph",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_decorators.PythonRandomInterface": {
  "data": {
   "shadows": "networkx.utils.misc.PythonRandomInterface"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator": {
  "data": {
   "lineno": 47
  },
  "type": "class"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.read": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.setup_method": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.teardown_method": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.os"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_pathlib": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.pathlib"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj_path_none": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj": {
  "data": {
   "lineno": 141
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_path_none": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.write": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState": {
  "data": {
   "lineno": 161
  },
  "type": "class"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_np_random_state": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "isinstance",
    "networkx.utils.decorators.np_random_state",
    "networkx.utils.decorators.random_state",
    "networkx.utils.decorators.random_state.random_sample"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_py_random_state": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "isinstance",
    "networkx.utils.decorators.py_random_state",
    "networkx.utils.decorators.random_state",
    "networkx.utils.decorators.random_state.random",
    "networkx.utils.misc.PythonRandomInterface",
    "networkx.utils.tests.test_decorators.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.instantiate_random_state": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "isinstance",
    "networkx.utils.decorators.random_state",
    "networkx.utils.decorators.random_state.random_sample"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.setup_class": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "classmethod",
    "networkx.utils.tests.test_decorators.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_None": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_int": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random_RandomState": {
  "data": {
   "lineno": 232
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestRandomState.test_random_state_py_random": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "ValueError",
    "networkx.utils.tests.test_decorators.pytest",
    "networkx.utils.tests.test_decorators.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.np_random_state": {
  "data": {
   "shadows": "networkx.utils.decorators.np_random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.numpy.random": {
  "data": {
   "shadows": "numpy.random"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.open_file": {
  "data": {
   "shadows": "networkx.utils.decorators.open_file"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.pathlib": {
  "data": {
   "shadows": "pathlib"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.preserve_random_state": {
  "data": {
   "shadows": "networkx.utils.decorators.preserve_random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.py_random_state": {
  "data": {
   "shadows": "networkx.utils.decorators.py_random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.random_state": {
  "data": {
   "shadows": "networkx.utils.decorators.random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.Graph",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator.test1": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "KeyError",
    "networkx.Graph",
    "networkx.utils.tests.test_decorators.pytest",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key.test1": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.utils.tests.test_decorators.pytest",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise.test1": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_preserve_random_state": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "ImportError",
    "abs",
    "networkx.utils.decorators.preserve_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_invalid_arg_index": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "make_random_state",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_decorators.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_invalid_arg_index.make_random_state": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "networkx.utils.decorators.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_string_arg_index": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "make_random_state",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_decorators.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_py_random_state_string_arg_index.make_random_state": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "networkx.utils.decorators.py_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_invalid_arg_index": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "make_random_state",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_decorators.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_invalid_arg_index.make_random_state": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "networkx.utils.decorators.random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_string_arg_index": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "make_random_state",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_decorators.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_random_state_string_arg_index.make_random_state": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "networkx.utils.decorators.random_state"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps": {
  "data": {
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.tests.test_heaps.X",
    "networkx.utils.tests.test_heaps.x"
   ]
  },
  "type": "module"
 },
 "networkx.utils.tests.test_heaps.BinaryHeap": {
  "data": {
   "shadows": "networkx.utils.BinaryHeap"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_heaps.PairingHeap": {
  "data": {
   "shadows": "networkx.utils.PairingHeap"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_heaps.X": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.utils.tests.test_heaps.X.__eq__": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ge__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__gt__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__hash__": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "hash",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__le__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__lt__": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ne__": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps._test_heap_class": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "cls",
    "getattr",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_heaps.data",
    "networkx.utils.tests.test_heaps.pytest",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.data": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "networkx.utils.tests.test_heaps.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_heaps.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_heaps.test_BinaryHeap": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.utils.BinaryHeap",
    "networkx.utils.tests.test_heaps._test_heap_class"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.test_PairingHeap": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.utils.PairingHeap",
    "networkx.utils.tests.test_heaps._test_heap_class"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.x": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.utils.tests.test_mapped_queue": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_mapped_queue.MappedQueue": {
  "data": {
   "shadows": "networkx.utils.mapped_queue.MappedQueue"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue": {
  "data": {
   "lineno": 4
  },
  "type": "class"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue._check_map": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "enumerate"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue._make_mapped_queue": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "enumerate",
    "networkx.utils.mapped_queue.MappedQueue"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.setup": {
  "data": {
   "lineno": 5
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_heapify": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_init": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.utils.mapped_queue.MappedQueue"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_len": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "len",
    "networkx.utils.mapped_queue.MappedQueue"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_pop": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.utils.mapped_queue.MappedQueue"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push_duplicate": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.utils.mapped_queue.MappedQueue"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_leaf": {
  "data": {
   "lineno": 131
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_root": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_leaf": {
  "data": {
   "lineno": 75
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_multiple": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_single": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_leaf": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_left_child": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_multiple": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_one_child": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_right_child": {
  "data": {
   "lineno": 59
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_leaf": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_root": {
  "data": {
   "lineno": 152
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_misc.PythonRandomInterface": {
  "data": {
   "shadows": "networkx.utils.PythonRandomInterface"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray": {
  "data": {
   "lineno": 74
  },
  "type": "class"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.setup_class": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "classmethod",
    "networkx.utils.tests.test_misc.pytest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array1": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "assert_allclose",
    "networkx.utils.dict_to_numpy_array1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array2": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "assert_allclose",
    "networkx.utils.dict_to_numpy_array2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_a": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "assert_allclose",
    "networkx.utils.dict_to_numpy_array",
    "networkx.utils.dict_to_numpy_array2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_b": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "assert_allclose",
    "networkx.utils.dict_to_numpy_array",
    "networkx.utils.dict_to_numpy_array1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_numpy_to_list_of_ints": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "int",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.make_list_of_ints",
    "networkx.utils.tests.test_misc.pytest",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.create_py_random_state": {
  "data": {
   "shadows": "networkx.utils.create_py_random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.create_random_state": {
  "data": {
   "shadows": "networkx.utils.create_random_state"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.dict_to_numpy_array": {
  "data": {
   "shadows": "networkx.utils.dict_to_numpy_array"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.dict_to_numpy_array1": {
  "data": {
   "shadows": "networkx.utils.dict_to_numpy_array1"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.dict_to_numpy_array2": {
  "data": {
   "shadows": "networkx.utils.dict_to_numpy_array2"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.discrete_sequence": {
  "data": {
   "shadows": "networkx.utils.discrete_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.groups": {
  "data": {
   "shadows": "networkx.utils.groups"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.iterable": {
  "data": {
   "shadows": "networkx.utils.iterable"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.make_list_of_ints": {
  "data": {
   "shadows": "networkx.utils.make_list_of_ints"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.pairwise": {
  "data": {
   "shadows": "networkx.utils.pairwise"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.powerlaw_sequence": {
  "data": {
   "shadows": "networkx.utils.powerlaw_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.test_PythonRandomInterface": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "networkx.utils.PythonRandomInterface",
    "networkx.utils.tests.test_misc.pytest",
    "rs"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_create_py_random_state": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "networkx.utils.PythonRandomInterface",
    "networkx.utils.create_py_random_state",
    "networkx.utils.tests.test_misc.pytest",
    "networkx.utils.tests.test_misc.random",
    "pyrs",
    "rs"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_create_random_state": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "networkx.utils.create_random_state",
    "networkx.utils.tests.test_misc.pytest",
    "rs"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_graph_iterable": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.utils.iterable"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_groups": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "dict",
    "networkx.utils.groups",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_is_string_like": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.utils.is_string_like"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_iterable": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.utils.iterable"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_list_of_ints": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "int",
    "networkx.NetworkXError",
    "networkx.utils.make_list_of_ints",
    "networkx.utils.tests.test_misc.pytest",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_bytes": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "networkx.utils.make_str",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_unicode": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "networkx.utils.make_str",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_pairwise": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "iter",
    "list",
    "networkx.utils.pairwise",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_random_number_distribution": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.utils.discrete_sequence",
    "networkx.utils.powerlaw_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_to_tuple": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.utils.to_tuple"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.to_tuple": {
  "data": {
   "shadows": "networkx.utils.to_tuple"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_random_sequence.powerlaw_sequence": {
  "data": {
   "shadows": "networkx.utils.powerlaw_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.random_weighted_sample": {
  "data": {
   "shadows": "networkx.utils.random_weighted_sample"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.test_degree_sequences": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "len",
    "networkx.utils.powerlaw_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_choice": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.utils.weighted_choice"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_sample": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "ValueError",
    "networkx.utils.random_weighted_sample",
    "networkx.utils.tests.test_random_sequence.pytest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_zipf_rv": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "networkx.utils.tests.test_random_sequence.pytest",
    "networkx.utils.zipf_rv",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.weighted_choice": {
  "data": {
   "shadows": "networkx.utils.weighted_choice"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.zipf_rv": {
  "data": {
   "shadows": "networkx.utils.zipf_rv"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_rcm.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.utils.reverse_cuthill_mckee_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic.smallest_degree": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.utils.reverse_cuthill_mckee_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_unionfind.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_unionfind.test_empty_union": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.utils.UnionFind"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_subtree_union": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "list",
    "networkx.utils.UnionFind"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_unionfind": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.utils.UnionFind"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind.test_unionfind_weights": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.utils.UnionFind"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.union_find.UnionFind": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.utils.union_find.UnionFind.__getitem__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__init__": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__iter__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.to_sets": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.utils.groups"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.union": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.groups": {
  "data": {
   "shadows": "networkx.utils.groups"
  },
  "type": "import"
 },
 "networkx.version": {
  "data": {
   "symbols_in_volume": [
    "networkx.version.datetime"
   ]
  },
  "type": "module"
 },
 "networkx.version.date": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.version.date_info": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.version.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "networkx.version.dev": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.version.vcs_info": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.version.version": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.version.version_info": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 }
}