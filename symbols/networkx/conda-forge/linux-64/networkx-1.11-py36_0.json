{
 "*": {
  "data": {
   "imports": [
    "nose.tools"
   ]
  },
  "type": "star-import"
 },
 "networkx": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "networkx.m",
    "networkx.release.authors",
    "networkx.release.date",
    "networkx.release.license",
    "networkx.release.version",
    "networkx.sys"
   ]
  },
  "type": "module"
 },
 "networkx.__author__": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "networkx.__bibtex__": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "networkx.__date__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "networkx.__license__": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "networkx.__version__": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "networkx.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "networkx.algorithms": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.all_node_cuts": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.all_node_cuts"
  },
  "type": "import"
 },
 "networkx.algorithms.all_pairs_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.all_pairs_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clique.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clique.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clique.clique_removal": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.approximation.ramsey.ramsey_R2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.max_clique": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.approximation.clique.clique_removal",
    "networkx.complement"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clique.ramsey": {
  "data": {
   "shadows": "networkx.algorithms.approximation.ramsey"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clustering_coefficient": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.clustering_coefficient.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clustering_coefficient.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.clustering_coefficient.average_clustering": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float",
    "int",
    "len",
    "list",
    "networkx.algorithms.approximation.clustering_coefficient.random",
    "networkx.utils.not_implemented_for",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.clustering_coefficient.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.clustering_coefficient.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity": {
  "data": {
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.approximation.connectivity.INF": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.connectivity.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.connectivity.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_pred_succ": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "networkx.NetworkXException",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity._bidirectional_shortest_path": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.connectivity._bidirectional_pred_succ"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "iter_func",
    "networkx.algorithms.approximation.connectivity.itertools",
    "networkx.algorithms.approximation.connectivity.local_node_connectivity",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.connectivity.local_node_connectivity": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "min",
    "networkx.NetworkXError",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.approximation.connectivity.INF",
    "networkx.algorithms.approximation.connectivity._bidirectional_shortest_path",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "connected_func",
    "iter_func",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.connectivity.itertools",
    "networkx.algorithms.approximation.connectivity.local_node_connectivity",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "operator.itemgetter",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.node_connectivity.neighbors": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.connectivity.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.dominating_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.dominating_set.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.dominating_set.__author__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.dominating_set.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.dominating_set.min_edge_dominating_set": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "ValueError",
    "maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "len",
    "min",
    "not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set._cost": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.independent_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.independent_set.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.independent_set.__author__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.independent_set.clique_removal": {
  "data": {
   "shadows": "networkx.algorithms.approximation.clique_removal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.independent_set.maximum_independent_set": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.clique_removal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents": {
  "data": {
   "symbols_in_volume": [
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.approximation.kcomponents.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.__getitem__": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "dict",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.adjacency_iter": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.degree": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.degree_iter": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "len",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors_iter": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._AntiGraph.single_edge_dict": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.kcomponents.__author__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.kcomponents._cliques_heuristic": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "min",
    "networkx.algorithms.approximation.kcomponents._same",
    "networkx.core_number",
    "networkx.density",
    "networkx.k_core",
    "set",
    "set.intersection",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents._same": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "max",
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.build_auxiliary_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.build_auxiliary_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.exact_local_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.local_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.k_components": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "biconnected_components",
    "combinations",
    "core_number",
    "k_core",
    "len",
    "list",
    "max",
    "networkx.algorithms.approximation.kcomponents._AntiGraph",
    "networkx.algorithms.approximation.kcomponents._cliques_heuristic",
    "networkx.algorithms.approximation.kcomponents.collections",
    "networkx.algorithms.approximation.kcomponents.itertools",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.biconnected_components",
    "networkx.connected_components",
    "networkx.core_number",
    "networkx.density",
    "networkx.k_core",
    "node_connectivity",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.kcomponents.local_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.approximation.local_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.matching.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.matching.__author__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.matching.min_maximal_matching": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.ramsey": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.ramsey.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.ramsey.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.ramsey.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.ramsey.ramsey_R2": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "max",
    "networkx.all_neighbors",
    "networkx.non_neighbors",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.average_clustering": {
  "data": {
   "shadows": "networkx.algorithms.approximation.average_clustering"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_complete": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.complete_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_dodecahedral": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.dodecahedral_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_empty": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.empty_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.petersen_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_tetrahedral": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.approximation.average_clustering",
    "networkx.average_clustering",
    "networkx.tetrahedral_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_clique.apxa": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_clique.test_clique_removal": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "eq_",
    "networkx.Graph",
    "networkx.algorithms.approximation.clique_removal",
    "networkx.barbell_graph",
    "networkx.complete_graph",
    "networkx.density",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.test_max_clique": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_equals",
    "len",
    "networkx.algorithms.approximation.max_clique",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_clique.test_max_clique_smoke": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.max_clique"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox": {
  "data": {
   "lineno": 101
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.setUp": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.gnp_random_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_complete": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cutoff": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cycles": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_paths": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.approx": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_complete_graphs": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_directed_node_connectivity": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.cycle_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_dodecahedral": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.dodecahedral_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_empty_graphs": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.empty_graph",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_global_node_connectivity": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.approximation.local_node_connectivity",
    "networkx.algorithms.approximation.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_source": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_missing_target": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_octahedral": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.octahedral_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_source": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_only_target": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_petersen": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.petersen_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_source_equals_target": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.approximation.local_node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_connectivity.test_white_harary1": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.node_connectivity",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_edge_dominating_set": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.min_edge_dominating_set",
    "networkx.complete_graph",
    "networkx.path_graph",
    "nose.tools.ok_"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_weighted_dominating_set": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.min_weighted_dominating_set",
    "nose.tools.ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_star_graph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.min_weighted_dominating_set",
    "networkx.relabel_nodes",
    "networkx.star_graph",
    "nose.tools.eq_"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.eq_": {
  "data": {
   "shadows": "nose.tools.eq_"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.min_edge_dominating_set": {
  "data": {
   "shadows": "networkx.algorithms.approximation.min_edge_dominating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.min_weighted_dominating_set": {
  "data": {
   "shadows": "networkx.algorithms.approximation.min_weighted_dominating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_dominating_set.ok_": {
  "data": {
   "shadows": "nose.tools.ok_"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.a": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_independent_set.test_independent_set": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.maximum_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph": {
  "data": {
   "lineno": 194
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.setUp": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.kcomponents._AntiGraph",
    "networkx.complement",
    "networkx.davis_southern_women_graph",
    "networkx.gnp_random_graph",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adjacency_iter": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "list",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_connected_components": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "networkx.connected_components",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_core_number": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "networkx.core_number",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "list",
    "nose.tools.assert_equal",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_neighbors": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "list",
    "nose.tools.assert_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_node_not_in_graph": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_size": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "len",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._AntiGraph": {
  "data": {
   "shadows": "networkx.algorithms.approximation.kcomponents._AntiGraph"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components",
    "networkx.node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents._same": {
  "data": {
   "shadows": "networkx.algorithms.approximation.kcomponents._same"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components.items",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.k_components": {
  "data": {
   "shadows": "networkx.algorithms.approximation.k_components"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_directed": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.approximation.k_components",
    "networkx.gnp_random_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_example_1_detail_3_and_4": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components",
    "networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_0": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_karate_1": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.k_components",
    "networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict",
    "networkx.karate_club_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_same": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.kcomponents._same",
    "nose.tools.assert_false",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_matching.a": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_matching.test_min_maximal_matching": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.min_maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_ramsey": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.apxa": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_ramsey.test_ramsey": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "eq_",
    "networkx.Graph",
    "networkx.algorithms.approximation.ramsey_R2",
    "networkx.barbell_graph",
    "networkx.complete_graph",
    "networkx.density",
    "networkx.trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_min_vertex_cover": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equals",
    "len",
    "networkx.Graph",
    "networkx.algorithms.approximation.min_weighted_vertex_cover",
    "networkx.star_graph",
    "ok_",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.a": {
  "data": {
   "shadows": "networkx.algorithms.approximation"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.tests.test_vertex_cover.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.approximation.vertex_cover": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.approximation.vertex_cover.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.vertex_cover.__author__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "dict",
    "min",
    "not_implemented_for",
    "set",
    "weight_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.connectivity.average_degree_connectivity"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.assortativity.connectivity.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.connectivity.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.connectivity._avg_deg_conn": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "collections.defaultdict",
    "float",
    "neighbors",
    "source_degree",
    "sum",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.connectivity.average_degree_connectivity": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "neighbors",
    "networkx.algorithms.assortativity.connectivity._avg_deg_conn",
    "source_degree",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.connectivity.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.connectivity.k_nearest_neighbors": {
  "data": {
   "lineno": 125
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.neighbor_degree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.neighbor_degree.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.neighbor_degree.__author__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "float",
    "source_degree",
    "sum",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg",
    "source_degree",
    "target_degree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.neighbor_degree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.pairs.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.pairs.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.assortativity.pairs.dict_to_numpy_array": {
  "data": {
   "shadows": "networkx.utils.dict_to_numpy_array"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs.node_attribute_xy": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs.node_degree_xy": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "set",
    "xdeg",
    "ydeg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.pairs.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.pairs.setup_module": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setUp": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setUp": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.base_test.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_equal",
    "networkx.average_degree_connectivity",
    "networkx.k_nearest_neighbors",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_in_out_weight": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "assert_equal",
    "itertools.permutations",
    "networkx.DiGraph",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_degree_connectivity",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.average_degree_connectivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_connectivity.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.BaseTestAttributeMixing": {
  "data": {
   "shadows": "base_test.BaseTestAttributeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.BaseTestDegreeMixing": {
  "data": {
   "shadows": "base_test.BaseTestDegreeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "base_test.BaseTestAttributeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.setupClass": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "numpy.array",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "numpy.array",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.algorithms.assortativity.correlation.attribute_ac",
    "numpy.array",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_assortativity_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "base_test.BaseTestDegreeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.setupClass": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.degree_pearson_correlation_coefficient",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.degree_pearson_correlation_coefficient",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.degree_pearson_correlation_coefficient",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.attribute_ac": {
  "data": {
   "shadows": "networkx.algorithms.assortativity.correlation.attribute_ac"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_correlation.scipy.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.BaseTestAttributeMixing": {
  "data": {
   "shadows": "base_test.BaseTestAttributeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.BaseTestDegreeMixing": {
  "data": {
   "shadows": "base_test.BaseTestDegreeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "base_test.BaseTestAttributeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.attribute_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "base_test.BaseTestAttributeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.setupClass": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "float",
    "networkx.attribute_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "float",
    "networkx.attribute_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "float",
    "networkx.attribute_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "base_test.BaseTestDegreeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree_mixing_dict",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree_mixing_dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "base_test.BaseTestDegreeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.setupClass": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "float",
    "networkx.degree_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "float",
    "networkx.degree_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "float",
    "networkx.degree_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "float",
    "networkx.degree_mixing_matrix",
    "numpy.array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.npt": {
  "data": {
   "shadows": "numpy.testing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_mixing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_equal",
    "networkx.average_neighbor_degree",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_neighbor_degree",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_neighbor_degree",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_neighbor_degree",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_neighbor_degree",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_neighbor_degree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_pairs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.BaseTestAttributeMixing": {
  "data": {
   "shadows": "base_test.BaseTestAttributeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.BaseTestDegreeMixing": {
  "data": {
   "shadows": "base_test.BaseTestDegreeMixing"
  },
  "type": "import"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "base_test.BaseTestAttributeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_attribute_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "base_test.BaseTestDegreeMixing"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected_nodes": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.node_degree_xy",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.assortativity.tests.test_pairs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.average_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.average_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.basic.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.basic.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.basic.color": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.isolates"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.color.neighbors": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.basic.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.degrees": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.density": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.number_of_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.basic.color"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.is_bipartite_node_set": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.basic.sets",
    "networkx.connected_component_subgraphs",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.basic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.basic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.basic.sets": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.basic.color",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.centrality.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.centrality.__author__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.centrality.betweenness_centrality": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.betweenness_centrality",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.closeness_centrality": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.single_source_shortest_path_length",
    "path_length",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.degree_centrality": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dict",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.cluster.cc_dot",
    "networkx.algorithms.bipartite.cluster.cc_max",
    "networkx.algorithms.bipartite.cluster.cc_min",
    "networkx.algorithms.bipartite.cluster.latapy_clustering"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.bipartite.cluster.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster._four_cycles": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.bipartite.cluster.itertools",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster._threepaths": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.average_clustering": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.bipartite.cluster.latapy_clustering",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_dot": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "float",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_max": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "float",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.cc_min": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "float",
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.clustering": {
  "data": {
   "lineno": 129
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster.latapy_clustering": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "KeyError",
    "cc_func",
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.cluster.modes",
    "networkx.algorithms.bipartite.is_bipartite",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.cluster.modes": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.cluster.robins_alexander_clustering": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.cluster._four_cycles",
    "networkx.algorithms.bipartite.cluster._threepaths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.edgelist.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.edgelist._prep_create_using": {
  "data": {
   "shadows": "networkx.convert._prep_create_using"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.generate_edgelist": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError",
    "map",
    "networkx.utils.make_str",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.edgelist.parse_edgelist": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "IndexError",
    "TypeError",
    "ast.literal_eval",
    "dict",
    "edge_type",
    "len",
    "networkx.convert._prep_create_using",
    "nodetype",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.read_edgelist": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.edgelist.parse_edgelist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.edgelist.write_edgelist": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.edgelist.generate_edgelist",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching": {
  "data": {
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.bipartite.matching.INFINITY": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching.__all__": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching._connected_by_alternating_paths": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "_alternating_dfs",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching._is_connected_by_alternating_path._alternating_dfs": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "_alternating_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.bipartite_sets": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.sets"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "list",
    "recurse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.eppstein_matching.recurse": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "recurse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "breadth_first_search",
    "depth_first_search",
    "dict",
    "networkx.algorithms.bipartite.matching.collections",
    "networkx.algorithms.bipartite.matching.itertools",
    "networkx.algorithms.bipartite.sets"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.breadth_first_search": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.INFINITY"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.hopcroft_karp_matching.depth_first_search": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "depth_first_search",
    "networkx.algorithms.bipartite.matching.INFINITY"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matching.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matching.maximum_matching": {
  "data": {
   "lineno": 421
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matching.to_vertex_cover": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching._connected_by_alternating_paths",
    "networkx.algorithms.bipartite.sets",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.matrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matrix.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.matrix._generate_weighted_edges": {
  "data": {
   "shadows": "networkx.convert_matrix._generate_weighted_edges"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix._prep_create_using": {
  "data": {
   "shadows": "networkx.convert._prep_create_using"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.biadjacency_matrix": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "format",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.matrix.itertools",
    "scipy.sparse.coo_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.from_biadjacency_matrix": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "chain",
    "networkx.algorithms.bipartite.matrix.itertools",
    "networkx.convert._prep_create_using",
    "networkx.convert_matrix._generate_weighted_edges",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.matrix.setup_module": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.projection": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.projection.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.projection.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "set",
    "weight_function"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.generic_weighted_projected_graph.weight_function": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "float",
    "len",
    "min",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.project": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.projection.projected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.projected_graph": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.projection.weighted_projected_graph": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.redundancy.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.redundancy.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.redundancy.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.redundancy._node_redundancy": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.redundancy.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.redundancy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.redundancy.node_redundancy": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "any",
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.redundancy._node_redundancy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.spectral": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.spectral.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.spectral.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.bipartite.spectral.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.spectral.setup_module": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.spectral.spectral_bipartivity": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "len",
    "networkx.to_numpy_matrix",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_basic.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "ImportError",
    "assert_equal",
    "len",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.random_graph",
    "nose.SkipTest",
    "nose.plugins.attrib.attr",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_order": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ImportError",
    "assert_equal",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph",
    "nose.SkipTest",
    "nose.plugins.attrib.attr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_weight": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "ImportError",
    "assert_equal",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph",
    "nose.SkipTest",
    "nose.plugins.attrib.attr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.color",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.degrees",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "assert_equal",
    "float",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.bipartite.density",
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_true",
    "networkx.algorithms.bipartite.is_bipartite",
    "networkx.algorithms.bipartite.random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.sets",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.degrees",
    "networkx.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.is_bipartite",
    "networkx.complete_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.algorithms.bipartite.is_bipartite_node_set",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_not_bipartite_color": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.color",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_basic.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_basic.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.cycle_graph",
    "networkx.davis_southern_women_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.algorithms.bipartite.closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.closeness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_dot": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_dot"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_max": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_max"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.cc_min": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.cluster.cc_min"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.average_clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_bad_mode": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.clustering",
    "networkx.path_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_not_bipartite": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.clustering",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "enumerate",
    "networkx.Graph",
    "networkx.algorithms.bipartite.cluster.cc_dot",
    "networkx.algorithms.bipartite.cluster.cc_max",
    "networkx.algorithms.bipartite.cluster.cc_min",
    "networkx.algorithms.bipartite.is_bipartite",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_path_graph": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_davis": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "networkx.davis_southern_women_graph",
    "round"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_square": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_zero": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.algorithms.bipartite.robins_alexander_clustering",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_cluster.test_star_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.clustering",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.setUp": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_attribute_fail": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.path_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_digraph_fail": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.convert_node_labels_to_integers",
    "networkx.isolates",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_graphs_equal",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1_error": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.assert_raises",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "int",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.algorithms.bipartite.read_edgelist",
    "networkx.algorithms.bipartite.tests.test_edgelist.os",
    "networkx.algorithms.bipartite.tests.test_edgelist.tempfile",
    "networkx.algorithms.bipartite.write_edgelist",
    "networkx.testing.assert_graphs_equal",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.tests.test_edgelist.io",
    "networkx.algorithms.bipartite.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_edgelist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_generators": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "DiGraph",
    "Graph",
    "alternating_havel_hakimi_graph",
    "assert_equal",
    "assert_raises",
    "len",
    "project",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_complete_bipartite_graph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "complete_bipartite_graph",
    "cycle_graph",
    "empty_graph",
    "is_isomorphic",
    "null_graph",
    "number_of_edges",
    "number_of_nodes",
    "star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_configuration_model": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "DiGraph",
    "Graph",
    "assert_equal",
    "assert_raises",
    "configuration_model",
    "len",
    "project",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "gnmk_random_graph",
    "is_bipartite",
    "len",
    "print",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_havel_hakimi_graph": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "DiGraph",
    "Graph",
    "assert_equal",
    "assert_raises",
    "havel_hakimi_graph",
    "len",
    "project",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_preferential_attachment": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "DiGraph",
    "assert_raises",
    "preferential_attachment_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "is_bipartite",
    "len",
    "random_graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "DiGraph",
    "Graph",
    "assert_equal",
    "assert_raises",
    "len",
    "project",
    "range",
    "reverse_havel_hakimi_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_match": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "all",
    "frozenset",
    "networkx.algorithms.bipartite.tests.test_matching.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_vertex_cover": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.setup": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.eppstein_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_to_vertex_cover": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.matching.maximum_matching",
    "networkx.algorithms.bipartite.matching.to_vertex_cover"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matching.eppstein_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.eppstein_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.hopcroft_karp_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.hopcroft_karp_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.maximum_matching": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.maximum_matching"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matching.to_vertex_cover": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.matching.to_vertex_cover"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.setupClass": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.random_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_order": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_weight": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col_fail": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_row_fail": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_empty_fail": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_format_keyword_fail": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_multigraph": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.testing.utils.assert_edges_equal",
    "scipy.sparse.csc_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_roundtrip": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_true",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_weight": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.from_biadjacency_matrix",
    "networkx.testing.utils.assert_edges_equal",
    "scipy.sparse.csc_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_null_fail": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.biadjacency_matrix",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.projected_graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.star_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection": {
  "data": {
   "lineno": 147
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setUp": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.bipartite.generic_weighted_projected_graph",
    "networkx.bipartite.complete_bipartite_graph",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.jaccard": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "float",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom.my_weight": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.bipartite.generic_weighted_projected_graph",
    "networkx.path_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple.shared": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.collaboration_weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.overlap_weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.bipartite.weighted_projected_graph",
    "networkx.testing.assert_edges_equal",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_project.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_project.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.complete_bipartite_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.complete_bipartite_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.cycle_graph": {
  "data": {
   "shadows": "networkx.cycle_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.node_redundancy": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.node_redundancy"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_no_redundant_nodes": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.bipartite.complete_bipartite_graph",
    "networkx.algorithms.bipartite.node_redundancy",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_not_enough_neighbors": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.bipartite.complete_bipartite_graph",
    "networkx.algorithms.bipartite.node_redundancy",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_redundancy.test_redundant_nodes": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.node_redundancy",
    "networkx.cycle_graph",
    "nose.tools.assert_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.k23_like": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setupClass": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.complete_bipartite_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.bipartite.spectral_bipartivity",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.sb": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.spectral_bipartivity"
  },
  "type": "import"
 },
 "networkx.algorithms.bipartite.tests.test_spectral_bipartivity.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.block": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.block.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.block.__author__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.block.blockmodel": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dict.fromkeys",
    "enumerate",
    "len",
    "list",
    "map",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXException",
    "networkx.density",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.block.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.boundary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.boundary.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.boundary.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.boundary.edge_boundary": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.boundary.node_boundary": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.capacity_scaling": {
  "data": {
   "shadows": "networkx.algorithms.flow.capacity_scaling"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.betweenness_subset.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.betweenness_subset.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._accumulate_subset": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset._rescale_e": {
  "data": {
   "lineno": 249
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_source": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
    "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic",
    "networkx.algorithms.centrality.betweenness_subset._accumulate_subset",
    "networkx.algorithms.centrality.betweenness_subset._rescale"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.dijkstra": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "dict.fromkeys",
    "len",
    "networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic",
    "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic",
    "networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset",
    "networkx.algorithms.centrality.betweenness_subset._rescale_e"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.betweenness_subset.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.betweenness_subset.shortest_path": {
  "data": {
   "shadows": "networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.closeness.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.closeness.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.closeness.closeness_centrality": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.centrality.closeness.functools",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.closeness.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.closeness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.communicability_alg.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.communicability_alg.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.communicability_alg._rescale": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.communicability": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.algorithms.centrality.communicability_alg.numpy",
    "networkx.to_numpy_matrix",
    "not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.communicability_betweenness_centrality": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.algorithms.centrality.communicability_alg._rescale",
    "networkx.algorithms.centrality.communicability_alg.scipy",
    "networkx.to_numpy_matrix",
    "not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.communicability_centrality": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "dict",
    "float",
    "map",
    "networkx.algorithms.centrality.communicability_alg.numpy",
    "networkx.to_numpy_matrix",
    "not_implemented_for",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.communicability_centrality_exp": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "dict",
    "float",
    "map",
    "networkx.to_numpy_matrix",
    "not_implemented_for",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.communicability_exp": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.algorithms.centrality.communicability_alg.scipy",
    "networkx.to_numpy_matrix",
    "not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.estrada_index": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.communicability_alg.communicability_centrality",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.communicability_alg.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.numpy.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.communicability_alg.setup_module": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "int",
    "laplacian_sparse_matrix",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.centrality.current_flow_betweenness.random",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "numpy.ceil",
    "numpy.log",
    "numpy.zeros",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "enumerate",
    "float",
    "flow_matrix_row",
    "list",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "flow_matrix_row",
    "list",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.setup_module": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "flow_matrix_row",
    "list",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "dict.fromkeys",
    "float",
    "flow_matrix_row",
    "list",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.abs",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_betweenness_subset.setup_module": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_closeness": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.current_flow_closeness.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_closeness.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dict",
    "dict.fromkeys",
    "float",
    "laplacian_sparse_matrix",
    "list",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.relabel_nodes",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.current_flow_closeness.information_centrality": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.current_flow_closeness.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.current_flow_closeness.setup_module": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.degree_alg.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.degree_alg.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.degree_alg.degree_centrality": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "dict",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.in_degree_centrality": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.degree_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.degree_alg.out_degree_centrality": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.dispersion.__all__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.dispersion.__author__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.dispersion.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.dispersion.dispersion": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "_dispersion",
    "dict",
    "dict.fromkeys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.dispersion.dispersion._dispersion": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "networkx.algorithms.centrality.dispersion.dispersion",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.eigenvector.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.eigenvector.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "abs",
    "dict",
    "dict.fromkeys",
    "len",
    "math.sqrt",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXException",
    "range",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "map",
    "networkx.NetworkXException",
    "networkx.to_scipy_sparse_matrix",
    "scipy.linalg.norm",
    "scipy.sign",
    "scipy.sparse.linalg.eigs",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.setup_module": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.eigenvector.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.eigenvector.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "scipy.sparse.linalg.LinearOperator",
    "scipy.sparse.linalg.spilu"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "numpy.zeros",
    "scipy.sparse.linalg.cg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.zeros",
    "scipy.sparse.linalg.cg"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.linalg.inv",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.dot",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "max",
    "numpy.nonzero"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "scipy.sparse.linalg.factorized"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.flow_matrix_row": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix",
    "numpy.dot",
    "numpy.zeros",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "format",
    "networkx.to_scipy_sparse_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.flow_matrix.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.flow_matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.harmonic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.harmonic.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.harmonic.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.harmonic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.harmonic.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.harmonic.harmonic_centrality": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.centrality.harmonic.functools",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.all_pairs_shortest_path_length",
    "path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.harmonic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.katz.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.katz.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.katz.katz_centrality": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError",
    "ZeroDivisionError",
    "abs",
    "dict",
    "dict.fromkeys",
    "float",
    "len",
    "math.sqrt",
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for",
    "range",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.katz_centrality_numpy": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "AttributeError",
    "ImportError",
    "TypeError",
    "ValueError",
    "dict",
    "float",
    "len",
    "list",
    "map",
    "networkx.NetworkXError",
    "networkx.adj_matrix",
    "networkx.utils.not_implemented_for",
    "numpy.array",
    "numpy.eye",
    "numpy.linalg.norm",
    "numpy.linalg.solve",
    "numpy.ones",
    "numpy.sign",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.katz.setup_module": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.katz.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.load": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.centrality.load.newman_betweenness_centrality"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.centrality.load.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.load.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.load._edge_betweenness": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "len",
    "networkx.predecessor",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load._node_betweenness": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.edge_load": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.load._edge_betweenness"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.load_centrality": {
  "data": {
   "lineno": 150
  },
  "type": "constant"
 },
 "networkx.algorithms.centrality.load.newman_betweenness_centrality": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.load._node_betweenness"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.load.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.DiGraph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.DiGraph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.florentine_families_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.cycle_graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.balanced_tree",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.DiGraph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.florentine_families_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.betweenness_centrality",
    "networkx.krackhardt_kite_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.cycle_graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.complete_graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_betweenness_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.balanced_tree",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "assert_almost_equal",
    "len",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.edge_betweenness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources": {
  "data": {
   "lineno": 106
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality": {
  "data": {
   "lineno": 130
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "print",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.edge_betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx",
    "networkx.betweenness_centrality_subset",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.betweenness_centrality_subset": {
  "data": {
   "shadows": "networkx.betweenness_centrality_subset"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.edge_betweenness_centrality_subset": {
  "data": {
   "shadows": "networkx.edge_betweenness_centrality_subset"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.balanced_tree",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.florentine_families_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.closeness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.closeness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.closeness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.closeness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.closeness_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_closeness_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_communicability": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_communicability.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_almost_equal",
    "communicability",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability2": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "assert_almost_equal",
    "collections.defaultdict",
    "communicability",
    "communicability_exp",
    "dict",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_almost_equal",
    "communicability_betweenness_centrality",
    "networkx.Graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality_small": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "assert_equal",
    "communicability_betweenness_centrality",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_centrality": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_almost_equal",
    "communicability_centrality",
    "communicability_centrality_exp",
    "networkx.Graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_estrada_index": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "assert_almost_equal",
    "estrada_index",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_communicability.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_communicability.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_communicability.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_communicability.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.setupClass": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.approximate_current_flow_betweenness_centrality",
    "numpy.testing.assert_allclose",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.approximate_current_flow_betweenness_centrality",
    "numpy.testing.assert_allclose",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.approximate_current_flow_betweenness_centrality",
    "numpy.testing.assert_allclose",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.approximate_current_flow_betweenness_centrality",
    "numpy.testing.assert_allclose",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.approximate_current_flow_betweenness_centrality",
    "numpy.testing.assert_allclose",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.setupClass": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.edge_current_flow_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.edge_current_flow_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.edge_current_flow_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "networkx.edge_current_flow_betweenness_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.setupClass": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solers": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.approximate_cfbc": {
  "data": {
   "shadows": "networkx.approximate_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.edge_current_flow": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.setupClass": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "networkx.edge_current_flow_betweenness_centrality",
    "networkx.edge_current_flow_betweenness_centrality_subset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.setupClass": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.edge_current_flow": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.edge_current_flow_subset": {
  "data": {
   "shadows": "networkx.edge_current_flow_betweenness_centrality_subset"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_closeness.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_closeness.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_current_flow_closeness.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_current_flow_closeness.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.complete_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "networkx.degree_centrality",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_almost_equal",
    "float",
    "networkx.degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "float",
    "networkx.degree_centrality",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.in_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.out_degree_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_degree_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_dispersion": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_article": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G",
    "networkx.dispersion"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_impossible_things": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.dispersion",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_results_length": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G",
    "networkx.dispersion",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_dispersion.small_ego_G": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.setupClass": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.math",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3_unweighted": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_maxiter": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setUp": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setupClass": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.setupClass": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty_numpy": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph_numpy": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_eigenvector_centrality.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.setUp": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.balanced_tree",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_bal_tree": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_clique_complete": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C4": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C5": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_empty": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_exampleGraph": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_singleton": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_weighted_harmonic": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.DiGraph",
    "networkx.algorithms.centrality.harmonic_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.harmonic_centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality.harmonic_centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_harmonic_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_K5": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_P3": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta_numbe": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_dict": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_scalar": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_empty": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_maxiter": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multigraph": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multiple_alpha": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.setUp": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_unweighted": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_weighted": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected",
    "numpy"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.setupClass": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "assert_almost_equal",
    "list",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.setupClass": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5_unweighted": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "dict.fromkeys",
    "networkx.algorithms.centrality.tests.test_katz_centrality.math",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3_unweighted": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta_numbe": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_dict": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_scalar": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_empty": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multigraph": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multiple_alpha": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "numpy",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.setupClass": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "assert_almost_equal",
    "float",
    "max",
    "networkx.algorithms.centrality.tests.test_katz_centrality.networkx",
    "numpy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.eigvals": {
  "data": {
   "shadows": "numpy.linalg.eigvals"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_katz_centrality.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.balanced_tree",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.florentine_families_graph",
    "networkx.krackhardt_kite_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_load"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_load"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_not_strongly_connected": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p2_load": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_load"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.edge_load"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.load_centrality",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.centrality.tests.test_load_centrality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.chordal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.chordal.tests.test_chordal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.chordal_graph_cliques",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.chordal_graph_cliques",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques_path": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_true",
    "frozenset",
    "networkx.chordal_graph_cliques",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_induced_nodes": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.NetworkXTreewidthBoundExceeded",
    "networkx.find_induced_nodes",
    "networkx.generators.classic.path_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_is_chordal": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.is_chordal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.chordal.tests.test_chordal.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.clique": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.clique.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.algorithms.clique.__author__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.algorithms.clique.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.cliques_containing_node": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.enumerate_all_cliques": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "collections.deque",
    "enumerate",
    "itertools.chain",
    "itertools.ifilter",
    "itertools.islice",
    "len",
    "list",
    "map",
    "not_implemented_for",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.filter": {
  "data": {
   "shadows": "itertools.ifilter"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.find_cliques": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "IndexError",
    "len",
    "max",
    "not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "expand",
    "iter",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.find_cliques_recursive.expand": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "expand",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.graph_clique_number": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.graph_number_of_cliques": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.make_clique_bipartite": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "list",
    "networkx.algorithms.clique.find_cliques",
    "networkx.algorithms.clique.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.make_max_clique_graph": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "enumerate",
    "list",
    "map",
    "networkx.algorithms.clique.find_cliques",
    "networkx.algorithms.clique.networkx",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.clique.node_clique_number": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "max",
    "networkx.algorithms.clique.find_cliques",
    "networkx.algorithms.clique.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.number_of_cliques": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "list",
    "networkx.algorithms.clique.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.project_down": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "networkx.algorithms.clique.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.clique.project_up": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "networkx.algorithms.clique.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.cluster.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.cluster.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.cluster._triangles_and_degree_iter": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster._weighted_triangles_and_degree_iter": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "float",
    "len",
    "max",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.average_clustering": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.algorithms.cluster.clustering",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.clustering": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "float",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "networkx.algorithms.cluster._weighted_triangles_and_degree_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cluster.square_clustering": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "itertools.combinations",
    "len",
    "list",
    "networkx.algorithms.cluster.clustering",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.transitivity": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "networkx.algorithms.cluster.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cluster.triangles": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.cluster._triangles_and_degree_iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.__all__": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__init__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__repr__": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__repr__": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.assign_color": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.clear_color": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors_color": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.greedy_coloring_with_interchange": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.Node",
    "networkx.algorithms.coloring.greedy_coloring_with_interchange.itertools",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.coloring.greedy_coloring_with_interchange.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.kclique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.kclique.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.community.kclique.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.community.kclique._get_adjacent_cliques": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kclique.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.community.kclique.k_clique_communities": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "collections.defaultdict",
    "frozenset",
    "frozenset.union",
    "len",
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.community.kclique._get_adjacent_cliques",
    "networkx.connected_components",
    "networkx.find_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.kclique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.community.tests.test_kclique.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.k_clique_communities": {
  "data": {
   "shadows": "networkx.k_clique_communities"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.community.tests.test_kclique.test_bad_k": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.k_clique_communities",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_isolated_K5": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "itertools.combinations",
    "list",
    "networkx.Graph",
    "networkx.k_clique_communities",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_overlaping_K5": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "itertools.combinations",
    "list",
    "networkx.Graph",
    "networkx.k_clique_communities",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.community.tests.test_kclique.test_zachary": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "frozenset",
    "networkx.k_clique_communities",
    "networkx.karate_club_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.complete_bipartite_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.complete_bipartite_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.components": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.attracting": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.attracting.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.components.attracting.__authors__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.components.attracting.attracting_component_subgraphs": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.algorithms.components.attracting.attracting_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.attracting_components": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "list",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.is_attracting_component": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.components.attracting.attracting_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.attracting.number_attracting_components": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.components.attracting.attracting_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.attracting.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.semiconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.semiconnected.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.components.semiconnected.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.components.semiconnected.is_semiconnected": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "all",
    "len",
    "networkx.NetworkXPointlessConcept",
    "networkx.condensation",
    "networkx.is_weakly_connected",
    "networkx.topological_sort",
    "networkx.utils.not_implemented_for",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.semiconnected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.semiconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.strongly_connected.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.components.strongly_connected.__authors__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.components.strongly_connected.condensation": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "enumerate",
    "networkx.DiGraph",
    "networkx.set_node_attributes",
    "networkx.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.is_strongly_connected": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.strongly_connected.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "list",
    "networkx.dfs_postorder_nodes",
    "networkx.dfs_preorder_nodes",
    "networkx.utils.decorators.not_implemented_for",
    "networkx.utils.reversed",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected.number_strongly_connected_components": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.components.strongly_connected.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_component_subgraphs": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "networkx.algorithms.components.strongly_connected.strongly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "min",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for",
    "visit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive.visit": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "min",
    "visit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_attracting.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "list",
    "networkx.attracting_components",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_connected_raise": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.attracting_component_subgraphs",
    "networkx.attracting_components",
    "networkx.is_attracting_component",
    "networkx.number_attracting_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.is_attracting_component"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.number_attracting_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_attracting.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_biconnected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.assert_components_equal": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.biconnected": {
  "data": {
   "shadows": "networkx.algorithms.components.biconnected"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.articulation_points",
    "networkx.cycle_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_barbell": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.articulation_points",
    "networkx.barbell_graph",
    "networkx.biconnected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_component_subgraphs_cycle": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "networkx.Graph",
    "networkx.biconnected_component_subgraphs",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal",
    "networkx.articulation_points",
    "networkx.biconnected_component_edges",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal",
    "networkx.biconnected_component_edges",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.biconnected_components",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "list",
    "networkx.articulation_points",
    "networkx.biconnected_components",
    "networkx.davis_southern_women_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "list",
    "networkx.Graph",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.biconnected_components",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.components.tests.test_biconnected.assert_components_equal",
    "networkx.articulation_points",
    "networkx.biconnected_components",
    "networkx.karate_club_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_connected_raise": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.articulation_points",
    "networkx.biconnected_component_edges",
    "networkx.biconnected_component_subgraphs",
    "networkx.biconnected_components",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_false",
    "networkx.empty_graph",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_biconnected.test_is_biconnected": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.cycle_graph",
    "networkx.is_biconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_connected.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.setUp": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph",
    "networkx.house_graph",
    "networkx.lollipop_graph",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_component_subgraphs": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "cc",
    "frozenset",
    "networkx.connected_component_subgraphs",
    "networkx.weakly_connected_component_subgraphs",
    "wcc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "cc",
    "frozenset",
    "networkx.connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "cc",
    "frozenset",
    "networkx.connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXPointlessConcept",
    "networkx.connected_component_subgraphs",
    "networkx.connected_components",
    "networkx.is_connected",
    "networkx.node_connected_component",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.Graph",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "ncc",
    "networkx.node_connected_component"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "ncc",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "ncc",
    "networkx.number_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_connected.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_semiconnected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_alternating_path": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "ok_",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_cycle": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.is_semiconnected",
    "networkx.path_graph",
    "ok_"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_dumbbell": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.is_semiconnected",
    "ok_",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_empty": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXPointlessConcept",
    "networkx.is_semiconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_path": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "networkx.path_graph",
    "ok_"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_single_node_graph": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "ok_"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_tree": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "itertools.chain.from_iterable",
    "networkx.DiGraph",
    "networkx.is_semiconnected",
    "ok_",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_undirected": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.is_semiconnected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_semiconnected.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_semiconnected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_strongly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "frozenset",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_condensation_mapping_and_members": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "all",
    "assert_equal",
    "assert_true",
    "len",
    "networkx.condensation",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_raise": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXPointlessConcept",
    "networkx.condensation",
    "networkx.is_strongly_connected",
    "networkx.kosaraju_strongly_connected_components",
    "networkx.strongly_connected_component_subgraphs",
    "networkx.strongly_connected_components",
    "networkx.strongly_connected_components_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "enumerate",
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.is_directed_acyclic_graph",
    "networkx.strongly_connected_components",
    "scc",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "len",
    "networkx.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.kosaraju_strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "ncc",
    "networkx.number_strongly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_strongly_connected_component_subgraphs": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.strongly_connected_component_subgraphs",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.strongly_connected_components",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.strongly_connected_components_recursive",
    "scc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_strongly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.setUp": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.attracting_component_subgraphs",
    "networkx.biconnected_component_subgraphs",
    "networkx.connected_component_subgraphs",
    "networkx.strongly_connected_component_subgraphs",
    "networkx.weakly_connected_component_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_copy": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "copy.deepcopy",
    "list",
    "nose.tools.assert_equal",
    "subgraph_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_default_copy_behavior": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "copy.deepcopy",
    "list",
    "nose.tools.assert_equal",
    "subgraph_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_no_copy": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "copy.deepcopy",
    "list",
    "nose.tools.assert_equal",
    "subgraph_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_subgraph_copies.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_weakly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.NetworkXNotImplemented": {
  "data": {
   "shadows": "networkx.NetworkXNotImplemented"
  },
  "type": "import"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.is_weakly_connected",
    "networkx.number_weakly_connected_components",
    "networkx.weakly_connected_component_subgraphs",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.is_connected",
    "networkx.is_weakly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.number_connected_components",
    "networkx.number_weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_component_subgraphs": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "assert_equal",
    "cc",
    "frozenset",
    "networkx.connected_component_subgraphs",
    "networkx.weakly_connected_component_subgraphs",
    "wcc"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_equal",
    "frozenset",
    "networkx.connected_components",
    "networkx.weakly_connected_components"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.tests.test_weakly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.components.weakly_connected.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.components.weakly_connected.__authors__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.components.weakly_connected._plain_bfs": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.is_weakly_connected": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.components.weakly_connected.weakly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected.number_weakly_connected_components": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.components.weakly_connected.weakly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.components.weakly_connected.weakly_connected_component_subgraphs": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.algorithms.components.weakly_connected.weakly_connected_components",
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.components.weakly_connected.weakly_connected_components": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.algorithms.components.weakly_connected._plain_bfs",
    "networkx.utils.decorators.not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity": {
  "data": {
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.connectivity.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity.__author__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.average_node_connectivity": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.default_flow_func": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.connectivity.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.edge_connectivity": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "IndexError",
    "build_auxiliary_edge_connectivity",
    "dict",
    "len",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.local_edge_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.dominating_set",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.local_edge_connectivity": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "build_auxiliary_edge_connectivity",
    "dict",
    "networkx.algorithms.connectivity.connectivity.default_flow_func",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.local_node_connectivity": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.default_flow_func",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.connectivity.itertools",
    "networkx.algorithms.connectivity.connectivity.local_node_connectivity",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.node_connectivity.neighbors": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.connectivity.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.connectivity.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.cuts.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.cuts.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.cuts.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.default_flow_func": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.cuts.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.minimum_edge_cut": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "IndexError",
    "build_auxiliary_edge_connectivity",
    "dict",
    "len",
    "min",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.dominating_set",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "iter_func",
    "len",
    "min",
    "neighbors",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.itertools",
    "networkx.algorithms.connectivity.cuts.minimum_st_node_cut",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_node_cut.neighbors": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.cuts.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "build_auxiliary_edge_connectivity",
    "dict",
    "networkx.algorithms.connectivity.cuts.default_flow_func",
    "networkx.minimum_cut",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.minimum_st_node_cut": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.cuts.minimum_st_edge_cut",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.cuts.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcomponents.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcomponents.__author__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcomponents._consolidate": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "enumerate",
    "itertools.combinations",
    "len",
    "networkx.Graph",
    "networkx.connected_components",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "has_nbrs_in_partition",
    "len",
    "networkx.algorithms.connectivity.kcomponents._consolidate",
    "networkx.connected_components",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._generate_partition.has_nbrs_in_partition": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents._reconstruct_k_components": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "any",
    "dict",
    "list",
    "max",
    "networkx.algorithms.connectivity.kcomponents._consolidate",
    "range",
    "reversed",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.build_k_number_dict": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "operator.itemgetter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.default_flow_func": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcomponents.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.k_components": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "StopIteration",
    "collections.defaultdict",
    "len",
    "list",
    "networkx.algorithms.connectivity.kcomponents._generate_partition",
    "networkx.algorithms.connectivity.kcomponents._reconstruct_k_components",
    "networkx.algorithms.connectivity.kcomponents.default_flow_func",
    "networkx.all_node_cuts",
    "networkx.biconnected_component_subgraphs",
    "networkx.connected_components",
    "networkx.node_connectivity",
    "networkx.utils.not_implemented_for",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcomponents.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.kcutsets.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcutsets.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcutsets._is_separating_set": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "len",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets.all_node_cuts": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "build_auxiliary_node_connectivity",
    "dict",
    "flow_func",
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.kcutsets._is_separating_set",
    "networkx.algorithms.connectivity.kcutsets.default_flow_func",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.antichains",
    "networkx.condensation",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "operator.itemgetter",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.kcutsets.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.default_flow_func": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.kcutsets.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.kcutsets.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.stoerwagner.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.stoerwagner.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.stoerwagner.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.stoerwagner.stoer_wagner": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "float",
    "heap",
    "iter",
    "itertools.islice",
    "len",
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.single_source_shortest_path_length",
    "next",
    "not_implemented_for",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity": {
  "data": {
   "lineno": 283
  },
  "type": "class"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.setUp": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.gnp_random_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "all",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.icosahedral_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.complete_graph",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "iter",
    "networkx.algorithms.connectivity.tests.test_connectivity.itertools",
    "networkx.all_pairs_node_connectivity",
    "networkx.complete_graph",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_complete": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "len",
    "networkx.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_cycles": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_paths": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "networkx.all_pairs_node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "Exception",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.local_edge_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.local_edge_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.local_node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.local_node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.msg": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_articulation_points": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.node_connectivity",
    "next",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.average_node_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity_directed": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.average_node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_brandes_erlebach": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_complete_graphs": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_cutoff": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "local_func",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.flow.preflow_push",
    "networkx.complete_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_directed_edge_connectivity": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.local_edge_connectivity",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.cycle_graph",
    "networkx.edge_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_dodecahedral": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.dodecahedral_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_connectivity_flow_vs_stoer_wagner": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "graph_func",
    "networkx.dodecahedral_graph",
    "networkx.edge_connectivity",
    "networkx.icosahedral_graph",
    "networkx.octahedral_graph",
    "networkx.stoer_wagner",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_source": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_target": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.edge_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_empty_graphs": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.empty_graph",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_icosahedral": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.icosahedral_graph",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_source": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_target": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_invalid_auxiliary": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.local_node_connectivity",
    "networkx.complete_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_source": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.node_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_missing_target": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.node_connectivity",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_connected": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_not_weakly_connected": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_octahedral": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.octahedral_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_petersen": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.petersen_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_tutte": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "networkx.tutte_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_1": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_2": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.connectivity.tests.test_connectivity.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_connectivity.msg",
    "networkx.complete_graph",
    "networkx.core_number",
    "networkx.disjoint_union",
    "networkx.edge_connectivity",
    "networkx.node_connectivity",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "Exception",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.minimum_st_edge_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_st_edge_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.minimum_st_node_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_st_node_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.msg": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_articulation_points": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.articulation_points",
    "networkx.minimum_node_cut",
    "next",
    "nose.tools.assert_true",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_brandes_erlebach_book": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.Graph",
    "networkx.algorithms.connectivity.minimum_st_node_cut",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_equal",
    "nose.tools.assert_false",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_edge_cutset_random_graphs": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.connected_components",
    "networkx.edge_connectivity",
    "networkx.fast_gnp_random_graph",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "next",
    "nose.tools.assert_equal",
    "nose.tools.assert_false",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_empty_graphs": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXPointlessConcept",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_icosahedral_cutset": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.icosahedral_graph",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_equal",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_source": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "interface_func",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_target": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "interface_func",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_invalid_auxiliary": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.minimum_st_node_cut",
    "networkx.complete_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_source": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_missing_target": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.path_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_exception": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_random_graphs": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "iter",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.connected_components",
    "networkx.fast_gnp_random_graph",
    "networkx.is_connected",
    "networkx.minimum_node_cut",
    "networkx.node_connectivity",
    "next",
    "nose.tools.assert_equal",
    "nose.tools.assert_false",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_connected": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_not_weakly_connected": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_octahedral_cutset": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.octahedral_graph",
    "nose.tools.assert_equal",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_petersen_cutset": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "networkx.petersen_graph",
    "nose.tools.assert_equal",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_unbounded": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.minimum_st_edge_cut",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.test_white_harary_paper": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.algorithms.connectivity.tests.test_cuts.msg",
    "networkx.complete_graph",
    "networkx.disjoint_union",
    "networkx.is_connected",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_equal",
    "nose.tools.assert_false",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "interface_func",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete_directed": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "interface_func",
    "len",
    "networkx.algorithms.connectivity.tests.test_cuts.flow_funcs",
    "networkx.complete_graph",
    "networkx.minimum_edge_cut",
    "networkx.minimum_node_cut",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.k_components",
    "networkx.node_connectivity",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents._consolidate": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcomponents._consolidate"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.build_k_number_dict": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcomponents.build_k_number_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_configuration": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.configuration_model",
    "networkx.utils.create_degree_sequence",
    "networkx.utils.powerlaw_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.davis_southern_women_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women_detail_3_and_4": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "len",
    "networkx.davis_southern_women_graph",
    "networkx.k_components",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_directed": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.NetworkXNotImplemented",
    "networkx.gnp_random_graph",
    "networkx.k_components",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_karate_component_number": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.kcomponents.build_k_number_dict",
    "networkx.k_components",
    "networkx.karate_club_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_random_gnp": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "list_of_sets_equal",
    "networkx.algorithms.connectivity.kcomponents._consolidate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode.list_of_sets_equal": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "frozenset",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_shell": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_detail_3_and_4": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph",
    "networkx.k_components",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity",
    "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "len",
    "networkx.all_node_cuts",
    "networkx.connected_component_subgraphs",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "Exception",
    "networkx.fast_gnp_random_graph",
    "networkx.is_biconnected",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets._is_separating_set": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.kcutsets._is_separating_set"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_alternative_flow_functions": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "graph_func",
    "len",
    "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.all_node_cuts",
    "networkx.davis_southern_women_graph",
    "networkx.is_connected",
    "networkx.node_connectivity",
    "nose.tools.assert_equal",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_articulation_points": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected",
    "networkx.all_node_cuts",
    "networkx.articulation_points",
    "next",
    "nose.tools.assert_true",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_configuration": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.configuration_model",
    "networkx.utils.create_degree_sequence",
    "networkx.utils.powerlaw_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_disconnected_graph": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.all_node_cuts",
    "networkx.fast_gnp_random_graph",
    "next",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_example_1": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_grid_2d_graph": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "networkx.all_node_cuts",
    "networkx.grid_2d_graph",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.connectivity.kcutsets._is_separating_set",
    "networkx.star_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set_complete_graph": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.kcutsets._is_separating_set",
    "networkx.complete_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_karate": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.karate_club_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_non_repeated_cuts": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.all_node_cuts",
    "networkx.biconnected_component_subgraphs",
    "networkx.info",
    "networkx.karate_club_graph",
    "nose.tools.assert_true",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_random_gnp": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_shell": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.random_shell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.test_torrents_and_ferraro_graph": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets",
    "networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.disjoint_union",
    "networkx.get_node_attributes",
    "networkx.grid_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_equal",
    "isinstance",
    "itertools.chain.from_iterable",
    "len",
    "list",
    "map",
    "ok_",
    "set",
    "sum",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition",
    "networkx.stoer_wagner",
    "networkx.utils.BinaryHeap",
    "networkx.utils.PairingHeap"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_exceptions": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph1": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph2": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph3": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.tests.test_stoer_wagner.test_weight_name": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.connectivity.utils.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.utils.__author__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils.build_auxiliary_node_connectivity": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "enumerate",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.connectivity.utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.core": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.core.core_number"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.core.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.core.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.core.core_number": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "neighbors",
    "networkx.NetworkXError",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.core_number.neighbors": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.algorithms.core.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.find_cores": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "networkx.algorithms.core.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.algorithms.core.k_core": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.core.core_number",
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_corona": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.core.core_number",
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_crust": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.core.core_number",
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.k_shell": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.core.core_number",
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.core.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cost_of_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.cost_of_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.cycles.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.cycles.__author__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.cycles.cycle_basis": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "not_implemented_for",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.edge_dfs": {
  "data": {
   "shadows": "networkx.algorithms.traversal.edgedfs.edge_dfs"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.find_cycle": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "IndexError",
    "enumerate",
    "len",
    "networkx.algorithms.traversal.edgedfs.edge_dfs",
    "networkx.algorithms.traversal.edgedfs.helper_funcs",
    "networkx.exception.NetworkXNoCycle",
    "set",
    "tailhead"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.helper_funcs": {
  "data": {
   "shadows": "networkx.algorithms.traversal.edgedfs.helper_funcs"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "bool",
    "circuit",
    "collections.defaultdict",
    "dict",
    "len",
    "list",
    "min",
    "networkx.strongly_connected_components",
    "not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles._unblock": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "_unblock"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.recursive_simple_cycles.circuit": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "_unblock",
    "circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "_unblock",
    "collections.defaultdict",
    "list",
    "networkx.strongly_connected_components",
    "not_implemented_for",
    "set",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.cycles.simple_cycles._unblock": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.dag.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.dag.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.dag.ancestors": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.antichains": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "networkx.topological_sort",
    "networkx.transitive_closure",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.dag_longest_path": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "list",
    "max",
    "networkx.topological_sort",
    "not_implemented_for",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.dag_longest_path_length": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "len",
    "networkx.dag_longest_path",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.descendants": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.gcd": {
  "data": {
   "shadows": "fractions.gcd"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.is_aperiodic": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "fractions.gcd",
    "len",
    "networkx.NetworkXError",
    "networkx.is_aperiodic",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.is_directed_acyclic_graph": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.dag.topological_sort"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dag.topological_sort": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible",
    "reversed",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.topological_sort_recursive": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "_dfs",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.ancestors",
    "reversed",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.topological_sort_recursive._dfs": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "_dfs",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.dag.ancestors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dag.transitive_closure": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.dfs_preorder_nodes",
    "not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.distance_measures.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_measures.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_measures.center": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.distance_measures.eccentricity",
    "networkx.algorithms.distance_measures.radius"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.diameter": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.distance_measures.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.eccentricity": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "TypeError",
    "len",
    "max",
    "networkx.algorithms.distance_measures.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.distance_measures.periphery": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.distance_measures.diameter",
    "networkx.algorithms.distance_measures.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_measures.radius": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "min",
    "networkx.algorithms.distance_measures.eccentricity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.distance_regular.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_regular.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.distance_regular.global_parameters": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.intersection_array": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.NetworkxException",
    "networkx.all_pairs_shortest_path_length",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.is_distance_regular": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.distance_regular.intersection_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.distance_regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.dominance.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.dominance.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.dominance.dominance_frontiers": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.immediate_dominators",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "enumerate",
    "functools.reduce",
    "list",
    "networkx.NetworkXError",
    "networkx.dfs_postorder_nodes",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.immediate_dominators.intersect": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "networkx.algorithms.dominance.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.dominance.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "networkx.algorithms.dominating": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.dominating.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.dominating.__author__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.dominating.dominating_set": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominating.is_dominating_set": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.dominating.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.edge_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.edge_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.euler": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.euler.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.euler.__author__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.euler.eulerian_circuit": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "degree",
    "edges",
    "get_vertex",
    "networkx.NetworkXError",
    "networkx.algorithms.euler.is_eulerian",
    "next",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.is_eulerian": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.is_connected",
    "networkx.is_strongly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.euler.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.euler.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.fast_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.fast_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.faster_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.faster_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.flow": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.capacityscaling": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.capacityscaling.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.capacityscaling.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.capacityscaling._build_flow_dict": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict",
    "float"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._build_residual_network": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "abs",
    "float",
    "max",
    "min",
    "networkx.MultiDiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.capacityscaling._detect_unboundedness",
    "not_implemented_for",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling._detect_unboundedness": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "float",
    "generate_unique_node",
    "min",
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.negative_edge_cycle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling.capacity_scaling": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "S_add",
    "S_remove",
    "T_add",
    "T_remove",
    "any",
    "float",
    "h_insert",
    "heap",
    "int",
    "iter",
    "itertools.chain",
    "math.log",
    "max",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.capacityscaling._build_flow_dict",
    "networkx.algorithms.flow.capacityscaling._build_residual_network",
    "next",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.capacityscaling.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.capacityscaling.log": {
  "data": {
   "shadows": "math.log"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.capacityscaling.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.edmondskarp": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.edmondskarp.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.edmondskarp.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmondskarp.edmonds_karp_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "augment",
    "bidirectional_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.augment": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "iter",
    "min",
    "networkx.NetworkXUnbounded",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_core.bidirectional_bfs": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.edmonds_karp_impl": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "build_residual_network",
    "float",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.edmondskarp.edmonds_karp_core",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.edmondskarp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.maxflow": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.maxflow.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.maxflow.default_flow_func": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "build_flow_dict",
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.maximum_flow_value": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func",
    "networkx.shortest_path_length",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.minimum_cut_value": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "callable",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.maxflow.default_flow_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.maxflow.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.mincost": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.mincost.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.mincost.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.mincost.cost_of_flow": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.max_flow_min_cost": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.mincost.min_cost_flow",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.min_cost_flow_cost": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.network_simplex"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.mincost.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "NameError"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.networksimplex.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.networksimplex.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.networksimplex.ceil": {
  "data": {
   "shadows": "math.ceil"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "abs",
    "add_edge",
    "add_entry",
    "any",
    "augment_flow",
    "enumerate",
    "find_cycle",
    "find_entering_edges",
    "find_leaving_edge",
    "float",
    "itertools.chain",
    "itertools.izip",
    "itertools.repeat",
    "len",
    "list",
    "make_root",
    "max",
    "networkx.NetworkXError",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.flow.networksimplex.range",
    "networkx.utils.not_implemented_for",
    "next",
    "remove_edge",
    "residual_capacity",
    "sum",
    "update_potentials"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_edge": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.add_entry": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.augment_flow": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "itertools.izip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_apex": {
  "data": {
   "lineno": 342
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_cycle": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "find_apex",
    "trace_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_entering_edges": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "int",
    "itertools.chain",
    "math.ceil",
    "math.sqrt",
    "min",
    "networkx.algorithms.flow.networksimplex.range",
    "reduced_cost"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.find_leaving_edge": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "itertools.izip",
    "min",
    "residual_capacity",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.make_root": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "itertools.islice",
    "itertools.izip",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.reduced_cost": {
  "data": {
   "lineno": 293
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.remove_edge": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.residual_capacity": {
  "data": {
   "lineno": 394
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_path": {
  "data": {
   "lineno": 364
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.trace_subtree": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.network_simplex.update_potentials": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "trace_subtree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.networksimplex.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.range": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.networksimplex.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.networksimplex.zip": {
  "data": {
   "shadows": "itertools.izip"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.preflowpush.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.preflowpush.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.preflowpush.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.algorithms.flow.preflowpush.preflow_push_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "CurrentEdge",
    "GlobalRelabelThreshold",
    "Level",
    "build_residual_network",
    "detect_unboundedness",
    "discharge",
    "gap_heuristic",
    "global_relabel",
    "iter",
    "len",
    "max",
    "networkx.NetworkXError",
    "next",
    "push",
    "range",
    "reverse_bfs",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.activate": {
  "data": {
   "lineno": 114
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.discharge": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "StopIteration",
    "activate",
    "min",
    "push",
    "relabel"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.gap_heuristic": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "itertools.islice"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.global_relabel": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "max",
    "reverse_bfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.push": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.relabel": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.preflowpush.preflow_push_impl.reverse_bfs": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "collections.deque"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "CurrentEdge",
    "StopIteration",
    "augment",
    "build_residual_network",
    "collections.deque",
    "edmonds_karp_core",
    "float",
    "int",
    "len",
    "min",
    "networkx.NetworkXError",
    "relabel",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.augment": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "iter",
    "min",
    "networkx.NetworkXUnbounded",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl.relabel": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.flow_value_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "networkx.maximum_flow",
    "networkx.maximum_flow_value",
    "networkx.minimum_cut",
    "networkx.minimum_cut_value",
    "sum"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff": {
  "data": {
   "lineno": 459
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_complete_graph_cutoff": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "flow_func",
    "flow_func.__name__",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.complete_graph",
    "networkx.maximum_flow_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_cutoff": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "ok_",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface": {
  "data": {
   "lineno": 342
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.setup": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_not_callable": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_parameters": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "assert_equal",
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "interface_func.__name__",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.msgi"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "interface_func.__name__",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.msgi"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs_default_flow_func": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "assert_raises",
    "interface_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.minimum_cut",
    "networkx.minimum_cut_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_reusing_residual": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "assert_equal",
    "flow_func",
    "flow_func.__name__",
    "interface_func",
    "interface_func.__name__",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.interface_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.msgi",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon": {
  "data": {
   "lineno": 83
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph1": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph2": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph3": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_edges": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_path": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_disconnected": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph1": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph2": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph_infcap_edges": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_multigraphs_raise": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_optional_capacity": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_coincide": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_not_in_graph": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "assert_raises",
    "flow_func",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.tests.test_maxflow.all_funcs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.all_funcs": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.build_flow_dict": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_flow_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "flow_func",
    "flow_func.__name__",
    "networkx.algorithms.flow.build_flow_dict",
    "networkx.algorithms.flow.tests.test_maxflow.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow.msg",
    "networkx.algorithms.flow.tests.test_maxflow.validate_cuts",
    "networkx.algorithms.flow.tests.test_maxflow.validate_flows",
    "networkx.minimum_cut"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.compute_cutset": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.flow_funcs": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.flow_value_funcs": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.interface_funcs": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.max_min_funcs": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.msg": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.msgi": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_global_relabel_freq": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.flow.preflow_push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_makes_enough_space": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.algorithms.flow.preflow_push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.test_shortest_augmenting_path_two_phase": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.algorithms.flow.shortest_augmenting_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_cuts": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "all",
    "assert_equal",
    "assert_false",
    "assert_true",
    "networkx.algorithms.flow.tests.test_maxflow.compute_cutset",
    "networkx.algorithms.flow.tests.test_maxflow.msg",
    "networkx.is_connected",
    "networkx.is_strongly_connected",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow.validate_flows": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "networkx.algorithms.flow.tests.test_maxflow.msg",
    "ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.flow.edmonds_karp",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.shortest_augmenting_path"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph": {
  "data": {
   "lineno": 73
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.msg",
    "networkx.complete_graph",
    "networkx.maximum_flow_value",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.algorithms.flow.preflow_push",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.msg",
    "networkx.maximum_flow_value"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "dict",
    "flow_func",
    "len",
    "networkx.algorithms.flow.build_residual_network",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.build_flow_dict": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_flow_dict"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.build_residual_network": {
  "data": {
   "shadows": "networkx.algorithms.flow.build_residual_network"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.edmonds_karp": {
  "data": {
   "shadows": "networkx.algorithms.flow.edmonds_karp"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_funcs": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.msg": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.preflow_push": {
  "data": {
   "shadows": "networkx.algorithms.flow.preflow_push"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.os",
    "networkx.read_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.shortest_augmenting_path": {
  "data": {
   "shadows": "networkx.algorithms.flow.shortest_augmenting_path"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "float",
    "networkx.algorithms.flow.build_flow_dict",
    "networkx.algorithms.flow.tests.test_maxflow_large_graph.msg",
    "ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_bone_shaped": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digon": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph1": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph2": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph3": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost",
    "nose.tools.assert_equal",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_exceptions": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "float",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXUnfeasible",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_finite_capacity_neg_digon": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow_cost",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_infinite_capacity_neg_digon": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_large": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "networkx.algorithms.flow.tests.test_mincost.os",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.network_simplex",
    "networkx.read_gpickle",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_max_flow_min_cost": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.max_flow_min_cost",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_multidigraph": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negative_selfloops": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_equal",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negcycle_infcap": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.NetworkXUnfeasible",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_no_flow_satisfying_demands": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_simple_digraph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_sum_demands_not_zero": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.capacity_scaling",
    "networkx.network_simplex",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_transshipment": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_zero_capacity_edges": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.capacity_scaling",
    "networkx.cost_of_flow",
    "networkx.min_cost_flow",
    "networkx.min_cost_flow_cost",
    "networkx.network_simplex",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.tests.test_mincost.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_mincost.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_mincost.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.tests.test_mincost.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.flow.utils.CurrentEdge": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.__init__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge._rewind": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.get": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.CurrentEdge.move_to_next": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.__init__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.add_work": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.clear_work": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.GlobalRelabelThreshold.is_reached": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.Level": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.flow.utils.Level.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.utils.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.flow.utils.build_flow_dict": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.build_residual_network": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "float",
    "min",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.flow.utils.detect_unboundedness": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "collections.deque",
    "networkx.NetworkXUnbounded",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.flow.utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.graphical": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.graphical.is_graphical"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.graphical.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.algorithms.graphical.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.graphical._basic_graphical_tests": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "len",
    "max",
    "min",
    "networkx.NetworkXUnfeasible",
    "networkx.utils.is_list_of_ints"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.graphical.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.algorithms.graphical.is_digraphical": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "len",
    "list",
    "max",
    "networkx.algorithms.graphical.heapq",
    "networkx.utils.is_list_of_ints",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_graphical": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXException",
    "networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai",
    "networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_multigraphical": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "list",
    "max",
    "networkx.utils.is_list_of_ints"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_pseudographical": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "list",
    "min",
    "networkx.utils.is_list_of_ints",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence": {
  "data": {
   "lineno": 74
  },
  "type": "constant"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.graphical._basic_graphical_tests",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.graphical._basic_graphical_tests",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.graphical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.hierarchy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.hierarchy.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.hierarchy.__authors__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.hierarchy.flow_hierarchy": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "networkx.strongly_connected_components",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hierarchy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.hybrid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.hybrid.__author__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.hybrid._all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.hybrid.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "networkx.algorithms.hybrid.is_kl_connected": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.algorithms.hybrid.copy",
    "networkx.shortest_path",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hybrid.kl_connected_subgraph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.hybrid.copy",
    "networkx.shortest_path",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.hybrid.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.is_bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.is_bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.is_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.is_isomorphic"
  },
  "type": "import"
 },
 "networkx.algorithms.isolate": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isolate.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.isolate.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.isolate.is_isolate": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "networkx.algorithms.isolate.isolates": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "networkx.algorithms.isolate.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorph": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.could_be_isomorphic",
    "networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic",
    "networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorph.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.could_be_isomorphic": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.number_of_cliques",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.fast_graph_could_be_isomorphic": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.faster_graph_could_be_isomorphic": {
  "data": {
   "lineno": 121
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorph.is_isomorphic": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "GM",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState": {
  "data": {
   "lineno": 862,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore": {
  "data": {
   "lineno": 950,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.DiGMState"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility": {
  "data": {
   "lineno": 580
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__": {
  "data": {
   "lineno": 787,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GMState.restore": {
  "data": {
   "lineno": 846,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.algorithms.isomorphism.isomorphvf2.sys",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.GMState"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "StopIteration",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter": {
  "data": {
   "lineno": 282
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorphvf2.sys"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 316
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility": {
  "data": {
   "lineno": 372
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.__all__": {
  "data": {
   "lineno": 143
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.isomorphvf2.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.matchhelpers": {
  "data": {
   "symbols_in_volume": [
    "NotImplementedError",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_doc",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.copyfunc",
    "networkx.algorithms.isomorphism.matchhelpers.generic_doc",
    "networkx.algorithms.isomorphism.matchhelpers.generic_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.generic_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_doc",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match",
    "networkx.algorithms.isomorphism.matchhelpers.tmpdoc"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.isomorphism.matchhelpers.__all__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.allclose": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "abs",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_doc": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match.match": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.categorical_node_match.match": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.close": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "abs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.copyfunc": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.algorithms.isomorphism.matchhelpers.types"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_doc": {
  "data": {
   "lineno": 234
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_edge_match": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.generic_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match.match": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "itertools.permutations",
    "op",
    "operator",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "op",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.generic_node_match.match": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "operator"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_doc": {
  "data": {
   "lineno": 144
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match.match": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.allclose",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "list",
    "networkx.utils.is_string_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.numerical_node_match.match": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.matchhelpers.allclose"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.matchhelpers.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.matchhelpers.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.matchhelpers.tmpdoc": {
  "data": {
   "lineno": 230
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.matchhelpers.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.algorithms.isomorphism.could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "assert_true",
    "networkx.algorithms.isomorphism.fast_could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_true",
    "networkx.algorithms.isomorphism.faster_could_be_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.algorithms.isomorphism.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphism.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setUp": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "networkx.generators.atlas.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setupClass": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.platform",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "dict",
    "len",
    "list",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "nose.tools.assert_true",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.struct",
    "open",
    "range",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "nose.tools.assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.atlas": {
  "data": {
   "shadows": "networkx.generators.atlas"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "nose.tools.assert_equal",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.cycle_graph",
    "networkx.path_graph",
    "nose.tools.assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "nose.tools.assert_true",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.subgraph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.algorithms.isomorphism.DiGraphMatcher",
    "networkx.algorithms.isomorphism.GraphMatcher",
    "networkx.algorithms.isomorphism.tests.test_isomorphvf2.random",
    "networkx.relabel_nodes",
    "nose.tools.assert_true",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setUp": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setUp": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.algorithms.isomorphism.MultiDiGraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.categorical_edge_match",
    "networkx.algorithms.isomorphism.categorical_multiedge_match",
    "networkx.algorithms.isomorphism.generic_edge_match",
    "networkx.algorithms.isomorphism.generic_multiedge_match",
    "networkx.algorithms.isomorphism.matchhelpers.close",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.algorithms.isomorphism.numerical_multiedge_match",
    "operator.eq"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setUp": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.MultiGraphMatcher"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.categorical_node_match",
    "networkx.algorithms.isomorphism.numerical_edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setUp": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism",
    "networkx.is_isomorphic",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.eq": {
  "data": {
   "shadows": "operator.eq"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.iso": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.algorithms.isomorphism.numerical_multiedge_match",
    "networkx.is_isomorphic",
    "nose.tools.assert_false",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.isomorphism.numerical_edge_match",
    "networkx.is_isomorphic",
    "nose.tools.assert_false",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher": {
  "data": {
   "lineno": 125
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "edge_match"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.isomorphism.vf2userfunc.vf2": {
  "data": {
   "shadows": "isomorphvf2"
  },
  "type": "import"
 },
 "networkx.algorithms.k_components": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.k_components"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.hits_alg.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.hits_alg.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.hits_alg.authority_matrix": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "Exception",
    "abs",
    "dict.fromkeys",
    "len",
    "max",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.exception.NetworkXError",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_numpy": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "float",
    "len",
    "map",
    "networkx.authority_matrix",
    "networkx.hub_matrix",
    "numpy.array",
    "numpy.linalg.eig",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hits_scipy": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "float",
    "len",
    "map",
    "networkx.exception.NetworkXError",
    "networkx.to_scipy_sparse_matrix",
    "numpy.asarray",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.hub_matrix": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.hits_alg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.hits_alg.setup_module": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.google_matrix": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.exception.NetworkXError",
    "networkx.to_numpy_matrix",
    "numpy.array",
    "numpy.repeat",
    "numpy.where",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "abs",
    "dict",
    "dict.fromkeys",
    "float",
    "len",
    "networkx.exception.NetworkXError",
    "networkx.stochastic_graph",
    "networkx.utils.not_implemented_for",
    "range",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_numpy": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "map",
    "networkx.algorithms.link_analysis.pagerank_alg.google_matrix",
    "numpy.array",
    "numpy.linalg.eig",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.pagerank_scipy": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "map",
    "networkx.exception.NetworkXError",
    "networkx.to_scipy_sparse_matrix",
    "range",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.pagerank_alg.setup_module": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setUp": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "ImportError",
    "assert_equal",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "nose.SkipTest",
    "nose.plugins.attrib.attr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty_scipy": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "ImportError",
    "assert_equal",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_nstart": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ImportError",
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "nose.SkipTest",
    "nose.plugins.attrib.attr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_scipy": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "ImportError",
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_hits.networkx",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_hits.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setUp": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setupClass": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_matrix": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "assert_almost_equal",
    "float",
    "len",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_numpy_pagerank": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_pagerank": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_empty": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_raises",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.numpy",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_almost_equal",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_raises",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_raises",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.setupClass": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_empty_scipy": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_raises",
    "dict",
    "networkx.algorithms.link_analysis.tests.test_pagerank.networkx",
    "networkx.algorithms.link_analysis.tests.test_pagerank.random"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.link_analysis.tests.test_pagerank.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.algorithms.matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.matching.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.algorithms.matching.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.matching.max_weight_matching": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "addBlossom",
    "assignLabel",
    "augmentMatching",
    "dict",
    "expandBlossom",
    "itertools.repeat",
    "list",
    "max",
    "min",
    "scanBlossom",
    "slack",
    "str",
    "type",
    "verifyOptimum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom": {
  "data": {
   "lineno": 122
  },
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.Blossom.leaves": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.NoNode": {
  "data": {
   "lineno": 118
  },
  "type": "class"
 },
 "networkx.algorithms.matching.max_weight_matching.addBlossom": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "Blossom",
    "isinstance",
    "list",
    "slack"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.assignLabel": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "assignLabel",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentBlossom": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "Blossom",
    "augmentBlossom",
    "isinstance",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.augmentMatching": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "Blossom",
    "augmentBlossom",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.expandBlossom": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "Blossom",
    "assignLabel",
    "expandBlossom",
    "isinstance",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.scanBlossom": {
  "data": {
   "lineno": 263
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.slack": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "networkx.algorithms.matching.max_weight_matching.verifyOptimum": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "len",
    "max",
    "min",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.maximal_matching": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.matching.repeat": {
  "data": {
   "shadows": "itertools.repeat"
  },
  "type": "import"
 },
 "networkx.algorithms.max_flow_min_cost": {
  "data": {
   "shadows": "networkx.algorithms.flow.max_flow_min_cost"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.maximum_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.maximum_flow_value": {
  "data": {
   "shadows": "networkx.algorithms.flow.maximum_flow_value"
  },
  "type": "import"
 },
 "networkx.algorithms.min_cost_flow": {
  "data": {
   "shadows": "networkx.algorithms.flow.min_cost_flow"
  },
  "type": "import"
 },
 "networkx.algorithms.min_cost_flow_cost": {
  "data": {
   "shadows": "networkx.algorithms.flow.min_cost_flow_cost"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_cut": {
  "data": {
   "shadows": "networkx.algorithms.flow.minimum_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_cut_value": {
  "data": {
   "shadows": "networkx.algorithms.flow.minimum_cut_value"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_edge_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_edge_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minimum_node_cut": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.minimum_node_cut"
  },
  "type": "import"
 },
 "networkx.algorithms.minors": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.minors.contracted_nodes"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.minors.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.minors.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.contracted_edge": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "ValueError",
    "networkx.algorithms.minors.contracted_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.contracted_nodes": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "itertools.chain"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.equivalence_classes": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "frozenset",
    "networkx.algorithms.minors.peek",
    "relation"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.identified_nodes": {
  "data": {
   "lineno": 246
  },
  "type": "constant"
 },
 "networkx.algorithms.minors.peek": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.minors.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.minors.quotient_graph": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "any",
    "edge_relation",
    "itertools.combinations",
    "itertools.permutations",
    "itertools.product",
    "networkx.algorithms.minors.equivalence_classes",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.mis.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.mis.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.mis.maximal_independent_set": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.mis.random",
    "set",
    "set.intersection",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mis.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.mis.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.mst": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.mst.minimum_spanning_tree"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.mst.UnionFind": {
  "data": {
   "shadows": "networkx.utils.UnionFind"
  },
  "type": "import"
 },
 "networkx.algorithms.mst.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.mst.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.mst.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.mst.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.mst.kruskal_mst": {
  "data": {
   "lineno": 137
  },
  "type": "constant"
 },
 "networkx.algorithms.mst.minimum_spanning_edges": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.UnionFind",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mst.minimum_spanning_tree": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.minimum_spanning_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mst.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.mst.prim_mst": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "networkx.prim_mst_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.mst.prim_mst_edges": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "networkx.NetworkXError",
    "next",
    "pop",
    "push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.network_simplex": {
  "data": {
   "shadows": "networkx.algorithms.flow.network_simplex"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.assortativity": {
  "data": {
   "shadows": "networkx.algorithms.assortativity"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.centrality": {
  "data": {
   "shadows": "networkx.algorithms.centrality"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.chordal": {
  "data": {
   "shadows": "networkx.algorithms.chordal"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.clique": {
  "data": {
   "shadows": "networkx.algorithms.clique"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.cluster": {
  "data": {
   "shadows": "networkx.algorithms.cluster"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.coloring": {
  "data": {
   "shadows": "networkx.algorithms.coloring"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.components": {
  "data": {
   "shadows": "networkx.algorithms.components"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.flow": {
  "data": {
   "shadows": "networkx.algorithms.flow"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.isomorphism": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.link_analysis": {
  "data": {
   "shadows": "networkx.algorithms.link_analysis"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.operators": {
  "data": {
   "shadows": "networkx.algorithms.operators"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.shortest_paths": {
  "data": {
   "shadows": "networkx.algorithms.shortest_paths"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.traversal": {
  "data": {
   "shadows": "networkx.algorithms.traversal"
  },
  "type": "import"
 },
 "networkx.algorithms.networkx.algorithms.tree": {
  "data": {
   "shadows": "networkx.algorithms.tree"
  },
  "type": "import"
 },
 "networkx.algorithms.node_connectivity": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.node_connectivity"
  },
  "type": "import"
 },
 "networkx.algorithms.operators": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.all": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.operators.all.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.all.__author__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.all.compose_all": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "iter",
    "networkx.compose",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.disjoint_union_all": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "iter",
    "networkx.disjoint_union",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.intersection_all": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "iter",
    "networkx.intersection",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.all.union_all": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "itertools.zip_longest",
    "networkx.union",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.all.zip_longest": {
  "data": {
   "shadows": "itertools.zip_longest"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.binary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.binary.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.binary.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.binary.compose": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.difference": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.disjoint_union": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.operators.binary.union",
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.intersection": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.binary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.binary.symmetric_difference": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.create_empty_copy",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "add_prefix",
    "networkx.NetworkXError",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.binary.union.add_prefix.label": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.utils.is_string_like",
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.product.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.product.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.product._dict_product": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "dict",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._directed_edges_cross_edges": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._edges_cross_nodes_and_nodes": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._init_product_graph": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._node_product": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "itertools.product",
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._nodes_cross_edges": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product._undirected_edges_cross_edges": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._dict_product"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.cartesian_product": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.algorithms.operators.product._edges_cross_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.lexicographic_product": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._edges_cross_nodes_and_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.product.power": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "ValueError",
    "networkx.Graph",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.product.strong_product": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._directed_edges_cross_edges",
    "networkx.algorithms.operators.product._edges_cross_nodes",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._nodes_cross_edges",
    "networkx.algorithms.operators.product._undirected_edges_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.product.tensor_product": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.algorithms.operators.product._directed_edges_cross_edges",
    "networkx.algorithms.operators.product._init_product_graph",
    "networkx.algorithms.operators.product._node_product",
    "networkx.algorithms.operators.product._undirected_edges_cross_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_all.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_all.test_input_output": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.Graph",
    "networkx.compose_all",
    "networkx.disjoint_union_all",
    "networkx.intersection_all"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.intersection",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.intersection_all",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_compose": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.compose_all",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_disjoint_union": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.disjoint_union_all",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_intersection": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.intersection_all",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_mixed_type_union": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.union_all",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_and_compose_all": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_equal",
    "assert_false",
    "assert_raises",
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.compose_all",
    "networkx.disjoint_union_all",
    "networkx.number_of_edges",
    "networkx.path_graph",
    "networkx.union",
    "networkx.union_all",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_attributes": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "assert_equal",
    "eval",
    "int",
    "networkx.Graph",
    "networkx.union_all",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_all.test_union_all_multigraph": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.union_all",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_binary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_binary.test_compose_multigraph": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.compose",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.difference",
    "networkx.symmetric_difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference2": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_attributes": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.difference",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_multigraph_attributes": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_difference_raise": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.difference",
    "networkx.path_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_disjoint_union_multigraph": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.disjoint_union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_attributes": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.intersection",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_compose": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.compose",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_difference": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.difference",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_disjoint_union": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.disjoint_union",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_intersection": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.intersection",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_symmetric_difference": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.symmetric_difference",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_mixed_type_union": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.union",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_multigraph": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.symmetric_difference",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_raise": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.path_graph",
    "networkx.symmetric_difference",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_and_compose": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_equal",
    "assert_false",
    "assert_raises",
    "complete_graph",
    "compose",
    "disjoint_union",
    "len",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.union",
    "number_of_edges",
    "path_graph",
    "sorted",
    "union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_attributes": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_equal",
    "eval",
    "int",
    "networkx.Graph",
    "networkx.union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_binary.test_union_multigraph": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.union",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_product.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.cartesian_product": {
  "data": {
   "shadows": "networkx.cartesian_product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.lexicographic_product": {
  "data": {
   "shadows": "networkx.lexicographic_product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.strong_product": {
  "data": {
   "shadows": "networkx.strong_product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.tensor_product": {
  "data": {
   "shadows": "networkx.tensor_product"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_classic": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.cubical_graph",
    "networkx.grid_2d_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_multigraph": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "frozenset",
    "networkx.MultiGraph",
    "networkx.cartesian_product",
    "nose.tools.assert_equal",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_null": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_raises": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.cartesian_product",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_random": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.erdos_renyi_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_cartesian_product_size": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "networkx.cartesian_product",
    "networkx.complete_graph",
    "networkx.number_of_edges",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "ValueError",
    "networkx.cycle_graph",
    "networkx.power",
    "nose.tools.assert_equal",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_graph_power_raises": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.power",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_combinations": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.lexicographic_product",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_null": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.lexicographic_product",
    "networkx.null_graph",
    "networkx.path_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_raises": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.lexicographic_product",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_random": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.lexicographic_product",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_lexicographic_product_size": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.lexicographic_product",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_combinations": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.strong_product",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_null": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.strong_product",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_raises": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.strong_product",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_random": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.strong_product",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_strong_product_size": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.strong_product",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_classic_result": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.desargues_graph",
    "networkx.is_isomorphic",
    "networkx.petersen_graph",
    "networkx.tensor_product",
    "networkx.tetrahedral_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_combinations": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.tensor_product",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_null": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.is_isomorphic",
    "networkx.null_graph",
    "networkx.path_graph",
    "networkx.tensor_product",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_raises": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.tensor_product",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_random": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.erdos_renyi_graph",
    "networkx.tensor_product",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_product.test_tensor_product_size": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.number_of_nodes",
    "networkx.path_graph",
    "networkx.tensor_product",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.tests.test_unary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_true",
    "bull_graph",
    "complement",
    "complete_graph",
    "empty_graph",
    "is_isomorphic",
    "null_graph",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_complement_2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_equal",
    "complement",
    "networkx.DiGraph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.tests.test_unary.test_reverse1": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.reverse"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.operators.unary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.operators.unary.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.unary.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.algorithms.operators.unary.complement": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "networkx.algorithms.operators.unary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.operators.unary.reverse": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.project": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.project"
  },
  "type": "import"
 },
 "networkx.algorithms.projected_graph": {
  "data": {
   "shadows": "networkx.algorithms.bipartite.projected_graph"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.richclub.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.richclub.__author__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.algorithms.richclub._compute_rc": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "len",
    "networkx.degree_histogram",
    "networkx.utils.accumulate",
    "range",
    "sorted",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.richclub.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.richclub.rich_club_coefficient": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "Exception",
    "len",
    "networkx.algorithms.richclub._compute_rc",
    "networkx.double_edge_swap"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.astar.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.astar.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "heapq.heappop",
    "heapq.heappush",
    "heuristic",
    "itertools.count",
    "networkx.NetworkXError",
    "networkx.NetworkXNoPath",
    "next",
    "pop",
    "push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path.heuristic": {
  "data": {
   "lineno": 75
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.astar_path_length": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "heuristic",
    "networkx.algorithms.shortest_paths.astar.astar_path",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.astar.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.astar.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.dense.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.dense.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.dense.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ImportError",
    "min",
    "networkx.to_numpy_matrix",
    "numpy.identity",
    "numpy.inf",
    "numpy.minimum",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "float",
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.dense.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.dense.setup_module": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.generic.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.generic.__author__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.generic.all_shortest_paths": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXNoPath",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.predecessor",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.average_shortest_path_length": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.is_weakly_connected",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.has_path": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "list",
    "networkx.all_pairs_dijkstra_path",
    "networkx.all_pairs_shortest_path",
    "networkx.bidirectional_shortest_path",
    "networkx.dijkstra_path",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_shortest_path",
    "networkx.utils.reversed",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.generic.shortest_path_length": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "len",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.all_pairs_shortest_path_length",
    "networkx.bidirectional_shortest_path",
    "networkx.dijkstra_path_length",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "TypeError",
    "assert_raises",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "networkx.astar_path",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.astar_path",
    "networkx.astar_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "networkx.astar_path",
    "networkx.cycle_graph",
    "networkx.dijkstra_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_orderable": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "UnorderableClass",
    "networkx.Graph",
    "networkx.algorithms.shortest_paths.astar.astar_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_orderable.UnorderableClass": {
  "data": {
   "lineno": 125
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_random_graph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "dist",
    "networkx.Graph",
    "networkx.astar_path",
    "networkx.dijkstra_path",
    "random.choice",
    "random.random",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_random_graph.dist": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.choice": {
  "data": {
   "shadows": "random.choice"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_astar.random": {
  "data": {
   "shadows": "random.random"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setUp": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.cycle_graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.floyd_warshall",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_distance": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.floyd_warshall_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_weight": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.floyd_warshall"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_cycle_numpy": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.floyd_warshall_numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_directed_cycle_numpy": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.floyd_warshall_numpy",
    "networkx.floyd_warshall_predecessor_and_distance",
    "networkx.utils.dict_to_numpy_array",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weight_parameter_numpy": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.floyd_warshall_numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_zero_weight": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "int",
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.shortest_paths.tests.test_dense_numpy.numpy",
    "networkx.floyd_warshall_numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_dense_numpy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setUp": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.all_pairs_dijkstra_path",
    "networkx.all_pairs_shortest_path",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.all_pairs_dijkstra_path_length",
    "networkx.all_pairs_shortest_path_length",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.all_shortest_paths",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_raise": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.all_shortest_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_disconnected": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.average_shortest_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_path": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.average_shortest_path_length",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.Graph",
    "networkx.has_path",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length_target": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.path_graph",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_target": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.path_graph",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path",
    "networkx.shortest_path",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.shortest_path_length",
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_weighted_average_shortest_path": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.average_shortest_path_length",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "abs",
    "assert_equal",
    "isinstance",
    "len",
    "list",
    "ok_",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setUp": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path",
    "networkx.all_pairs_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.all_pairs_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path",
    "networkx.bidirectional_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.grid_2d_graph",
    "networkx.path_graph",
    "networkx.predecessor",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cutoff": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_false",
    "networkx.path_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_target": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.path_graph",
    "networkx.predecessor"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "abs",
    "assert_equal",
    "isinstance",
    "len",
    "list",
    "ok_",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted._setUp"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_multigraph": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bellman_ford",
    "networkx.goldberg_radzik"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_negative_weight_cycle": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXUnbounded",
    "networkx.bellman_ford",
    "networkx.cycle_graph",
    "networkx.goldberg_radzik",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_not_connected": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bellman_ford",
    "networkx.complete_graph",
    "networkx.goldberg_radzik"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_others": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bellman_ford",
    "networkx.goldberg_radzik",
    "networkx.grid_2d_graph",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_single_node_graph": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.bellman_ford",
    "networkx.goldberg_radzik"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted._setUp"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_graphs": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_cycle": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXUnbounded",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_weights": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.johnson"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_single_node_graph": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.johnson",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_unweighted_graph": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.johnson",
    "networkx.path_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted._setUp"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.bidirectional_dijkstra",
    "networkx.dijkstra_path",
    "networkx.single_source_dijkstra_path",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.bidirectional_dijkstra"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_no_path": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.bidirectional_dijkstra",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path",
    "networkx.dijkstra_path",
    "networkx.dijkstra_path_length",
    "networkx.single_source_dijkstra",
    "networkx.single_source_dijkstra_path",
    "networkx.single_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiGraph",
    "networkx.dijkstra_predecessor_and_distance"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "networkx.DiGraph",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.grid_2d_graph",
    "networkx.path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "assert_raises",
    "len",
    "networkx.DiGraph",
    "networkx.bidirectional_dijkstra",
    "networkx.cycle_graph",
    "networkx.dijkstra_predecessor_and_distance",
    "networkx.negative_edge_cycle",
    "networkx.single_source_dijkstra",
    "networkx.single_source_dijkstra_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_single_source_dijkstra_path_length": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "networkx.single_source_dijkstra_path_length",
    "pl"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted._setUp": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "cnlti",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.tests.test_weighted.validate_path": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "min",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.shortest_paths.unweighted.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.unweighted.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "len",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "length",
    "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.shortest_paths.unweighted.predecessor": {
  "data": {
   "lineno": 291
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.simple_paths.PathBuffer": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__init__": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "itertools.count",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.__len__": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.pop": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "heapq.heappop",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.PathBuffer.push": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "heapq.heappush",
    "next",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.simple_paths.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "iter",
    "len",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._all_simple_paths_multigraph": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "itertools.count",
    "len",
    "list",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "ValueError",
    "dir",
    "filter_iter",
    "filter_pred_iter",
    "filter_succ_iter",
    "heapq.heappop",
    "heapq.heappush",
    "itertools.count",
    "min",
    "networkx.NetworkXNoPath",
    "next",
    "pop",
    "push"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter": {
  "data": {
   "lineno": 564
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_iter.iterate": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "nodes_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter": {
  "data": {
   "lineno": 546
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_pred_iter.iterate": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "pred_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter": {
  "data": {
   "lineno": 553
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_dijkstra.filter_succ_iter.iterate": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": [
    "succ_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "Gpred",
    "Gsucc",
    "filter_iter",
    "filter_pred_iter",
    "filter_succ_iter",
    "len",
    "networkx.NetworkXNoPath"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter": {
  "data": {
   "lineno": 406
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_iter.iterate": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "nodes_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter": {
  "data": {
   "lineno": 388
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_pred_iter.iterate": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "pred_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_pred_succ.filter_succ_iter.iterate": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "succ_iter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths._bidirectional_shortest_path": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "len",
    "networkx.algorithms.simple_paths._bidirectional_pred_succ"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.all_simple_paths": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.simple_paths._all_simple_paths_graph",
    "networkx.algorithms.simple_paths._all_simple_paths_multigraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "len",
    "length_func",
    "list",
    "networkx.NetworkXError",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths.PathBuffer",
    "networkx.utils.not_implemented_for",
    "range",
    "set",
    "shortest_path_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.simple_paths.shortest_simple_paths.length_func": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.smetric": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.smetric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.smetric.s_metric": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "float",
    "networkx.NetworkXError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.stoer_wagner": {
  "data": {
   "shadows": "networkx.algorithms.connectivity.stoer_wagner"
  },
  "type": "import"
 },
 "networkx.algorithms.swap": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.swap.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.swap.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.swap.connected_double_edge_swap": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "int",
    "len",
    "list",
    "networkx.NetworkXError",
    "networkx.algorithms.swap.math",
    "networkx.algorithms.swap.random",
    "networkx.has_path",
    "networkx.is_connected",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.swap.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.swap.double_edge_swap": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.NetworkXError",
    "networkx.algorithms.swap.random",
    "networkx.utils.cumulative_distribution",
    "networkx.utils.discrete_sequence",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.swap.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.swap.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.swap.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_block": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_block.TestBlock": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_barbell": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_block.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_barbell_plus": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_block.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_directed_multigraph_path": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.tests.test_block.networkx",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_directed_path": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.tests.test_block.networkx",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_multigraph_path": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_block.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_overlapping": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_block.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_path": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_block.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.TestBlock.test_weighted_path": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_block.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_block.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.null_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_edge_boundary": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.edge_boundary",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_node_boundary": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_boundary",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_null_edge_boundary": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.edge_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_null_node_boundary": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_path_edge_boundary": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.edge_boundary",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_path_node_boundary": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.node_boundary",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_petersen": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "assert_almost_equals",
    "cheeger",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.TestBoundary.test_petersen.cheeger": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "float",
    "itertools.combinations",
    "len",
    "min",
    "networkx.node_boundary"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_boundary.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_boundary.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_clique": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_clique.TestCliques": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.setUp": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "dict",
    "list",
    "networkx.complete_graph",
    "networkx.convert_node_labels_to_integers",
    "networkx.find_cliques",
    "networkx.generators.havel_hakimi_graph",
    "networkx.relabel_nodes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_clique_number": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.graph_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.cliques_containing_node"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_directed": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.find_cliques",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "map",
    "networkx.find_cliques",
    "networkx.find_cliques_recursive",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "map",
    "networkx.find_cliques",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.make_clique_bipartite",
    "networkx.make_max_clique_graph",
    "networkx.project_down",
    "networkx.project_up",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.node_clique_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.graph_number_of_cliques",
    "networkx.number_of_cliques"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestCliques.test_selfloops": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "map",
    "networkx.find_cliques",
    "networkx.find_cliques_recursive",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques": {
  "data": {
   "lineno": 116
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_clique.TestEnumerateAllCliques.test_paper_figure_4": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "map",
    "networkx.Graph",
    "networkx.enumerate_all_cliques",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_clique.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_clique.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cluster": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering": {
  "data": {
   "lineno": 79
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_clustering": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_cubical": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.clustering",
    "networkx.cubical_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_k5": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestClustering.test_path": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering": {
  "data": {
   "lineno": 146
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.complete_bipartite_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.cubical_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.complete_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.path_graph",
    "networkx.square_clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity": {
  "data": {
   "lineno": 114
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.cubical_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.complete_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_path": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.path_graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.transitivity"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.cubical_graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_empty": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_k5": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.complete_graph",
    "networkx.triangles",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestTriangles.test_path": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.path_graph",
    "networkx.triangles"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering": {
  "data": {
   "lineno": 38
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.clustering",
    "networkx.cubical_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.average_clustering",
    "networkx.clustering",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.clustering",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.clustering"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cluster.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cluster.test_average_clustering": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.average_clustering",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_core.TestCore": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_core.TestCore.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers",
    "networkx.havel_hakimi_graph",
    "networkx.relabel_nodes",
    "networkx.tetrahedral_graph",
    "networkx.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_core_number": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.core_number"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.find_cores",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_find_cores2": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.find_cores",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_core": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_core",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_corona": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_corona",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_crust": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_crust",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_k_shell": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_shell",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_core": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_core",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_crust": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_crust",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_main_shell": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.k_shell",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.TestCore.test_trivial": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.find_cores"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_core.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_cycles.FORWARD": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_cycles.REVERSE": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permutation": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "any",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_recursive_simple_and_not": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "any",
    "assert_equal",
    "assert_true",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "any",
    "assert_true",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "raises",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "any",
    "assert_equal",
    "assert_true",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_simple_graph_with_reported_bug": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "any",
    "assert_equal",
    "assert_true",
    "len",
    "networkx.algorithms.tests.test_cycles.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "list",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.algorithms.tests.test_cycles.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_cycles.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.setUp": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_dag": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.REVERSE",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_ignore": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.FORWARD",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.TestFindCycle.test_multigraph": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.algorithms.find_cycle",
    "networkx.algorithms.tests.test_cycles.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_cycles.find_cycle": {
  "data": {
   "shadows": "networkx.algorithms.find_cycle"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_cycles.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dag.TestDAG": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dag.TestDAG._check_antichains": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "assert_true",
    "frozenset",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.setUp": {
  "data": {
   "lineno": 10
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_ancestors": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "ancestors",
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.ancestors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_antichains": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "antichains",
    "assert_raises",
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.NetworkXUnfeasible",
    "networkx.algorithms.dag.antichains"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_dag_longest_path": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "longest_path",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.dag.dag_longest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_dag_longest_path_length": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "longest_path_length",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.dag.dag_longest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_descendants": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "descendants",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.algorithms.dag.descendants",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_is_directed_acyclic_graph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.complete_graph",
    "networkx.is_directed_acyclic_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_nbunch_argument": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_reverse_topological_sort1": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "assert_raises",
    "assert_true",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.is_directed_acyclic_graph",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive",
    "range",
    "validate"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3.validate": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "isinstance",
    "itertools.combinations",
    "list",
    "networkx.has_path",
    "ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.topological_sort",
    "networkx.topological_sort_recursive"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.algorithms.dag.transitive_closure",
    "networkx.testing.utils.assert_edges_equal",
    "transitive_closure"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.davis_southern_women_graph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_raise": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.full_rary_tree",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_aperiodic"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_distance_measures.networkx",
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_center": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_distance_measures.networkx",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_distance_measures.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.algorithms.tests.test_distance_measures.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_infinite": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_distance_measures.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_invalid": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_distance_measures.networkx",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_distance_measures.networkx",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_distance_measures.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.algorithms.tests.test_distance_measures.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_measures.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_measures.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_distance_regular": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.cycle_graph",
    "networkx.global_parameters",
    "networkx.intersection_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.cycle_graph",
    "networkx.dodecahedral_graph",
    "networkx.icosahedral_graph",
    "networkx.intersection_array"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.complete_bipartite_graph",
    "networkx.cubical_graph",
    "networkx.cycle_graph",
    "networkx.dodecahedral_graph",
    "networkx.heawood_graph",
    "networkx.icosahedral_graph",
    "networkx.is_distance_regular",
    "networkx.pappus_graph",
    "networkx.path_graph",
    "networkx.petersen_graph",
    "networkx.tetrahedral_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_false",
    "networkx.cycle_graph",
    "networkx.is_distance_regular"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_distance_regular.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominance": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_boost_example": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_cycle": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.dominance_frontiers",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_domrel_png": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_exceptions": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.dominance_frontiers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible1": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible2": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_path": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_singleton": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.dominance_frontiers"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_unreachable": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "assert_equal",
    "assert_greater",
    "networkx.DiGraph",
    "networkx.dominance_frontiers",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_boost_example": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_cycle": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "assert_equal",
    "max",
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_domrel_png": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_exceptions": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.NetworkXNotImplemented",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible1": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible2": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_path": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "max",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_singleton": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.immediate_dominators"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_unreachable": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_equal",
    "assert_greater",
    "max",
    "networkx.DiGraph",
    "networkx.immediate_dominators",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominance.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_dominating.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.assert_false": {
  "data": {
   "shadows": "nose.tools.assert_false"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_dominating.test_complete": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "len",
    "networkx.complete_graph",
    "networkx.dominating_set",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_dominating_set": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.dominating_set",
    "networkx.gnp_random_graph",
    "networkx.is_dominating_set",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_dominating_set_error": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.dominating_set",
    "networkx.path_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_is_dominating_set": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.is_dominating_set",
    "networkx.path_graph",
    "nose.tools.assert_false",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_dominating.test_wikipedia_is_dominating_set": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.cycle_graph",
    "networkx.is_dominating_set",
    "nose.tools.assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_euler.TestEuler": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_cycle": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.complete_graph",
    "networkx.cycle_graph",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_digraph": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_multigraph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiGraph",
    "networkx.eulerian_circuit"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_is_eulerian": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.complete_graph",
    "networkx.hypercube_graph",
    "networkx.is_eulerian",
    "networkx.path_graph",
    "networkx.petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_is_eulerian2": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.is_eulerian"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.TestEuler.test_not_eulerian": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.complete_graph",
    "networkx.eulerian_circuit",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_euler.eulerian_circuit": {
  "data": {
   "shadows": "networkx.eulerian_circuit"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_euler.is_eulerian": {
  "data": {
   "shadows": "networkx.is_eulerian"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_euler.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_graphical.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.setUp": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.generators.atlas.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.setupClass": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "classmethod",
    "networkx.algorithms.tests.test_graphical.platform",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.TestAtlas.test_atlas": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.is_valid_degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.atlas": {
  "data": {
   "shadows": "networkx.generators.atlas"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_graphical.test_directed_degree_sequence": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.erdos_renyi_graph",
    "networkx.is_digraphical",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_multi_sequence": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.is_multigraphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_negative_input": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_false",
    "networkx.is_valid_degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_pseudo_sequence": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.is_pseudographical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_directed_sequences": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.is_digraphical"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_false": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_false",
    "networkx.is_valid_degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_small_graph_true": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "assert_true",
    "networkx.is_valid_degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_string_input": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "networkx.is_valid_degree_sequence",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.erdos_renyi_graph",
    "networkx.is_valid_degree_sequence",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.barabasi_albert_graph",
    "networkx.is_valid_degree_sequence",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_hierarchy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_1": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_cycle": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_exception": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.cycle_graph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_tree": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.flow_hierarchy",
    "networkx.full_rary_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hierarchy.test_hierarchy_weight": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.flow_hierarchy"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_hybrid.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_hybrid.test_2d_grid_graph": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.grid_2d_graph",
    "networkx.is_kl_connected",
    "networkx.kl_connected_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_hybrid.test_small_graph": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_true",
    "networkx.Graph",
    "networkx.is_kl_connected",
    "networkx.kl_connected_subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex": {
  "data": {
   "lineno": 116
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.setUp": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.adamic_adar_index",
    "networkx.algorithms.tests.test_link_prediction._test_func"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_K5": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_P3": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_S4": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_all_nonexistent_edges": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tests.test_link_prediction.math"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_digraph": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_equal_nodes": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_link_prediction.math",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_multidigraph": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_multigraph": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_no_common_neighbor": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft": {
  "data": {
   "lineno": 213
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.setUp": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.cn_soundarajan_hopcroft"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_K5": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_P3": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_S4": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_all_nonexistent_edges": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_custom_community_attribute_name": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_different_community": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_digraph": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_equal_nodes": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_insufficient_community_information": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_multidigraph": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_multigraph": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_common_neighbor": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_community_information": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_sufficient_community_information": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient": {
  "data": {
   "lineno": 69
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.setUp": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.jaccard_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_K5": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_P4": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_all_nonexistent_edges": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_digraph": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_isolated_nodes": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_multidigraph": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_multigraph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_no_common_neighbor": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment": {
  "data": {
   "lineno": 167
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.setUp": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.preferential_attachment"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_K5": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_P3": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_S4": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_all_nonexistent_edges": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_digraph": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_multidigraph": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_multigraph": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_zero_degrees": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft": {
  "data": {
   "lineno": 336
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.setUp": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.ra_index_soundarajan_hopcroft"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_K5": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_P3": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_S4": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_different_community": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_digraph": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_equal_nodes": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_insufficient_community_information": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_multidigraph": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_multigraph": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_common_neighbor": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_community_information": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_sufficient_community_information": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.setUp": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.resource_allocation_index"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_K5": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_P3": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_S4": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_all_nonexistent_edges": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_digraph": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_equal_nodes": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_multidigraph": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_multigraph": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_no_common_neighbor": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster": {
  "data": {
   "lineno": 459
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.setUp": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "functools.partial",
    "networkx.algorithms.tests.test_link_prediction._test_func",
    "networkx.within_inter_cluster"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_K5": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_P3": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_S4": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_all_nonexistent_edges": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_custom_community_attribute_name": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_different_community": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_digraph": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_equal_nodes": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_insufficient_community_information": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXAlgorithmError",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_multidigraph": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_multigraph": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_negative_delta": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_common_neighbor": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_community_information": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_inter_cluster_common_neighbor": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_sufficient_community_information": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_zero_delta": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXAlgorithmError",
    "networkx.complete_graph",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction._test_func": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_equal",
    "dict",
    "len",
    "predict_func",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_link_prediction.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_link_prediction.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_link_prediction.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_matching.TestMatching": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.setUp": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_floating_point_weights": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.algorithms.tests.test_matching.math",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom1": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom2": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_augmenting": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_expand_recursively": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_least_slack": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_negative_weights": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_expand": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel_expand": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom_relabel_expand": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_s_t_blossom": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_trivial1": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_trivial2": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_trivial3": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_trivial4": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.TestMatching.test_trivial5": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.max_weight_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_matching.test_maximal_matching": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "eq_",
    "len",
    "networkx.Graph",
    "networkx.maximal_matching",
    "ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_matching.test_maximal_matching_ordering": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.Graph",
    "networkx.maximal_matching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_minors.TestContraction": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_node_attributes": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "dict",
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "networkx.relabel_nodes",
    "nose.tools.assert_equal",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_nonexistent_edge": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "ValueError",
    "networkx.contracted_edge",
    "networkx.cycle_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_edge_contraction": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_edge",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestContraction.test_without_self_loops": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.contracted_nodes",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.condensation",
    "networkx.is_isomorphic",
    "networkx.quotient_graph",
    "networkx.strongly_connected_components",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.quotient_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.complete_multipartite_graph",
    "networkx.is_isomorphic",
    "networkx.quotient_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "iter",
    "networkx.Graph",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.quotient_graph",
    "next",
    "nose.tools.assert_true",
    "peek"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_minors.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_minors.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mis": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.setup": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K5": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.complete_graph",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K55": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.complete_graph",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_bipartite": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.complete_bipartite_graph",
    "networkx.maximal_independent_set",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_exception": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXUnfeasible",
    "networkx.maximal_independent_set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_florentine_family": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.maximal_independent_set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_graphs": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.algorithms.tests.test_mis.random",
    "networkx.maximal_independent_set",
    "networkx.random_graphs.erdos_renyi_graph",
    "range",
    "set",
    "set.union"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mis.__author__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.algorithms.tests.test_mis.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mis.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_mst": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_mst.TestMST": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_mst.TestMST.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.minimum_spanning_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst_attributes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.minimum_spanning_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst_disconnected": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "map",
    "networkx.Graph",
    "networkx.minimum_spanning_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst_edges": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.minimum_spanning_edges",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst_edges_specify_weight": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.minimum_spanning_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_mst_isolate": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.minimum_spanning_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.prim_mst"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_attributes": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.prim_mst"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_disconnected": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_equal",
    "map",
    "networkx.Graph",
    "networkx.prim_mst",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.prim_mst_edges",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges_specify_weight": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.prim_mst",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_isolate": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.prim_mst",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_mst.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_richclub": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_richclub.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub2": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.balanced_tree",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_richclub.test_richclub_normalized": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.richclub.rich_club_coefficient"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_simple_paths._bidirectional_dijkstra": {
  "data": {
   "shadows": "networkx.algorithms.simple_paths._bidirectional_dijkstra"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths._bidirectional_shortest_path": {
  "data": {
   "shadows": "networkx.algorithms.simple_paths._bidirectional_shortest_path"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.hamiltonian_path": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "len",
    "networkx.all_simple_paths",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_simple_paths.test_Greg_Bernstein": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.all_simple_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_cutoff": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.all_simple_paths",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_directed": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_empty": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.all_simple_paths",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph_with_cutoff": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijksta_restricted": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths._bidirectional_dijkstra",
    "networkx.algorithms.tests.test_simple_paths.validate_length_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_no_path": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths._bidirectional_dijkstra",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXNoPath",
    "networkx.algorithms.simple_paths._bidirectional_shortest_path",
    "networkx.convert_node_labels_to_integers",
    "networkx.cycle_graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_cutoff_zero": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiGraph",
    "networkx.all_simple_paths",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "assert_true",
    "cost_func",
    "networkx.algorithms.tests.test_simple_paths.random",
    "networkx.complete_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path.cost_func": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_hamiltonian_path": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "itertools.permutations",
    "list",
    "networkx.algorithms.tests.test_simple_paths.hamiltonian_path",
    "networkx.complete_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.all_simple_paths",
    "networkx.convert_node_labels_to_integers",
    "networkx.grid_2d_graph",
    "networkx.shortest_simple_paths",
    "next",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.cycle_graph",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_source_missing": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.all_simple_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_multigraph": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "list",
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.shortest_simple_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXNoPath",
    "networkx.shortest_simple_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_ssp_target_missing": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.shortest_simple_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_target_missing": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.all_simple_paths",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weight_name": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.cycle_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "assert_true",
    "cost_func",
    "networkx.algorithms.tests.test_simple_paths.random",
    "networkx.complete_graph",
    "networkx.set_edge_attributes",
    "networkx.shortest_simple_paths"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path.cost_func": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_length_path": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.algorithms.tests.test_simple_paths.validate_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_simple_paths.validate_path": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "assert_equal",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_smetric.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smetric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smetric.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_smetric.test_normalized": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.s_metric",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_smetric.test_smetric": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.s_metric",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.tests.test_swap.random"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tests.test_swap.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "barabasi_albert_graph",
    "connected_double_edge_swap",
    "is_connected",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_not_connected": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_small": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_degree_seq_c4": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_equal",
    "cycle_graph",
    "double_edge_swap",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equal",
    "barabasi_albert_graph",
    "double_edge_swap",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_small": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_swap.test_double_edge_swap_tries": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_triads": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_triads.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tests.test_triads.test_triadic_census": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.triadic_census",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.closeness_vitality",
    "networkx.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted_digraph": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted_digraph": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted_multidigraph": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.MultiDiGraph",
    "networkx.closeness_vitality"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tests.test_vitality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.breadth_first_search": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.breadth_first_search.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.breadth_first_search.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_edges": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "StopIteration",
    "collections.deque",
    "isinstance",
    "neighbors",
    "networkx.DiGraph",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_successors": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "list",
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.bfs_tree": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.traversal.breadth_first_search.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.breadth_first_search.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.breadth_first_search.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.breadth_first_search.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.depth_first_search": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.depth_first_search.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.depth_first_search.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.depth_first_search.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_edges": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "StopIteration",
    "iter",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_predecessors": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "dict",
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_successors": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "list",
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.dfs_tree": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.traversal.depth_first_search.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.depth_first_search.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.edgedfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.edgedfs.FORWARD": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.REVERSE": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.edgedfs.edge_dfs": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "StopIteration",
    "key",
    "list",
    "networkx.algorithms.traversal.edgedfs.helper_funcs",
    "next",
    "out_edges",
    "set",
    "tailhead"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.helper_funcs": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.helper_funcs.key": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "frozenset"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.helper_funcs.out_edges": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.edgedfs.REVERSE"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.edgedfs.helper_funcs.traversed_tailhead": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.algorithms.traversal.edgedfs.REVERSE"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.setUp": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_reverse": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.bfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree_isolates": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.bfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.bfs_successors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_bfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_dfs": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.dfs_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.dfs_labeled_edges"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.dfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree_isolates": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.dfs_tree",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.dfs_postorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.dfs_predecessors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.dfs_preorder_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.dfs_successors"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_dfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.edge_dfs",
    "networkx.algorithms.edgedfs.FORWARD",
    "networkx.algorithms.edgedfs.REVERSE"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.setUp": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph2": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore2": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev2": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.DiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_empty": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_graph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_ignore": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.FORWARD",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_rev": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiDiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.REVERSE",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multigraph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.MultiGraph",
    "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.edge_dfs": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.algorithms.traversal.tests.test_edgedfs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.branchings": {
  "data": {
   "symbols_in_volume": [
    "float",
    "networkx.algorithms.tree.branchings.docstring_arborescence",
    "networkx.algorithms.tree.branchings.docstring_branching",
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence",
    "set"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tree.branchings.Edmonds": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.Edmonds.__init__": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.random_string"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds._init": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "enumerate",
    "networkx.NetworkXException",
    "networkx.algorithms.tree.branchings.KINDS",
    "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey",
    "networkx.algorithms.tree.branchings._max_weight",
    "networkx.algorithms.tree.branchings._min_weight",
    "networkx.algorithms.tree.branchings.random_string",
    "networkx.utils.UnionFind",
    "trans"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "Exception",
    "StopIteration",
    "desired_edge",
    "is_branching",
    "is_root",
    "iter",
    "len",
    "list",
    "networkx.algorithms.tree.branchings.INF",
    "networkx.algorithms.tree.branchings.get_path",
    "next",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.desired_edge": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.INF"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.Edmonds.find_optimum.is_root": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.INF": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.KINDS": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.__init__": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edge": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edges_from": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edge_with_key": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edges_from": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_node": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_nodes_from": {
  "data": {
   "lineno": 253
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.STYLES": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.__all__": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings._max_weight": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings._min_weight": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.branching_weight": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.docstring_arborescence": {
  "data": {
   "lineno": 707
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.docstring_branching": {
  "data": {
   "lineno": 688
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.branchings.edge_subgraph": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.get_path": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "enumerate",
    "first_key",
    "networkx.shortest_path"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.get_path.first_key": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.greedy_branching": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "TypeError",
    "enumerate",
    "networkx.DiGraph",
    "networkx.NetworkXException",
    "networkx.algorithms.tree.branchings.KINDS",
    "networkx.algorithms.tree.branchings.random_string",
    "networkx.utils.UnionFind",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.maximum_branching": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.maximum_spanning_arborescence": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": [
    "is_arborescence",
    "networkx.algorithms.tree.branchings.Edmonds",
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_branching": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.Edmonds"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.minimum_spanning_arborescence": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "is_arborescence",
    "networkx.algorithms.tree.branchings.Edmonds",
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.branchings.random_string": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.random",
    "networkx.algorithms.tree.branchings.string",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.branchings.string": {
  "data": {
   "shadows": "string"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.recognition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.recognition.__all__": {
  "data": {
   "lineno": 85
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.recognition.__author__": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.recognition.is_arborescence": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.tree.recognition.is_tree",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_branching": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "max",
    "networkx.algorithms.tree.recognition.is_forest",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_forest": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "components",
    "len",
    "networkx.connected_component_subgraphs",
    "networkx.exception.NetworkXPointlessConcept",
    "networkx.weakly_connected_component_subgraphs"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.is_tree": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "is_connected",
    "len",
    "networkx.exception.NetworkXPointlessConcept",
    "networkx.is_connected",
    "networkx.is_weakly_connected"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.recognition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings": {
  "data": {
   "symbols_in_volume": [
    "int",
    "nose.SkipTest",
    "numpy.array"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_branchings.G1": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.from_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.G2": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.from_numpy_matrix",
    "numpy.nonzero"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.G_array": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.sorted_edges",
    "numpy.testing.assert_almost_equal",
    "print",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.branchings": {
  "data": {
   "shadows": "networkx.algorithms.tree.branchings"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.build_branching": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1a": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2b": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "networkx.algorithms.tree.tests.test_branchings.recognition": {
  "data": {
   "shadows": "networkx.algorithms.tree.recognition"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_branchings.sorted_edges": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxarbor": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxbranch": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds1_minbranch": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G_array",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1",
    "networkx.from_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxarbor": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxbranch": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.maximum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G2",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds2_minarbor": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch1": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch2": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.minimum_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max1": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max2": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_max3": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_min": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "networkx.algorithms.tree.branchings.greedy_branching",
    "networkx.algorithms.tree.tests.test_branchings.G1",
    "networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings",
    "networkx.algorithms.tree.tests.test_branchings.build_branching"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1a": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1b": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.greedy_subopt_branching_1b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mixed_nodetypes": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_mst": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "networkx.Graph",
    "networkx.algorithms.tree.branchings.minimum_spanning_arborescence",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_arborescence2": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_2"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching1": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_arborescence_1"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2a": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2a"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2b": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.tree.branchings.branching_weight",
    "networkx.algorithms.tree.recognition.is_arborescence",
    "networkx.algorithms.tree.tests.test_branchings.build_branching",
    "networkx.algorithms.tree.tests.test_branchings.optimal_branching_2b"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestDirectedTreeRecognition": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.compose",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_forest": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_true",
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_forest": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "assert_false",
    "networkx.is_forest"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_tree": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_false",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_tree": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_true",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.is_forest",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "networkx.is_tree",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_dag_nontree": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_directed_acyclic_graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_disconnected_graph": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "assert_false",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_emptybranch": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_multicycle": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.MultiDiGraph",
    "networkx.is_directed_acyclic_graph",
    "networkx.is_tree"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence1": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notarborescence2": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "assert_false",
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching1": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_false",
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_notbranching2": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "assert_false",
    "networkx.MultiDiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.tree.tests.test_recognition.test_path": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "assert_true",
    "networkx.DiGraph",
    "networkx.is_arborescence",
    "networkx.is_branching",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads": {
  "data": {
   "symbols_in_volume": [
    "enumerate",
    "networkx.algorithms.triads.TRIAD_NAMES",
    "networkx.algorithms.triads.TRICODES"
   ]
  },
  "type": "module"
 },
 "networkx.algorithms.triads.TRIAD_NAMES": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.TRICODES": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.TRICODE_TO_NAME": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.algorithms.triads.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.algorithms.triads._tricode": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.triads.triad_graphs": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "abc_graph",
    "networkx.algorithms.triads.TRIAD_NAMES"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.triad_graphs.abc_graph": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.triads.triadic_census": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.NetworkXError",
    "networkx.algorithms.triads.TRIAD_NAMES",
    "networkx.algorithms.triads.TRICODE_TO_NAME",
    "networkx.algorithms.triads._tricode",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.vitality": {
  "data": {},
  "type": "module"
 },
 "networkx.algorithms.vitality.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.algorithms.vitality.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.algorithms.vitality.closeness_vitality": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.algorithms.vitality.weiner_index"
   ]
  },
  "type": "function"
 },
 "networkx.algorithms.vitality.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.algorithms.vitality.weiner_index": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.single_source_dijkstra_path_length",
    "networkx.single_source_shortest_path_length",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.digraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.digraph.DiGraph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.classes.graph.Graph",
    "networkx.classes.graph.Graph.edges"
   ]
  },
  "type": "class"
 },
 "networkx.classes.digraph.DiGraph.__init__": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "ndf",
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edge": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_edges_from": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "AttributeError",
    "hasattr",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_node": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.add_nodes_from": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.clear": {
  "data": {
   "lineno": 1121
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.degree_iter": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.edges_iter": {
  "data": {
   "lineno": 776
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_predecessor": {
  "data": {
   "lineno": 736
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.has_successor": {
  "data": {
   "lineno": 729
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_degree": {
  "data": {
   "lineno": 1039,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_degree_iter": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_edges": {
  "data": {
   "lineno": 881,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.in_edges_iter": {
  "data": {
   "lineno": 848
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_directed": {
  "data": {
   "lineno": 1148
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.is_multigraph": {
  "data": {
   "lineno": 1143
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.out_degree": {
  "data": {
   "lineno": 1081,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.out_degree_iter": {
  "data": {
   "lineno": 990,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.predecessors": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.predecessors_iter": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edge": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_edges_from": {
  "data": {
   "lineno": 695
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_node": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.remove_nodes_from": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.reverse": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.subgraph": {
  "data": {
   "lineno": 1275
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.successors": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.successors_iter": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.to_directed": {
  "data": {
   "lineno": 1152,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.DiGraph.to_undirected": {
  "data": {
   "lineno": 1190,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.graph.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.digraph.Graph": {
  "data": {
   "shadows": "networkx.classes.graph.Graph"
  },
  "type": "import"
 },
 "networkx.classes.digraph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.digraph.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.classes.digraph.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.classes.digraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.digraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.function": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.function.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.classes.function.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.classes.function.all_neighbors": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "networkx.classes.function.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.common_neighbors": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.create_empty_copy": {
  "data": {
   "lineno": 243
  },
  "type": "function"
 },
 "networkx.classes.function.degree": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "networkx.classes.function.degree_histogram": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "list",
    "max",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.density": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "float",
    "networkx.classes.function.number_of_edges",
    "networkx.classes.function.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.edges": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.classes.function.edges_iter": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "networkx.classes.function.freeze": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.classes.function.frozen"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.frozen": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.get_edge_attributes": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.function.edges"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.get_node_attributes": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.info": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.NetworkXError",
    "str",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_directed": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "networkx.classes.function.is_empty": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_frozen": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_negatively_weighted": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": [
    "any",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.is_weighted": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "all",
    "networkx.NetworkXError",
    "networkx.classes.function.is_empty"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.classes.function.neighbors": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "networkx.classes.function.nodes": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "networkx.classes.function.nodes_iter": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "networkx.classes.function.non_edges": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "networkx.classes.function.nodes",
    "networkx.classes.function.non_neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.non_neighbors": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "networkx.classes.function.neighbors",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.classes.function.number_of_edges": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "networkx.classes.function.number_of_nodes": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "networkx.classes.function.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.function.set_edge_attributes": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "len",
    "networkx.classes.function.edges",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.set_node_attributes": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.function.subgraph": {
  "data": {
   "lineno": 220
  },
  "type": "function"
 },
 "networkx.classes.graph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.graph.DiGraph": {
  "data": {
   "shadows": "networkx.DiGraph"
  },
  "type": "import"
 },
 "networkx.classes.graph.Graph": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "dict",
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.graph.Graph.__contains__": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__getitem__": {
  "data": {
   "lineno": 379
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__init__": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "ndf",
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__iter__": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__len__": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.__str__": {
  "data": {
   "lineno": 314
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_cycle": {
  "data": {
   "lineno": 1832,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edge": {
  "data": {
   "lineno": 733,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_edges_from": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_node": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_nodes_from": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_path": {
  "data": {
   "lineno": 1806,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_star": {
  "data": {
   "lineno": 1777,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.add_weighted_edges_from": {
  "data": {
   "lineno": 878
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.adjacency_iter": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.adjacency_list": {
  "data": {
   "lineno": 1264,
   "symbols_in_volume": [
    "iter",
    "list",
    "map"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.clear": {
  "data": {
   "lineno": 1403
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.copy": {
  "data": {
   "lineno": 1424,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.degree": {
  "data": {
   "lineno": 1315,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.degree_iter": {
  "data": {
   "lineno": 1354,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.edges": {
  "data": {
   "lineno": 1086,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.edges_iter": {
  "data": {
   "lineno": 1139
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.get_edge_data": {
  "data": {
   "lineno": 1215,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_edge": {
  "data": {
   "lineno": 980,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.has_node": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_directed": {
  "data": {
   "lineno": 1454
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.is_multigraph": {
  "data": {
   "lineno": 1450
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.name": {
  "data": {
   "lineno": 310
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter": {
  "data": {
   "lineno": 1858,
   "symbols_in_volume": [
    "bunch_iter",
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nbunch_iter.bunch_iter": {
  "data": {
   "lineno": 1904,
   "symbols_in_volume": [
    "TypeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.neighbors": {
  "data": {
   "lineno": 1022,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.neighbors_iter": {
  "data": {
   "lineno": 1063,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nodes": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nodes_iter": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.nodes_with_selfloops": {
  "data": {
   "lineno": 1608
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_edges": {
  "data": {
   "lineno": 1740,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_nodes": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.number_of_selfloops": {
  "data": {
   "lineno": 1677,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.order": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edge": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_edges_from": {
  "data": {
   "lineno": 945
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_node": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.remove_nodes_from": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "KeyError",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.selfloop_edges": {
  "data": {
   "lineno": 1633
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.size": {
  "data": {
   "lineno": 1701,
   "symbols_in_volume": [
    "float",
    "int",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.subgraph": {
  "data": {
   "lineno": 1548
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_directed": {
  "data": {
   "lineno": 1458,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.Graph.to_undirected": {
  "data": {
   "lineno": 1511,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.graph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.graph.__author__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.classes.graph.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.classes.graph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.graph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.multidigraph.DiGraph": {
  "data": {
   "shadows": "networkx.classes.digraph.DiGraph"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.Graph": {
  "data": {
   "shadows": "networkx.classes.graph.Graph"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.MultiDiGraph": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.digraph.DiGraph",
    "networkx.classes.multigraph.MultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.multidigraph.MultiDiGraph.__init__": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "networkx.classes.digraph.DiGraph.__init__"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.add_edge": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.degree_iter": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.edges_iter": {
  "data": {
   "lineno": 410
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_degree_iter": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_edges": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.in_edges_iter": {
  "data": {
   "lineno": 524
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_directed": {
  "data": {
   "lineno": 754
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.is_multigraph": {
  "data": {
   "lineno": 750
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.out_degree_iter": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.out_edges": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.remove_edge": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.reverse": {
  "data": {
   "lineno": 923,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.subgraph": {
  "data": {
   "lineno": 856
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.to_directed": {
  "data": {
   "lineno": 758,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiDiGraph.to_undirected": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.multigraph.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multidigraph.MultiGraph": {
  "data": {
   "shadows": "networkx.classes.multigraph.MultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.classes.multidigraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.multidigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.multigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.multigraph.Graph": {
  "data": {
   "shadows": "networkx.classes.graph.Graph"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiDiGraph": {
  "data": {
   "shadows": "networkx.classes.multidigraph.MultiDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.MultiGraph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "dict",
    "networkx.classes.graph.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.multigraph.MultiGraph.__init__": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "networkx.classes.graph.Graph.__init__"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edge": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.add_edges_from": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.degree_iter": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.edges": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.edges_iter": {
  "data": {
   "lineno": 641
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.get_edge_data": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.has_edge": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_directed": {
  "data": {
   "lineno": 843
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.is_multigraph": {
  "data": {
   "lineno": 839
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.number_of_edges": {
  "data": {
   "lineno": 968,
   "symbols_in_volume": [
    "KeyError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edge": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.remove_edges_from": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.selfloop_edges": {
  "data": {
   "lineno": 900
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.subgraph": {
  "data": {
   "lineno": 1006
  },
  "type": "function"
 },
 "networkx.classes.multigraph.MultiGraph.to_directed": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.multidigraph.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.multigraph.NetworkXError": {
  "data": {
   "shadows": "networkx.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.classes.multigraph.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.multigraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.ordered": {
  "data": {
   "symbols_in_volume": [
    "networkx.classes.ordered.__all__"
   ]
  },
  "type": "module"
 },
 "networkx.classes.ordered.OrderedDiGraph": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "networkx.classes.ordered.OrderedGraph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiDiGraph": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.OrderedMultiGraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "collections.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.ordered.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.classes.tests.historical_tests": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.classes.tests.historical_tests.networkx",
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "TypeError",
    "assert_false",
    "assert_raises",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "assert_false",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "list",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "assert_true",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assert_false",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "assert_true",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_contains": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "assert_false",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_copy": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree2": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "list",
    "networkx.classes.tests.historical_tests.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_edges_iter_nbunch": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_equals",
    "list",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_equals",
    "assert_raises",
    "networkx.classes.tests.historical_tests.networkx",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "assert_true",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_iterators": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.historical_tests.networkx",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_name": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "assert_true",
    "set",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "assert_true",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "assert_true",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "assert_equal",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.historical_tests.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_error": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "list",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "assert_true",
    "networkx.classes.tests.historical_tests.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_order_size": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "TypeError",
    "assert_false",
    "assert_raises",
    "assert_true",
    "list",
    "set",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "assert_true",
    "iter",
    "networkx.classes.tests.historical_tests.networkx",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "assert_not_equal",
    "assert_true",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "assert_not_equal",
    "assert_true",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.historical_tests.cnlti": {
  "data": {
   "shadows": "networkx.convert_node_labels_to_integers"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.historical_tests.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph.BaseDiGraphTester",
    "test_graph.BaseAttrGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseAttrGraphTester": {
  "data": {
   "shadows": "test_graph.BaseAttrGraphTester"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test_graph.BaseGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "list",
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree_iter": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_data": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_iter": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "iter",
    "list",
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter_weighted": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_iter_dir": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "iter",
    "list",
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter_weighted": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter_dir": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors_iter": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors_iter": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "assert_false",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.BaseGraphTester": {
  "data": {
   "shadows": "test_graph.BaseGraphTester"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph.BaseAttrDiGraphTester",
    "test_graph.TestGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.setUp": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_data_input": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph.TestGraph": {
  "data": {
   "shadows": "test_graph.TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_digraph_historical.HistoricalTests": {
  "data": {
   "shadows": "historical_tests.HistoricalTests"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "historical_tests.HistoricalTests"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "historical_tests.HistoricalTests.setUp",
    "networkx.classes.tests.test_digraph_historical.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "assert_true",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_digraph_historical.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_digraph_historical.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_digraph_historical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors": {
  "data": {
   "lineno": 273
  },
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setUp": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "networkx.common_neighbors"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.setUp.test_func": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_K5": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_P3": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_S4": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom1": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_custom2": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_digraph": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestCommonNeighbors.test_nonexistent_nodes": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.common_neighbors",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_function.TestFunction.setUp": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "list",
    "networkx.DiGraph",
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_create_empty_copy": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.create_empty_copy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_degree_histogram": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.degree_histogram"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.density"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_density_selfloop": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.density"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edges": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.edges"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_edges_iter": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.edges_iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_freeze": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.info",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_info_digraph": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.info"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_directed": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.is_directed"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_frozen": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.freeze",
    "networkx.is_frozen"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_negatively_weighted": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "assert_false",
    "assert_raises",
    "assert_true",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.is_negatively_weighted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_is_weighted": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "assert_false",
    "assert_raises",
    "assert_true",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.is_weighted",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_neighbors": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.classes.tests.test_function.random",
    "networkx.complete_graph",
    "networkx.neighbors",
    "networkx.path_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_nodes": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_nodes_iter": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.nodes_iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_edges": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "list",
    "networkx.DiGraph",
    "networkx.complete_graph",
    "networkx.non_edges",
    "networkx.path_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_non_neighbors": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.Graph",
    "networkx.classes.tests.test_function.random",
    "networkx.complete_graph",
    "networkx.non_neighbors",
    "networkx.path_graph",
    "networkx.star_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_edges": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.number_of_edges"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_number_of_nodes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.TestFunction.test_subgraph": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.subgraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_function.test_get_edge_attributes": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.get_edge_attributes",
    "networkx.path_graph",
    "networkx.set_edge_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_get_node_attributes": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.get_node_attributes",
    "networkx.path_graph",
    "networkx.set_node_attributes"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_is_empty": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.is_empty",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_edge_attributes_multi": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "len",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.set_edge_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_function.test_set_node_attributes": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.path_graph",
    "networkx.set_node_attributes",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.BaseGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict": {
  "data": {
   "lineno": 242
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy": {
  "data": {
   "lineno": 262
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict": {
  "data": {
   "lineno": 267
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_attr_dict_not_dict": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy": {
  "data": {
   "lineno": 220
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy_attr": {
  "data": {
   "lineno": 228
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "assert_equal",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_add_cycle": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_add_path": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_add_star": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_adjacency_list": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_contains": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_degree": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "list",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_degree_iter": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_edges": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_edges_iter": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "list",
    "networkx.classes.tests.test_graph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_has_node": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "list",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors_iter": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nodes": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_nodes_iter": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_order": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "assert_equal",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "assert_equal",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_size": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.BaseGraphTester.test_weighted_degree": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_equal",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.BaseAttrGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph.TestGraph.setUp": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edge": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_edges_from": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_node": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_adjacency_iter": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "assert_equal",
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_clear": {
  "data": {
   "lineno": 589,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_data_input": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_edges_data": {
  "data": {
   "lineno": 594,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_get_edge_data": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_getitem": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edge": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_node": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_graph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph_historical": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_graph_historical.HistoricalTests": {
  "data": {
   "shadows": "historical_tests.HistoricalTests"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "historical_tests.HistoricalTests"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_graph_historical.TestGraphHistorical.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "historical_tests.HistoricalTests.setUp",
    "networkx.classes.tests.test_graph_historical.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_graph_historical.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_graph_historical.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test_multigraph.BaseMultiGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "iter",
    "list",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree_iter": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_iter": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "iter",
    "list",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree_iter": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_iter": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "iter",
    "list",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree_iter": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "assert_equal",
    "dict",
    "iter",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_iter": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors_iter": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors_iter": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "assert_false",
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.BaseMultiGraphTester": {
  "data": {
   "shadows": "test_multigraph.BaseMultiGraphTester"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester",
    "test_multigraph.TestMultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setUp": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multidigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multidigraph.TestMultiGraph": {
  "data": {
   "shadows": "test_multigraph.TestMultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multidigraph.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_multigraph.BaseAttrGraphTester": {
  "data": {
   "shadows": "test_graph.BaseAttrGraphTester"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "test_graph.BaseAttrGraphTester"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency_iter": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_equal",
    "dict"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops2": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestGraph": {
  "data": {
   "shadows": "test_graph.TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multigraph.BaseMultiGraphTester",
    "test_graph.TestGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.setUp": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "KeyError",
    "assert_equal",
    "assert_raises",
    "networkx.classes.tests.test_multigraph.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_multigraph.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_ordered": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.test_ordered.SmokeTestOrdered": {
  "data": {
   "lineno": 3,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_ordered.SmokeTestOrdered.test_digraph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.OrderedDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.SmokeTestOrdered.test_graph": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.OrderedGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.SmokeTestOrdered.test_multidigraph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.OrderedMultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.SmokeTestOrdered.test_multigraph": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.OrderedMultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_ordered.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "nose.SkipTest"
   ]
  },
  "type": "module"
 },
 "networkx.classes.tests.test_special.OrderedDiGraphTester": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "test_digraph.TestDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedDiGraphTester.setUp": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "test_graph.TestGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.OrderedDiGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "ordereddict.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedDict": {
  "data": {
   "shadows": "ordereddict.OrderedDict"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.OrderedGraphTester": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "test_graph.TestGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedGraphTester.setUp": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "test_graph.TestGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.OrderedGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.Graph",
    "ordereddict.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedMultiDiGraphTester": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "test_multidigraph.TestMultiDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedMultiDiGraphTester.setUp": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "test_multidigraph.TestMultiDiGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.OrderedMultiDiGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "ordereddict.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedMultiGraphTester": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "test_multigraph.TestMultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.OrderedMultiGraphTester.setUp": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "test_multigraph.TestMultiGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.OrderedMultiGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "ordereddict.OrderedDict"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.SpecialDiGraphTester": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "test_digraph.TestDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.SpecialDiGraphTester.setUp": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "test_digraph.TestDiGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.SpecialGraphTester": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "test_graph.TestGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.SpecialGraphTester.setUp": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.Graph",
    "test_graph.TestGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.SpecialMultiDiGraphTester": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "test_multidigraph.TestMultiDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.SpecialMultiDiGraphTester.setUp": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "test_multidigraph.TestMultiDiGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.SpecialMultiGraphTester": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "test_multigraph.TestMultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.SpecialMultiGraphTester.setUp": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "test_multigraph.TestMultiGraph.setUp"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.TestDiGraph": {
  "data": {
   "shadows": "test_digraph.TestDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.TestGraph": {
  "data": {
   "shadows": "test_graph.TestGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.TestMultiDiGraph": {
  "data": {
   "shadows": "test_multidigraph.TestMultiDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.TestMultiGraph": {
  "data": {
   "shadows": "test_multigraph.TestMultiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_special.ThinDiGraphTester": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "test_digraph.TestDiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.ThinDiGraphTester.setUp": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.ThinDiGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.ThinGraphTester": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "test_graph.TestGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.ThinGraphTester.setUp": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "networkx.classes.tests.test_special.ThinGraphTester.setUp.MyGraph": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_special.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_timing": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "networkx.classes.tests.test_timing.Benchmark",
    "networkx.classes.tests.test_timing.all_tests",
    "networkx.classes.tests.test_timing.b",
    "networkx.classes.tests.test_timing.basic_setup",
    "networkx.classes.tests.test_timing.classes",
    "networkx.classes.tests.test_timing.elist_setup"
   ]
  },
  "type": "module"
 },
 "networkx.classes.tests.test_timing.Benchmark": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.test_timing.Benchmark.__init__": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "networkx.classes.tests.test_timing.all_tests"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_timing.Benchmark.run": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "len",
    "list",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_timing.Benchmark.time_me": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "eval",
    "min",
    "networkx.classes.tests.test_timing.graph_type",
    "timeit.Timer"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.test_timing.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_timing.Timer": {
  "data": {
   "shadows": "timeit.Timer"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_timing.all_tests": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.b": {
  "data": {
   "lineno": 164
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.basic_setup": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.classes": {
  "data": {
   "lineno": 161
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.elist_setup": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.graph_type": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.classes.tests.test_timing.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.test_timing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses": {
  "data": {},
  "type": "module"
 },
 "networkx.classes.tests.timingclasses.DiGraph": {
  "data": {
   "shadows": "networkx.DiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.MultiDiGraph": {
  "data": {
   "shadows": "networkx.classes.multidigraph.MultiDiGraph"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph": {
  "data": {
   "lineno": 1820,
   "symbols_in_volume": [
    "networkx.classes.tests.timingclasses.TimingGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.__init__": {
  "data": {
   "lineno": 1968,
   "symbols_in_volume": [
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.add_edge": {
  "data": {
   "lineno": 2228,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.add_edges_from": {
  "data": {
   "lineno": 2300,
   "symbols_in_volume": [
    "AttributeError",
    "hasattr",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.add_node": {
  "data": {
   "lineno": 2019,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.add_nodes_from": {
  "data": {
   "lineno": 2078,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.clear": {
  "data": {
   "lineno": 2828
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.degree_iter": {
  "data": {
   "lineno": 2595,
   "symbols_in_volume": [
    "iter",
    "len",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.edges_iter": {
  "data": {
   "lineno": 2494
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.has_predecessor": {
  "data": {
   "lineno": 2454
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.has_successor": {
  "data": {
   "lineno": 2447
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.in_degree": {
  "data": {
   "lineno": 2746,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.in_degree_iter": {
  "data": {
   "lineno": 2648,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.in_edges": {
  "data": {
   "lineno": 2586,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.in_edges_iter": {
  "data": {
   "lineno": 2553
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.is_directed": {
  "data": {
   "lineno": 2855
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.is_multigraph": {
  "data": {
   "lineno": 2850
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.out_degree": {
  "data": {
   "lineno": 2788,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.out_degree_iter": {
  "data": {
   "lineno": 2697,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.predecessors": {
  "data": {
   "lineno": 2485,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.predecessors_iter": {
  "data": {
   "lineno": 2471,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.remove_edge": {
  "data": {
   "lineno": 2379,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.remove_edges_from": {
  "data": {
   "lineno": 2413
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.remove_node": {
  "data": {
   "lineno": 2144,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.remove_nodes_from": {
  "data": {
   "lineno": 2188,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.reverse": {
  "data": {
   "lineno": 2951,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.subgraph": {
  "data": {
   "lineno": 2978
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.successors": {
  "data": {
   "lineno": 2478,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.successors_iter": {
  "data": {
   "lineno": 2461,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.to_directed": {
  "data": {
   "lineno": 2859,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingDiGraph.to_undirected": {
  "data": {
   "lineno": 2897,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.tests.timingclasses.TimingGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__contains__": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__getitem__": {
  "data": {
   "lineno": 290
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__init__": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "networkx.convert.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__iter__": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__len__": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.__str__": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_cycle": {
  "data": {
   "lineno": 1723,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_edge": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_edges_from": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_node": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "AttributeError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_nodes_from": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_path": {
  "data": {
   "lineno": 1697,
   "symbols_in_volume": [
    "list",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_star": {
  "data": {
   "lineno": 1668,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.add_weighted_edges_from": {
  "data": {
   "lineno": 792
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.adjacency_iter": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.adjacency_list": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": [
    "iter",
    "list",
    "map"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.clear": {
  "data": {
   "lineno": 1300
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.copy": {
  "data": {
   "lineno": 1321,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.degree": {
  "data": {
   "lineno": 1211,
   "symbols_in_volume": [
    "dict",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.degree_iter": {
  "data": {
   "lineno": 1250,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.edges": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.edges_iter": {
  "data": {
   "lineno": 1049
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.get_edge_data": {
  "data": {
   "lineno": 1111,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.has_edge": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.has_node": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.is_directed": {
  "data": {
   "lineno": 1352
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.is_multigraph": {
  "data": {
   "lineno": 1347
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.name": {
  "data": {
   "lineno": 221
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.nbunch_iter": {
  "data": {
   "lineno": 1750,
   "symbols_in_volume": [
    "bunch_iter",
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.nbunch_iter.bunch_iter": {
  "data": {
   "lineno": 1796,
   "symbols_in_volume": [
    "TypeError",
    "networkx.classes.tests.timingclasses.sys",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.neighbors": {
  "data": {
   "lineno": 940,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.neighbors_iter": {
  "data": {
   "lineno": 981,
   "symbols_in_volume": [
    "KeyError",
    "iter",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.nodes": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.nodes_iter": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.nodes_with_selfloops": {
  "data": {
   "lineno": 1503
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.number_of_edges": {
  "data": {
   "lineno": 1630,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.number_of_nodes": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.number_of_selfloops": {
  "data": {
   "lineno": 1566,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.order": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.remove_edge": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": [
    "KeyError",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.remove_edges_from": {
  "data": {
   "lineno": 861
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.remove_node": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "KeyError",
    "list",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.remove_nodes_from": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": [
    "KeyError",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.selfloop_edges": {
  "data": {
   "lineno": 1528
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.size": {
  "data": {
   "lineno": 1591,
   "symbols_in_volume": [
    "float",
    "int",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.subgraph": {
  "data": {
   "lineno": 1442
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.to_directed": {
  "data": {
   "lineno": 1356,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingGraph.to_undirected": {
  "data": {
   "lineno": 1405,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph": {
  "data": {
   "lineno": 4001,
   "symbols_in_volume": [
    "networkx.classes.tests.timingclasses.TimingDiGraph",
    "networkx.classes.tests.timingclasses.TimingMultiGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.add_edge": {
  "data": {
   "lineno": 4157,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.degree_iter": {
  "data": {
   "lineno": 4481,
   "symbols_in_volume": [
    "iter",
    "len",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.edges_iter": {
  "data": {
   "lineno": 4312
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_degree_iter": {
  "data": {
   "lineno": 4540,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_edges": {
  "data": {
   "lineno": 4456,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_edges_iter": {
  "data": {
   "lineno": 4413
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.is_directed": {
  "data": {
   "lineno": 4646
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.is_multigraph": {
  "data": {
   "lineno": 4642
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.out_degree_iter": {
  "data": {
   "lineno": 4592,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.out_edges": {
  "data": {
   "lineno": 4380,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.remove_edge": {
  "data": {
   "lineno": 4249,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.reverse": {
  "data": {
   "lineno": 4810,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.subgraph": {
  "data": {
   "lineno": 4743
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.to_directed": {
  "data": {
   "lineno": 4650,
   "symbols_in_volume": [
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiDiGraph.to_undirected": {
  "data": {
   "lineno": 4694,
   "symbols_in_volume": [
    "MultiGraph",
    "copy.deepcopy"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph": {
  "data": {
   "lineno": 3044,
   "symbols_in_volume": [
    "networkx.classes.tests.timingclasses.TimingGraph"
   ]
  },
  "type": "class"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.add_edge": {
  "data": {
   "lineno": 3203,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.add_edges_from": {
  "data": {
   "lineno": 3294,
   "symbols_in_volume": [
    "AttributeError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.degree_iter": {
  "data": {
   "lineno": 3726,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.edges": {
  "data": {
   "lineno": 3544,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.edges_iter": {
  "data": {
   "lineno": 3595
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.get_edge_data": {
  "data": {
   "lineno": 3672,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.has_edge": {
  "data": {
   "lineno": 3490,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.is_directed": {
  "data": {
   "lineno": 3786
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.is_multigraph": {
  "data": {
   "lineno": 3782
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.number_of_edges": {
  "data": {
   "lineno": 3898,
   "symbols_in_volume": [
    "KeyError",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.remove_edge": {
  "data": {
   "lineno": 3380,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.remove_edges_from": {
  "data": {
   "lineno": 3444,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.selfloop_edges": {
  "data": {
   "lineno": 3841
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.subgraph": {
  "data": {
   "lineno": 3937
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.TimingMultiGraph.to_directed": {
  "data": {
   "lineno": 3790,
   "symbols_in_volume": [
    "copy.deepcopy",
    "networkx.classes.multidigraph.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.classes.tests.timingclasses.__author__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.classes.tests.timingclasses.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.classes.tests.timingclasses.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.convert": {
  "data": {},
  "type": "module"
 },
 "networkx.convert.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.convert.__author__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "networkx.convert._prep_create_using": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "TypeError",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.convert.convert_to_directed": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "networkx.convert.convert_to_undirected": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "networkx.convert.from_dict_of_dicts": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "networkx.convert._prep_create_using",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.convert.from_dict_of_lists": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "networkx.convert._prep_create_using"
   ]
  },
  "type": "function"
 },
 "networkx.convert.from_edgelist": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "networkx.convert._prep_create_using"
   ]
  },
  "type": "function"
 },
 "networkx.convert.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.convert.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.convert.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.convert.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.convert.to_dict_of_dicts": {
  "data": {
   "lineno": 247
  },
  "type": "function"
 },
 "networkx.convert.to_dict_of_lists": {
  "data": {
   "lineno": 185
  },
  "type": "function"
 },
 "networkx.convert.to_edgelist": {
  "data": {
   "lineno": 365
  },
  "type": "function"
 },
 "networkx.convert.to_networkx_graph": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "ImportError",
    "ImportWarning",
    "TypeError",
    "dict",
    "hasattr",
    "isinstance",
    "list",
    "networkx.NetworkXError",
    "networkx.convert.from_dict_of_dicts",
    "networkx.convert.from_dict_of_lists",
    "networkx.convert.from_edgelist",
    "networkx.convert.numpy",
    "networkx.convert.warnings",
    "networkx.from_numpy_matrix",
    "networkx.from_pandas_dataframe",
    "networkx.from_scipy_sparse_matrix",
    "networkx.nx_agraph.from_agraph",
    "pandas.DataFrame",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.convert.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.convert_matrix": {
  "data": {},
  "type": "module"
 },
 "networkx.convert_matrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.convert_matrix.__all__": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "networkx.convert_matrix.__author__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "networkx.convert_matrix._coo_gen_triples": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._csc_gen_triples": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._csr_gen_triples": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._dok_gen_triples": {
  "data": {
   "lineno": 764
  },
  "type": "function"
 },
 "networkx.convert_matrix._generate_weighted_edges": {
  "data": {
   "lineno": 773,
   "symbols_in_volume": [
    "networkx.convert_matrix._coo_gen_triples",
    "networkx.convert_matrix._csc_gen_triples",
    "networkx.convert_matrix._csr_gen_triples",
    "networkx.convert_matrix._dok_gen_triples"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix._prep_create_using": {
  "data": {
   "shadows": "networkx.convert._prep_create_using"
  },
  "type": "import"
 },
 "networkx.convert_matrix.from_numpy_matrix": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "bool",
    "chain",
    "chr",
    "complex",
    "dict",
    "float",
    "int",
    "networkx.NetworkXError",
    "networkx.convert._prep_create_using",
    "networkx.convert_matrix.itertools",
    "numpy.asarray",
    "python_type",
    "range",
    "sorted",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_pandas_dataframe": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "enumerate",
    "isinstance",
    "list",
    "networkx.convert._prep_create_using",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.from_scipy_sparse_matrix": {
  "data": {
   "lineno": 790,
   "symbols_in_volume": [
    "chain",
    "networkx.NetworkXError",
    "networkx.convert._prep_create_using",
    "networkx.convert_matrix._generate_weighted_edges",
    "networkx.convert_matrix.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.convert_matrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.convert_matrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.convert_matrix.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.convert_matrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.convert_matrix.pandas": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.convert_matrix.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.convert_matrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.convert_matrix.setup_module": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.convert_matrix.to_numpy_matrix": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "dict",
    "len",
    "max",
    "min",
    "networkx.NetworkXError",
    "numpy.asmatrix",
    "numpy.isnan",
    "numpy.nan",
    "numpy.nanmax",
    "numpy.nanmin",
    "numpy.nansum",
    "numpy.zeros",
    "op",
    "range",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_numpy_recarray": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "dict",
    "float",
    "len",
    "networkx.NetworkXError",
    "networkx.utils.not_implemented_for",
    "numpy.recarray",
    "numpy.zeros",
    "range",
    "set",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_pandas_dataframe": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.convert_matrix.to_numpy_matrix",
    "pandas.DataFrame",
    "set",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.to_scipy_sparse_matrix": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "format",
    "len",
    "networkx.NetworkXError",
    "range",
    "scipy.sparse.coo_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.convert_matrix.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.drawing": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_agraph": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_agraph.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "networkx.drawing.nx_agraph.display_pygraphviz": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "format",
    "networkx.drawing.nx_agraph.os",
    "networkx.utils.default_opener"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.from_agraph": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "dict",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.empty_graph",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.graphviz_layout": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "networkx.drawing.nx_agraph.pygraphviz_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.pygraphviz": {
  "data": {
   "shadows": "pygraphviz"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.pygraphviz_layout": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "ImportError",
    "float",
    "networkx.drawing.nx_agraph.pygraphviz",
    "networkx.drawing.nx_agraph.to_agraph",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.read_dot": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "ImportError",
    "networkx.drawing.nx_agraph.from_agraph",
    "networkx.drawing.nx_agraph.pygraphviz"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.setup_module": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.nx_agraph.to_agraph": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "networkx.drawing.nx_agraph.pygraphviz",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "clean_attrs",
    "func",
    "hasattr",
    "len",
    "networkx.NetworkXException",
    "networkx.drawing.nx_agraph.display_pygraphviz",
    "networkx.drawing.nx_agraph.tempfile",
    "networkx.drawing.nx_agraph.to_agraph",
    "networkx.utils.open_file",
    "str",
    "update_attrs"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.clean_attrs": {
  "data": {
   "lineno": 348
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.func": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.view_pygraphviz.update_attrs": {
  "data": {
   "lineno": 340
  },
  "type": "function"
 },
 "networkx.drawing.nx_agraph.write_dot": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "ImportError",
    "networkx.drawing.nx_agraph.to_agraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot": {
  "data": {
   "symbols_in_volume": [
    "NameError",
    "str"
   ]
  },
  "type": "module"
 },
 "networkx.drawing.nx_pydot.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.drawing.nx_pydot.basestring": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "networkx.drawing.nx_pydot.from_pydot": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "isinstance",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.drawing.nx_pydot.basestring"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.graphviz_layout": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "networkx.drawing.nx_pydot.pydot_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.networkx_from_pydot": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "DeprecationWarning",
    "networkx.drawing.nx_pydot.from_pydot",
    "warnings.warn"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.pydot_from_networkx": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "DeprecationWarning",
    "networkx.drawing.nx_pydot.to_pydot",
    "warnings.warn"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.pydot_layout": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "float",
    "isinstance",
    "list",
    "networkx.drawing.nx_pydot.pydotplus",
    "networkx.drawing.nx_pydot.to_pydot",
    "networkx.utils.make_str",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.pydotplus": {
  "data": {
   "shadows": "pydotplus"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.read_dot": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "networkx.drawing.nx_pydot.from_pydot",
    "networkx.drawing.nx_pydot.pydotplus",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.setup_module": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "ImportError",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.to_pydot": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "networkx.drawing.nx_pydot.pydotplus",
    "networkx.utils.make_str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pydot.warn": {
  "data": {
   "shadows": "warnings.warn"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pydot.write_dot": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.drawing.nx_pydot.to_pydot",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.nx_pylab.Colormap": {
  "data": {
   "shadows": "matplotlib.colors.Colormap"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.LineCollection": {
  "data": {
   "shadows": "matplotlib.collections.LineCollection"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.drawing.nx_pylab.cb": {
  "data": {
   "shadows": "matplotlib.cbook"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.circular_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.circular_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.colorConverter": {
  "data": {
   "shadows": "matplotlib.colors.colorConverter"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.draw": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "matplotlib.pyplot.draw_if_interactive",
    "matplotlib.pyplot.gcf",
    "matplotlib.pyplot.hold",
    "matplotlib.pyplot.ishold",
    "networkx.drawing.nx_pylab.draw_networkx",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_circular": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": [
    "networkx.drawing.layout.circular_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_graphviz": {
  "data": {
   "lineno": 970,
   "symbols_in_volume": [
    "networkx.drawing.graphviz_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "matplotlib.pyplot.draw_if_interactive",
    "networkx.drawing.nx_pylab.draw_networkx_edges",
    "networkx.drawing.nx_pylab.draw_networkx_labels",
    "networkx.drawing.nx_pylab.draw_networkx_nodes",
    "networkx.drawing.spring_layout",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edge_labels": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "dict",
    "matplotlib.cbook.is_string_like",
    "matplotlib.pyplot.gca",
    "networkx.drawing.nx_pylab.numpy",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_edges": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "ValueError",
    "float",
    "isinstance",
    "len",
    "matplotlib.cbook.is_numlike",
    "matplotlib.cbook.is_string_like",
    "matplotlib.cbook.iterable",
    "matplotlib.collections.LineCollection",
    "matplotlib.colors.Colormap",
    "matplotlib.colors.colorConverter.to_rgba",
    "matplotlib.pyplot.gca",
    "networkx.drawing.nx_pylab.numpy",
    "print",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_labels": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "dict",
    "matplotlib.cbook.is_string_like",
    "matplotlib.pyplot.gca",
    "print",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_networkx_nodes": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "ImportError",
    "KeyError",
    "RuntimeError",
    "ValueError",
    "len",
    "matplotlib.pyplot.gca",
    "networkx.NetworkXError",
    "networkx.drawing.nx_pylab.numpy",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_nx": {
  "data": {
   "lineno": 988,
   "symbols_in_volume": [
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_random": {
  "data": {
   "lineno": 903,
   "symbols_in_volume": [
    "networkx.drawing.layout.random_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_shell": {
  "data": {
   "lineno": 951,
   "symbols_in_volume": [
    "networkx.drawing.layout.shell_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spectral": {
  "data": {
   "lineno": 919,
   "symbols_in_volume": [
    "networkx.drawing.layout.spectral_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.draw_spring": {
  "data": {
   "lineno": 935,
   "symbols_in_volume": [
    "networkx.drawing.layout.spring_layout",
    "networkx.drawing.nx_pylab.draw"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.matplotlib": {
  "data": {
   "shadows": "matplotlib"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.mpl": {
  "data": {
   "shadows": "matplotlib"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.random_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.random_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.setup_module": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": [
    "networkx.drawing.nx_pylab.matplotlib",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.nx_pylab.shell_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.shell_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.spectral_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.spectral_layout"
  },
  "type": "import"
 },
 "networkx.drawing.nx_pylab.spring_layout": {
  "data": {
   "shadows": "networkx.drawing.layout.spring_layout"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.tests.test_agraph.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.drawing.nx_agraph.write_dot",
    "networkx.drawing.tests.test_agraph.os",
    "networkx.drawing.tests.test_agraph.tempfile",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.read_dot",
    "networkx.nx_agraph.to_agraph",
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.assert_equal": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.build_graph": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.setupClass": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.testDirected": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.testMultiDirected": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "networkx.MultiDiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.testMultiUndirected": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.testUndirected": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_name": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.nx_agraph.from_agraph",
    "networkx.nx_agraph.to_agraph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_agraph.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.pygraphviz": {
  "data": {
   "shadows": "pygraphviz"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_agraph.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.tests.test_layout.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.TestLayout": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_layout.TestLayout.check_scale_and_center": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "list",
    "networkx.drawing.tests.test_layout.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.setUp": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.grid_2d_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.setupClass": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "networkx.drawing.layout._fruchterman_reingold",
    "networkx.to_numpy_matrix",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "ImportError",
    "networkx.drawing.layout._sparse_fruchterman_reingold",
    "networkx.drawing.layout._sparse_spectral",
    "networkx.to_scipy_sparse_matrix",
    "nose.SkipTest",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_empty_graph": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_scale_and_center_arg": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.complete_graph",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_shell_layout": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.shell_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_single_node": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_int": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_smoke_string": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.circular_layout",
    "networkx.fruchterman_reingold_layout",
    "networkx.random_layout",
    "networkx.shell_layout",
    "networkx.spectral_layout",
    "networkx.spring_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spectral_for_small_graphs": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.spectral_layout"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.TestLayout.test_spring_args": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "networkx.complete_graph",
    "networkx.spring_layout",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_layout.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_layout.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.tests.test_pydot.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.TestPydot": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.pydot_checks": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.drawing.tests.test_pydot.pydotplus",
    "networkx.drawing.tests.test_pydot.tempfile",
    "networkx.nx_pydot.from_pydot",
    "networkx.nx_pydot.read_dot",
    "networkx.nx_pydot.to_pydot",
    "networkx.testing.assert_graphs_equal",
    "nose.tools.assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.setupClass": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.testDirected": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.DiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.TestPydot.testUndirected": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pydot.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.pydotplus": {
  "data": {
   "shadows": "pydotplus"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pydot.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab": {
  "data": {},
  "type": "module"
 },
 "networkx.drawing.tests.test_pylab.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.TestPylab": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.setUp": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.barbell_graph"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.setupClass": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "classmethod",
    "matplotlib.pyplot.rcParams",
    "matplotlib.use",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.TestPylab.test_draw": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "OSError",
    "matplotlib.pyplot.savefig",
    "networkx.draw_circular",
    "networkx.draw_random",
    "networkx.draw_spectral",
    "networkx.draw_spring",
    "networkx.drawing.tests.test_pylab.os"
   ]
  },
  "type": "function"
 },
 "networkx.drawing.tests.test_pylab.mpl": {
  "data": {
   "shadows": "matplotlib"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.drawing.tests.test_pylab.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "networkx.exception": {
  "data": {},
  "type": "module"
 },
 "networkx.exception.NetworkXAlgorithmError": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXError": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXException": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNoCycle": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.exception.NetworkXUnfeasible"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNoPath": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.exception.NetworkXUnfeasible"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXNotImplemented": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXPointlessConcept": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.exception.NetworkXException"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXUnbounded": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.exception.NetworkXAlgorithmError"
   ]
  },
  "type": "class"
 },
 "networkx.exception.NetworkXUnfeasible": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.exception.NetworkXAlgorithmError"
   ]
  },
  "type": "class"
 },
 "networkx.exception.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.external": {
  "data": {},
  "type": "module"
 },
 "networkx.generators": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.atlas": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.atlas.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "networkx.generators.atlas.__author__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.generators.atlas.graph_atlas_g": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.atlas.make_small_graph": {
  "data": {
   "shadows": "networkx.generators.small.make_small_graph"
  },
  "type": "import"
 },
 "networkx.generators.community": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.community.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.generators.community.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.generators.community.caveman_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.empty_graph",
    "networkx.generators.community.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.connected_caveman_graph": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.caveman_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.gaussian_random_partition_graph": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.NetworkXError",
    "networkx.generators.community.random",
    "networkx.generators.community.random_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.community.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.community.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.community.planted_partition_graph": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "networkx.generators.community.random_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.community.random_partition_graph": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict.fromkeys",
    "int",
    "len",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.fast_gnp_random_graph",
    "networkx.generators.community.math",
    "networkx.generators.community.random",
    "range",
    "set",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.community.relaxed_caveman_graph": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "networkx.caveman_graph",
    "networkx.generators.community.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "max",
    "networkx.NetworkXUnfeasible",
    "networkx.generators.degree_seq.random",
    "networkx.is_valid_degree_sequence",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "len",
    "list",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.p": {
  "data": {
   "lineno": 743
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": [
    "networkx.generators.degree_seq.random",
    "networkx.utils.random_weighted_sample",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2": {
  "data": {
   "lineno": 773,
   "symbols_in_volume": [
    "float",
    "len",
    "max",
    "networkx.generators.degree_seq.random",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3": {
  "data": {
   "lineno": 787,
   "symbols_in_volume": [
    "itertools.combinations",
    "networkx.Graph",
    "networkx.NetworkXUnfeasible",
    "networkx.generators.degree_seq.random",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.q": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": [
    "float",
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining": {
  "data": {
   "lineno": 725
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "networkx.generators.degree_seq.__author__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.generators.degree_seq.combinations": {
  "data": {
   "shadows": "itertools.combinations"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.configuration_model": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.random",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.degree_sequence_tree": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.path_graph",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_configuration_model": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.random",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.directed_havel_hakimi_graph": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.heapq",
    "networkx.utils.is_list_of_ints",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.expected_degree_graph": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "float",
    "int",
    "len",
    "max",
    "networkx.empty_graph",
    "networkx.generators.degree_seq.math",
    "networkx.generators.degree_seq.random",
    "operator.itemgetter",
    "range",
    "sorted",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.havel_hakimi_graph": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.is_valid_degree_sequence",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.heapq": {
  "data": {
   "shadows": "heapq"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.permutations": {
  "data": {
   "shadows": "itertools.permutations"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.degree_seq.random_degree_sequence_graph": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.NetworkXUnfeasible",
    "networkx.generators.degree_seq.DegreeSequenceRandomGraph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.degree_seq.random_weighted_sample": {
  "data": {
   "shadows": "networkx.utils.random_weighted_sample"
  },
  "type": "import"
 },
 "networkx.generators.directed": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.directed.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.directed.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.generators.directed.discrete_sequence": {
  "data": {
   "shadows": "networkx.utils.discrete_sequence"
  },
  "type": "import"
 },
 "networkx.generators.directed.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.directed.gn_graph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "kernel",
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.directed.random",
    "networkx.utils.discrete_sequence",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.gnc_graph": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.directed.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.gnr_graph": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.directed.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.directed.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.directed.scale_free_graph": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "ValueError",
    "_choose_node",
    "len",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "networkx.generators.directed.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.directed.scale_free_graph._choose_node": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.generators.directed.random",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.ego": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.ego.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.generators.ego.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.generators.ego.ego_graph": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.single_source_dijkstra",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.generators.ego.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.expanders": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.expanders.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.generators.expanders.chordal_cycle_graph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "pow",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.expanders.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.expanders.margulis_gabber_galil_graph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.generators.expanders.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.expanders.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.geometric": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.geometric.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.generators.geometric.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.generators.geometric.bisect_left": {
  "data": {
   "shadows": "bisect.bisect_left"
  },
  "type": "import"
 },
 "networkx.generators.geometric.geographical_threshold_edges": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.generators.geometric.math",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.geographical_threshold_graph": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.geometric.geographical_threshold_edges",
    "networkx.generators.geometric.random",
    "networkx.set_node_attributes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.geometric.navigable_small_world_graph": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "abs",
    "bisect.bisect_left",
    "itertools.product",
    "list",
    "networkx.DiGraph",
    "networkx.NetworkXException",
    "networkx.generators.geometric.random",
    "networkx.utils.accumulate",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.geometric.product": {
  "data": {
   "shadows": "itertools.product"
  },
  "type": "import"
 },
 "networkx.generators.geometric.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.geometric.random_geometric_graph": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.generators.geometric.random",
    "networkx.set_node_attributes",
    "range",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.geometric.reduce": {
  "data": {
   "shadows": "functools.reduce"
  },
  "type": "import"
 },
 "networkx.generators.geometric.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.generators.geometric.waxman_graph": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.generators.geometric.math",
    "networkx.generators.geometric.random",
    "networkx.get_node_attributes",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.intersection.__all__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.generators.intersection.__author__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.intersection.bipartite": {
  "data": {
   "shadows": "networkx.algorithms.bipartite"
  },
  "type": "import"
 },
 "networkx.generators.intersection.general_random_intersection_graph": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "networkx.empty_graph",
    "networkx.generators.intersection.random",
    "networkx.projected_graph",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection.k_random_intersection_graph": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len",
    "networkx.empty_graph",
    "networkx.generators.intersection.random",
    "networkx.projected_graph",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.intersection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.intersection.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.intersection.uniform_random_intersection_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.algorithms.bipartite.random_graph",
    "networkx.projected_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.line.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.line.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.generators.line._edge_func": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "networkx.generators.line._edge_func.get_edges": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "networkx.generators.line._lg_directed": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "get_edges",
    "networkx.generators.line._edge_func"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._lg_undirected": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "enumerate",
    "get_edges",
    "len",
    "networkx.generators.line._edge_func",
    "networkx.generators.line._node_func",
    "networkx.generators.line._sorted_edge",
    "set",
    "sorted_node"
   ]
  },
  "type": "function"
 },
 "networkx.generators.line._node_func": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "networkx.generators.line._node_func.sorted_node": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "networkx.generators.line._sorted_edge": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "networkx.generators.line.line_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.generators.line._lg_directed",
    "networkx.generators.line._lg_undirected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.nonisomorphic_trees.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.generators.nonisomorphic_trees.__author__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_graph": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "len",
    "networkx.Graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._layout_to_matrix": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_rooted_tree": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "len",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._next_tree": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "len",
    "max",
    "networkx.generators.nonisomorphic_trees._next_rooted_tree",
    "networkx.generators.nonisomorphic_trees._split_tree",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees._split_tree": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.nonisomorphic_trees": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "networkx.generators.nonisomorphic_trees._layout_to_graph",
    "networkx.generators.nonisomorphic_trees._layout_to_matrix",
    "networkx.generators.nonisomorphic_trees._next_rooted_tree",
    "networkx.generators.nonisomorphic_trees._next_tree",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.generators.nonisomorphic_trees.nonisomorphic_trees",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.nonisomorphic_trees.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.random_clustered.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.generators.random_clustered.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.generators.random_clustered.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.random_clustered.random_clustered_graph": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "len",
    "list",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.empty_graph",
    "networkx.generators.random_clustered.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs": {
  "data": {
   "symbols_in_volume": [
    "networkx.generators.random_graphs.gnp_random_graph"
   ]
  },
  "type": "module"
 },
 "networkx.generators.random_graphs.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs._random_subset": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": [
    "len",
    "networkx.generators.random_graphs.random",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.barabasi_albert_graph": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": [
    "list",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs._random_subset",
    "networkx.generators.random_graphs.random",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.binomial_graph": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs.complete_graph": {
  "data": {
   "shadows": "networkx.generators.classic.complete_graph"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.connected_watts_strogatz_graph": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.random_graphs.watts_strogatz_graph",
    "networkx.is_connected"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.degree_sequence_tree": {
  "data": {
   "shadows": "networkx.generators.degree_seq.degree_sequence_tree"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.dense_gnm_random_graph": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "networkx.generators.classic.complete_graph",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.duplication_divergence_graph": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.erdos_renyi_graph": {
  "data": {
   "lineno": 186
  },
  "type": "constant"
 },
 "networkx.generators.random_graphs.fast_gnp_random_graph": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "int",
    "networkx.DiGraph",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs.math",
    "networkx.generators.random_graphs.random",
    "networkx.gnp_random_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.gnm_random_graph": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.complete_graph",
    "networkx.generators.random_graphs.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.gnp_random_graph": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.complete_graph",
    "networkx.generators.random_graphs.itertools",
    "networkx.generators.random_graphs.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.newman_watts_strogatz_graph": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "len",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.powerlaw_cluster_graph": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs._random_subset",
    "networkx.generators.random_graphs.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.random_graphs.random_lobster": {
  "data": {
   "lineno": 818,
   "symbols_in_volume": [
    "int",
    "networkx.generators.classic.path_graph",
    "networkx.generators.random_graphs.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.generators.degree_seq.degree_sequence_tree",
    "networkx.generators.random_graphs.random_powerlaw_tree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_powerlaw_tree_sequence": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "int",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs.random",
    "networkx.utils.powerlaw_sequence",
    "round",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "_try_creation",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs.random"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._suitable": {
  "data": {
   "lineno": 532
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_regular_graph._try_creation": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": [
    "_suitable",
    "collections.defaultdict",
    "iter",
    "list",
    "networkx.generators.random_graphs.random",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.random_shell_graph": {
  "data": {
   "lineno": 853,
   "symbols_in_volume": [
    "int",
    "len",
    "networkx.convert_node_labels_to_integers",
    "networkx.generators.classic.empty_graph",
    "networkx.generators.random_graphs.gnm_random_graph",
    "networkx.generators.random_graphs.random",
    "networkx.operators.union",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.random_graphs.watts_strogatz_graph": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.random_graphs.random",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.small.LCF_graph": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "len",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.cycle_graph",
    "networkx.generators.classic.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.generators.small.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.small.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.small.bull_graph": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.chvatal_graph": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.complete_graph": {
  "data": {
   "shadows": "networkx.generators.classic.complete_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.cubical_graph": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.desargues_graph": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.diamond_graph": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.dodecahedral_graph": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.empty_graph": {
  "data": {
   "shadows": "networkx.generators.classic.empty_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.frucht_graph": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.heawood_graph": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.house_graph": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.house_x_graph": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.icosahedral_graph": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.krackhardt_kite_graph": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.make_small_graph": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "len",
    "networkx.exception.NetworkXError",
    "networkx.generators.classic.empty_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.make_small_undirected_graph": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError",
    "networkx.generators.small.make_small_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.moebius_kantor_graph": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.small.octahedral_graph": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.pappus_graph": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "networkx.generators.small.LCF_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.generators.small.petersen_graph": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.sedgewick_maze_graph": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "networkx.generators.classic.empty_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.tetrahedral_graph": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "networkx.generators.classic.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.truncated_cube_graph": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.truncated_tetrahedron_graph": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "networkx.generators.classic.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.small.tutte_graph": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "networkx.generators.small.make_small_undirected_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.social.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.generators.social.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.generators.social.davis_southern_women_graph": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "events",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.florentine_families_graph": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.karate_club_graph": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "networkx.Graph",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.social.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.stochastic": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.stochastic.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.generators.stochastic.__author__": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.generators.stochastic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.stochastic.stochastic_graph": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.generators.stochastic.warnings",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.generators.stochastic.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_atlas.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.TestAtlas": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.setUp": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "networkx.generators.atlas.graph_atlas_g"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.setupClass": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "classmethod",
    "networkx.generators.tests.test_atlas.platform",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.test_monotone_degree_sequence": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_true",
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.test_monotone_nodes": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_false",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.test_names": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "assert_equal",
    "int"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.TestAtlas.test_sizes": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_atlas.atlas": {
  "data": {
   "shadows": "networkx.generators.atlas"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_atlas.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
   ]
  },
  "type": "module"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic": {
  "data": {
   "lineno": 20
  },
  "type": "class"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "balanced_tree",
    "degree_histogram",
    "is_connected",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_true",
    "balanced_tree",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "barbell_graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "number_of_edges",
    "number_of_nodes",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circulant_graph": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "circulant_graph",
    "complete_bipartite_graph",
    "complete_graph",
    "cycle_graph",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "circular_ladder_graph",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_0_partite_graph": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.null_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_1_partite_graph": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "networkx.complete_multipartite_graph",
    "networkx.empty_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_2_partite_graph": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "networkx.complete_bipartite_graph",
    "networkx.complete_multipartite_graph",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "assert_true",
    "complete_graph",
    "networkx.DiGraph",
    "number_of_edges",
    "number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "MultiGraph",
    "assert_true",
    "complete_graph",
    "number_of_edges",
    "number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_multipartite_graph": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_equal",
    "assert_true",
    "networkx.complete_multipartite_graph",
    "networkx.generators.tests.test_classic.itertools"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_false",
    "assert_true",
    "cycle_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "average_clustering",
    "dorogovtsev_goltsev_mendes_graph",
    "list",
    "networkx.exception.NetworkXError",
    "number_of_edges",
    "number_of_nodes",
    "triangles"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_true",
    "empty_graph",
    "isinstance",
    "number_of_edges",
    "number_of_nodes",
    "petersen_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "degree_histogram",
    "full_rary_tree",
    "is_connected",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "assert_equal",
    "full_rary_tree"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "assert_true",
    "balanced_tree",
    "full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "assert_true",
    "empty_graph",
    "full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "assert_true",
    "full_rary_tree",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_2d_graph": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "degree_histogram",
    "grid_2d_graph",
    "number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_graph": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "degree_histogram",
    "grid_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "number_of_nodes",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_hypercube_graph": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "cubical_graph",
    "cycle_graph",
    "degree_histogram",
    "hypercube_graph",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "null_graph",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "empty_graph",
    "grid_graph",
    "hypercube_graph",
    "ladder_graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "lollipop_graph",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "number_of_edges",
    "number_of_nodes",
    "path_graph",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "assert_equal",
    "null_graph",
    "number_of_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_false",
    "assert_true",
    "empty_graph",
    "is_connected",
    "list",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "null_graph",
    "path_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_periodic_grid_2d_graph": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_true",
    "circular_ladder_graph",
    "cubical_graph",
    "cycle_graph",
    "grid_2d_graph",
    "networkx.generators.tests.test_classic.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "empty_graph",
    "list",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "path_graph",
    "sorted",
    "star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "assert_equal",
    "number_of_nodes",
    "trivial_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "assert_true",
    "complete_graph",
    "empty_graph",
    "list",
    "networkx.exception.NetworkXError",
    "networkx.generators.tests.test_classic.is_isomorphic",
    "null_graph",
    "path_graph",
    "sorted",
    "wheel_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_classic.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.is_isomorphic": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_classic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_classic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_community": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_community.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_community.test_caveman_graph": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "networkx.caveman_graph",
    "networkx.complete_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_connected_caveman_graph": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "len",
    "networkx.complete_graph",
    "networkx.connected_caveman_graph",
    "networkx.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_gaussian_random_partition_graph": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "len",
    "networkx.NetworkXError",
    "networkx.gaussian_random_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_planted_partition_graph": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "len",
    "networkx.NetworkXError",
    "networkx.planted_partition_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_random_partition_graph": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "len",
    "networkx.NetworkXError",
    "networkx.random_partition_graph",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_community.test_relaxed_caveman_graph": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.relaxed_caveman_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_degree_seq.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_degree_seq.powerlaw_sequence": {
  "data": {
   "shadows": "networkx.utils.powerlaw_sequence"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_degree_seq.test_configuation_raise": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "DiGraph",
    "configuration_model",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_configuation_raise_odd": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "DiGraph",
    "configuration_model",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_configuration_model": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "configuration_model",
    "is_isomorphic",
    "len",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_configuration_model_empty": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equal",
    "configuration_model"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_degree_sequence_tree": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "DiGraph",
    "assert_raises",
    "assert_true",
    "degree_sequence_tree",
    "len",
    "networkx.generators.tests.test_degree_seq.networkx",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_mode": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "assert_equal",
    "directed_configuration_model",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_configuation_raise_unequal": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "directed_configuration_model",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_directed_havel_hakimi": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_raises",
    "assert_true",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "assert_true",
    "expected_degree_graph",
    "is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_empty": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_equal",
    "expected_degree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_selfloops": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "assert_true",
    "expected_degree_graph",
    "is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_expected_degree_graph_skew": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "assert_true",
    "expected_degree_graph",
    "is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "DiGraph",
    "assert_equal",
    "assert_raises",
    "configuration_model",
    "havel_hakimi_graph",
    "len",
    "networkx.generators.tests.test_degree_seq.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "assert_equal",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.generators.tests.test_degree_seq.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.test_random_degree_sequence_large": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_degree_seq.uniform_sequence": {
  "data": {
   "shadows": "networkx.utils.uniform_sequence"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_directed": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected": {
  "data": {
   "lineno": 11
  },
  "type": "class"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "Graph",
    "MultiDiGraph",
    "assert_equal",
    "assert_raises",
    "gn_graph",
    "gnc_graph",
    "gnr_graph",
    "scale_free_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "gn_graph",
    "gnc_graph",
    "gnr_graph",
    "scale_free_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_ego": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.ego_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "networkx.star_graph",
    "nose.tools.assert_equal",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.ego_graph",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_ego.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_ego.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_ego.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_expanders.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.adjacency_matrix": {
  "data": {
   "shadows": "networkx.adjacency_matrix"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.assert_less": {
  "data": {
   "shadows": "nose.tools.assert_less"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.chordal_cycle_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.chordal_cycle_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.is_scipy_available": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_expanders.margulis_gabber_galil_graph": {
  "data": {
   "shadows": "networkx.generators.expanders.margulis_gabber_galil_graph"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.number_of_nodes": {
  "data": {
   "shadows": "networkx.number_of_nodes"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_expanders.test_chordal_cycle_graph": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len",
    "networkx.generators.expanders.chordal_cycle_graph",
    "networkx.generators.tests.test_expanders.is_scipy_available",
    "nose.SkipTest",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "ImportError",
    "int",
    "len",
    "networkx.adjacency_matrix",
    "networkx.generators.expanders.margulis_gabber_galil_graph",
    "networkx.generators.tests.test_expanders.scipy",
    "networkx.number_of_nodes",
    "nose.tools.assert_equal",
    "nose.tools.assert_less",
    "nose.tools.assert_true",
    "numpy.sqrt",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_badinput": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.expanders.margulis_gabber_galil_graph",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_geometric.TestGeneratorsGeometric": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_geographical_threshold_graph": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.geographical_threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_naviable_small_world": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_true",
    "networkx.grid_2d_graph",
    "networkx.grid_graph",
    "networkx.is_isomorphic",
    "networkx.navigable_small_world_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_random_geometric_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.random_geometric_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_waxman_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.waxman_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_geometric.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_intersection": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "assert_raises",
    "len",
    "networkx.general_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.k_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.uniform_random_intersection_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_intersection.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine": {
  "data": {
   "lineno": 46
  },
  "type": "class"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create1": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.line_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_create2": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.line_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_cycle": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "assert_true",
    "networkx.cycle_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph1": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.line_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_digraph2": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.DiGraph",
    "networkx.line_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_path": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_true",
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.TestGeneratorLine.test_star": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "assert_true",
    "networkx.complete_graph",
    "networkx.is_isomorphic",
    "networkx.line_graph",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.line": {
  "data": {
   "shadows": "networkx.generators.line"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_line.test_edge_func": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "assert_equal",
    "ef",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.generators.line._edge_func",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_node_func": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.line._node_func",
    "nf"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_line.test_sorted_edge": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.generators.line._sorted_edge"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "assert_equal",
    "f",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "assert_false",
    "f",
    "len",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "assert_true",
    "f",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph": {
  "data": {
   "lineno": 5
  },
  "type": "class"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "TypeError",
    "assert_raises",
    "networkx.generators.tests.test_random_clustered.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "TypeError",
    "assert_raises",
    "networkx.generators.tests.test_random_clustered.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.generators.tests.test_random_clustered.networkx",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.generators.tests.test_random_clustered.networkx"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_clustered.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_random_graphs": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.smoke_test_random_graph": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "assert_true",
    "barabasi_albert_graph",
    "binomial_graph",
    "connected_watts_strogatz_graph",
    "dense_gnm_random_graph",
    "duplication_divergence_graph",
    "erdos_renyi_graph",
    "fast_gnp_random_graph",
    "gnm_random_graph",
    "gnp_random_graph",
    "len",
    "newman_watts_strogatz_graph",
    "powerlaw_cluster_graph",
    "random_regular_graph",
    "random_shell_graph",
    "watts_strogatz_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "assert_equal",
    "gnm_random_graph",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnp": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_equal",
    "assert_true",
    "binomial_graph",
    "erdos_renyi_graph",
    "fast_gnp_random_graph",
    "float",
    "generator",
    "gnp_random_graph",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_zero_regular_graph": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "random_regular_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_watts_strogatz_big_k": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "assert_raises",
    "newman_watts_strogatz_graph",
    "watts_strogatz_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small": {
  "data": {
   "symbols_in_volume": [
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
    "null_graph"
   ]
  },
  "type": "module"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "LCF_graph",
    "assert_true",
    "complete_bipartite_graph",
    "cycle_graph",
    "networkx.generators.tests.test_small.is_isomorphic",
    "networkx.generators.tests.test_small.null"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_make_small_graph": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "assert_true",
    "bull_graph",
    "make_small_graph",
    "networkx.generators.tests.test_small.is_isomorphic"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "DiGraph",
    "MultiGraph",
    "assert_equal",
    "assert_raises",
    "bull_graph",
    "chvatal_graph",
    "cubical_graph",
    "desargues_graph",
    "diameter",
    "diamond_graph",
    "dodecahedral_graph",
    "frucht_graph",
    "heawood_graph",
    "house_graph",
    "house_x_graph",
    "icosahedral_graph",
    "krackhardt_kite_graph",
    "list",
    "moebius_kantor_graph",
    "octahedral_graph",
    "pappus_graph",
    "petersen_graph",
    "radius",
    "sedgewick_maze_graph",
    "sorted",
    "tetrahedral_graph",
    "truncated_cube_graph",
    "truncated_tetrahedron_graph",
    "tutte_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_small.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_small.is_isomorphic": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_small.null": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_stochastic": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.tests.test_stochastic.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_stochastic.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_stochastic.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_stochastic.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_stochastic.test_stochastic": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "networkx.stochastic_graph",
    "nose.tools.assert_equal",
    "nose.tools.assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.test_stochastic_graph_input": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "networkx.stochastic_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.test_stochastic_ints": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.stochastic_graph",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_stochastic.test_stochastic_multigraph_input": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.stochastic_graph",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold": {
  "data": {
   "symbols_in_volume": [
    "networkx.convert_node_labels_to_integers"
   ]
  },
  "type": "module"
 },
 "networkx.generators.tests.test_threshold.N": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold": {
  "data": {
   "lineno": 17
  },
  "type": "class"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_create_using": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.DiGraph",
    "networkx.MultiGraph",
    "networkx.exception.NetworkXError",
    "networkx.generators.threshold.threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic",
    "networkx.generators.havel_hakimi_graph",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.threshold_graph",
    "networkx.generators.threshold.uncompact"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "ImportError",
    "abs",
    "assert_equal",
    "dot",
    "networkx.generators.threshold.eigenvectors",
    "networkx.generators.threshold.threshold_graph",
    "networkx.laplacian_matrix",
    "nose.SkipTest",
    "nose.plugins.attrib.attr",
    "numpy.dot",
    "numpy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "abs",
    "assert_almost_equal",
    "assert_equal",
    "assert_true",
    "list",
    "networkx.betweenness_centrality",
    "networkx.clustering",
    "networkx.density",
    "networkx.generators.threshold.betweenness_sequence",
    "networkx.generators.threshold.cluster_sequence",
    "networkx.generators.threshold.degree_correlation",
    "networkx.generators.threshold.degree_sequence",
    "networkx.generators.threshold.density",
    "networkx.generators.threshold.eigenvalues",
    "networkx.generators.threshold.threshold_graph",
    "networkx.generators.threshold.triangle_sequence",
    "networkx.generators.threshold.triangles",
    "networkx.triangles",
    "sorted",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_finding_routines": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "networkx.Graph",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.find_alternating_4_cycle",
    "networkx.generators.threshold.find_creation_sequence",
    "networkx.generators.threshold.find_threshold_graph",
    "networkx.generators.threshold.is_threshold_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_shortest_path": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "assert_equal",
    "enumerate",
    "networkx.generators.havel_hakimi_graph",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.shortest_path",
    "networkx.generators.threshold.shortest_path_length",
    "networkx.shortest_path",
    "networkx.single_source_shortest_path_length"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.generators.threshold.left_d_threshold_sequence",
    "networkx.generators.threshold.right_d_threshold_sequence",
    "networkx.generators.threshold.swap_d"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "list",
    "networkx.complete_graph",
    "networkx.generators.havel_hakimi_graph",
    "networkx.generators.threshold.is_threshold_graph",
    "networkx.generators.threshold.is_threshold_sequence",
    "networkx.star_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "abs",
    "assert_equal",
    "assert_true",
    "enumerate",
    "float",
    "list",
    "networkx.generators.threshold.creation_sequence_to_weights",
    "networkx.generators.threshold.uncompact",
    "networkx.generators.threshold.weights_to_creation_sequence",
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.tests.test_threshold.attr": {
  "data": {
   "shadows": "nose.plugins.attrib.attr"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.cnlti": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.generators.tests.test_threshold.graph_could_be_isomorphic": {
  "data": {
   "shadows": "networkx.algorithms.isomorphism.isomorph.graph_could_be_isomorphic"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.nxt": {
  "data": {
   "shadows": "networkx.generators.threshold"
  },
  "type": "import"
 },
 "networkx.generators.tests.test_threshold.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.generators.threshold": {
  "data": {},
  "type": "module"
 },
 "networkx.generators.threshold.__all__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.generators.threshold.__author__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "networkx.generators.threshold.betweenness_sequence": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "enumerate",
    "float",
    "len",
    "networkx.generators.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.cluster_sequence": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "enumerate",
    "float",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.degree_sequence",
    "networkx.generators.threshold.triangle_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.creation_sequence": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "enumerate",
    "isinstance",
    "len",
    "networkx.generators.threshold.make_compact"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.creation_sequence_to_weights": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "TypeError",
    "enumerate",
    "float",
    "int",
    "isinstance",
    "list",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.uncompact",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.degree_correlation": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "float",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.degree_sequence",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.degree_sequence": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "enumerate",
    "networkx.generators.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.density": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.degree_sequence",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.eigenvalues": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": [
    "len",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.degree_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.eigenvectors": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": [
    "len",
    "math.sqrt",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.make_compact",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.find_alternating_4_cycle": {
  "data": {
   "lineno": 317
  },
  "type": "function"
 },
 "networkx.generators.threshold.find_creation_sequence": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.find_threshold_graph": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "networkx.generators.threshold.find_creation_sequence",
    "networkx.generators.threshold.threshold_graph"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.is_threshold_graph": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "list",
    "networkx.generators.threshold.is_threshold_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.is_threshold_sequence": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.left_d_threshold_sequence": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "ValueError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.make_compact": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "len",
    "networkx.generators.threshold.creation_sequence",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.generators.threshold.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.generators.threshold.random_threshold_sequence": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "ValueError",
    "networkx.generators.threshold.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.right_d_threshold_sequence": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "ValueError",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.shortest_path": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "int",
    "isinstance",
    "len",
    "max",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.uncompact",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.shortest_path_length": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "len",
    "list",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.uncompact",
    "range",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.spectral_projection": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.generators.threshold.swap_d": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "networkx.generators.threshold.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.threshold_graph": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "isinstance",
    "list",
    "networkx.generators.threshold.creation_sequence",
    "networkx.generators.threshold.networkx",
    "networkx.generators.threshold.uncompact",
    "print",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.triangle_sequence": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "enumerate",
    "networkx.generators.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.triangles": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "enumerate",
    "networkx.generators.threshold.creation_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.uncompact": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "networkx.generators.threshold.creation_sequence",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.generators.threshold.weights_to_creation_sequence": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "enumerate",
    "isinstance",
    "len",
    "networkx.generators.threshold.make_compact"
   ]
  },
  "type": "function"
 },
 "networkx.linalg": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "functools.partial",
    "networkx.linalg.algebraicconnectivity.__all__",
    "numpy.dot",
    "numpy.linalg.norm",
    "re.compile",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.blas.ddot"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.algebraicconnectivity.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ImportError",
    "object",
    "scikits.sparse.cholmod.cholesky"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.__init__": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "A",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._CholeskySolver.solve": {
  "data": {
   "lineno": 95
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "ImportError",
    "functools.partial",
    "object",
    "scipy.sparse.linalg.splu"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.__init__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "A",
    "networkx.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._LUSolver.solve": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.ndarray",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.__init__": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver._solve": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "A",
    "M",
    "numpy.zeros",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.blas.daxpy",
    "scipy.linalg.blas.ddot"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._PCGSolver.solve": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.ndarray",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.__author__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.linalg.algebraicconnectivity._tracemin_method"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._get_fiedler_func.find_fiedler": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "M",
    "float",
    "numpy.asarray",
    "numpy.asmatrix",
    "numpy.ones",
    "numpy.sqrt",
    "scipy.sparse.csc_matrix",
    "scipy.sparse.linalg.eigsh",
    "scipy.sparse.linalg.lobpcg",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._preprocess_graph": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "abs",
    "networkx.Graph",
    "networkx.MultiGraph",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._rcm_estimate": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "float",
    "len",
    "networkx.utils.reverse_cuthill_mckee_ordering",
    "numpy.ndarray",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "A",
    "A.indptr.argmax",
    "P",
    "abs",
    "float",
    "networkx.NetworkXError",
    "networkx.linalg.algebraicconnectivity._CholeskySolver",
    "networkx.linalg.algebraicconnectivity._LUSolver",
    "networkx.linalg.algebraicconnectivity._PCGSolver",
    "numpy.asarray",
    "numpy.asmatrix",
    "numpy.linalg.norm",
    "numpy.linalg.qr",
    "numpy.ndarray",
    "numpy.sqrt",
    "project",
    "scipy.linalg.blas.dasum",
    "scipy.linalg.eigh",
    "scipy.linalg.inv",
    "scipy.sparse.csc_matrix",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler.P": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "numpy.asarray",
    "scipy.linalg.blas.daxpy",
    "scipy.linalg.blas.ddot"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_fiedler.project": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.dot",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity._tracemin_method": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.algebraic_connectivity": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.array": {
  "data": {
   "shadows": "numpy.array"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.asarray": {
  "data": {
   "shadows": "numpy.asarray"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.asmatrix": {
  "data": {
   "shadows": "numpy.asmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.cholesky": {
  "data": {
   "shadows": "scikits.sparse.cholmod.cholesky"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.compile": {
  "data": {
   "shadows": "re.compile"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.csc_matrix": {
  "data": {
   "shadows": "scipy.sparse.csc_matrix"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.dasum": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.daxpy": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.ddot": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "networkx.linalg.algebraicconnectivity.dot": {
  "data": {
   "shadows": "numpy.dot"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.eigh": {
  "data": {
   "shadows": "scipy.linalg.eigh"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.eigsh": {
  "data": {
   "shadows": "scipy.sparse.linalg.eigsh"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.fiedler_vector": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.is_connected",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "networkx.utils.not_implemented_for",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.inv": {
  "data": {
   "shadows": "scipy.linalg.inv"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.lobpcg": {
  "data": {
   "shadows": "scipy.sparse.linalg.lobpcg"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.matrix": {
  "data": {
   "shadows": "numpy.matrix"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.ndarray": {
  "data": {
   "shadows": "numpy.ndarray"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.norm": {
  "data": {
   "shadows": "numpy.linalg.norm"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.normal": {
  "data": {
   "shadows": "numpy.random.normal"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.ones": {
  "data": {
   "shadows": "numpy.ones"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.qr": {
  "data": {
   "shadows": "numpy.linalg.qr"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.reshape": {
  "data": {
   "shadows": "numpy.reshape"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.setup_module": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "ImportError",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.spdiags": {
  "data": {
   "shadows": "scipy.sparse.spdiags"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.spectral_ordering": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "find_fiedler",
    "len",
    "networkx.NetworkXError",
    "networkx.connected_components",
    "networkx.laplacian_matrix",
    "networkx.linalg.algebraicconnectivity._get_fiedler_func",
    "networkx.linalg.algebraicconnectivity._preprocess_graph",
    "networkx.linalg.algebraicconnectivity._rcm_estimate",
    "range",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.algebraicconnectivity.splu": {
  "data": {
   "shadows": "scipy.sparse.linalg.splu"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.sqrt": {
  "data": {
   "shadows": "numpy.sqrt"
  },
  "type": "import"
 },
 "networkx.linalg.algebraicconnectivity.zeros": {
  "data": {
   "shadows": "numpy.zeros"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.attrmatrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.linalg.attrmatrix._edge_value": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "hasattr",
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix._node_value": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_matrix": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "edge_value",
    "len",
    "list",
    "networkx.linalg.attrmatrix._edge_value",
    "networkx.linalg.attrmatrix._node_value",
    "node_value",
    "numpy.asmatrix",
    "numpy.zeros",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.attr_sparse_matrix": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "edge_value",
    "enumerate",
    "len",
    "list",
    "networkx.linalg.attrmatrix._edge_value",
    "networkx.linalg.attrmatrix._node_value",
    "node_value",
    "numpy.asarray",
    "range",
    "scipy.sparse.lil_matrix",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.attrmatrix.setup_module": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.attrmatrix.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix": {
  "data": {
   "symbols_in_volume": [
    "networkx.linalg.graphmatrix.adjacency_matrix"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.graphmatrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.linalg.graphmatrix.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.linalg.graphmatrix.adj_matrix": {
  "data": {
   "lineno": 162
  },
  "type": "constant"
 },
 "networkx.linalg.graphmatrix.adjacency_matrix": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.graphmatrix.incidence_matrix": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "KeyError",
    "NetworkXError",
    "dict",
    "enumerate",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.graphmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.graphmatrix.setup_module": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.laplacianmatrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.linalg.laplacianmatrix.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.linalg.laplacianmatrix.directed_laplacian_matrix": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "float",
    "len",
    "networkx.NetworkXError",
    "networkx.is_aperiodic",
    "networkx.is_strongly_connected",
    "networkx.linalg.laplacianmatrix.scipy",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for",
    "scipy.sparse.identity",
    "scipy.sparse.linalg.eigs",
    "scipy.sparse.spdiags"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.identity": {
  "data": {
   "shadows": "scipy.sparse.identity"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.laplacian_matrix": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.linalg": {
  "data": {
   "shadows": "scipy.sparse.linalg"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.normalized_laplacian_matrix": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.linalg.laplacianmatrix.scipy",
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.setup_module": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.laplacianmatrix.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.laplacianmatrix.spdiags": {
  "data": {
   "shadows": "scipy.sparse.spdiags"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.modularitymatrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.linalg.modularitymatrix.__author__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.linalg.modularitymatrix.directed_modularity_matrix": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.modularitymatrix.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.modularity_matrix": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.to_scipy_sparse_matrix",
    "networkx.utils.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.modularitymatrix.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.modularitymatrix.setup_module": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.networkx.linalg.attrmatrix": {
  "data": {
   "shadows": "networkx.linalg.attrmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.graphmatrix": {
  "data": {
   "shadows": "networkx.linalg.graphmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.laplacianmatrix": {
  "data": {
   "shadows": "networkx.linalg.laplacianmatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.modularitymatrix": {
  "data": {
   "shadows": "networkx.linalg.modularitymatrix"
  },
  "type": "import"
 },
 "networkx.linalg.networkx.linalg.spectrum": {
  "data": {
   "shadows": "networkx.linalg.spectrum"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.spectrum.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.__all__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.linalg.spectrum.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.linalg.spectrum.adjacency_spectrum": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.adjacency_matrix",
    "scipy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.eigvals": {
  "data": {
   "shadows": "scipy.linalg.eigvals"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.eigvalsh": {
  "data": {
   "shadows": "scipy.linalg.eigvalsh"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.laplacian_spectrum": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "networkx.laplacian_matrix",
    "scipy.linalg.eigvalsh"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.modularity_spectrum": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.directed_modularity_matrix",
    "networkx.modularity_matrix",
    "scipy.linalg.eigvals"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.spectrum.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.scipy.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "networkx.linalg.spectrum.setup_module": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.setupClass": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.normalized_laplacian_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "assert_almost_equal",
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.cycle_graph",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.DiGraph",
    "networkx.NetworkXNotImplemented",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "assert_equal",
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "assert_almost_equal",
    "math.sqrt",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "assert_almost_equal",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.algebraic_connectivity",
    "networkx.fiedler_vector",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.setupClass": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_algebraic_connectivity.methods",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering",
    "ok_",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "networkx.Graph",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering",
    "ok_",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "assert_raises",
    "graph",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.NetworkXError",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "list",
    "networkx.Graph",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering",
    "numpy.random.shuffle",
    "ok_",
    "range",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "assert_equal",
    "graph",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.spectral_ordering",
    "ok_",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state",
    "networkx.path_graph",
    "networkx.spectral_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "assert_almost_equal",
    "assert_not_almost_equal",
    "networkx"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.get_state": {
  "data": {
   "shadows": "numpy.random.get_state"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.methods": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.numpy.linalg": {
  "data": {
   "shadows": "numpy.linalg"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "func"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.preserve_random_state.wrapper": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "func",
    "networkx.linalg.tests.test_algebraic_connectivity.save_random_state",
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.save_random_state": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "contextlib.contextmanager"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.seed": {
  "data": {
   "shadows": "numpy.random.seed"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.set_state": {
  "data": {
   "shadows": "numpy.random.set_state"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.shuffle": {
  "data": {
   "shadows": "numpy.random.shuffle"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_algebraic_connectivity.sqrt": {
  "data": {
   "shadows": "math.sqrt"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.tests.test_graphmatrix.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setUp": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.linalg.tests.test_graphmatrix.numpy"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "networkx.adj_matrix",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.incidence_matrix",
    "networkx.linalg.tests.test_graphmatrix.numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_graphmatrix.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_graphmatrix.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.tests.test_laplacian.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.setUp": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_laplacian": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.directed_laplacian_matrix",
    "networkx.linalg.tests.test_laplacian.numpy",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_laplacian": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.laplacian_matrix",
    "networkx.linalg.tests.test_laplacian.numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.TestLaplacian.test_normalized_laplacian": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_laplacian.numpy",
    "networkx.normalized_laplacian_matrix",
    "numpy.testing.assert_almost_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_laplacian.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_laplacian.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.tests.test_modularity.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.TestModularity": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.setUp": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.generators.degree_seq.havel_hakimi_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.setupClass": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_directed_modularity": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "networkx.directed_modularity_matrix",
    "networkx.linalg.tests.test_modularity.numpy",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.TestModularity.test_modularity": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_modularity.numpy",
    "networkx.modularity_matrix",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_modularity.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_modularity.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum": {
  "data": {},
  "type": "module"
 },
 "networkx.linalg.tests.test_spectrum.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.setUp": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.degree_seq.havel_hakimi_graph",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.adjacency_spectrum",
    "networkx.linalg.tests.test_spectrum.numpy",
    "numpy.testing.assert_almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.laplacian_spectrum",
    "networkx.linalg.tests.test_spectrum.numpy",
    "numpy.testing.assert_almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.TestSpectrum.test_modularity_spectrum": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.linalg.tests.test_spectrum.numpy",
    "networkx.modularity_spectrum",
    "numpy.testing.assert_almost_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.linalg.tests.test_spectrum.assert_almost_equal": {
  "data": {
   "shadows": "numpy.testing.assert_almost_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.assert_equal": {
  "data": {
   "shadows": "numpy.testing.assert_equal"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.havel_hakimi_graph": {
  "data": {
   "shadows": "networkx.generators.degree_seq.havel_hakimi_graph"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.linalg.tests.test_spectrum.scipy": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.m": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "networkx.networkx.algorithms": {
  "data": {
   "shadows": "networkx.algorithms"
  },
  "type": "import"
 },
 "networkx.networkx.classes": {
  "data": {
   "shadows": "networkx.classes"
  },
  "type": "import"
 },
 "networkx.networkx.convert": {
  "data": {
   "shadows": "networkx.convert"
  },
  "type": "import"
 },
 "networkx.networkx.convert_matrix": {
  "data": {
   "shadows": "networkx.convert_matrix"
  },
  "type": "import"
 },
 "networkx.networkx.drawing": {
  "data": {
   "shadows": "networkx.drawing"
  },
  "type": "import"
 },
 "networkx.networkx.external": {
  "data": {
   "shadows": "networkx.external"
  },
  "type": "import"
 },
 "networkx.networkx.generators": {
  "data": {
   "shadows": "networkx.generators"
  },
  "type": "import"
 },
 "networkx.networkx.linalg": {
  "data": {
   "shadows": "networkx.linalg"
  },
  "type": "import"
 },
 "networkx.networkx.readwrite": {
  "data": {
   "shadows": "networkx.readwrite"
  },
  "type": "import"
 },
 "networkx.networkx.relabel": {
  "data": {
   "shadows": "networkx.relabel"
  },
  "type": "import"
 },
 "networkx.networkx.utils": {
  "data": {
   "shadows": "networkx.utils"
  },
  "type": "import"
 },
 "networkx.readwrite": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.adjlist.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "networkx.readwrite.adjlist.__author__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "networkx.readwrite.adjlist.generate_adjlist": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "len",
    "networkx.utils.make_str",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.parse_adjlist": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "TypeError",
    "len",
    "map",
    "networkx.Graph",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.read_adjlist": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "networkx.readwrite.adjlist.parse_adjlist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.teardown_module": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "networkx.readwrite.adjlist.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.adjlist.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.adjlist.write_adjlist": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.readwrite.adjlist.generate_adjlist",
    "networkx.readwrite.adjlist.sys",
    "networkx.readwrite.adjlist.time",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.edgelist.__all__": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "networkx.readwrite.edgelist.__author__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "networkx.readwrite.edgelist.generate_edgelist": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "KeyError",
    "map",
    "networkx.utils.make_str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.edgelist.parse_edgelist": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "IndexError",
    "TypeError",
    "ast.literal_eval",
    "dict",
    "edge_type",
    "len",
    "networkx.Graph",
    "nodetype",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_edgelist": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.parse_edgelist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.read_weighted_edgelist": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "float",
    "networkx.readwrite.edgelist.read_edgelist",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.teardown_module": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_edgelist": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.generate_edgelist",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.edgelist.write_weighted_edgelist": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "networkx.readwrite.edgelist.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gpickle": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.gpickle.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "networkx.readwrite.gpickle.__author__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.readwrite.gpickle.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "networkx.readwrite.gpickle.read_gpickle": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "cPickle.load",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gpickle.teardown_module": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "networkx.readwrite.gpickle.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.gpickle.write_gpickle": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "cPickle.HIGHEST_PROTOCOL",
    "cPickle.dump",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.graph6.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.readwrite.graph6.__author__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "networkx.readwrite.graph6.data_to_graph6": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "chr",
    "len",
    "max",
    "min",
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.data_to_n": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.generate_graph6": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "bits",
    "list",
    "networkx.readwrite.graph6.data_to_graph6",
    "networkx.readwrite.graph6.n_to_data",
    "networkx.utils.not_implemented_for",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.generate_graph6.bits": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.graph6_to_data": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "len",
    "max",
    "min",
    "ord"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.n_to_data": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "networkx.exception.NetworkXError"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.graph6.parse_graph6": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "bits",
    "len",
    "networkx.Graph",
    "networkx.exception.NetworkXError",
    "networkx.readwrite.graph6.data_to_n",
    "networkx.readwrite.graph6.graph6_to_data",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.parse_graph6.bits": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.read_graph6": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "len",
    "networkx.readwrite.graph6.parse_graph6",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.teardown_module": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "networkx.readwrite.graph6.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.graph6.write_graph6": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "networkx.readwrite.graph6.generate_graph6",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.adjacency.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.adjacency.__author__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.adjacency._attrs": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_data": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "list",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.adjacency._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.adjacency.adjacency_graph": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.readwrite.json_graph.adjacency._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.adjacency.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.adjacency.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.adjacency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.node_link.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.node_link.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.node_link._attrs": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.node_link.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.node_link.node_link_data": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "dict",
    "itertools.chain",
    "itertools.count",
    "len",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.node_link._attrs",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link.node_link_graph": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "dict",
    "itertools.count",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.readwrite.json_graph.node_link._attrs",
    "networkx.utils.make_str",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.node_link.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "adjacency_data",
    "adjacency_graph",
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_exception": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "adjacency_data",
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "adjacency_data",
    "adjacency_graph",
    "networkx.is_isomorphic",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "adjacency_data",
    "adjacency_graph",
    "networkx.path_graph",
    "networkx.readwrite.json_graph.tests.test_adjacency.json",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "adjacency_data",
    "adjacency_graph",
    "networkx.MultiDiGraph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multigraph": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "adjacency_data",
    "adjacency_graph",
    "networkx.MultiGraph",
    "networkx.is_isomorphic",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_adjacency.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink": {
  "data": {
   "lineno": 7
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "node_link_data",
    "node_link_graph",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "node_link_data",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "networkx.path_graph",
    "node_link_data",
    "node_link_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.path_graph",
    "networkx.readwrite.json_graph.tests.test_node_link.json",
    "node_link_data",
    "node_link_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multigraph": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.is_isomorphic",
    "node_link_data",
    "node_link_graph",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_unicode_keys": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "NameError",
    "networkx.Graph",
    "networkx.readwrite.json_graph.tests.test_node_link.json",
    "node_link_data",
    "node_link_graph",
    "nose.tools.assert_equal",
    "unicode"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_node_link.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree": {
  "data": {
   "lineno": 6
  },
  "type": "class"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_exception": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "dict",
    "networkx.MultiDiGraph",
    "networkx.NetworkXError",
    "nose.tools.raises",
    "tree_data"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.is_isomorphic",
    "tree_data",
    "tree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph_attributes": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.readwrite.json_graph.tests.test_tree.json",
    "nose.tools.assert_equal",
    "tree_data",
    "tree_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tests.test_tree.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tests.test_tree.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree": {
  "data": {
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.json_graph.tree.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.tree.__author__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.tree._attrs": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.readwrite.json_graph.tree.chain": {
  "data": {
   "shadows": "itertools.chain"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.json_graph.tree.tree_data": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "TypeError",
    "add_children",
    "dict",
    "itertools.chain",
    "networkx.NetworkXError",
    "networkx.readwrite.json_graph.tree._attrs"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_data.add_children": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "add_children",
    "dict",
    "itertools.chain",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "add_children",
    "dict",
    "networkx.DiGraph",
    "networkx.readwrite.json_graph.tree._attrs",
    "networkx.utils.make_str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.json_graph.tree.tree_graph.add_children": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "add_children",
    "dict",
    "networkx.utils.make_str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.leda": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.leda.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.readwrite.leda.__author__": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "networkx.readwrite.leda.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.leda.parse_leda": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "int",
    "iter",
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.exception.NetworkXError",
    "networkx.utils.is_string_like",
    "next",
    "range",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.leda.read_leda": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "networkx.readwrite.leda.parse_leda",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.multiline_adjlist.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "networkx.readwrite.multiline_adjlist.__author__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.readwrite.multiline_adjlist.generate_multiline_adjlist": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "len",
    "networkx.utils.make_str",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.parse_multiline_adjlist": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "StopIteration",
    "TypeError",
    "ast.literal_eval",
    "edgetype",
    "int",
    "len",
    "networkx.Graph",
    "next",
    "nodetype",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.read_multiline_adjlist": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "edgetype",
    "networkx.readwrite.multiline_adjlist.parse_multiline_adjlist",
    "networkx.utils.open_file",
    "nodetype"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.teardown_module": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "networkx.readwrite.multiline_adjlist.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.multiline_adjlist.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.readwrite.multiline_adjlist.write_multiline_adjlist": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "networkx.readwrite.multiline_adjlist.generate_multiline_adjlist",
    "networkx.readwrite.multiline_adjlist.sys",
    "networkx.readwrite.multiline_adjlist.time",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.nx_shp.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_shp.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_shp.__author__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_shp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_shp.ogr": {
  "data": {
   "shadows": "ogr"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_shp.read_shp": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "ImportError",
    "dict",
    "isinstance",
    "networkx.DiGraph",
    "osgeo.ogr.Geometry",
    "osgeo.ogr.Open",
    "osgeo.ogr.wkbLineString",
    "range",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.setup_module": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "ImportError",
    "create_feature",
    "float",
    "int",
    "netgeometry",
    "osgeo.ogr.FieldDefn",
    "osgeo.ogr.GetDriverByName",
    "osgeo.ogr.OFTInteger",
    "osgeo.ogr.OFTReal",
    "osgeo.ogr.OFTString",
    "osgeo.ogr.UseExceptions",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbPoint",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.create_feature": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "osgeo.ogr.Feature"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_shp.write_shp.netgeometry": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "TypeError",
    "float",
    "osgeo.ogr.CreateGeometryFromWkb",
    "osgeo.ogr.CreateGeometryFromWkt",
    "osgeo.ogr.Geometry",
    "osgeo.ogr.wkbLineString",
    "osgeo.ogr.wkbPoint",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.nx_yaml.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_yaml.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_yaml.__author__": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "networkx.readwrite.nx_yaml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_yaml.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_yaml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.nx_yaml.read_yaml": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "ImportError",
    "networkx.readwrite.nx_yaml.yaml",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.setup_module": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.teardown_module": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "networkx.readwrite.nx_yaml.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.write_yaml": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ImportError",
    "networkx.readwrite.nx_yaml.yaml",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.nx_yaml.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.p2g.__author__": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "networkx.readwrite.p2g.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g.networkx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.p2g.parse_p2g": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "int",
    "map",
    "networkx.readwrite.p2g.networkx",
    "next",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.p2g.read_p2g": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "networkx.readwrite.p2g.parse_p2g",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.p2g.write_p2g": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.utils.open_file",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.pajek.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.readwrite.pajek.__author__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "networkx.readwrite.pajek.generate_pajek": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "dict",
    "id",
    "int",
    "len",
    "map",
    "networkx.readwrite.pajek.make_qstr",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.make_qstr": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "networkx.utils.is_string_like",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.make_str": {
  "data": {
   "shadows": "networkx.utils.make_str"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.parse_pajek": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "float",
    "id",
    "int",
    "iter",
    "len",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.readwrite.pajek.shlex",
    "networkx.utils.is_string_like",
    "networkx.utils.make_str",
    "next",
    "range",
    "str",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.read_pajek": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.readwrite.pajek.parse_pajek",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.shlex": {
  "data": {
   "shadows": "shlex"
  },
  "type": "import"
 },
 "networkx.readwrite.pajek.teardown_module": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "networkx.readwrite.pajek.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.pajek.write_pajek": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.readwrite.pajek.generate_pajek",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.sparse6.NetworkXError": {
  "data": {
   "shadows": "networkx.exception.NetworkXError"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "networkx.readwrite.sparse6.__author__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "networkx.readwrite.sparse6.data_to_graph6": {
  "data": {
   "shadows": "networkx.readwrite.graph6.data_to_graph6"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.data_to_n": {
  "data": {
   "shadows": "networkx.readwrite.graph6.data_to_n"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.generate_sparse6": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "dict",
    "enc",
    "len",
    "list",
    "max",
    "min",
    "networkx.readwrite.graph6.data_to_graph6",
    "networkx.readwrite.graph6.n_to_data",
    "networkx.utils.not_implemented_for",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.generate_sparse6.enc": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.graph6_to_data": {
  "data": {
   "shadows": "networkx.readwrite.graph6.graph6_to_data"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.n_to_data": {
  "data": {
   "shadows": "networkx.readwrite.graph6.n_to_data"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.open_file": {
  "data": {
   "shadows": "networkx.utils.open_file"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.sparse6.parse_sparse6": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.exception.NetworkXError",
    "networkx.readwrite.graph6.data_to_n",
    "networkx.readwrite.graph6.graph6_to_data",
    "parseData",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.parse_sparse6.parseData": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "iter",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.read_sparse6": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "len",
    "networkx.readwrite.sparse6.parse_sparse6",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.teardown_module": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "networkx.readwrite.sparse6.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.sparse6.write_sparse6": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "networkx.readwrite.sparse6.generate_sparse6",
    "networkx.utils.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.setUp": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_delimiter": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "int",
    "networkx.path_graph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "int",
    "networkx.convert_node_labels_to_integers",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "int",
    "networkx.MultiDiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.read_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_multiline_adjlist",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_error": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.write_multiline_adjlist",
    "nose.tools.assert_raises",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_graphs_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_multiline_adjlist",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist": {
  "data": {
   "lineno": 173
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setUp": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_delimiter": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "int",
    "networkx.path_graph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.io",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "int",
    "networkx.convert_node_labels_to_integers",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "int",
    "networkx.MultiDiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.read_multiline_adjlist",
    "networkx.readwrite.tests.test_adjlist.os",
    "networkx.readwrite.tests.test_adjlist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_multiline_adjlist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_adjlist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_adjlist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist": {
  "data": {
   "lineno": 14
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.setUp": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "int",
    "networkx.convert_node_labels_to_integers",
    "networkx.isolates",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "int",
    "networkx.MultiDiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "int",
    "networkx.MultiGraph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_edgelist",
    "nose.tools.assert_not_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_edgelist",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_error": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.write_edgelist",
    "nose.tools.assert_raises",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_2": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.read_weighted_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "int",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.testing.assert_edges_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "ValueError",
    "chr",
    "networkx.Graph",
    "networkx.read_edgelist",
    "networkx.readwrite.tests.test_edgelist.os",
    "networkx.readwrite.tests.test_edgelist.tempfile",
    "networkx.testing.assert_graphs_equal",
    "networkx.write_edgelist",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.readwrite.tests.test_edgelist.io",
    "networkx.write_edgelist",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_edgelist.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_edgelist.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_gexf.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.setUp": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.readwrite.tests.test_gexf.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_bool": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "assert_equal",
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "assert_equal",
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_key_error": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_gexf",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_serialize_ints_to_strings": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "assert_equal",
    "int",
    "networkx.Graph",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_gexf",
    "networkx.readwrite.tests.test_gexf.io",
    "networkx.write_gexf",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.TestGEXF.test_write_with_node_attributes": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.generate_gexf",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gexf.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gexf.xml.etree.ElementTree": {
  "data": {
   "shadows": "xml.etree.ElementTree"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml": {
  "data": {
   "symbols_in_volume": [
    "NameError",
    "chr",
    "str"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.tests.test_gml.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.TestGraph": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.setUp": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_data_types": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "ast.literal_eval",
    "dict",
    "networkx.Graph",
    "networkx.generate_gml",
    "networkx.parse_gml",
    "networkx.readwrite.gml.literal_destringizer",
    "networkx.readwrite.gml.literal_stringizer",
    "networkx.readwrite.tests.test_gml.unichr",
    "networkx.readwrite.tests.test_gml.unicode"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_escape_unescape": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.generate_gml",
    "networkx.parse_gml",
    "networkx.readwrite.tests.test_gml.unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "ValueError",
    "assert_generate_error",
    "assert_parse_error",
    "assert_raises",
    "frozenset",
    "len",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.parse_gml",
    "networkx.read_gml",
    "networkx.readwrite.gml.literal_destringizer",
    "networkx.readwrite.gml.literal_stringizer",
    "networkx.readwrite.tests.test_gml.codecs",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.readwrite.tests.test_gml.unicode"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_generate_error": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "assert_raises",
    "list",
    "networkx.NetworkXError",
    "networkx.generate_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_exceptions.assert_parse_error": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.parse_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_graph_types": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "assert_equal",
    "bool",
    "int",
    "networkx.generate_gml",
    "networkx.parse_gml",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_name": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "assert_equal",
    "assert_not_in",
    "networkx.parse_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "assert_equals",
    "networkx.parse_gml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_quotes": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.path_graph",
    "networkx.readwrite.tests.test_gml.tempfile",
    "networkx.readwrite.tests.test_gml.unichr",
    "networkx.write_gml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_read_gml": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "assert_equals",
    "networkx.parse_gml",
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.os",
    "networkx.readwrite.tests.test_gml.tempfile",
    "open",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.read_gml",
    "networkx.readwrite.tests.test_gml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.TestGraph.test_tuplelabels": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.Graph",
    "networkx.generate_gml",
    "networkx.readwrite.gml.literal_stringizer"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gml.codecs": {
  "data": {
   "shadows": "codecs"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_destringizer": {
  "data": {
   "shadows": "networkx.readwrite.gml.literal_destringizer"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.literal_stringizer": {
  "data": {
   "shadows": "networkx.readwrite.gml.literal_stringizer"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gml.unichr": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.readwrite.tests.test_gml.unicode": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "networkx.readwrite.tests.test_gpickle": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.setUp": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiDiGraph",
    "networkx.MultiGraph",
    "networkx.freeze"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_gpickle": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_graphs_equal",
    "assert_nodes_equal",
    "networkx.read_gpickle",
    "networkx.readwrite.tests.test_gpickle.os",
    "networkx.readwrite.tests.test_gpickle.tempfile",
    "networkx.write_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.TestGpickle.test_protocol": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "assert_edges_equal",
    "assert_graphs_equal",
    "assert_nodes_equal",
    "networkx.read_gpickle",
    "networkx.readwrite.tests.test_gpickle.tempfile",
    "networkx.write_gpickle"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_gpickle.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_gpickle.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.tests.test_graph6.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.directed_error": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generate_graph6",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_generate_and_parse_graph6": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "list",
    "networkx.generate_graph6",
    "networkx.parse_graph6",
    "networkx.random_graphs.gnm_random_graph",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_generate_graph6": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.complete_bipartite_graph",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.generate_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_parse_graph6": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graph6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_read_graph6": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "networkx.parse_graph6",
    "networkx.read_graph6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_read_many_graph6": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "len",
    "networkx.read_graph6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6.test_write_graph6": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "networkx.complete_bipartite_graph",
    "networkx.write_graph6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_data_sparse6_data_conversion": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.readwrite.graph6.data_to_graph6",
    "networkx.readwrite.graph6.graph6_to_data"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_n_data_n_conversion": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.readwrite.graph6.data_to_n",
    "networkx.readwrite.graph6.n_to_data"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graph6.g6": {
  "data": {
   "shadows": "networkx.readwrite.graph6"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graph6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_graphml.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.setUp": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.setupClass": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_bool": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_default_attribute": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "assert_equal",
    "int",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.write_graphml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_directed_edge_in_undirected": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_hyperedge_error": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_key_error": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_keys": {
  "data": {
   "lineno": 316
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_to_graph": {
  "data": {
   "lineno": 320
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_read_attribute_graphml": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_directed_graphml": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_undirected_graphml": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_undirected_edge_in_directed": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "assert_raises",
    "networkx.NetworkXError",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_unicode": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "chr",
    "networkx.Graph",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.os",
    "networkx.readwrite.tests.test_graphml.tempfile",
    "networkx.write_graphml",
    "str",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_write_read_simple_directed_graphml": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io",
    "networkx.write_graphml",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.TestGraph.test_yfiles_extension": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_graphml",
    "networkx.read_graphml",
    "networkx.readwrite.tests.test_graphml.io"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_graphml.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_graphml.xml.etree.ElementTree": {
  "data": {
   "shadows": "xml.etree.ElementTree"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_leda",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_leda",
    "networkx.read_leda",
    "networkx.readwrite.tests.test_leda.io",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_leda.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_leda.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.setUp": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "assert_edges_equal",
    "networkx.readwrite.tests.test_p2g.io",
    "nose.tools.assert_equal",
    "read_p2g",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.readwrite.tests.test_p2g.io",
    "nose.tools.assert_equal",
    "write_p2g"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "assert_edges_equal",
    "networkx.DiGraph",
    "networkx.readwrite.tests.test_p2g.io",
    "read_p2g",
    "write_p2g"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_p2g.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.assert_not_equal": {
  "data": {
   "shadows": "nose.tools.assert_not_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_p2g.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.setUp": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_pajek.os",
    "networkx.readwrite.tests.test_pajek.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.tearDown": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_pajek.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_noname": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "parse_pajek"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assert_edges_equal",
    "nose.tools.assert_equal",
    "parse_pajek",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "assert_edges_equal",
    "nose.tools.assert_equal",
    "parse_pajek",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_edges_equal",
    "nose.tools.assert_equal",
    "parse_pajek",
    "read_pajek",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.TestPajek.test_unicode": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "ValueError",
    "assert_edges_equal",
    "assert_nodes_equal",
    "chr",
    "networkx.readwrite.tests.test_pajek.io",
    "nose.tools.assert_equal",
    "unichr"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_pajek.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.open": {
  "data": {
   "shadows": "io.open"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_pajek.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_shp.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.TestShp": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_shp.TestShp.checkgeom": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.deletetmp": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.readwrite.tests.test_shp.os"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setUp": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "createlayer",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "osgeo.ogr.Feature",
    "osgeo.ogr.Geometry",
    "osgeo.ogr.GetDriverByName",
    "osgeo.ogr.wkbLineString",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setUp.createlayer": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "osgeo.ogr.FieldDefn",
    "osgeo.ogr.OFTString",
    "osgeo.ogr.wkbLineString"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.setupClass": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.tearDown": {
  "data": {
   "lineno": 184
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp",
    "osgeo.ogr.Open",
    "testattributes"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_attributeexport.testattributes": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_geometryexport": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "networkx.read_shp",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp",
    "osgeo.ogr.Open"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.test_wkt_export": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "Exception",
    "networkx.DiGraph",
    "networkx.readwrite.tests.test_shp.os",
    "networkx.readwrite.tests.test_shp.tempfile",
    "networkx.write_shp",
    "osgeo.ogr.Open"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "compare_graph_paths_names",
    "networkx.read_shp"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.TestShp.testload.compare_graph_paths_names": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_shp.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.ogr": {
  "data": {
   "shadows": "osgeo.ogr"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_shp.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "networkx.readwrite.tests.test_sparse6.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.directed_error": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.NetworkXError",
    "networkx.generate_sparse6",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_generate_and_parse_sparse6": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "assert_equal",
    "list",
    "min",
    "networkx.generate_sparse6",
    "networkx.parse_sparse6",
    "networkx.random_graphs.gnm_random_graph",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_generate_sparse6": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.complete_graph",
    "networkx.empty_graph",
    "networkx.generate_sparse6",
    "networkx.path_graph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_parse_multigraph_graph": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_true",
    "networkx.Graph",
    "networkx.MultiGraph",
    "networkx.parse_sparse6",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_parse_sparse6": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.parse_sparse6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_many_graph6": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "len",
    "networkx.read_sparse6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_sparse6": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "networkx.parse_sparse6",
    "networkx.read_sparse6",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_write_sparse6": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "assert_equal",
    "io.StringIO",
    "networkx.complete_bipartite_graph",
    "networkx.write_sparse6"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_sparse6.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.sg6": {
  "data": {
   "shadows": "networkx.readwrite.sparse6"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_sparse6.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml": {
  "data": {},
  "type": "module"
 },
 "networkx.readwrite.tests.test_yaml.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.assert_equal": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "networkx.read_yaml",
    "networkx.readwrite.tests.test_yaml.os",
    "networkx.readwrite.tests.test_yaml.tempfile",
    "networkx.testing.assert_edges_equal",
    "networkx.testing.assert_nodes_equal",
    "networkx.write_yaml"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.build_graphs": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.setUp": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.setupClass": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testDirected": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testMultiGraph": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.TestYaml.testUndirected": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "networkx.readwrite.tests.test_yaml.assert_edges_equal": {
  "data": {
   "shadows": "networkx.testing.assert_edges_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.assert_nodes_equal": {
  "data": {
   "shadows": "networkx.testing.assert_nodes_equal"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.readwrite.tests.test_yaml.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "networkx.relabel": {
  "data": {},
  "type": "module"
 },
 "networkx.relabel.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.relabel.__author__": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "networkx.relabel._relabel_copy": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "dict",
    "mapping.get"
   ]
  },
  "type": "function"
 },
 "networkx.relabel._relabel_inplace": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "KeyError",
    "len",
    "list",
    "mapping",
    "mapping.items",
    "mapping.keys",
    "mapping.values",
    "networkx.DiGraph",
    "networkx.NetworkXUnfeasible",
    "networkx.topological_sort",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.relabel.convert_node_labels_to_integers": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "dict",
    "mapping",
    "mapping.items",
    "networkx.NetworkXError",
    "networkx.relabel.relabel_nodes",
    "networkx.set_node_attributes",
    "range",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.relabel.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.relabel.relabel_nodes": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "dict",
    "hasattr",
    "mapping",
    "networkx.relabel._relabel_copy",
    "networkx.relabel._relabel_inplace"
   ]
  },
  "type": "function"
 },
 "networkx.release": {
  "data": {
   "shadows": "networkx.release"
  },
  "type": "import"
 },
 "networkx.release.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "networkx.release.authors": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "networkx.release.basedir": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "networkx.release.classifiers": {
  "data": {
   "lineno": 204
  },
  "type": "constant"
 },
 "networkx.release.date": {
  "data": {
   "shadows": "version.date"
  },
  "type": "import"
 },
 "networkx.release.date_info": {
  "data": {
   "shadows": "version.date_info"
  },
  "type": "import"
 },
 "networkx.release.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "networkx.release.description": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "networkx.release.dev": {
  "data": {
   "lineno": 182
  },
  "type": "constant"
 },
 "networkx.release.download_url": {
  "data": {
   "lineno": 201
  },
  "type": "constant"
 },
 "networkx.release.get_info": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "ImportError",
    "networkx.release.basedir",
    "networkx.release.datetime",
    "networkx.release.get_revision",
    "networkx.release.sys",
    "networkx.release.time",
    "str",
    "version.date",
    "version.date_info",
    "version.date_info.strftime",
    "version.vcs_info",
    "version.version",
    "version.version_info"
   ]
  },
  "type": "function"
 },
 "networkx.release.get_revision": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "networkx.release.basedir",
    "networkx.release.os"
   ]
  },
  "type": "function"
 },
 "networkx.release.keywords": {
  "data": {
   "lineno": 203
  },
  "type": "constant"
 },
 "networkx.release.license": {
  "data": {
   "lineno": 193
  },
  "type": "constant"
 },
 "networkx.release.long_description": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "networkx.release.maintainer": {
  "data": {
   "lineno": 198
  },
  "type": "constant"
 },
 "networkx.release.maintainer_email": {
  "data": {
   "lineno": 199
  },
  "type": "constant"
 },
 "networkx.release.major": {
  "data": {
   "lineno": 176
  },
  "type": "constant"
 },
 "networkx.release.minor": {
  "data": {
   "lineno": 177
  },
  "type": "constant"
 },
 "networkx.release.name": {
  "data": {
   "lineno": 175
  },
  "type": "constant"
 },
 "networkx.release.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.release.platforms": {
  "data": {
   "lineno": 202
  },
  "type": "constant"
 },
 "networkx.release.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.release.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "networkx.release.url": {
  "data": {
   "lineno": 200
  },
  "type": "constant"
 },
 "networkx.release.vcs_info": {
  "data": {
   "shadows": "version.vcs_info"
  },
  "type": "import"
 },
 "networkx.release.version": {
  "data": {
   "shadows": "version.version"
  },
  "type": "import"
 },
 "networkx.release.version_info": {
  "data": {
   "shadows": "version.version_info"
  },
  "type": "import"
 },
 "networkx.release.write_versionfile": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "networkx.release.basedir",
    "networkx.release.get_info",
    "networkx.release.os",
    "networkx.release.sys",
    "version.version",
    "writefile"
   ]
  },
  "type": "function"
 },
 "networkx.release.write_versionfile.writefile": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "open"
   ]
  },
  "type": "function"
 },
 "networkx.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.test": {
  "data": {
   "shadows": "networkx.tests.test.run"
  },
  "type": "import"
 },
 "networkx.testing": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.setUp": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_equal": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_not_equal": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_equal": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_not_equal": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.MultiGraph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.setUp": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_digraphs_equal": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_equal": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal2": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal3": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestGraphsEqual.test_multigraphs_equal": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "networkx.MultiDiGraph",
    "networkx.path_graph",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "networkx.testing.tests.test_utils._GenericTest"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.setUp": {
  "data": {
   "lineno": 21
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_edges_with_data_not_equal": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_equal": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_not_equal": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_with_data_equal": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "networkx.Graph"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_equal": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils._GenericTest._test_not_equal": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "AssertionError"
   ]
  },
  "type": "function"
 },
 "networkx.testing.tests.test_utils.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.testing.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.testing.utils.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "networkx.testing.utils.assert_edges_equal": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "set",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.assert_graphs_equal": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.testing.utils.assert_edges_equal",
    "networkx.testing.utils.assert_nodes_equal"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.assert_nodes_equal": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "TypeError",
    "assert_equal",
    "len",
    "networkx.testing.utils.operator",
    "set",
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.testing.utils.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "networkx.tests": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.benchmark": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "networkx.tests.benchmark.Benchmark",
    "networkx.tests.benchmark.N",
    "networkx.tests.benchmark.all_tests",
    "networkx.tests.benchmark.b",
    "networkx.tests.benchmark.classes",
    "networkx.tests.benchmark.p",
    "networkx.tests.benchmark.setup",
    "networkx.tests.benchmark.test_string",
    "networkx.tests.benchmark.tests",
    "networkx.tests.benchmark.title"
   ]
  },
  "type": "module"
 },
 "networkx.tests.benchmark.Benchmark": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.tests.benchmark.Benchmark.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "tuple"
   ]
  },
  "type": "function"
 },
 "networkx.tests.benchmark.Benchmark.__setitem__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "timeit.Timer"
   ]
  },
  "type": "function"
 },
 "networkx.tests.benchmark.Benchmark.run": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "Exception",
    "len",
    "max",
    "min",
    "print"
   ]
  },
  "type": "function"
 },
 "networkx.tests.benchmark.N": {
  "data": {
   "lineno": 184
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.Timer": {
  "data": {
   "shadows": "timeit.Timer"
  },
  "type": "import"
 },
 "networkx.tests.benchmark.all_tests": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.b": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.classes": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.p": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.setup": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.test_string": {
  "data": {
   "lineno": 188
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.tests": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "networkx.tests.benchmark.title": {
  "data": {
   "lineno": 186
  },
  "type": "constant"
 },
 "networkx.tests.test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "networkx.tests.test.run"
   ]
  },
  "type": "module"
 },
 "networkx.tests.test.getcwd": {
  "data": {
   "shadows": "os.getcwd"
  },
  "type": "import"
 },
 "networkx.tests.test.nose": {
  "data": {
   "shadows": "nose"
  },
  "type": "import"
 },
 "networkx.tests.test.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "networkx.tests.test.run": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "ImportError",
    "RuntimeError",
    "networkx.tests.test.nose",
    "networkx.tests.test.sys",
    "os.getcwd",
    "os.path.abspath",
    "os.path.dirname",
    "os.path.join",
    "os.path.pardir"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.tests.test_convert": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert.TestConvert": {
  "data": {
   "lineno": 8
  },
  "type": "class"
 },
 "networkx.tests.test_convert.TestConvert.edgelists_equal": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_digraphs": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "DiGraph",
    "Graph",
    "assert_equal",
    "dest",
    "networkx.generators.classic.cycle_graph",
    "sorted",
    "source",
    "to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_directed_to_undirected": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_edgelists": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "Graph",
    "assert_equal",
    "path_graph",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_graph": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "Graph",
    "assert_equal",
    "dest",
    "from_dict_of_dicts",
    "from_dict_of_lists",
    "networkx.generators.classic.cycle_graph",
    "sorted",
    "source",
    "to_dict_of_dicts",
    "to_dict_of_lists",
    "to_networkx_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_simple_graphs": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "Graph",
    "assert_equal",
    "dest",
    "networkx.generators.classic.barbell_graph",
    "path_graph",
    "sorted",
    "source",
    "to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "Graph",
    "MultiGraph",
    "assert_equal",
    "assert_false",
    "assert_not_equal",
    "dest",
    "from_dict_of_dicts",
    "from_dict_of_lists",
    "list",
    "networkx.generators.classic.cycle_graph",
    "sorted",
    "source",
    "to_dict_of_dicts",
    "to_dict_of_lists",
    "to_networkx_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert_numpy.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.__init__": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.assert_equal": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "nose.tools.assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.create_weighted": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.identity_conversion": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "networkx.from_numpy_matrix",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.setupClass": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_dtype": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.from_numpy_matrix",
    "nose.tools.assert_equal",
    "numpy.matrix",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_parallel_edges": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.from_numpy_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "numpy.matrix",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_type": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "TypeError",
    "bool",
    "complex",
    "float",
    "int",
    "networkx.from_numpy_matrix",
    "nose.tools.assert_equal",
    "nose.tools.assert_raises",
    "numpy.bool",
    "numpy.complex",
    "numpy.float",
    "numpy.matrix",
    "numpy.object",
    "numpy.str",
    "str",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_array": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_matrix": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_array": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_matrix": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_array": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_array": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix",
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_numpy_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_nodelist": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.to_numpy_matrix",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_numpy_multigraph": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.MultiGraph",
    "networkx.to_numpy_matrix",
    "nose.tools.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_shape": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_numpy_matrix",
    "nose.tools.assert_raises",
    "numpy.array"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_symmetric": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.from_numpy_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "numpy.matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_to_numpy_recarray": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "float",
    "int",
    "networkx.Graph",
    "networkx.to_numpy_recarray",
    "nose.tools.assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.TestConvertNumpy.test_weight_keyword": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.to_numpy_matrix",
    "np_assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_numpy.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_numpy.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert_pandas.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "pandas.DataFrame",
    "pandas.np.random.RandomState"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.assert_equal": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "networkx.is_isomorphic",
    "nose.tools.assert_true"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.setupClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_all_attr": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_dataframe"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_multi_attr": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_dataframe"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_no_attr": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_dataframe"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_one_attr": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.from_pandas_dataframe"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_pandas.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_pandas.pd": {
  "data": {
   "shadows": "pandas"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_convert_scipy.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.__init__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.Graph",
    "networkx.generators.classic.barbell_graph",
    "networkx.generators.classic.cycle_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.assert_equal": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "nose.tools.assert_true",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.create_weighted": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "networkx.generators.classic.cycle_graph",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.identity_conversion": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "networkx.from_scipy_sparse_matrix",
    "networkx.to_networkx_graph"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.setupClass": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest",
    "numpy.testing.assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_empty": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "numpy.matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword_fail": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.to_scipy_sparse_matrix",
    "nose.tools.raises",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_from_scipy_sparse_matrix_parallel_edges": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.MultiDiGraph",
    "networkx.from_scipy_sparse_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "scipy.sparse.csr_matrix",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_digraph_matrix": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_graph_matrix": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_digraph_matrix": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_graph_matrix": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_nodelist": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.generators.classic.path_graph",
    "networkx.to_numpy_matrix",
    "networkx.to_scipy_sparse_matrix",
    "nose.tools.assert_raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_null_fail": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXError",
    "networkx.to_scipy_sparse_matrix",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_ordering": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "numpy.matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_digraph": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "networkx.DiGraph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "numpy.matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_graph": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "numpy.matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_shape": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.from_scipy_sparse_matrix",
    "nose.tools.assert_raises",
    "scipy.sparse.lil_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_symmetric": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "networkx.MultiGraph",
    "networkx.from_scipy_sparse_matrix",
    "networkx.testing.utils.assert_graphs_equal",
    "scipy.sparse.csr_matrix"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.TestConvertNumpy.test_weight_keyword": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "networkx.Graph",
    "networkx.generators.classic.path_graph",
    "networkx.to_scipy_sparse_matrix",
    "np_assert_equal",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_convert_scipy.assert_equal": {
  "data": {
   "shadows": "nose.tools.assert_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.assert_graphs_equal": {
  "data": {
   "shadows": "networkx.testing.utils.assert_graphs_equal"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.assert_raises": {
  "data": {
   "shadows": "nose.tools.assert_raises"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.assert_true": {
  "data": {
   "shadows": "nose.tools.assert_true"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.path_graph": {
  "data": {
   "shadows": "networkx.generators.classic.path_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.sp": {
  "data": {
   "shadows": "scipy"
  },
  "type": "import"
 },
 "networkx.tests.test_convert_scipy.sparse": {
  "data": {
   "shadows": "scipy.sparse"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_exceptions.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions.raises": {
  "data": {
   "shadows": "nose.tools.raises"
  },
  "type": "import"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_algorithm_error": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "networkx.NetworkXAlgorithmError",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_error": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_exception": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "networkx.NetworkXException",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_no_path": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "networkx.NetworkXNoPath",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_pointless_concept": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "networkx.NetworkXPointlessConcept",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unbounded": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "networkx.NetworkXUnbounded",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_exceptions.test_raises_networkx_unfeasible": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.NetworkXUnfeasible",
    "nose.tools.raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel": {
  "data": {},
  "type": "module"
 },
 "networkx.tests.test_relabel.TestRelabel": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "assert_equal",
    "assert_true",
    "convert_node_labels_to_integers",
    "degree",
    "empty_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers2": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "assert_equal",
    "convert_node_labels_to_integers",
    "empty_graph",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_convert_to_integers_raise": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "convert_node_labels_to_integers",
    "raises"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_isolated_nodes_to_same": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "Graph",
    "assert_equal",
    "list",
    "range",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "assert_equal",
    "empty_graph",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "DiGraph",
    "assert_equal",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "assert_equal",
    "empty_graph",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function.mapping": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ord"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "Graph",
    "assert_equal",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "Graph",
    "KeyError",
    "raises",
    "relabel_nodes"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "MultiDiGraph",
    "assert_equal",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "MultiGraph",
    "assert_edges_equal",
    "assert_equal",
    "relabel_nodes",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_selfloop": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "assert_equal",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.TestRelabel.test_relabel_toposort": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "dict",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.tests.test_relabel.barbell_graph": {
  "data": {
   "shadows": "networkx.generators.classic.barbell_graph"
  },
  "type": "import"
 },
 "networkx.tests.test_relabel.cycle_graph": {
  "data": {
   "shadows": "networkx.generators.classic.cycle_graph"
  },
  "type": "import"
 },
 "networkx.utils": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.contextmanagers": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.contextmanagers.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.utils.contextmanagers.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "networkx.utils.contextmanagers.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "networkx.utils.contextmanagers.reversed": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "contextlib.contextmanager"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators": {
  "data": {
   "symbols_in_volume": [
    "collections.defaultdict",
    "networkx.utils.decorators._dispatch_dict",
    "networkx.utils.decorators._open_bz2",
    "networkx.utils.decorators._open_gz",
    "open"
   ]
  },
  "type": "module"
 },
 "networkx.utils.decorators.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.utils.decorators._dispatch_dict": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "networkx.utils.decorators._open_bz2": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "networkx.utils.decorators.bz2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators._open_gz": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "networkx.utils.decorators.gzip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.bz2": {
  "data": {
   "shadows": "bz2"
  },
  "type": "import"
 },
 "networkx.utils.decorators.decorator": {
  "data": {
   "shadows": "decorator.decorator"
  },
  "type": "import"
 },
 "networkx.utils.decorators.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "networkx.utils.decorators.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "networkx.utils.decorators.is_string_like": {
  "data": {
   "shadows": "networkx.utils.is_string_like"
  },
  "type": "import"
 },
 "networkx.utils.decorators.not_implemented_for": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "networkx.utils.decorators.not_implemented_for._not_implemented_for": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "KeyError",
    "decorator.decorator",
    "f",
    "networkx.NetworkXNotImplemented"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.decorators.open_file": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "networkx.utils.decorators.open_file._open_file": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "IndexError",
    "KeyError",
    "TypeError",
    "decorator.decorator",
    "func",
    "hasattr",
    "list",
    "networkx.NetworkXError",
    "networkx.utils.decorators._dispatch_dict",
    "networkx.utils.is_string_like",
    "os.path.splitext"
   ]
  },
  "type": "function"
 },
 "networkx.utils.decorators.splitext": {
  "data": {
   "shadows": "os.path.splitext"
  },
  "type": "import"
 },
 "networkx.utils.decorators.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.utils.heaps": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.heaps.BinaryHeap": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.BinaryHeap.__init__": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "itertools.count",
    "networkx.utils.heaps.BinaryHeap",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.get": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.insert": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": [
    "dict",
    "heapq.heappush",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.min": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "dict",
    "heapq.heappop",
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "pop"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.BinaryHeap.pop": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "dict",
    "heapq.heappop",
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc",
    "pop"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.MinHeap._Item.__init__": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap._Item.__repr__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__bool__": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__contains__": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__init__": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__len__": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.__nonzero__": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.get": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.insert": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.min": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.MinHeap.pop": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap"
   ]
  },
  "type": "class"
 },
 "networkx.utils.heaps.PairingHeap._Node.__init__": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "networkx.utils.heaps.PairingHeap",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.__init__": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "networkx.utils.heaps.PairingHeap",
    "super"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._cut": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "next",
    "next.prev"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._link": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "next",
    "next.prev"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap._merge_children": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "link",
    "next",
    "next.next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.get": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.insert": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.min": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.PairingHeap.pop": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.heaps.MinHeap",
    "networkx.utils.heaps._inherit_doc"
   ]
  },
  "type": "function"
 },
 "networkx.utils.heaps.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.utils.heaps.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "networkx.utils.heaps._inherit_doc": {
  "data": {
   "lineno": 140
  },
  "type": "function"
 },
 "networkx.utils.heaps._inherit_doc.func": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "networkx.utils.heaps.count": {
  "data": {
   "shadows": "itertools.count"
  },
  "type": "import"
 },
 "networkx.utils.heaps.heappop": {
  "data": {
   "shadows": "heapq.heappop"
  },
  "type": "import"
 },
 "networkx.utils.heaps.heappush": {
  "data": {
   "shadows": "heapq.heappush"
  },
  "type": "import"
 },
 "networkx.utils.heaps.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.misc": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "networkx.utils.misc.PY2",
    "networkx.utils.misc.sys"
   ]
  },
  "type": "module"
 },
 "networkx.utils.misc.PY2": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "networkx.utils.misc.__author__": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "networkx.utils.misc.accumulate": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "StopIteration",
    "func",
    "iter",
    "networkx.utils.misc.operator",
    "next"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.call": {
  "data": {
   "shadows": "subprocess.call"
  },
  "type": "import"
 },
 "networkx.utils.misc.default_opener": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "networkx.utils.misc.sys",
    "subprocess.call"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "networkx.utils.misc.dict_to_numpy_array1",
    "networkx.utils.misc.dict_to_numpy_array2"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array1": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "dict",
    "len",
    "networkx.utils.misc.numpy",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.dict_to_numpy_array2": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "KeyError",
    "dict",
    "len",
    "networkx.utils.misc.numpy",
    "range",
    "set",
    "zip"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.flatten": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "networkx.utils.misc.is_string_like",
    "networkx.utils.misc.iterable"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.generate_unique_node": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "networkx.utils.misc.uuid",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.is_list_of_ints": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "list"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.is_string_like": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "TypeError",
    "ValueError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.iterable": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "hasattr",
    "len"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.make_str": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.misc.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.utils.misc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.misc.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "networkx.utils.misc.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.utils.misc.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.random_sequence.__author__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "networkx.utils.random_sequence._warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.bisect": {
  "data": {
   "shadows": "bisect"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.create_degree_sequence": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "DeprecationWarning",
    "int",
    "max",
    "min",
    "networkx.NetworkXError",
    "networkx.is_valid_degree_sequence",
    "round",
    "sfunction",
    "warnings.warn"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.cumulative_distribution": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "float",
    "len",
    "range",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.discrete_sequence": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.random_sequence.bisect",
    "networkx.utils.random_sequence.cumulative_distribution",
    "networkx.utils.random_sequence.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.pareto_sequence": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "networkx.utils.random_sequence.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.powerlaw_sequence": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "networkx.utils.random_sequence.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.random_weighted_sample": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "networkx.utils.random_sequence.weighted_choice",
    "set"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.utils.random_sequence.uniform_sequence": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "networkx.utils.random_sequence.random",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.weighted_choice": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "networkx.utils.random_sequence.random",
    "sum"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.zipf_rv": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "networkx.utils.random_sequence.random"
   ]
  },
  "type": "function"
 },
 "networkx.utils.random_sequence.zipf_sequence": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "networkx.utils.random_sequence.zipf_rv",
    "range"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.rcm.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "networkx.utils.rcm.__author__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.utils.rcm.connected_cuthill_mckee_ordering": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "collections.deque",
    "heuristic",
    "networkx.utils.rcm.pseudo_peripheral_node",
    "operator.itemgetter",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.cuthill_mckee_ordering": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "networkx.connected_components",
    "networkx.utils.rcm.connected_cuthill_mckee_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "networkx.utils.rcm.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "networkx.utils.rcm.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.rcm.pseudo_peripheral_node": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "max",
    "min",
    "networkx.shortest_path_length",
    "next",
    "operator.itemgetter"
   ]
  },
  "type": "function"
 },
 "networkx.utils.rcm.reverse_cuthill_mckee_ordering": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "list",
    "networkx.utils.rcm.cuthill_mckee_ordering",
    "reversed"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_contextmanager": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_contextmanager.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_contextmanager.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_contextmanager.test_reversed": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "Exception",
    "assert_true",
    "networkx.DiGraph",
    "networkx.utils.reversed"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.read": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.setUp": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.tearDown": {
  "data": {
   "lineno": 147
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj": {
  "data": {
   "lineno": 144
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "assert_equal"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.write": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "networkx.utils.decorators.open_file",
    "networkx.utils.tests.test_decorators.tempfile"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.not_implemented_for": {
  "data": {
   "shadows": "networkx.utils.decorators.not_implemented_for"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.open_file": {
  "data": {
   "shadows": "networkx.utils.decorators.open_file"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.tempfile": {
  "data": {
   "shadows": "tempfile"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "networkx.Graph",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator.test1": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "KeyError",
    "networkx.Graph",
    "raises",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_key.test1": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "networkx.Graph",
    "networkx.NetworkXNotImplemented",
    "raises",
    "test1"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise.test1": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "networkx.utils.decorators.not_implemented_for"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps": {
  "data": {
   "symbols_in_volume": [
    "networkx.NetworkXError",
    "networkx.utils.tests.test_heaps.X",
    "networkx.utils.tests.test_heaps.x"
   ]
  },
  "type": "module"
 },
 "networkx.utils.tests.test_heaps.X": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.utils.tests.test_heaps.X.__eq__": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ge__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__gt__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__hash__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "hash",
    "id"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__le__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__lt__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.X.__ne__": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps._test_heap_class": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "assert_equal",
    "assert_false",
    "assert_raises",
    "assert_true",
    "cls",
    "getattr",
    "networkx.NetworkXError",
    "networkx.utils.tests.test_heaps.data",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.data": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "networkx.utils.tests.test_heaps.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_heaps.test_BinaryHeap": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "networkx.utils.tests.test_heaps._test_heap_class"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.test_PairingHeap": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "networkx.utils.tests.test_heaps._test_heap_class"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_heaps.x": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "networkx.utils.tests.test_misc": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_misc.SkipTest": {
  "data": {
   "shadows": "nose.SkipTest"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.setupClass": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "ImportError",
    "classmethod",
    "nose.SkipTest"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array1": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "dict_to_numpy_array1",
    "networkx.utils.tests.test_misc.numpy",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array2": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "dict_to_numpy_array2",
    "networkx.utils.tests.test_misc.numpy",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_a": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "dict_to_numpy_array",
    "dict_to_numpy_array2",
    "networkx.utils.tests.test_misc.numpy",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_b": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict_to_numpy_array",
    "dict_to_numpy_array1",
    "networkx.utils.tests.test_misc.numpy",
    "numpy.testing.assert_allclose"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.assert_allclose": {
  "data": {
   "shadows": "numpy.testing.assert_allclose"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.numpy": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_misc.test_graph_iterable": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_true",
    "iterable",
    "networkx.complete_graph"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_is_list_of_ints": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "is_list_of_ints"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_is_string_like": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "is_string_like"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_iterable": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "assert_false",
    "assert_true",
    "iterable"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_bytes": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "assert_true",
    "isinstance",
    "len",
    "make_str",
    "networkx.utils.tests.test_misc.sys",
    "str"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_make_str_with_unicode": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "assert_true",
    "isinstance",
    "len",
    "make_str",
    "networkx.utils.tests.test_misc.sys",
    "str",
    "unicode"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_misc.test_random_number_distribution": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "discrete_sequence",
    "pareto_sequence",
    "powerlaw_sequence",
    "uniform_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_random_sequence.create_degree_sequence": {
  "data": {
   "shadows": "networkx.utils.create_degree_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.networkx.utils": {
  "data": {
   "shadows": "networkx.utils"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.powerlaw_sequence": {
  "data": {
   "shadows": "networkx.utils.powerlaw_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.random_weighted_sample": {
  "data": {
   "shadows": "networkx.utils.random_weighted_sample"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.test_degree_sequences": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.utils.create_degree_sequence",
    "networkx.utils.powerlaw_sequence",
    "networkx.utils.uniform_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_choice": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "assert_equal",
    "networkx.utils.weighted_choice"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_random_weighted_sample": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "ValueError",
    "assert_equal",
    "assert_raises",
    "networkx.utils.random_weighted_sample",
    "sorted"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_zipf_rv": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "assert_raises",
    "assert_true",
    "int",
    "networkx.utils.zipf_rv",
    "type"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.test_zipf_sequence": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "assert_equal",
    "len",
    "networkx.utils.zipf_sequence"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_random_sequence.uniform_sequence": {
  "data": {
   "shadows": "networkx.utils.uniform_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.weighted_choice": {
  "data": {
   "shadows": "networkx.utils.weighted_choice"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.zipf_rv": {
  "data": {
   "shadows": "networkx.utils.zipf_rv"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_random_sequence.zipf_sequence": {
  "data": {
   "shadows": "networkx.utils.zipf_sequence"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_rcm.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm.reverse_cuthill_mckee_ordering": {
  "data": {
   "shadows": "networkx.utils.reverse_cuthill_mckee_ordering"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.Graph",
    "networkx.utils.reverse_cuthill_mckee_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic.smallest_degree": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "assert_true",
    "list",
    "networkx.Graph",
    "networkx.utils.reverse_cuthill_mckee_ordering"
   ]
  },
  "type": "function"
 },
 "networkx.utils.tests.test_unionfind": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.tests.test_unionfind.nx": {
  "data": {
   "shadows": "networkx"
  },
  "type": "import"
 },
 "networkx.utils.tests.test_unionfind.test_unionfind": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "networkx.utils.UnionFind"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find": {
  "data": {},
  "type": "module"
 },
 "networkx.utils.union_find.UnionFind": {
  "data": {
   "lineno": 12
  },
  "type": "class"
 },
 "networkx.utils.union_find.UnionFind.__getitem__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__init__": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.__iter__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "networkx.utils.union_find.UnionFind.union": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "networkx.version": {
  "data": {
   "symbols_in_volume": [
    "networkx.version.datetime"
   ]
  },
  "type": "module"
 },
 "networkx.version.date": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "networkx.version.date_info": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "networkx.version.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "networkx.version.dev": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "networkx.version.vcs_info": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "networkx.version.version": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "networkx.version.version_info": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 }
}