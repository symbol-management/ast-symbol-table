{
 "confluent_kafka": {
  "data": {
   "symbols_in_volume": [
    "version"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.__all__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "confluent_kafka.__version__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "confluent_kafka.avro": {
  "data": {},
  "type": "module"
 },
 "confluent_kafka.avro.AvroConsumer": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "confluent_kafka.Consumer"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.AvroConsumer.__init__": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ValueError",
    "confluent_kafka.avro.AvroConsumer",
    "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient",
    "confluent_kafka.avro.serializer.message_serializer.MessageSerializer",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.AvroConsumer.poll": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroConsumer",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.AvroProducer": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "confluent_kafka.Producer"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.AvroProducer.__init__": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "ValueError",
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient",
    "confluent_kafka.avro.serializer.message_serializer.MessageSerializer",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.AvroProducer.produce": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.error.ClientError",
    "confluent_kafka.avro.serializer.KeySerializerError",
    "confluent_kafka.avro.serializer.ValueSerializerError",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.CachedSchemaRegistryClient": {
  "data": {
   "shadows": "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient"
  },
  "type": "import"
 },
 "confluent_kafka.avro.ClientError": {
  "data": {
   "shadows": "confluent_kafka.avro.error.ClientError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.Consumer": {
  "data": {
   "shadows": "confluent_kafka.Consumer"
  },
  "type": "import"
 },
 "confluent_kafka.avro.KeySerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.KeySerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.MessageSerializer": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.message_serializer.MessageSerializer"
  },
  "type": "import"
 },
 "confluent_kafka.avro.Producer": {
  "data": {
   "shadows": "confluent_kafka.Producer"
  },
  "type": "import"
 },
 "confluent_kafka.avro.SerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.SerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.ValueSerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.ValueSerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.cached_schema_registry_client": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "confluent_kafka.avro.cached_schema_registry_client.logging"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.avro.cached_schema_registry_client.ACCEPT_HDR": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient._add_to_cache": {
  "data": {
   "lineno": 89
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient._cache_schema": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient._send_request": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ClientError",
    "confluent_kafka.avro.cached_schema_registry_client.ACCEPT_HDR",
    "confluent_kafka.avro.cached_schema_registry_client.json",
    "confluent_kafka.avro.cached_schema_registry_client.requests",
    "dict",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.get_by_id": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "ClientError",
    "confluent_kafka.avro.cached_schema_registry_client.log",
    "loads",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.get_compatibility": {
  "data": {
   "lineno": 298
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.get_latest_schema": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "ClientError",
    "confluent_kafka.avro.cached_schema_registry_client.log",
    "loads",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.get_version": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "confluent_kafka.avro.cached_schema_registry_client.json",
    "confluent_kafka.avro.cached_schema_registry_client.log",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.register": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ClientError",
    "confluent_kafka.avro.cached_schema_registry_client.json",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.test_compatibility": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "Exception",
    "confluent_kafka.avro.cached_schema_registry_client.json",
    "confluent_kafka.avro.cached_schema_registry_client.log",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient.update_compatibility": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "ClientError",
    "confluent_kafka.avro.cached_schema_registry_client.VALID_LEVELS",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.cached_schema_registry_client.VALID_LEVELS": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "confluent_kafka.avro.cached_schema_registry_client.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "confluent_kafka.avro.cached_schema_registry_client.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "confluent_kafka.avro.cached_schema_registry_client.log": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "confluent_kafka.avro.cached_schema_registry_client.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "confluent_kafka.avro.cached_schema_registry_client.requests": {
  "data": {
   "shadows": "requests"
  },
  "type": "import"
 },
 "confluent_kafka.avro.error": {
  "data": {},
  "type": "module"
 },
 "confluent_kafka.avro.error.ClientError": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.error.ClientError.__init__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "confluent_kafka.avro.error.ClientError",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.error.ClientError.__repr__": {
  "data": {
   "lineno": 27
  },
  "type": "function"
 },
 "confluent_kafka.avro.error.ClientError.__str__": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "confluent_kafka.avro.load": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "avro.schema",
    "avro.schema.PrimitiveSchema.__hash__",
    "avro.schema.RecordSchema.__hash__",
    "avro.schema.UnionSchema.__hash__",
    "confluent_kafka.avro.load._hash_func"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.avro.load.ClientError": {
  "data": {
   "shadows": "confluent_kafka.avro.error.ClientError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.load._hash_func": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "hash",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.load.load": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "confluent_kafka.avro.load.loads",
    "open"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.load.loads": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "confluent_kafka.avro.error.ClientError",
    "confluent_kafka.avro.load.sys",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.load.schema": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "confluent_kafka.avro.load.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "confluent_kafka.avro.loads": {
  "data": {
   "shadows": "confluent_kafka.avro.load.loads"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer": {
  "data": {},
  "type": "module"
 },
 "confluent_kafka.avro.serializer.KeySerializerError": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.SerializerError"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.serializer.SerializerError": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.serializer.SerializerError.__init__": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.SerializerError.__init__.__repr__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.SerializerError.__init__.__str__": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.ValueSerializerError": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.SerializerError"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.serializer.message_serializer": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "confluent_kafka.avro.serializer.message_serializer.logging"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.avro.serializer.message_serializer.ClientError": {
  "data": {
   "shadows": "confluent_kafka.avro.ClientError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.ContextStringIO": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.message_serializer.io"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.serializer.message_serializer.ContextStringIO.__enter__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.ContextStringIO.__exit__": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.HAS_FAST": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "confluent_kafka.avro.serializer.message_serializer.KeySerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.KeySerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.MAGIC_BYTE": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer.__init__": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer._get_decoder_func": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "Exception",
    "confluent_kafka.avro.ClientError",
    "confluent_kafka.avro.serializer.SerializerError",
    "confluent_kafka.avro.serializer.message_serializer.HAS_FAST",
    "confluent_kafka.avro.serializer.message_serializer.avro",
    "fastavro.schemaless_reader",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer._get_decoder_func.decoder": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.message_serializer.avro"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer.decode_message": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.SerializerError",
    "confluent_kafka.avro.serializer.message_serializer.ContextStringIO",
    "confluent_kafka.avro.serializer.message_serializer.MAGIC_BYTE",
    "confluent_kafka.avro.serializer.message_serializer.struct",
    "decoder_func",
    "len"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer.encode_record_with_schema": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.KeySerializerError",
    "confluent_kafka.avro.serializer.ValueSerializerError",
    "confluent_kafka.avro.serializer.message_serializer.avro",
    "serialize_err"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.MessageSerializer.encode_record_with_schema_id": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "confluent_kafka.avro.ClientError",
    "confluent_kafka.avro.serializer.KeySerializerError",
    "confluent_kafka.avro.serializer.ValueSerializerError",
    "confluent_kafka.avro.serializer.message_serializer.ContextStringIO",
    "confluent_kafka.avro.serializer.message_serializer.MAGIC_BYTE",
    "confluent_kafka.avro.serializer.message_serializer.avro",
    "confluent_kafka.avro.serializer.message_serializer.struct",
    "confluent_kafka.avro.serializer.message_serializer.sys",
    "confluent_kafka.avro.serializer.message_serializer.traceback",
    "repr",
    "serialize_err"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.avro.serializer.message_serializer.SerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.SerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.ValueSerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.ValueSerializerError"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.avro": {
  "data": {
   "shadows": "avro"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.avro.io": {
  "data": {
   "shadows": "avro.io"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.log": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "confluent_kafka.avro.serializer.message_serializer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.schemaless_reader": {
  "data": {
   "shadows": "fastavro.schemaless_reader"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "confluent_kafka.avro.serializer.message_serializer.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest": {
  "data": {},
  "type": "module"
 },
 "confluent_kafka.kafkatest.verifiable_client": {
  "data": {},
  "type": "module"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.VerifiableClient",
    "confluent_kafka.kafkatest.verifiable_client.os",
    "confluent_kafka.kafkatest.verifiable_client.signal",
    "confluent_kafka.kafkatest.verifiable_client.socket",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient._timestamp": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.time",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.dbg": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.sys"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.err": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.sys"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.read_config_file": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "Exception",
    "len",
    "open",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.send": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.datetime",
    "confluent_kafka.kafkatest.verifiable_client.json",
    "confluent_kafka.kafkatest.verifiable_client.sys",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.set_config": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_client.re",
    "confluent_kafka.kafkatest.verifiable_client.sys",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.VerifiableClient.sig_term": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_client.datetime": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.signal": {
  "data": {
   "shadows": "signal"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_client.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer": {
  "data": {
   "symbols_in_volume": [
    "KeyboardInterrupt",
    "__name__",
    "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer",
    "confluent_kafka.kafkatest.verifiable_consumer.argparse",
    "confluent_kafka.kafkatest.verifiable_consumer.args",
    "confluent_kafka.kafkatest.verifiable_consumer.conf",
    "confluent_kafka.kafkatest.verifiable_consumer.msg",
    "confluent_kafka.kafkatest.verifiable_consumer.os",
    "confluent_kafka.kafkatest.verifiable_consumer.parser",
    "confluent_kafka.kafkatest.verifiable_consumer.vc",
    "int",
    "str",
    "vars",
    "verifiable_client.VerifiableClient.read_config_file",
    "verifiable_client.VerifiableClient.set_config"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.AssignedPartition": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.AssignedPartition.__init__": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_consumer.AssignedPartition",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.AssignedPartition.to_dict": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.Consumer": {
  "data": {
   "shadows": "confluent_kafka.Consumer"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.KafkaError": {
  "data": {
   "shadows": "confluent_kafka.KafkaError"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.KafkaException": {
  "data": {
   "shadows": "confluent_kafka.KafkaException"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableClient": {
  "data": {
   "shadows": "verifiable_client.VerifiableClient"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "verifiable_client.VerifiableClient"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "confluent_kafka.Consumer",
    "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer",
    "dict",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.do_commit": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "confluent_kafka.KafkaError.NOT_COORDINATOR_FOR_GROUP",
    "confluent_kafka.KafkaError.REQUEST_TIMED_OUT",
    "confluent_kafka.KafkaError._NO_OFFSET",
    "confluent_kafka.KafkaError._WAIT_COORD",
    "confluent_kafka.KafkaException",
    "confluent_kafka.kafkatest.verifiable_consumer.time",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.find_assignment": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.msg_consume": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "confluent_kafka.KafkaError._PARTITION_EOF"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.on_assign": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "confluent_kafka.kafkatest.verifiable_consumer.AssignedPartition"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.on_commit": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "confluent_kafka.KafkaError._NO_OFFSET",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.on_revoke": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "dict",
    "list"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.send_assignment": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.VerifiableConsumer.send_records_consumed": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.args": {
  "data": {
   "lineno": 254
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.conf": {
  "data": {
   "lineno": 256
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.msg": {
  "data": {
   "lineno": 282
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.parser": {
  "data": {
   "lineno": 243
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_consumer.vc": {
  "data": {
   "lineno": 269
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer": {
  "data": {
   "symbols_in_volume": [
    "BufferError",
    "KeyboardInterrupt",
    "__name__",
    "confluent_kafka.KafkaException",
    "confluent_kafka.kafkatest.verifiable_producer.VerifiableProducer",
    "confluent_kafka.kafkatest.verifiable_producer.argparse",
    "confluent_kafka.kafkatest.verifiable_producer.args",
    "confluent_kafka.kafkatest.verifiable_producer.conf",
    "confluent_kafka.kafkatest.verifiable_producer.delay",
    "confluent_kafka.kafkatest.verifiable_producer.parser",
    "confluent_kafka.kafkatest.verifiable_producer.remaining",
    "confluent_kafka.kafkatest.verifiable_producer.t_end",
    "confluent_kafka.kafkatest.verifiable_producer.throughput",
    "confluent_kafka.kafkatest.verifiable_producer.time",
    "confluent_kafka.kafkatest.verifiable_producer.topic",
    "confluent_kafka.kafkatest.verifiable_producer.value_fmt",
    "confluent_kafka.kafkatest.verifiable_producer.vp",
    "int",
    "len",
    "max",
    "range",
    "str",
    "vars",
    "verifiable_client.VerifiableClient.read_config_file",
    "verifiable_client.VerifiableClient.set_config"
   ]
  },
  "type": "module"
 },
 "confluent_kafka.kafkatest.verifiable_producer.KafkaException": {
  "data": {
   "shadows": "confluent_kafka.KafkaException"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_producer.Producer": {
  "data": {
   "shadows": "confluent_kafka.Producer"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_producer.VerifiableClient": {
  "data": {
   "shadows": "verifiable_client.VerifiableClient"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_producer.VerifiableProducer": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "verifiable_client.VerifiableClient"
   ]
  },
  "type": "class"
 },
 "confluent_kafka.kafkatest.verifiable_producer.VerifiableProducer.__init__": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "confluent_kafka.Producer",
    "confluent_kafka.kafkatest.verifiable_producer.VerifiableProducer",
    "super"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_producer.VerifiableProducer.dr_cb": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "confluent_kafka.kafkatest.verifiable_producer.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_producer.args": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.conf": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.delay": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.parser": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.remaining": {
  "data": {
   "lineno": 127
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.t_end": {
  "data": {
   "lineno": 107
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.throughput": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "confluent_kafka.kafkatest.verifiable_producer.topic": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.value_fmt": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "confluent_kafka.kafkatest.verifiable_producer.vp": {
  "data": {
   "lineno": 85
  },
  "type": "constant"
 },
 "tests.avro": {
  "data": {},
  "type": "module"
 },
 "tests.avro.data_gen": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "list",
    "map",
    "range",
    "tests.avro.data_gen.avsc_dir",
    "tests.avro.data_gen.create_adv_item",
    "tests.avro.data_gen.create_basic_item",
    "tests.avro.data_gen.load_schema_file",
    "tests.avro.data_gen.os",
    "tests.avro.data_gen.write_advanced_items"
   ]
  },
  "type": "module"
 },
 "tests.avro.data_gen.ADVANCED_ITEMS": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "tests.avro.data_gen.ADVANCED_SCHEMA": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "tests.avro.data_gen.AGES": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tests.avro.data_gen.BASIC_ITEMS": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "tests.avro.data_gen.BASIC_SCHEMA": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "tests.avro.data_gen.DataFileWriter": {
  "data": {
   "shadows": "avro.datafile.DataFileWriter"
  },
  "type": "import"
 },
 "tests.avro.data_gen.DatumWriter": {
  "data": {
   "shadows": "avro.io.DatumWriter"
  },
  "type": "import"
 },
 "tests.avro.data_gen.NAMES": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tests.avro.data_gen._write_items": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "avro.datafile.DataFileWriter",
    "avro.io.DatumWriter",
    "avro.schema.Parse",
    "open"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.avsc_dir": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "tests.avro.data_gen.cleanup": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "OSError",
    "tests.avro.data_gen.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.create_adv_item": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "dict",
    "map",
    "range",
    "tests.avro.data_gen.create_basic_item"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.create_basic_item": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "str",
    "tests.avro.data_gen.AGES",
    "tests.avro.data_gen.NAMES",
    "tests.avro.data_gen.random"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.get_schema_path": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tests.avro.data_gen.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.load_schema_file": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "open",
    "tests.avro.data_gen.get_schema_path"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.avro.data_gen.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "tests.avro.data_gen.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "tests.avro.data_gen.schema": {
  "data": {
   "shadows": "avro.schema"
  },
  "type": "import"
 },
 "tests.avro.data_gen.write_advanced_items": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tests.avro.data_gen.ADVANCED_ITEMS",
    "tests.avro.data_gen.ADVANCED_SCHEMA",
    "tests.avro.data_gen._write_items"
   ]
  },
  "type": "function"
 },
 "tests.avro.data_gen.write_basic_items": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "tests.avro.data_gen.BASIC_ITEMS",
    "tests.avro.data_gen.BASIC_SCHEMA",
    "tests.avro.data_gen._write_items"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.avro.mock_registry.ServerThread",
    "tests.avro.mock_registry.s",
    "tests.avro.mock_registry.sys"
   ]
  },
  "type": "module"
 },
 "tests.avro.mock_registry.ClientError": {
  "data": {
   "shadows": "confluent_kafka.avro.error.ClientError"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.Event": {
  "data": {
   "shadows": "threading.Event"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.HTTPSERVER": {
  "data": {
   "shadows": "http.server"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.MockSchemaRegistryClient": {
  "data": {
   "shadows": "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.MockServer": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "http.server.HTTPServer",
    "object"
   ]
  },
  "type": "class"
 },
 "tests.avro.mock_registry.MockServer.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "super",
    "tests.avro.mock_registry.MockServer",
    "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer._create_error": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer._get_identity_schema": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer._get_schema_from_body": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "confluent_kafka.avro.error.ClientError",
    "confluent_kafka.avro.loads",
    "int",
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer._run_routes": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "func",
    "getattr",
    "tests.avro.mock_registry.re"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer._send_response": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer.add_count": {
  "data": {
   "lineno": 167
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer.get_latest": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer.get_schema_by_id": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "int",
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer.get_version": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "tests.avro.mock_registry.json"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.MockServer.register": {
  "data": {
   "lineno": 128
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ReqHandler": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "http.server.BaseHTTPRequestHandler"
   ]
  },
  "type": "class"
 },
 "tests.avro.mock_registry.ReqHandler.do_GET": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ReqHandler.do_POST": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ReqHandler.log_message": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ServerThread": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "threading.Thread"
   ]
  },
  "type": "class"
 },
 "tests.avro.mock_registry.ServerThread.__init__": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "threading.Event",
    "threading.Thread.__init__"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ServerThread.run": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tests.avro.mock_registry.MockServer",
    "tests.avro.mock_registry.ReqHandler"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ServerThread.shutdown": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "tests.avro.mock_registry.ServerThread.start": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "super",
    "tests.avro.mock_registry.ServerThread"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_registry.Thread": {
  "data": {
   "shadows": "threading.Thread"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "tests.avro.mock_registry.s": {
  "data": {
   "lineno": 198
  },
  "type": "constant"
 },
 "tests.avro.mock_registry.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tests.avro.mock_schema_registry_client": {
  "data": {},
  "type": "module"
 },
 "tests.avro.mock_schema_registry_client.ClientError": {
  "data": {
   "shadows": "confluent_kafka.avro.ClientError"
  },
  "type": "import"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.__init__": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient._add_to_cache": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient._cache_schema": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient._get_all_versions": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient._get_next_id": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient._get_next_version": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.get_by_id": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.get_compatibility": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "confluent_kafka.avro.ClientError"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.get_id_for_schema": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.get_latest_schema": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.get_version": {
  "data": {
   "lineno": 126
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.register": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.test_compatibility": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "confluent_kafka.avro.ClientError"
   ]
  },
  "type": "function"
 },
 "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient.update_compatibility": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "confluent_kafka.avro.ClientError"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer": {
  "data": {
   "symbols_in_volume": [
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "module"
 },
 "tests.avro.test_avro_producer.AvroProducer": {
  "data": {
   "shadows": "confluent_kafka.avro.AvroProducer"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.ConnectionError": {
  "data": {
   "shadows": "requests.exceptions.ConnectionError"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.KeySerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.KeySerializerError"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.MockSchemaRegistryClient": {
  "data": {
   "shadows": "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.TestAvroProducer": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tests.avro.test_avro_producer.unittest"
   ]
  },
  "type": "class"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_instantiation": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_no_key": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "requests.exceptions.ConnectionError",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_no_key_schema": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.serializer.KeySerializerError"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_no_value": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "requests.exceptions.ConnectionError",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_no_value_schema": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.serializer.ValueSerializerError"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_primitive_key_and_value": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "requests.exceptions.ConnectionError",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_primitive_string_key": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "requests.exceptions.ConnectionError",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_value_and_key_schemas": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "requests.exceptions.ConnectionError",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_with_custom_registry": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "confluent_kafka.avro.AvroProducer",
    "confluent_kafka.avro.load",
    "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient",
    "tests.avro.test_avro_producer.avsc_dir",
    "tests.avro.test_avro_producer.os"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.TestAvroProducer.test_produce_with_custom_registry_and_registry_url": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "ValueError",
    "confluent_kafka.avro.AvroProducer",
    "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_avro_producer.ValueSerializerError": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.ValueSerializerError"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.avsc_dir": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tests.avro.test_avro_producer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.avro.test_avro_producer.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.avro.test_cached_client": {
  "data": {},
  "type": "module"
 },
 "tests.avro.test_cached_client.CachedSchemaRegistryClient": {
  "data": {
   "shadows": "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient"
  },
  "type": "import"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tests.avro.test_cached_client.unittest"
   ]
  },
  "type": "class"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.assertLatest": {
  "data": {
   "lineno": 73
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.hash_func": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "hash",
    "str"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.setUp": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "confluent_kafka.avro.cached_schema_registry_client.CachedSchemaRegistryClient",
    "str",
    "tests.avro.mock_registry.ServerThread"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.tearDown": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.test_dupe_register": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.test_getters": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.test_multi_register": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.ADVANCED_SCHEMA",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.test_multi_subject_register": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "len",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.TestCacheSchemaRegistryClient.test_register": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "len",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_cached_client.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.test_cached_client.data_gen": {
  "data": {
   "shadows": "tests.avro.data_gen"
  },
  "type": "import"
 },
 "tests.avro.test_cached_client.mock_registry": {
  "data": {
   "shadows": "tests.avro.mock_registry"
  },
  "type": "import"
 },
 "tests.avro.test_cached_client.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer": {
  "data": {},
  "type": "module"
 },
 "tests.avro.test_message_serializer.MessageSerializer": {
  "data": {
   "shadows": "confluent_kafka.avro.serializer.message_serializer.MessageSerializer"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer.MockSchemaRegistryClient": {
  "data": {
   "shadows": "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tests.avro.test_message_serializer.unittest"
   ]
  },
  "type": "class"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.assertMessageIsSame": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "len",
    "tests.avro.test_message_serializer.struct"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.hash_func": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "hash",
    "str"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.setUp": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "confluent_kafka.avro.serializer.message_serializer.MessageSerializer",
    "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.test_decode_none": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.test_encode_record_with_schema": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.BASIC_ITEMS",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.TestMessageSerializer.test_encode_with_schema_id": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.ADVANCED_ITEMS",
    "tests.avro.data_gen.ADVANCED_SCHEMA",
    "tests.avro.data_gen.BASIC_ITEMS",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_message_serializer.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer.data_gen": {
  "data": {
   "shadows": "tests.avro.data_gen"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "tests.avro.test_message_serializer.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.avro.test_mock_client": {
  "data": {},
  "type": "module"
 },
 "tests.avro.test_mock_client.MockSchemaRegistryClient": {
  "data": {
   "shadows": "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
  },
  "type": "import"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tests.avro.test_mock_client.unittest"
   ]
  },
  "type": "class"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.assertLatest": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.hash_func": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "hash",
    "str"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.setUp": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tests.avro.mock_schema_registry_client.MockSchemaRegistryClient"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.test_dupe_register": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.test_getters": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.test_multi_register": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "tests.avro.data_gen.ADVANCED_SCHEMA",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.test_multi_subject_register": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "len",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.TestMockSchemaRegistryClient.test_register": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "confluent_kafka.avro.loads",
    "len",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_mock_client.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.test_mock_client.data_gen": {
  "data": {
   "shadows": "tests.avro.data_gen"
  },
  "type": "import"
 },
 "tests.avro.test_mock_client.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.avro.test_util": {
  "data": {},
  "type": "module"
 },
 "tests.avro.test_util.TestUtil": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tests.avro.test_util.unittest"
   ]
  },
  "type": "class"
 },
 "tests.avro.test_util.TestUtil.test_schema_from_file": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "avro.schema.Schema",
    "confluent_kafka.avro.load",
    "isinstance",
    "tests.avro.data_gen.get_schema_path"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_util.TestUtil.test_schema_from_string": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "avro.schema.Schema",
    "confluent_kafka.avro.loads",
    "isinstance",
    "tests.avro.data_gen.BASIC_SCHEMA"
   ]
  },
  "type": "function"
 },
 "tests.avro.test_util.avro": {
  "data": {
   "shadows": "confluent_kafka.avro"
  },
  "type": "import"
 },
 "tests.avro.test_util.data_gen": {
  "data": {
   "shadows": "tests.avro.data_gen"
  },
  "type": "import"
 },
 "tests.avro.test_util.schema": {
  "data": {
   "shadows": "avro.schema"
  },
  "type": "import"
 },
 "tests.avro.test_util.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 }
}