{
 "pykafka": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.NullHandler",
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.balancedconsumer": {
  "lineno": null,
  "symbols_in_volume": [
   "kazoo.handlers.gevent.SequentialGeventHandler",
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.balancedconsumer.BalancedConsumer": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__del__": {
  "lineno": 291,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__init__": {
  "lineno": 78,
  "symbols_in_volume": [
   "socket.gethostname",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__iter__": {
  "lineno": 764,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__repr__": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._add_partitions": {
  "lineno": 640,
  "symbols_in_volume": [
   "kazoo.exceptions.NodeExistsError"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._add_self": {
  "lineno": 544,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._brokers_changed": {
  "lineno": 671,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._build_watch_callback": {
  "lineno": 491,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._build_watch_callback._callback": {
  "lineno": 496,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._consumers_changed": {
  "lineno": 681,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_held_partitions": {
  "lineno": 656,
  "symbols_in_volume": [
   "kazoo.exceptions.NoNodeException"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_internal_consumer": {
  "lineno": 421,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_participants": {
  "lineno": 467,
  "symbols_in_volume": [
   "kazoo.exceptions.NoNodeException"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._partitions": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._path_from_partition": {
  "lineno": 620,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._path_self": {
  "lineno": 549,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._raise_worker_exceptions": {
  "lineno": 304,
  "symbols_in_volume": [
   "six.reraise"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._rebalance": {
  "lineno": 597,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._remove_partitions": {
  "lineno": 627,
  "symbols_in_volume": [
   "kazoo.exceptions.NoNodeException"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._set_watches": {
  "lineno": 505,
  "symbols_in_volume": [
   "kazoo.exceptions.NoNodeException",
   "kazoo.recipe.watchers.ChildrenWatch",
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._setup_internal_consumer": {
  "lineno": 389,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._setup_zookeeper": {
  "lineno": 374,
  "symbols_in_volume": [
   "kazoo.client.KazooClient",
   "kazoo.handlers.gevent.SequentialGeventHandler"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._topics_changed": {
  "lineno": 691,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._update_member_assignment": {
  "lineno": 558,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.commit_offsets": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.consume": {
  "lineno": 724,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.consume.consumer_timed_out": {
  "lineno": 731,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.held_offsets": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.partitions": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.reset_offsets": {
  "lineno": 701,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.start": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.stop": {
  "lineno": 347,
  "symbols_in_volume": [
   "kazoo.exceptions.NoNodeException"
  ],
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.topic": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer._catch_thread_exception": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.balancedconsumer._catch_thread_exception.wrapped": {
  "lineno": 59,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.broker": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.broker.Broker": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.broker.Broker.__init__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.__repr__": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker._get_unique_req_handler": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.commit_consumer_group_offsets": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.connect": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.connect_offsets_channel": {
  "lineno": 254,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.connected": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.create_topics": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.delete_topics": {
  "lineno": 580,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.describe_groups": {
  "lineno": 553,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_api_versions": {
  "lineno": 593,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_consumer_group_offsets": {
  "lineno": 426,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_messages": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.from_metadata": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.handler": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.heartbeat": {
  "lineno": 522,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.host": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.id": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.join_group": {
  "lineno": 449,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.leave_group": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.list_groups": {
  "lineno": 547,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.offsets_channel_connected": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.offsets_channel_handler": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.port": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.produce_messages": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.request_metadata": {
  "lineno": 357,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.broker.Broker.request_offset_limits": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker.Broker.sync_group": {
  "lineno": 496,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker._check_handler": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.broker._check_handler.wrapped": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.cli.__main__": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.cli.kafka_tools": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.cli.kafka_tools._add_consumer_group": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_limit": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_offset": {
  "lineno": 316,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_outfile": {
  "lineno": 325,
  "symbols_in_volume": [
   "argparse.FileType",
   "sys.stdout"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_timeout": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_topic": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._encode_utf8": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools._get_arg_parser": {
  "lineno": 340,
  "symbols_in_volume": [
   "argparse.ArgumentParser"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.consume_topic": {
  "lineno": 68,
  "symbols_in_volume": [
   "pykafka.common.OffsetType.LATEST",
   "pykafka.utils.compat.PY3"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.create_topic": {
  "lineno": 266,
  "symbols_in_volume": [
   "pkg_resources.parse_version",
   "pykafka.protocol.CreateTopicRequest"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.delete_topic": {
  "lineno": 277,
  "symbols_in_volume": [
   "pkg_resources.parse_version"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.desc_topic": {
  "lineno": 98,
  "symbols_in_volume": [
   "tabulate.tabulate"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.fetch_consumer_lag": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.fetch_offsets": {
  "lineno": 22,
  "symbols_in_volume": [
   "calendar.timegm",
   "datetime.datetime.strptime"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.main": {
  "lineno": 456,
  "symbols_in_volume": [
   "pykafka.KafkaClient"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_consumer_lag": {
  "lineno": 151,
  "symbols_in_volume": [
   "pykafka.utils.compat.iteritems",
   "tabulate.tabulate"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_managed_consumer_groups": {
  "lineno": 121,
  "symbols_in_volume": [
   "pykafka.utils.compat.iteritems",
   "tabulate.tabulate"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_offsets": {
  "lineno": 179,
  "symbols_in_volume": [
   "pykafka.utils.compat.iteritems",
   "tabulate.tabulate"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_topics": {
  "lineno": 209,
  "symbols_in_volume": [
   "tabulate.tabulate"
  ],
  "type": "function"
 },
 "pykafka.cli.kafka_tools.reset_offsets": {
  "lineno": 225,
  "symbols_in_volume": [
   "pykafka.protocol.PartitionOffsetCommitRequest",
   "pykafka.utils.compat.iteritems",
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.client": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.client.KafkaClient": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.client.KafkaClient.__init__": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.client.KafkaClient.__repr__": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.client.KafkaClient.update_cluster": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.cluster.Cluster": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.cluster.Cluster.__init__": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.__repr__": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_broker_connection_info": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_brokers_from_zookeeper": {
  "lineno": 321,
  "symbols_in_volume": [
   "json.loads",
   "kazoo.client.KazooClient"
  ],
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_metadata": {
  "lineno": 288,
  "symbols_in_volume": [
   "random.shuffle"
  ],
  "type": "function"
 },
 "pykafka.cluster.Cluster._request_metadata": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster._request_random_broker": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster._update_brokers": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.brokers": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.fetch_api_versions": {
  "lineno": 482,
  "symbols_in_volume": [
   "pkg_resources.parse_version"
  ],
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_group_coordinator": {
  "lineno": 437,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_managed_group_descriptions": {
  "lineno": 419,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_offset_manager": {
  "lineno": 432,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.handler": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.topics": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.Cluster.update": {
  "lineno": 506,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.TopicDict": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.cluster.TopicDict.__getitem__": {
  "lineno": 57,
  "symbols_in_volume": [
   "weakref.ref"
  ],
  "type": "function"
 },
 "pykafka.cluster.TopicDict.__init__": {
  "lineno": 49,
  "symbols_in_volume": [
   "weakref.ref"
  ],
  "type": "function"
 },
 "pykafka.cluster.TopicDict.__missing__": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.TopicDict._create_topic": {
  "lineno": 91,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.cluster.TopicDict._should_exclude_topic": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.TopicDict._update_topics": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.cluster.TopicDict.values": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.common": {
  "lineno": null,
  "symbols_in_volume": [
   "datetime.datetime",
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.common.CompressionType": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.common.Message": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.common.OffsetType": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.connection": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.connection.BrokerConnection": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.connection.BrokerConnection.__del__": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.__init__": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.connect": {
  "lineno": 162,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.connected": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.disconnect": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.reconnect": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.request": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.response": {
  "lineno": 214,
  "symbols_in_volume": [
   "struct.unpack"
  ],
  "type": "function"
 },
 "pykafka.connection.SslConfig": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.connection.SslConfig.__init__": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.connection.SslConfig._legacy_wrap_socket": {
  "lineno": 94,
  "symbols_in_volume": [
   "functools.partial",
   "ssl.CERT_REQUIRED",
   "ssl.PROTOCOL_TLSv1",
   "ssl.wrap_socket"
  ],
  "type": "function"
 },
 "pykafka.connection.SslConfig.wrap_socket": {
  "lineno": 75,
  "symbols_in_volume": [
   "ssl",
   "ssl.create_default_context"
  ],
  "type": "function"
 },
 "pykafka.exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.exceptions.ConsumerStoppedException": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.GroupAuthorizationFailed": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.GroupCoordinatorNotAvailable": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.GroupLoadInProgress": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.IllegalGeneration": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.InconsistentGroupProtocol": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.InvalidMessageError": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.InvalidMessageSize": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.InvalidSessionTimeout": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.InvalidTopic": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.KafkaException": {
  "lineno": 21,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.LeaderNotAvailable": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.LeaderNotFoundError": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.MessageSetDecodeFailure": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.MessageSizeTooLarge": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.NoBrokersAvailableError": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.NoMessagesConsumedError": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.NotCoordinatorForGroup": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.NotLeaderForPartition": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.OffsetMetadataTooLarge": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.OffsetOutOfRangeError": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.OffsetRequestFailedError": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.PartitionOwnedError": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.PartitionOwnedError.__init__": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.exceptions.ProduceFailureError": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.ProducerQueueFullError": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.ProducerStoppedException": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.ProtocolClientError": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.RdKafkaException": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.RdKafkaStoppedException": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.RebalanceInProgress": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.RequestTimedOut": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.SocketDisconnectedError": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.TopicAuthorizationFailed": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.UnicodeException": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.UnknownError": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.UnknownMemberId": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.exceptions.UnknownTopicOrPartition": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.handlers": {
  "lineno": null,
  "symbols_in_volume": [
   "gevent",
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.handlers.GEventHandler": {
  "lineno": 122,
  "symbols_in_volume": [
   "gevent.event.Event",
   "gevent.lock.RLock",
   "gevent.lock.Semaphore",
   "gevent.queue.JoinableQueue",
   "gevent.socket",
   "gevent.socket.error",
   "gevent.socket.gaierror"
  ],
  "type": "class"
 },
 "pykafka.handlers.GEventHandler.sleep": {
  "lineno": 133,
  "symbols_in_volume": [
   "gevent.sleep"
  ],
  "type": "function"
 },
 "pykafka.handlers.GEventHandler.spawn": {
  "lineno": 136,
  "symbols_in_volume": [
   "gevent.spawn"
  ],
  "type": "function"
 },
 "pykafka.handlers.Handler": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.handlers.Handler.spawn": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler": {
  "lineno": 144,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "pykafka.handlers.RequestHandler.__del__": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.__init__": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler._start_thread": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler._start_thread.worker": {
  "lineno": 203,
  "symbols_in_volume": [
   "sys"
  ],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.request": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.start": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.stop": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.handlers.ResponseFuture.__init__": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.get": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.set_error": {
  "lineno": 62,
  "symbols_in_volume": [
   "gevent.socket.error"
  ],
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.set_response": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler": {
  "lineno": 88,
  "symbols_in_volume": [
   "gevent.socket.gaierror",
   "socket",
   "socket.error",
   "threading.Event",
   "threading.Lock"
  ],
  "type": "class"
 },
 "pykafka.handlers.ThreadingHandler.RLock": {
  "lineno": 103,
  "symbols_in_volume": [
   "threading.RLock"
  ],
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler.sleep": {
  "lineno": 99,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler.spawn": {
  "lineno": 111,
  "symbols_in_volume": [
   "threading.Thread"
  ],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.__init__": {
  "lineno": 52,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers": {
  "lineno": 335,
  "symbols_in_volume": [
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers._handle_GroupCoordinatorNotAvailable": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers._handle_NotCoordinatorForGroup": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._handle_error": {
  "lineno": 355,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._join_group": {
  "lineno": 366,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._setup_heartbeat_worker": {
  "lineno": 239,
  "symbols_in_volume": [
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._setup_heartbeat_worker.fetcher": {
  "lineno": 243,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._sync_group": {
  "lineno": 390,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._update_member_assignment": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.start": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.stop": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.membershipprotocol": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.membershipprotocol.decide_partitions_range": {
  "lineno": 16,
  "symbols_in_volume": [
   "itertools.islice"
  ],
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_range.p_to_str": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_roundrobin": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_roundrobin.p_to_str": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.partition.Partition": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.partition.Partition.__eq__": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.__hash__": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.__init__": {
  "lineno": 38,
  "symbols_in_volume": [
   "weakref.ref"
  ],
  "type": "function"
 },
 "pykafka.partition.Partition.__lt__": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.__ne__": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.__repr__": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.earliest_available_offset": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.fetch_offset_limit": {
  "lineno": 95,
  "symbols_in_volume": [
   "datetime.datetime",
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.partition.Partition.id": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.isr": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.latest_available_offset": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.leader": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.replicas": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.topic": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partition.Partition.update": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partitioners": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.partitioners.BasePartitioner": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.partitioners.BasePartitioner.__call__": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partitioners.GroupHashingPartitioner": {
  "lineno": 97,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.partitioners.GroupHashingPartitioner.__call__": {
  "lineno": 125,
  "symbols_in_volume": [
   "random.randrange"
  ],
  "type": "function"
 },
 "pykafka.partitioners.GroupHashingPartitioner.__init__": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partitioners.HashingPartitioner": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.partitioners.HashingPartitioner.__call__": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partitioners.HashingPartitioner.__init__": {
  "lineno": 64,
  "symbols_in_volume": [
   "hashlib.sha1"
  ],
  "type": "function"
 },
 "pykafka.partitioners.RandomPartitioner": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.partitioners.RandomPartitioner.__call__": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.partitioners.RandomPartitioner.__init__": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.producer.OwnedBroker": {
  "lineno": 570,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.producer.OwnedBroker.__init__": {
  "lineno": 596,
  "symbols_in_volume": [
   "collections.deque",
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_flush_ready": {
  "lineno": 748,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_has_message": {
  "lineno": 765,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_slot_available": {
  "lineno": 785,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.cleanup": {
  "lineno": 611,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.enqueue": {
  "lineno": 654,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.flush": {
  "lineno": 670,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.increment_messages_pending": {
  "lineno": 642,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.message_is_pending": {
  "lineno": 647,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.start": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.start.queue_reader": {
  "lineno": 616,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.stop": {
  "lineno": 634,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.producer.Producer.__del__": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.__enter__": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.__exit__": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.__init__": {
  "lineno": 62,
  "symbols_in_volume": [
   "platform.python_implementation"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer.__repr__": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._mark_as_delivered": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._produce": {
  "lineno": 435,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._produce_has_timed_out": {
  "lineno": 346,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer._raise_worker_exceptions": {
  "lineno": 237,
  "symbols_in_volume": [
   "six.reraise"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer._send_request": {
  "lineno": 464,
  "symbols_in_volume": [
   "struct.error"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer._send_request._get_partition_msgs": {
  "lineno": 484,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._setup_owned_brokers": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._update": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer._wait_all": {
  "lineno": 556,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer.get_delivery_report": {
  "lineno": 417,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.produce": {
  "lineno": 354,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.producer.Producer.start": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.stop": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.stop.get_queue_readers": {
  "lineno": 316,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer.Producer.stop.stop_owned_brokers": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer._DeliveryReportNone": {
  "lineno": 810,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.producer._DeliveryReportNone.__init__": {
  "lineno": 812,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer._DeliveryReportNone.put": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer._DeliveryReportQueue": {
  "lineno": 800,
  "symbols_in_volume": [
   "threading.local"
  ],
  "type": "class"
 },
 "pykafka.producer._DeliveryReportQueue.__init__": {
  "lineno": 802,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.producer._DeliveryReportQueue.put": {
  "lineno": 805,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.protocol.admin": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.admin.ApiVersionsRequest": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsRequest.__len__": {
  "lineno": 363,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsRequest.get_bytes": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponse": {
  "lineno": 373,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsResponse.__init__": {
  "lineno": 390,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponse.get_versions": {
  "lineno": 386,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponseV1": {
  "lineno": 404,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsResponseV1.__init__": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicRequest": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicRequest.__new__": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.__init__": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.__len__": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.get_bytes": {
  "lineno": 217,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsResponse": {
  "lineno": 254,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicsResponse.__init__": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.__init__": {
  "lineno": 290,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.__len__": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.get_bytes": {
  "lineno": 305,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsResponse": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.DeleteTopicsResponse.__init__": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.__init__": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.__len__": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.get_bytes": {
  "lineno": 75,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsResponse": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.DescribeGroupsResponse.__init__": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ListGroupsRequest": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.ListGroupsRequest.__len__": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ListGroupsRequest.get_bytes": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.admin.ListGroupsResponse": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.admin.ListGroupsResponse.__init__": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.__init__": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.__len__": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.from_bytestring": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.get_bytes": {
  "lineno": 148,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.base.MemberAssignment.__init__": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.__len__": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.from_bytestring": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.get_bytes": {
  "lineno": 104,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.base.Request": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.base.Request._write_header": {
  "lineno": 19,
  "symbols_in_volume": [
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.base.Request.get_bytes": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.Request.get_versions": {
  "lineno": 15,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.Response": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.base.Response.get_versions": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.base.Response.raise_error": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.fetch.FetchRequest": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchRequest.__init__": {
  "lineno": 52,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.__len__": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.add_request": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.get_bytes": {
  "lineno": 97,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.get_versions": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchResponse.__init__": {
  "lineno": 148,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse._unpack_message_set": {
  "lineno": 169,
  "symbols_in_volume": [
   "pkg_resources.parse_version"
  ],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse.get_versions": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponseV1": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchResponseV1.__init__": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponseV2": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.fetch.PartitionFetchRequest": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.fetch.PartitionFetchRequest.__new__": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata": {
  "lineno": 8,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.__init__": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.__len__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.from_bytestring": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.get_bytes": {
  "lineno": 32,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.__init__": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.__len__": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.get_bytes": {
  "lineno": 302,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatResponse": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.HeartbeatResponse.__init__": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.__init__": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.__len__": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.get_bytes": {
  "lineno": 100,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupResponse": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.JoinGroupResponse.__init__": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest": {
  "lineno": 333,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.__init__": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.__len__": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.get_bytes": {
  "lineno": 355,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupResponse": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.LeaveGroupResponse.__init__": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.MemberAssignment.__init__": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.__len__": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.from_bytestring": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.get_bytes": {
  "lineno": 187,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.__init__": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.__len__": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.get_bytes": {
  "lineno": 238,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupResponse": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.group_membership.SyncGroupResponse.__init__": {
  "lineno": 267,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.protocol.message.Message": {
  "lineno": 14,
  "symbols_in_volume": [
   "six.integer_types"
  ],
  "type": "class"
 },
 "pykafka.protocol.message.Message.__init__": {
  "lineno": 63,
  "symbols_in_volume": [
   "datetime.datetime.utcnow"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.Message.__len__": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message.Message.decode": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message.Message.pack_into": {
  "lineno": 119,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into",
   "zlib.crc32"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.Message.set_timestamp": {
  "lineno": 165,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.Message.timestamp_dt": {
  "lineno": 159,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.message.MessageSet.__init__": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.__len__": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet._get_compressed": {
  "lineno": 228,
  "symbols_in_volume": [
   "pkg_resources.parse_version"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.decode": {
  "lineno": 253,
  "symbols_in_volume": [
   "struct.unpack_from"
  ],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.messages": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.pack_into": {
  "lineno": 279,
  "symbols_in_volume": [
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.metadata": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.metadata.MetadataRequest": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequest.__init__": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.__len__": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest._serialize": {
  "lineno": 36,
  "symbols_in_volume": [
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest._topics_len": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.get_bytes": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.get_versions": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV1": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV1._topics_len": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV2": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV3": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV4": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.__init__": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.__len__": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.get_bytes": {
  "lineno": 94,
  "symbols_in_volume": [
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV5": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponse": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponse.__init__": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_broker_metas": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_partition_metas": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_topic_metas": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._populate": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse.get_versions": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV1.__init__": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1._build_broker_metas": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1._build_topic_metas": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV2": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV2.__init__": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV3": {
  "lineno": 254,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV3.__init__": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV4": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV5": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV5.__init__": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV5._build_partition_metas": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.offset.ListOffsetRequest": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetRequest.__init__": {
  "lineno": 47,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.__len__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.get_bytes": {
  "lineno": 65,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.get_versions": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.__init__": {
  "lineno": 98,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.__len__": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.get_bytes": {
  "lineno": 115,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponse": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetResponse.__init__": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponse.get_versions": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponseV1": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetResponseV1.__init__": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset.PartitionOffsetRequest": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.__init__": {
  "lineno": 18,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.__len__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.get_bytes": {
  "lineno": 27,
  "symbols_in_volume": [
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorResponse": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorResponse.__init__": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.__init__": {
  "lineno": 97,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.__len__": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.get_bytes": {
  "lineno": 132,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitResponse": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetCommitResponse.__init__": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.__init__": {
  "lineno": 227,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.__len__": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest._reqs_len": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.get_bytes": {
  "lineno": 252,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.get_versions": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV1": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV2": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV2._reqs_len": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse.__init__": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse._populate_partition_responses": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse.get_versions": {
  "lineno": 310,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV1": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV2": {
  "lineno": 349,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV2.__init__": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.offset_commit.PartitionOffsetCommitRequest": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.offset_commit.PartitionOffsetFetchRequest": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.produce": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "pykafka.protocol.produce.ProduceRequest": {
  "lineno": 13,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.produce.ProduceRequest.__init__": {
  "lineno": 24,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.__len__": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.add_message": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.get_bytes": {
  "lineno": 81,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.pack_into"
  ],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.message_count": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.messages": {
  "lineno": 63,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceResponse": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.protocol.produce.ProduceResponse.__init__": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.rdkafka.helpers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.rdkafka.helpers._get_ciphers_from_sockets": {
  "lineno": 23,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.helpers.rdk_ssl_config": {
  "lineno": 1,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.producer": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer": {
  "lineno": 14,
  "symbols_in_volume": [
   "pykafka.producer.Producer"
  ],
  "type": "class"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.__init__": {
  "lineno": 37,
  "symbols_in_volume": [
   "pykafka.producer.CompressionType.NONE"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._mk_rdkafka_config_lists": {
  "lineno": 101,
  "symbols_in_volume": [
   "pkg_resources.parse_version",
   "pykafka.producer.CompressionType.GZIP",
   "pykafka.producer.CompressionType.LZ4",
   "pykafka.producer.CompressionType.NONE",
   "pykafka.producer.CompressionType.SNAPPY"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._produce": {
  "lineno": 90,
  "symbols_in_volume": [
   "pykafka.exceptions.ProducerStoppedException",
   "pykafka.exceptions.RdKafkaStoppedException"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._wait_all": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.start": {
  "lineno": 63,
  "symbols_in_volume": [
   "pykafka.utils.compat.get_bytes"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.start.poll": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.stop": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer": {
  "lineno": 17,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.SimpleConsumer"
  ],
  "type": "class"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.__init__": {
  "lineno": 36,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.utils.error_handlers.valid_int"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._consume": {
  "lineno": 127,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._mk_rdkafka_config_lists": {
  "lineno": 197,
  "symbols_in_volume": [
   "pkg_resources.parse_version",
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.simpleconsumer.OffsetType.LATEST"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._setup_fetch_workers": {
  "lineno": 70,
  "symbols_in_volume": [
   "pykafka.utils.compat.get_bytes"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._setup_fetch_workers.poll": {
  "lineno": 93,
  "symbols_in_volume": [
   "pykafka.exceptions.RdKafkaStoppedException",
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._stop_start_rdk_consumer": {
  "lineno": 176,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.consume": {
  "lineno": 107,
  "symbols_in_volume": [
   "pykafka.exceptions.ConsumerStoppedException",
   "pykafka.exceptions.RdKafkaStoppedException"
  ],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.fetch_offsets": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.reset_offsets": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.stop": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.simpleconsumer.OwnedPartition": {
  "lineno": 842,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.simpleconsumer.OwnedPartition.__init__": {
  "lineno": 848,
  "symbols_in_volume": [
   "threading.RLock"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_fetch_request": {
  "lineno": 939,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_commit_request": {
  "lineno": 951,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_fetch_request": {
  "lineno": 967,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_request": {
  "lineno": 918,
  "symbols_in_volume": [
   "datetime.datetime"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.consume": {
  "lineno": 975,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.enqueue_messages": {
  "lineno": 984,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.flush": {
  "lineno": 895,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.message_count": {
  "lineno": 890,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.set_consumer_id": {
  "lineno": 880,
  "symbols_in_volume": [
   "json.dumps",
   "socket.gethostname"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.set_offset": {
  "lineno": 908,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__del__": {
  "lineno": 389,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__init__": {
  "lineno": 58,
  "symbols_in_volume": [
   "itertools.cycle",
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__iter__": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__repr__": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._auto_commit": {
  "lineno": 515,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers": {
  "lineno": 311,
  "symbols_in_volume": [
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_GroupLoadInProgress": {
  "lineno": 333,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_IllegalGeneration": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_NotCoordinatorForGroup": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_NotLeaderForPartition": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_OffsetOutOfRangeError": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_RebalanceInProgress": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_RequestTimedOut": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_UnknownError": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_UnknownMemberId": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._discover_group_coordinator": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._raise_worker_exceptions": {
  "lineno": 273,
  "symbols_in_volume": [
   "six.reraise"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_autocommit_worker": {
  "lineno": 408,
  "symbols_in_volume": [
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_autocommit_worker.autocommitter": {
  "lineno": 412,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_fetch_workers": {
  "lineno": 430,
  "symbols_in_volume": [
   "weakref.proxy"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_fetch_workers.fetcher": {
  "lineno": 435,
  "symbols_in_volume": [
   "sys.exc_info"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_partitions_by_leader": {
  "lineno": 306,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._update": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._wait_for_slot_available": {
  "lineno": 826,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.cleanup": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.commit_offsets": {
  "lineno": 527,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.consume": {
  "lineno": 466,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.consumer_id": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch": {
  "lineno": 765,
  "symbols_in_volume": [
   "socket.error"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch._handle_success": {
  "lineno": 771,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch.unlock_partitions": {
  "lineno": 781,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch_offsets": {
  "lineno": 597,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch_offsets._handle_success": {
  "lineno": 610,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.generation_id": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.held_offsets": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.partitions": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.reset_offsets": {
  "lineno": 672,
  "symbols_in_volume": [
   "collections.defaultdict",
   "datetime.datetime"
  ],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.reset_offsets._handle_success": {
  "lineno": 690,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.start": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.stop": {
  "lineno": 399,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.topic": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.test.kafka_instance": {
  "lineno": null,
  "symbols_in_volume": [
   "argparse.ArgumentDefaultsHelpFormatter",
   "argparse.ArgumentParser",
   "logging.getLogger",
   "signal.SIGINT",
   "signal.signal",
   "sys.exit",
   "time.sleep"
  ],
  "type": "module"
 },
 "pykafka.test.kafka_instance.CertManager": {
  "lineno": 415,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.test.kafka_instance.CertManager.__init__": {
  "lineno": 425,
  "symbols_in_volume": [
   "os.makedirs",
   "os.path.exists",
   "os.path.join"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.CertManager._gen_broker_keystore": {
  "lineno": 477,
  "symbols_in_volume": [
   "os.path.join",
   "os.unlink",
   "subprocess.check_call"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.CertManager._gen_broker_truststore": {
  "lineno": 467,
  "symbols_in_volume": [
   "subprocess.check_call"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.CertManager._gen_client_cert": {
  "lineno": 519,
  "symbols_in_volume": [
   "os.path.join",
   "os.unlink",
   "subprocess.check_call"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.CertManager._gen_root_cert": {
  "lineno": 455,
  "symbols_in_volume": [
   "subprocess.check_call"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.test.kafka_instance.KafkaConnection.__init__": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection._run_topics_sh": {
  "lineno": 95,
  "symbols_in_volume": [
   "os.path.join",
   "pykafka.utils.compat.get_string",
   "subprocess.check_output"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection.create_topic": {
  "lineno": 103,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection.delete_topic": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection.flush": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection.list_topics": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaConnection.produce_messages": {
  "lineno": 127,
  "symbols_in_volume": [
   "os.path.join",
   "pykafka.utils.compat.get_bytes",
   "pykafka.utils.compat.get_string",
   "subprocess.PIPE",
   "subprocess.Popen"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance": {
  "lineno": 142,
  "symbols_in_volume": [
   "testinstances.managed_instance.ManagedInstance"
  ],
  "type": "class"
 },
 "pykafka.test.kafka_instance.KafkaInstance.__init__": {
  "lineno": 145,
  "symbols_in_volume": [
   "testinstances.managed_instance.ManagedInstance.__init__"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._add_broker": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._add_ssl_broker": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._download_kafka": {
  "lineno": 183,
  "symbols_in_volume": [
   "errno.EEXIST",
   "os.chdir",
   "os.getcwd",
   "os.makedirs",
   "os.path.exists",
   "os.path.join",
   "subprocess.PIPE",
   "subprocess.Popen"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._gen_ssl_certs": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._init_dirs": {
  "lineno": 170,
  "symbols_in_volume": [
   "os.makedirs",
   "os.path.join"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._is_port_free": {
  "lineno": 216,
  "symbols_in_volume": [
   "errno.ECONNREFUSED",
   "socket.create_connection"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._port_generator": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._start_broker_proc": {
  "lineno": 295,
  "symbols_in_volume": [
   "os.path.join",
   "testinstances.utils.Popen",
   "testinstances.utils.STDOUT"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._start_brokers": {
  "lineno": 343,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._start_log_watcher": {
  "lineno": 280,
  "symbols_in_volume": [
   "gevent.spawn",
   "os.listdir",
   "os.path.join",
   "threading.Thread"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._start_process": {
  "lineno": 257,
  "symbols_in_volume": [
   "pykafka.utils.compat.range",
   "testinstances.exceptions.ProcessNotStartingError",
   "time.sleep"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance._start_zookeeper": {
  "lineno": 361,
  "symbols_in_volume": [
   "os.path.join",
   "testinstances.utils.Popen",
   "testinstances.utils.STDOUT"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.create_topic": {
  "lineno": 398,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.delete_topic": {
  "lineno": 403,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.flush": {
  "lineno": 394,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.list_topics": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.produce_messages": {
  "lineno": 410,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.kafka_instance.KafkaInstance.terminate": {
  "lineno": 380,
  "symbols_in_volume": [
   "shutil.rmtree"
  ],
  "type": "function"
 },
 "pykafka.test.kafka_instance._catch_sigint": {
  "lineno": 561,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.test.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.test.utils.get_cluster": {
  "lineno": 7,
  "symbols_in_volume": [
   "os.environ",
   "os.environ.get",
   "pykafka.test.kafka_instance.KafkaConnection",
   "pykafka.test.kafka_instance.KafkaInstance"
  ],
  "type": "function"
 },
 "pykafka.test.utils.retry": {
  "lineno": 34,
  "symbols_in_volume": [
   "time.sleep",
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.test.utils.stop_cluster": {
  "lineno": 26,
  "symbols_in_volume": [
   "pykafka.test.kafka_instance.KafkaInstance"
  ],
  "type": "function"
 },
 "pykafka.topic": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger"
  ],
  "type": "module"
 },
 "pykafka.topic.Topic": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.topic.Topic.__init__": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.__repr__": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.earliest_available_offsets": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.fetch_offset_limits": {
  "lineno": 111,
  "symbols_in_volume": [
   "collections.defaultdict",
   "datetime.datetime"
  ],
  "type": "function"
 },
 "pykafka.topic.Topic.get_balanced_consumer": {
  "lineno": 267,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.get_producer": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.get_simple_consumer": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.get_sync_producer": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.latest_available_offsets": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.name": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.partitions": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.topic.Topic.update": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.utils.ApiVersionAware": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.utils.ApiVersionAware.get_version_impl": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.Serializable": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.utils.Serializable.__len__": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.Serializable.pack_into": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat": {
  "lineno": null,
  "symbols_in_volume": [
   "platform.python_implementation",
   "sys.version_info"
  ],
  "type": "module"
 },
 "pykafka.utils.compat.Semaphore": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "class"
 },
 "pykafka.utils.compat.Semaphore.__exit__": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.__init__": {
  "lineno": 80,
  "symbols_in_volume": [
   "threading.Condition",
   "threading.Lock"
  ],
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.acquire": {
  "lineno": 86,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.release": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.get_bytes": {
  "lineno": 10,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.get_string": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.iteritems": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.iterkeys": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compat.itervalues": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.compression": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.getLogger",
   "lz4.frame",
   "lz4.frame.compress",
   "lz4.frame.decompress",
   "lz4f",
   "lz4f.compressFrame",
   "snappy",
   "xxhash"
  ],
  "type": "module"
 },
 "pykafka.utils.compression._detect_xerial_stream": {
  "lineno": 155,
  "symbols_in_volume": [
   "struct.unpack"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.decode_gzip": {
  "lineno": 65,
  "symbols_in_volume": [
   "gzip.GzipFile",
   "io.BytesIO"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.decode_lz4_old_kafka": {
  "lineno": 250,
  "symbols_in_volume": [
   "xxhash",
   "xxhash.xxh32"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.decode_lz4f": {
  "lineno": 194,
  "symbols_in_volume": [
   "lz4f.createDecompContext",
   "lz4f.decompressFrame",
   "lz4f.freeDecompContext"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.decode_snappy": {
  "lineno": 125,
  "symbols_in_volume": [
   "io.BytesIO",
   "snappy",
   "snappy.decompress",
   "struct.unpack_from"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.encode_gzip": {
  "lineno": 53,
  "symbols_in_volume": [
   "gzip.GzipFile",
   "io.BytesIO"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.encode_lz4_old_kafka": {
  "lineno": 216,
  "symbols_in_volume": [
   "xxhash",
   "xxhash.xxh32"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.encode_snappy": {
  "lineno": 75,
  "symbols_in_volume": [
   "io.BytesIO",
   "snappy",
   "snappy.compress",
   "struct.pack"
  ],
  "type": "function"
 },
 "pykafka.utils.compression.encode_snappy._chunker": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.deserialize_utf8": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.error_handlers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.utils.error_handlers.build_parts_by_error": {
  "lineno": 57,
  "symbols_in_volume": [
   "collections.defaultdict"
  ],
  "type": "function"
 },
 "pykafka.utils.error_handlers.handle_partition_responses": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.error_handlers.raise_error": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.error_handlers.valid_int": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.msg_protocol_version": {
  "lineno": 108,
  "symbols_in_volume": [
   "pkg_resources.parse_version"
  ],
  "type": "function"
 },
 "pykafka.utils.serialize_utf8": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "pykafka.utils.socket": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.utils.socket.recvall_into": {
  "lineno": 23,
  "symbols_in_volume": [
   "pykafka.exceptions.SocketDisconnectedError"
  ],
  "type": "function"
 },
 "pykafka.utils.struct_helpers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "pykafka.utils.struct_helpers._unpack": {
  "lineno": 58,
  "symbols_in_volume": [
   "struct.calcsize",
   "struct.unpack_from"
  ],
  "type": "function"
 },
 "pykafka.utils.struct_helpers._unpack_array": {
  "lineno": 101,
  "symbols_in_volume": [
   "itertools.chain.from_iterable"
  ],
  "type": "function"
 },
 "pykafka.utils.struct_helpers.unpack_from": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.conftest": {
  "lineno": null,
  "symbols_in_volume": [
   "logging.DEBUG",
   "logging.basicConfig"
  ],
  "type": "module"
 },
 "tests.pykafka": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.rdkafka": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer": {
  "lineno": 16,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.assert_thread_cnt_non_increasing": {
  "lineno": 31,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "pykafka.rdkafka._rd_kafka._thread_cnt",
   "pykafka.rdkafka._rd_kafka._wait_destroyed"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.setUpClass": {
  "lineno": 18,
  "symbols_in_volume": [
   "pykafka.test.utils.get_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.tearDownClass": {
  "lineno": 27,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_start_fail": {
  "lineno": 51,
  "symbols_in_volume": [
   "pykafka.exceptions.RdKafkaException",
   "pykafka.rdkafka._rd_kafka.Consumer"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_stop": {
  "lineno": 61,
  "symbols_in_volume": [
   "pykafka.rdkafka._rd_kafka.Consumer",
   "pykafka.utils.compat.get_bytes"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_stopped_exception": {
  "lineno": 82,
  "symbols_in_volume": [
   "pykafka.exceptions.RdKafkaStoppedException",
   "pykafka.rdkafka._rd_kafka.Consumer",
   "pykafka.utils.compat.get_bytes"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_simple_consumer": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_simple_consumer.RdkBalancedConsumerIntegrationTests": {
  "lineno": 71,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests"
  ],
  "type": "class"
 },
 "tests.pykafka.rdkafka.test_simple_consumer.TestRdKafkaSimpleConsumer": {
  "lineno": 12,
  "symbols_in_volume": [
   "pytest.mark.skipif",
   "tests.pykafka.test_simpleconsumer.TestSimpleConsumer"
  ],
  "type": "class"
 },
 "tests.pykafka.rdkafka.test_simple_consumer.TestRdKafkaSimpleConsumer.test_offset_commit_agrees": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_simple_consumer.TestRdKafkaSimpleConsumer.test_offset_resume_agrees": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_simple_consumer.TestRdKafkaSimpleConsumer.test_update_cluster": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_simple_consumer._latest_partition_offsets_by_reading": {
  "lineno": 62,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_ssl": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_ssl.TestRdKafkaSsl": {
  "lineno": 8,
  "symbols_in_volume": [
   "platform.python_implementation",
   "pytest.mark.skipif",
   "tests.pykafka.test_ssl.SslIntegrationTests"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer": {
  "lineno": null,
  "symbols_in_volume": [
   "gevent",
   "os.environ.get",
   "pkg_resources.parse_version",
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerGEventIntegrationTests": {
  "lineno": 525,
  "symbols_in_volume": [
   "gevent",
   "platform.python_implementation",
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests": {
  "lineno": 143,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.get_balanced_consumer": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.get_zk": {
  "lineno": 169,
  "symbols_in_volume": [
   "kazoo.client.KazooClient",
   "kazoo.handlers.gevent.SequentialGeventHandler"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.setUpClass": {
  "lineno": 149,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.test.utils.get_cluster",
   "pykafka.utils.compat.range",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.tearDownClass": {
  "lineno": 165,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_a_rebalance_unblock_event": {
  "lineno": 238,
  "symbols_in_volume": [
   "pytest.skip",
   "threading.Thread"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_consume_earliest": {
  "lineno": 334,
  "symbols_in_volume": [
   "pykafka.balancedconsumer.OffsetType.EARLIEST",
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_consume_latest": {
  "lineno": 371,
  "symbols_in_volume": [
   "pykafka.balancedconsumer.OffsetType.LATEST",
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_external_kazoo_client": {
  "lineno": 416,
  "symbols_in_volume": [
   "kazoo.client.KazooClient",
   "pytest.skip"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_extra_consumer": {
  "lineno": 187,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_extra_consumer.verify_extras": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_no_partitions": {
  "lineno": 435,
  "symbols_in_volume": [
   "pykafka.membershipprotocol.GroupMembershipProtocol"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_no_partitions._decide_dummy": {
  "lineno": 438,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks": {
  "lineno": 269,
  "symbols_in_volume": [
   "pykafka.balancedconsumer.OffsetType.EARLIEST",
   "pykafka.utils.compat.iteritems"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks.on_rebalance": {
  "lineno": 270,
  "symbols_in_volume": [
   "pykafka.utils.compat.iterkeys"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks_surfaces_errors": {
  "lineno": 303,
  "symbols_in_volume": [
   "pykafka.balancedconsumer.OffsetType.EARLIEST",
   "pytest.raises"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks_surfaces_errors.on_rebalance": {
  "lineno": 304,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_zk_conn_lost": {
  "lineno": 460,
  "symbols_in_volume": [
   "pytest.skip"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.wait_for_rebalancing": {
  "lineno": 505,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.ManagedBalancedConsumerGEventIntegrationTests": {
  "lineno": 537,
  "symbols_in_volume": [
   "gevent",
   "platform.python_implementation",
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.ManagedBalancedConsumerIntegrationTests": {
  "lineno": 531,
  "symbols_in_volume": [
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer": {
  "lineno": 35,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer._test_decide_partitions": {
  "lineno": 86,
  "symbols_in_volume": [
   "math.floor",
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.buildMockConsumer": {
  "lineno": 41,
  "symbols_in_volume": [
   "mock.MagicMock",
   "mock.Mock",
   "pykafka.balancedconsumer.BalancedConsumer",
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.setUpClass": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_consume_graceful_stop": {
  "lineno": 74,
  "symbols_in_volume": [
   "pykafka.exceptions.ConsumerStoppedException"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_consume_returns": {
  "lineno": 64,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_decide_partitions_range": {
  "lineno": 113,
  "symbols_in_volume": [
   "pykafka.membershipprotocol.RangeProtocol"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_decide_partitions_roundrobin": {
  "lineno": 116,
  "symbols_in_volume": [
   "pykafka.membershipprotocol.RoundRobinProtocol"
  ],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_unicode_consumer_group": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestManagedBalancedConsumer": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.TestManagedBalancedConsumer.buildMockConsumer": {
  "lineno": 121,
  "symbols_in_volume": [
   "mock.MagicMock",
   "mock.Mock",
   "pykafka.managedbalancedconsumer.ManagedBalancedConsumer",
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests": {
  "lineno": 9,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.setUpClass": {
  "lineno": 10,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.test.utils.get_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.tearDownClass": {
  "lineno": 15,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_exclude_internal_topics": {
  "lineno": 24,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.Topic"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_topic_autocreate": {
  "lineno": 19,
  "symbols_in_volume": [
   "pykafka.Topic",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_topic_updates": {
  "lineno": 37,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_zk_connect": {
  "lineno": 59,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.utils.compat.itervalues"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.test_connection.TestBrokerConnection": {
  "lineno": 18,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.setUpClass": {
  "lineno": 19,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.connection.BrokerConnection",
   "pykafka.test.utils.get_cluster",
   "pytest.skip",
   "testinstances.managed_instance.ManagedInstance"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.tearDownClass": {
  "lineno": 38,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_connection_fails_no_broker": {
  "lineno": 42,
  "symbols_in_volume": [
   "pykafka.exceptions.SocketDisconnectedError"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect": {
  "lineno": 48,
  "symbols_in_volume": [
   "threading.Thread"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect.delayed_make_broker": {
  "lineno": 50,
  "symbols_in_volume": [
   "time.sleep"
  ],
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect.retry_connect_broker": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_partition": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_partition.TestPartitionInfo": {
  "lineno": 7,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.setUpClass": {
  "lineno": 8,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.test.utils.get_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.tearDownClass": {
  "lineno": 20,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.test_can_get_earliest_offset": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.test_can_get_latest_offset": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_partitioners": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner": {
  "lineno": 7,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner._run_test": {
  "lineno": 41,
  "symbols_in_volume": [
   "pykafka.partitioners.GroupHashingPartitioner"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner._run_test.hash_func": {
  "lineno": 42,
  "symbols_in_volume": [
   "hashlib.sha1"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_create_with_negative_group_size_raises_error": {
  "lineno": 33,
  "symbols_in_volume": [
   "pykafka.partitioners.GroupHashingPartitioner"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_create_with_zero_group_size_raises_error": {
  "lineno": 29,
  "symbols_in_volume": [
   "pykafka.partitioners.GroupHashingPartitioner"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_invalid_inputs_error": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_missing_hash_function_raises_error": {
  "lineno": 37,
  "symbols_in_volume": [
   "pykafka.partitioners.GroupHashingPartitioner"
  ],
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_valid_inputs_success": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer": {
  "lineno": null,
  "symbols_in_volume": [
   "gevent",
   "os.environ.get",
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests": {
  "lineno": 38,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests._get_consumer": {
  "lineno": 60,
  "symbols_in_volume": [
   "pykafka.common.OffsetType.LATEST"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests._get_producer": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.setUpClass": {
  "lineno": 43,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.test.utils.get_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.tearDownClass": {
  "lineno": 52,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce": {
  "lineno": 134,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message": {
  "lineno": 293,
  "symbols_in_volume": [
   "pykafka.common.CompressionType.SNAPPY",
   "pykafka.test.utils.retry",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message.ensure_all_messages_consumed": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message.ensure_all_messages_produced": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_context": {
  "lineno": 162,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message": {
  "lineno": 339,
  "symbols_in_volume": [
   "pykafka.test.utils.retry",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message.ensure_all_messages_consumed": {
  "lineno": 375,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message.ensure_all_messages_produced": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_lingers": {
  "lineno": 185,
  "symbols_in_volume": [
   "pytest.skip",
   "time.time",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_queue_full": {
  "lineno": 173,
  "symbols_in_volume": [
   "pykafka.exceptions.ProducerQueueFullError",
   "time.sleep",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_thread_exception": {
  "lineno": 199,
  "symbols_in_volume": [
   "pykafka.protocol.Message",
   "time.sleep"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_null_payloads": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_owned_broker_flush_batching_by_max_request_size": {
  "lineno": 266,
  "symbols_in_volume": [
   "pykafka.producer.OwnedBroker",
   "pykafka.protocol.Message",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_owned_broker_flush_message_larger_then_max_request_size": {
  "lineno": 237,
  "symbols_in_volume": [
   "pykafka.exceptions.MessageSizeTooLarge",
   "pykafka.producer.OwnedBroker",
   "pykafka.protocol.Message",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce": {
  "lineno": 68,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce_hashing_partitioner": {
  "lineno": 117,
  "symbols_in_volume": [
   "pykafka.partitioners.hashing_partitioner",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce_utf8": {
  "lineno": 81,
  "symbols_in_volume": [
   "pykafka.utils.deserialize_utf8",
   "pykafka.utils.serialize_utf8",
   "random.random"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_recover_disconnected": {
  "lineno": 150,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_required_acks": {
  "lineno": 212,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_doesnt_hang": {
  "lineno": 106,
  "symbols_in_volume": [
   "mock.MagicMock",
   "pykafka.exceptions.ProduceFailureError",
   "types.MethodType"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_doesnt_hang.stub_mark": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_raises": {
  "lineno": 90,
  "symbols_in_volume": [
   "pykafka.exceptions.MessageSizeTooLarge",
   "types.MethodType"
  ],
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_raises.stub_send_request": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_producer.TestGEventProducer": {
  "lineno": 388,
  "symbols_in_volume": [
   "gevent",
   "platform.python_implementation",
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_producer.TestRdKafkaProducer": {
  "lineno": 383,
  "symbols_in_volume": [
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI": {
  "lineno": 1389,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_api_versions_request": {
  "lineno": 1536,
  "symbols_in_volume": [
   "pykafka.protocol.ApiVersionsRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_api_versions_response": {
  "lineno": 1546,
  "symbols_in_volume": [
   "pykafka.protocol.ApiVersionsResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_create_topics_request": {
  "lineno": 1483,
  "symbols_in_volume": [
   "pykafka.protocol.CreateTopicRequest",
   "pykafka.protocol.CreateTopicsRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_create_topics_response": {
  "lineno": 1502,
  "symbols_in_volume": [
   "pykafka.protocol.CreateTopicsResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_delete_topics_request": {
  "lineno": 1512,
  "symbols_in_volume": [
   "pykafka.protocol.DeleteTopicsRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_delete_topics_response": {
  "lineno": 1526,
  "symbols_in_volume": [
   "pykafka.protocol.DeleteTopicsResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_describe_groups_request": {
  "lineno": 1418,
  "symbols_in_volume": [
   "pykafka.protocol.DescribeGroupsRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_describe_groups_response": {
  "lineno": 1431,
  "symbols_in_volume": [
   "pykafka.protocol.DescribeGroupsResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_list_groups_request": {
  "lineno": 1392,
  "symbols_in_volume": [
   "pykafka.protocol.ListGroupsRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_list_groups_response": {
  "lineno": 1402,
  "symbols_in_volume": [
   "pykafka.protocol.ListGroupsResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI": {
  "lineno": 621,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestFetchAPI._get_expected": {
  "lineno": 622,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_gzip_decompression": {
  "lineno": 734,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_partition_error": {
  "lineno": 679,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_request": {
  "lineno": 658,
  "symbols_in_volume": [
   "pykafka.protocol.FetchRequest",
   "pykafka.protocol.PartitionFetchRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_response": {
  "lineno": 704,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_snappy_decompression": {
  "lineno": 752,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1": {
  "lineno": 779,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponseV1",
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1._get_expected": {
  "lineno": 782,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_gzip_decompression": {
  "lineno": 898,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_partition_error": {
  "lineno": 840,
  "symbols_in_volume": [
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_response": {
  "lineno": 866,
  "symbols_in_volume": [
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_snappy_decompression": {
  "lineno": 909,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV2": {
  "lineno": 925,
  "symbols_in_volume": [
   "pykafka.protocol.FetchResponseV2"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI": {
  "lineno": 1201,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_consumer_group_protocol_metadata": {
  "lineno": 1204,
  "symbols_in_volume": [
   "pykafka.protocol.ConsumerGroupProtocolMetadata"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_heartbeat_request": {
  "lineno": 1343,
  "symbols_in_volume": [
   "pykafka.protocol.HeartbeatRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_heartbeat_response": {
  "lineno": 1358,
  "symbols_in_volume": [
   "pykafka.protocol.HeartbeatResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_join_group_request": {
  "lineno": 1218,
  "symbols_in_volume": [
   "pykafka.membershipprotocol.RangeProtocol",
   "pykafka.protocol.JoinGroupRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_join_group_response": {
  "lineno": 1244,
  "symbols_in_volume": [
   "pykafka.protocol.JoinGroupResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_leave_group_request": {
  "lineno": 1366,
  "symbols_in_volume": [
   "pykafka.protocol.LeaveGroupRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_leave_group_response": {
  "lineno": 1380,
  "symbols_in_volume": [
   "pykafka.protocol.LeaveGroupResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_member_assignment_construction": {
  "lineno": 1273,
  "symbols_in_volume": [
   "pykafka.protocol.MemberAssignment"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_sync_group_request": {
  "lineno": 1299,
  "symbols_in_volume": [
   "pykafka.protocol.MemberAssignment",
   "pykafka.protocol.SyncGroupRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_sync_group_response": {
  "lineno": 1330,
  "symbols_in_volume": [
   "pykafka.protocol.SyncGroupResponse"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI": {
  "lineno": 929,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_partition_error": {
  "lineno": 951,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_request": {
  "lineno": 932,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetRequest",
   "pykafka.protocol.PartitionOffsetRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_response": {
  "lineno": 967,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1": {
  "lineno": 983,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_partition_error": {
  "lineno": 1011,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetResponseV1",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_request": {
  "lineno": 986,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetRequestV1",
   "pykafka.protocol.PartitionOffsetRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_response": {
  "lineno": 1028,
  "symbols_in_volume": [
   "pykafka.protocol.ListOffsetResponseV1",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_partition_error": {
  "lineno": 70,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_request": {
  "lineno": 13,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_response": {
  "lineno": 32,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_topic_error": {
  "lineno": 102,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1": {
  "lineno": 135,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1.test_request": {
  "lineno": 138,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequestV1"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1.test_response": {
  "lineno": 157,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponseV1",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2": {
  "lineno": 202,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2.test_request": {
  "lineno": 205,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequestV2"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2.test_response": {
  "lineno": 224,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponseV2",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3": {
  "lineno": 272,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3.test_request": {
  "lineno": 275,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequestV3"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3.test_response": {
  "lineno": 294,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponseV3",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4": {
  "lineno": 344,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4.test_request": {
  "lineno": 347,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequestV4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4.test_response": {
  "lineno": 367,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponseV4",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5": {
  "lineno": 417,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5.test_request": {
  "lineno": 420,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataRequestV5"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5.test_response": {
  "lineno": 440,
  "symbols_in_volume": [
   "pykafka.protocol.MetadataResponseV5",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI": {
  "lineno": 1046,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_consumer_metadata_request": {
  "lineno": 1049,
  "symbols_in_volume": [
   "pykafka.protocol.GroupCoordinatorRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_consumer_metadata_response": {
  "lineno": 1061,
  "symbols_in_volume": [
   "pykafka.protocol.GroupCoordinatorResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_commit_request": {
  "lineno": 1075,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetCommitRequest",
   "pykafka.protocol.PartitionOffsetCommitRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_commit_response": {
  "lineno": 1102,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetCommitResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_fetch_request": {
  "lineno": 1115,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetFetchRequest",
   "pykafka.protocol.PartitionOffsetFetchRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_fetch_response": {
  "lineno": 1141,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetFetchResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2": {
  "lineno": 1158,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2.test_offset_fetch_request": {
  "lineno": 1161,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetFetchRequestV2"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2.test_offset_fetch_response": {
  "lineno": 1182,
  "symbols_in_volume": [
   "pykafka.protocol.OffsetFetchResponseV2",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI": {
  "lineno": 496,
  "symbols_in_volume": [
   "pykafka.protocol.Message",
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_gzip_compression": {
  "lineno": 566,
  "symbols_in_volume": [
   "pykafka.common.CompressionType.GZIP",
   "pykafka.protocol.ProduceRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_partition_error": {
  "lineno": 578,
  "symbols_in_volume": [
   "pykafka.protocol.ProduceResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_request": {
  "lineno": 507,
  "symbols_in_volume": [
   "pykafka.protocol.ProduceRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_request_message_timestamp": {
  "lineno": 536,
  "symbols_in_volume": [
   "pykafka.protocol.ProduceRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_response": {
  "lineno": 593,
  "symbols_in_volume": [
   "pykafka.protocol.ProducePartitionResponse",
   "pykafka.protocol.ProduceResponse",
   "pykafka.utils.compat.buffer"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_snappy_compression": {
  "lineno": 572,
  "symbols_in_volume": [
   "pykafka.common.CompressionType.SNAPPY",
   "pykafka.protocol.ProduceRequest"
  ],
  "type": "function"
 },
 "tests.pykafka.test_protocol._FetchAPITestBase": {
  "lineno": 611,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tests.pykafka.test_protocol._FetchAPITestBase.msg_to_dict": {
  "lineno": 614,
  "symbols_in_volume": [
   "operator.attrgetter",
   "pykafka.protocol.Message.__slots__"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer": {
  "lineno": null,
  "symbols_in_volume": [
   "gevent",
   "os.environ.get",
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.test_simpleconsumer.TestGEventSimpleConsumer": {
  "lineno": 286,
  "symbols_in_volume": [
   "gevent",
   "platform.python_implementation",
   "pytest.mark.skipif"
  ],
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition": {
  "lineno": 292,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_compacted_topic_partition_rejects_old_message_after_initial": {
  "lineno": 326,
  "symbols_in_volume": [
   "mock.MagicMock",
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_consume_empty_queue": {
  "lineno": 352,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_commit_request": {
  "lineno": 358,
  "symbols_in_volume": [
   "json.loads",
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition",
   "pykafka.utils.compat.get_string"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_counters": {
  "lineno": 391,
  "symbols_in_volume": [
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_fetch_request": {
  "lineno": 377,
  "symbols_in_volume": [
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_rejects_old_message": {
  "lineno": 312,
  "symbols_in_volume": [
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_saves_offset": {
  "lineno": 293,
  "symbols_in_volume": [
   "mock.MagicMock",
   "mock.Mock",
   "pykafka.simpleconsumer.OwnedPartition"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer": {
  "lineno": 33,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer._convert_offsets": {
  "lineno": 105,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.utils.compat.iteritems"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer._get_simple_consumer": {
  "lineno": 57,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.setUpClass": {
  "lineno": 38,
  "symbols_in_volume": [
   "datetime.datetime.now",
   "datetime.timedelta",
   "pykafka.KafkaClient",
   "pykafka.test.utils.get_cluster",
   "pykafka.utils.compat.range",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.tearDownClass": {
  "lineno": 53,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_consume": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_consumer_lag": {
  "lineno": 269,
  "symbols_in_volume": [
   "pykafka.utils.compat.iteritems",
   "pytest.mark.xfail"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_commit": {
  "lineno": 121,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_commit_override": {
  "lineno": 132,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_resume": {
  "lineno": 145,
  "symbols_in_volume": [
   "pykafka.utils.compat.range"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offset_on_start": {
  "lineno": 157,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.simpleconsumer.OffsetType.LATEST"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offsets": {
  "lineno": 206,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.simpleconsumer.OffsetType.LATEST"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offsets_timestamp": {
  "lineno": 182,
  "symbols_in_volume": [
   "pykafka.simpleconsumer.OffsetType.EARLIEST",
   "pykafka.simpleconsumer.OffsetType.LATEST"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_unblock_event": {
  "lineno": 82,
  "symbols_in_volume": [
   "threading.Thread"
  ],
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_update_cluster": {
  "lineno": 242,
  "symbols_in_volume": [
   "pytest.mark.xfail",
   "pytest.skip",
   "time.sleep",
   "time.time"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl": {
  "lineno": null,
  "symbols_in_volume": [
   "os.environ.get"
  ],
  "type": "module"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests": {
  "lineno": 14,
  "symbols_in_volume": [
   "unittest.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.roundtrip_test": {
  "lineno": 27,
  "symbols_in_volume": [
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.setUpClass": {
  "lineno": 17,
  "symbols_in_volume": [
   "pykafka.test.utils.get_cluster",
   "pytest.skip"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.tearDownClass": {
  "lineno": 23,
  "symbols_in_volume": [
   "pykafka.test.utils.stop_cluster"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_ca_only": {
  "lineno": 44,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.SslConfig"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_client_cert": {
  "lineno": 51,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.SslConfig"
  ],
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_legacy_wrap_socket": {
  "lineno": 65,
  "symbols_in_volume": [
   "pykafka.KafkaClient",
   "pykafka.SslConfig",
   "pytest.mark.skip"
  ],
  "type": "function"
 },
 "tests.pykafka.utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tests.pykafka.utils.test_compression": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.utils.test_compression.CompressionTests": {
  "lineno": 10,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_gzip": {
  "lineno": 14,
  "symbols_in_volume": [
   "pykafka.utils.compression.decode_gzip",
   "pykafka.utils.compression.encode_gzip"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4": {
  "lineno": 42,
  "symbols_in_volume": [
   "pykafka.utils.compression.decode_lz4",
   "pykafka.utils.compression.encode_lz4"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4_old_kafka": {
  "lineno": 58,
  "symbols_in_volume": [
   "pykafka.utils.compression.decode_lz4_old_kafka",
   "pykafka.utils.compression.encode_lz4_old_kafka"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4f": {
  "lineno": 49,
  "symbols_in_volume": [
   "lz4f.compressFrame",
   "platform.python_implementation",
   "pykafka.utils.compression.decode_lz4f",
   "pytest.skip"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy": {
  "lineno": 21,
  "symbols_in_volume": [
   "pykafka.utils.compression.decode_snappy",
   "pykafka.utils.compression.encode_snappy"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy_large_payload": {
  "lineno": 35,
  "symbols_in_volume": [
   "platform.python_implementation",
   "pykafka.utils.compression.decode_snappy",
   "pykafka.utils.compression.encode_snappy",
   "pytest.skip",
   "uuid.uuid4"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy_xerial": {
  "lineno": 28,
  "symbols_in_volume": [
   "pykafka.utils.compression.decode_snappy",
   "pykafka.utils.compression.encode_snappy"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers": {
  "lineno": null,
  "symbols_in_volume": [
   "unittest2.main"
  ],
  "type": "module"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests": {
  "lineno": 6,
  "symbols_in_volume": [
   "unittest2.TestCase"
  ],
  "type": "class"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_array_unpacking": {
  "lineno": 22,
  "symbols_in_volume": [
   "pykafka.utils.struct_helpers.unpack_from"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_basic_unpack": {
  "lineno": 7,
  "symbols_in_volume": [
   "pykafka.utils.struct_helpers.unpack_from"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_bytearray_unpacking": {
  "lineno": 18,
  "symbols_in_volume": [
   "pykafka.utils.struct_helpers.unpack_from"
  ],
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_string_encoding": {
  "lineno": 14,
  "symbols_in_volume": [
   "pykafka.utils.struct_helpers.unpack_from"
  ],
  "type": "function"
 }
}