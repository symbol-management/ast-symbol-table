{
 "pykafka": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "pykafka.__version__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "kazoo.handlers.gevent.SequentialGeventHandler",
    "pykafka.balancedconsumer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.balancedconsumer.BalancedConsumer": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__del__": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__init__": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "ImportError",
    "UnicodeEncodeError",
    "UnicodeException",
    "get_bytes",
    "get_string",
    "isinstance",
    "pykafka.balancedconsumer.GEventHandler",
    "pykafka.balancedconsumer.rdkafka",
    "pykafka.balancedconsumer.socket",
    "uuid.uuid4",
    "valid_int"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__iter__": {
  "data": {
   "lineno": 764
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.__repr__": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "get_string",
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._add_partitions": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "PartitionOwnedError",
    "get_bytes",
    "kazoo.exceptions.NodeExistsError"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._add_self": {
  "data": {
   "lineno": 544
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._brokers_changed": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "pykafka.balancedconsumer._catch_thread_exception",
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._build_watch_callback": {
  "data": {
   "lineno": 491
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._build_watch_callback._callback": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "ReferenceError",
    "fn"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._consumers_changed": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": [
    "pykafka.balancedconsumer._catch_thread_exception",
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_held_partitions": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "get_bytes",
    "int",
    "kazoo.exceptions.NoNodeException",
    "set"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_internal_consumer": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "Cls",
    "pykafka.balancedconsumer.rdkafka"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._get_participants": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "get_bytes",
    "kazoo.exceptions.NoNodeException",
    "pykafka.balancedconsumer.log",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._partitions": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "itervalues",
    "property",
    "set"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._path_from_partition": {
  "data": {
   "lineno": 620
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._path_self": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "get_string",
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._raise_worker_exceptions": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "six.reraise"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._rebalance": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._remove_partitions": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": [
    "kazoo.exceptions.NoNodeException"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._set_watches": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "Exception",
    "kazoo.exceptions.NoNodeException",
    "kazoo.recipe.watchers.ChildrenWatch",
    "pykafka.balancedconsumer.BalancedConsumer",
    "pykafka.balancedconsumer.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._setup_internal_consumer": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "Exception",
    "dict",
    "iteritems",
    "list",
    "pykafka.balancedconsumer.log",
    "pykafka.balancedconsumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._setup_zookeeper": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "isinstance",
    "kazoo.client.KazooClient",
    "kazoo.handlers.gevent.SequentialGeventHandler",
    "pykafka.balancedconsumer.GEventHandler"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._topics_changed": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "pykafka.balancedconsumer._catch_thread_exception",
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer._update_member_assignment": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "pykafka.balancedconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.commit_offsets": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": [
    "KafkaException"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.consume": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": [
    "AttributeError",
    "ConsumerStoppedException",
    "consumer_timed_out",
    "pykafka.balancedconsumer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.consume.consumer_timed_out": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "pykafka.balancedconsumer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.held_offsets": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.partitions": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "dict",
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.reset_offsets": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "ConsumerStoppedException"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.start": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "Exception",
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.stop": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "kazoo.exceptions.NoNodeException",
    "pykafka.balancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.BalancedConsumer.topic": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.ChildrenWatch": {
  "data": {
   "shadows": "kazoo.recipe.watchers.ChildrenWatch"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.GEventHandler": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer.KazooClient": {
  "data": {
   "shadows": "kazoo.client.KazooClient"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.NoNodeException": {
  "data": {
   "shadows": "kazoo.exceptions.NoNodeException"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.NodeExistsError": {
  "data": {
   "shadows": "kazoo.exceptions.NodeExistsError"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.SequentialGeventHandler": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer._catch_thread_exception": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "pykafka.balancedconsumer._catch_thread_exception.wrapped": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "Exception",
    "fn",
    "pykafka.balancedconsumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.balancedconsumer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.log": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.rdkafka": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "pykafka.balancedconsumer.reraise": {
  "data": {
   "shadows": "six.reraise"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "pykafka.balancedconsumer.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.broker": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.broker.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.broker.Broker": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.broker.Broker.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "int",
    "pykafka.broker.log"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.__repr__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker._get_unique_req_handler": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "BrokerConnection",
    "RequestHandler",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.commit_consumer_group_offsets": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "OffsetCommitRequest",
    "get_bytes"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.connect": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "BrokerConnection",
    "RequestHandler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.connect_offsets_channel": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "BrokerConnection",
    "RequestHandler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.connected": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.create_topics": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": [
    "CreateTopicsRequest",
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.delete_topics": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "DeleteTopicsRequest",
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.describe_groups": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "DescribeGroupsRequest",
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_api_versions": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "ApiVersionsRequest",
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_consumer_group_offsets": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "request_class"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.fetch_messages": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "pykafka.broker._check_handler",
    "request_class"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.from_metadata": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "classmethod",
    "cls"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.handler": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.heartbeat": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "HeartbeatRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.host": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.id": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.join_group": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "JoinGroupRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.leave_group": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "LeaveGroupRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.list_groups": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "ListGroupsRequest",
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.offsets_channel_connected": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.offsets_channel_handler": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.port": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.produce_messages": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "pykafka.broker._check_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.request_metadata": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "iteritems",
    "pykafka.broker._check_handler",
    "pykafka.broker.log",
    "pykafka.broker.time",
    "range",
    "request_class"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.request_offset_limits": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "pykafka.broker._check_handler",
    "request_class"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.Broker.sync_group": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "SyncGroupRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.broker.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.broker._check_handler": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "pykafka.broker._check_handler.wrapped": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "fn"
   ]
  },
  "type": "function"
 },
 "pykafka.broker.log": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "pykafka.broker.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.broker.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.cli": {
  "data": {},
  "type": "module"
 },
 "pykafka.cli.__main__": {
  "data": {
   "symbols_in_volume": [
    "main"
   ]
  },
  "type": "module"
 },
 "pykafka.cli.kafka_tools": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.cli.kafka_tools.main"
   ]
  },
  "type": "module"
 },
 "pykafka.cli.kafka_tools.CreateTopicRequest": {
  "data": {
   "shadows": "pykafka.protocol.CreateTopicRequest"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.OffsetType": {
  "data": {
   "shadows": "pykafka.common.OffsetType"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.PY3": {
  "data": {
   "shadows": "pykafka.utils.compat.PY3"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.PartitionOffsetCommitRequest": {
  "data": {
   "shadows": "pykafka.protocol.PartitionOffsetCommitRequest"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools._add_consumer_group": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "pykafka.cli.kafka_tools._encode_utf8"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_limit": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_offset": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_outfile": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "pykafka.cli.kafka_tools.argparse",
    "pykafka.cli.kafka_tools.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_timeout": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._add_topic": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "pykafka.cli.kafka_tools._encode_utf8"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._encode_utf8": {
  "data": {
   "lineno": 284
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools._get_arg_parser": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "int",
    "pykafka.cli.kafka_tools._add_consumer_group",
    "pykafka.cli.kafka_tools._add_limit",
    "pykafka.cli.kafka_tools._add_offset",
    "pykafka.cli.kafka_tools._add_outfile",
    "pykafka.cli.kafka_tools._add_timeout",
    "pykafka.cli.kafka_tools._add_topic",
    "pykafka.cli.kafka_tools._encode_utf8",
    "pykafka.cli.kafka_tools.argparse",
    "pykafka.cli.kafka_tools.consume_topic",
    "pykafka.cli.kafka_tools.create_topic",
    "pykafka.cli.kafka_tools.delete_topic",
    "pykafka.cli.kafka_tools.desc_topic",
    "pykafka.cli.kafka_tools.print_consumer_lag",
    "pykafka.cli.kafka_tools.print_managed_consumer_groups",
    "pykafka.cli.kafka_tools.print_offsets",
    "pykafka.cli.kafka_tools.print_topics",
    "pykafka.cli.kafka_tools.reset_offsets"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.calendar": {
  "data": {
   "shadows": "calendar"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.consume_topic": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "ValueError",
    "pykafka.common.OffsetType.LATEST",
    "pykafka.utils.compat.PY3"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.create_topic": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "ValueError",
    "pkg_resources.parse_version",
    "pykafka.protocol.CreateTopicRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.delete_topic": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "ValueError",
    "pkg_resources.parse_version"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.desc_topic": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "print",
    "pykafka.cli.kafka_tools.tabulate"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.fetch_consumer_lag": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "pykafka.cli.kafka_tools.fetch_offsets"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.fetch_offsets": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "datetime.datetime.strptime",
    "int",
    "pykafka.cli.kafka_tools.calendar"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.iteritems": {
  "data": {
   "shadows": "pykafka.utils.compat.iteritems"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.main": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "pykafka.cli.kafka_tools._get_arg_parser",
    "pykafka.cli.kafka_tools.pykafka"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.print_consumer_lag": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "print",
    "pykafka.cli.kafka_tools.fetch_consumer_lag",
    "pykafka.cli.kafka_tools.tabulate",
    "pykafka.utils.compat.iteritems",
    "sum"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.print_managed_consumer_groups": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "ValueError",
    "print",
    "pykafka.cli.kafka_tools.tabulate",
    "pykafka.utils.compat.iteritems"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_offsets": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "ValueError",
    "print",
    "pykafka.cli.kafka_tools.fetch_offsets",
    "pykafka.cli.kafka_tools.tabulate",
    "pykafka.utils.compat.iteritems"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.print_topics": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "len",
    "list",
    "print",
    "pykafka.cli.kafka_tools.tabulate"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.pykafka": {
  "data": {
   "shadows": "pykafka"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.reset_offsets": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "pykafka.cli.kafka_tools.fetch_offsets",
    "pykafka.cli.kafka_tools.time",
    "pykafka.protocol.PartitionOffsetCommitRequest",
    "pykafka.utils.compat.iteritems"
   ]
  },
  "type": "function"
 },
 "pykafka.cli.kafka_tools.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.tabulate": {
  "data": {
   "shadows": "tabulate"
  },
  "type": "import"
 },
 "pykafka.cli.kafka_tools.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.client": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "pykafka.client.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.client.GEventHandler": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "pykafka.client.KafkaClient": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.client.KafkaClient.__init__": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "Cluster",
    "ImportError",
    "ThreadingHandler",
    "pykafka.client.GEventHandler"
   ]
  },
  "type": "function"
 },
 "pykafka.client.KafkaClient.__repr__": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.client.KafkaClient.update_cluster": {
  "data": {
   "lineno": 154
  },
  "type": "function"
 },
 "pykafka.client.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.client.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.client.log": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "pykafka.client.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.cluster": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.cluster.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.cluster.Cluster": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.cluster.Cluster.__init__": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "int",
    "pykafka.cluster.TopicDict"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.__repr__": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_broker_connection_info": {
  "data": {
   "lineno": 307
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_brokers_from_zookeeper": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "Exception",
    "kazoo.client.KazooClient",
    "len",
    "pykafka.cluster.json",
    "pykafka.cluster.log"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._get_metadata": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "NoBrokersAvailableError",
    "pykafka.cluster.random"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._request_metadata": {
  "data": {
   "lineno": 248
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._request_random_broker": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "Broker",
    "Exception",
    "int",
    "pykafka.cluster.log",
    "range",
    "req_fn"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster._update_brokers": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "Broker.from_metadata",
    "Exception",
    "KeyError",
    "iteritems",
    "len",
    "pykafka.cluster.log",
    "set"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.brokers": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.fetch_api_versions": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "SocketDisconnectedError",
    "pkg_resources.parse_version",
    "pykafka.cluster.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_group_coordinator": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "GroupCoordinatorRequest",
    "itervalues",
    "pykafka.cluster.log",
    "pykafka.cluster.time",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_managed_group_descriptions": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "itervalues"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.get_offset_manager": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "pykafka.cluster.log"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.handler": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.topics": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.Cluster.update": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": [
    "len",
    "pykafka.cluster.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.KazooClient": {
  "data": {
   "shadows": "kazoo.client.KazooClient"
  },
  "type": "import"
 },
 "pykafka.cluster.TopicDict": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "pykafka.cluster.TopicDict.__getitem__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "KeyError",
    "Topic",
    "UnicodeEncodeError",
    "UnicodeException",
    "get_string",
    "pykafka.cluster.TopicDict",
    "pykafka.cluster.log",
    "pykafka.cluster.weakref",
    "range",
    "super",
    "topic_ref"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "pykafka.cluster.TopicDict",
    "pykafka.cluster.weakref",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict.__missing__": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "pykafka.cluster.TopicDict",
    "pykafka.cluster.log",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict._create_topic": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "pykafka.cluster.log",
    "pykafka.cluster.time"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict._should_exclude_topic": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict._update_topics": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "iteritems",
    "len",
    "pykafka.cluster.TopicDict",
    "pykafka.cluster.log",
    "ref",
    "set",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.cluster.TopicDict.values": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "pykafka.cluster.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.cluster.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.cluster.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.cluster.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "pykafka.cluster.log": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "pykafka.cluster.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.cluster.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.cluster.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "pykafka.cluster.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.cluster.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.common": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "datetime.datetime",
    "pykafka.common.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.common.CompressionType": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.common.EPOCH": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "pykafka.common.Message": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.common.OffsetType": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.common.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.common.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.common.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pykafka.common.log": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "pykafka.common.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.connection": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.connection.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.connection.BrokerConnection": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.connection.BrokerConnection.__del__": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.__init__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "bytearray"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.connect": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "SocketDisconnectedError",
    "pykafka.connection.log",
    "pykafka.connection.time",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.connected": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.disconnect": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "IOError"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.reconnect": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.request": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "SocketDisconnectedError",
    "pykafka.connection.log",
    "repr"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.BrokerConnection.response": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "IOError",
    "SocketDisconnectedError",
    "buffer",
    "bytes",
    "len",
    "pykafka.connection.struct",
    "recvall_into"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.SslConfig": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.connection.SslConfig.__init__": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "pykafka.connection.SslConfig._legacy_wrap_socket": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "functools.partial",
    "pykafka.connection.log",
    "pykafka.connection.ssl"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.SslConfig.wrap_socket": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "hasattr",
    "pykafka.connection.ssl"
   ]
  },
  "type": "function"
 },
 "pykafka.connection.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.connection.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.connection.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.connection.log": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "pykafka.connection.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.connection.partial": {
  "data": {
   "shadows": "functools.partial"
  },
  "type": "import"
 },
 "pykafka.connection.ssl": {
  "data": {
   "shadows": "ssl"
  },
  "type": "import"
 },
 "pykafka.connection.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.connection.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.exceptions": {
  "data": {
   "symbols_in_volume": [
    "dict",
    "pykafka.exceptions.GroupAuthorizationFailed",
    "pykafka.exceptions.GroupCoordinatorNotAvailable",
    "pykafka.exceptions.GroupLoadInProgress",
    "pykafka.exceptions.IllegalGeneration",
    "pykafka.exceptions.InconsistentGroupProtocol",
    "pykafka.exceptions.InvalidMessageError",
    "pykafka.exceptions.InvalidMessageSize",
    "pykafka.exceptions.InvalidSessionTimeout",
    "pykafka.exceptions.InvalidTopic",
    "pykafka.exceptions.LeaderNotAvailable",
    "pykafka.exceptions.MessageSizeTooLarge",
    "pykafka.exceptions.NotCoordinatorForGroup",
    "pykafka.exceptions.NotLeaderForPartition",
    "pykafka.exceptions.OffsetMetadataTooLarge",
    "pykafka.exceptions.OffsetOutOfRangeError",
    "pykafka.exceptions.RebalanceInProgress",
    "pykafka.exceptions.RequestTimedOut",
    "pykafka.exceptions.TopicAuthorizationFailed",
    "pykafka.exceptions.UnknownError",
    "pykafka.exceptions.UnknownMemberId",
    "pykafka.exceptions.UnknownTopicOrPartition"
   ]
  },
  "type": "module"
 },
 "pykafka.exceptions.ConsumerStoppedException": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.ERROR_CODES": {
  "data": {
   "lineno": 257
  },
  "type": "constant"
 },
 "pykafka.exceptions.GroupAuthorizationFailed": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.GroupCoordinatorNotAvailable": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.GroupLoadInProgress": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.IllegalGeneration": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.InconsistentGroupProtocol": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.InvalidMessageError": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.InvalidMessageSize": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.InvalidSessionTimeout": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.InvalidTopic": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.KafkaException": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.LeaderNotAvailable": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.LeaderNotFoundError": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.MessageSetDecodeFailure": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.MessageSizeTooLarge": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.NoBrokersAvailableError": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.NoMessagesConsumedError": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.NotCoordinatorForGroup": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.NotLeaderForPartition": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.OffsetMetadataTooLarge": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.OffsetOutOfRangeError": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.OffsetRequestFailedError": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.PartitionOwnedError": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.PartitionOwnedError.__init__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "pykafka.exceptions.PartitionOwnedError",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.exceptions.ProduceFailureError": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.ProducerQueueFullError": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.ProducerStoppedException": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.ProtocolClientError": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.RdKafkaException": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.RdKafkaStoppedException": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "pykafka.exceptions.RdKafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.RebalanceInProgress": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.RequestTimedOut": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.SocketDisconnectedError": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "pykafka.exceptions.KafkaException"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.TopicAuthorizationFailed": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.UnicodeException": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.UnknownError": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.UnknownMemberId": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.UnknownTopicOrPartition": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "pykafka.exceptions.ProtocolClientError"
   ]
  },
  "type": "class"
 },
 "pykafka.exceptions.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.handlers": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "pykafka.handlers.gevent",
    "pykafka.handlers.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.handlers.GEventHandler": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "gevent.socket",
    "gevent.socket.error",
    "gevent.socket.gaierror",
    "pykafka.handlers.Handler",
    "pykafka.handlers.gevent"
   ]
  },
  "type": "class"
 },
 "pykafka.handlers.GEventHandler.sleep": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "pykafka.handlers.gevent"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.GEventHandler.spawn": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "pykafka.handlers.gevent"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.Handler": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.handlers.Handler.spawn": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "collections.namedtuple",
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.handlers.RequestHandler.__del__": {
  "data": {
   "lineno": 163
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.__init__": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler._start_thread": {
  "data": {
   "lineno": 195
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler._start_thread.worker": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "Exception",
    "pykafka.handlers.log",
    "sys"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.request": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "pykafka.handlers.ResponseFuture"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.start": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "pykafka.handlers.RequestHandler.stop": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "pykafka.handlers.log"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.handlers.ResponseFuture.__init__": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.get": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "response_cls"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.set_error": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "gevent.socket.error"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.ResponseFuture.set_response": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "gevent.socket.gaierror",
    "pykafka.handlers.Handler",
    "pykafka.handlers.threading",
    "socket",
    "socket.error"
   ]
  },
  "type": "class"
 },
 "pykafka.handlers.ThreadingHandler.RLock": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "TypeError",
    "pykafka.handlers.threading"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler.sleep": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "pykafka.handlers.time"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.ThreadingHandler.spawn": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "pykafka.handlers.ThreadingHandler",
    "pykafka.handlers.threading"
   ]
  },
  "type": "function"
 },
 "pykafka.handlers.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.handlers.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.handlers._sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.handlers.g_gaierror": {
  "data": {
   "shadows": "gevent.socket.gaierror"
  },
  "type": "import"
 },
 "pykafka.handlers.gaierror": {
  "data": {
   "shadows": "socket.gaierror"
  },
  "type": "import"
 },
 "pykafka.handlers.gevent": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "pykafka.handlers.gevent.event": {
  "data": {
   "shadows": "gevent.event"
  },
  "type": "import"
 },
 "pykafka.handlers.gevent.lock": {
  "data": {
   "shadows": "gevent.lock"
  },
  "type": "import"
 },
 "pykafka.handlers.gevent.queue": {
  "data": {
   "shadows": "gevent.queue"
  },
  "type": "import"
 },
 "pykafka.handlers.gsocket": {
  "data": {
   "shadows": "gevent.socket"
  },
  "type": "import"
 },
 "pykafka.handlers.gsocket_error": {
  "data": {
   "shadows": "gevent.socket.error"
  },
  "type": "import"
 },
 "pykafka.handlers.log": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "pykafka.handlers.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.handlers.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.handlers.pysocket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "pykafka.handlers.socket_error": {
  "data": {
   "shadows": "socket.error"
  },
  "type": "import"
 },
 "pykafka.handlers.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "pykafka.handlers.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.managedbalancedconsumer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.managedbalancedconsumer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer": {
  "data": {
   "lineno": 39
  },
  "type": "class"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "ImportError",
    "UnicodeEncodeError",
    "UnicodeException",
    "get_string",
    "pykafka.managedbalancedconsumer.uuid",
    "valid_int"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "pykafka.managedbalancedconsumer.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers._handle_GroupCoordinatorNotAvailable": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._build_default_error_handlers._handle_NotCoordinatorForGroup": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._handle_error": {
  "data": {
   "lineno": 355
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._join_group": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "pykafka.managedbalancedconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._setup_heartbeat_worker": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "pykafka.managedbalancedconsumer.log",
    "pykafka.managedbalancedconsumer.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._setup_heartbeat_worker.fetcher": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "Exception",
    "ReferenceError",
    "pykafka.managedbalancedconsumer.log",
    "pykafka.managedbalancedconsumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._sync_group": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "pykafka.managedbalancedconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer._update_member_assignment": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "Exception",
    "MemberAssignment",
    "iterkeys",
    "pykafka.managedbalancedconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.start": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "Exception",
    "pykafka.managedbalancedconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.ManagedBalancedConsumer.stop": {
  "data": {
   "lineno": 287
  },
  "type": "function"
 },
 "pykafka.managedbalancedconsumer.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.managedbalancedconsumer.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.managedbalancedconsumer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.managedbalancedconsumer.log": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "pykafka.managedbalancedconsumer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.managedbalancedconsumer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.managedbalancedconsumer.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "pykafka.managedbalancedconsumer.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.membershipprotocol": {
  "data": {
   "symbols_in_volume": [
    "ConsumerGroupProtocolMetadata",
    "__name__",
    "collections.namedtuple",
    "pykafka.membershipprotocol.GroupMembershipProtocol",
    "pykafka.membershipprotocol.decide_partitions_range",
    "pykafka.membershipprotocol.decide_partitions_roundrobin",
    "pykafka.membershipprotocol.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.membershipprotocol.GroupMembershipProtocol": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "pykafka.membershipprotocol.RangeProtocol": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "pykafka.membershipprotocol.RoundRobinProtocol": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "pykafka.membershipprotocol.decide_partitions_range": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "len",
    "min",
    "p_to_str",
    "pykafka.membershipprotocol.itertools",
    "pykafka.membershipprotocol.log",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_range.p_to_str": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_roundrobin": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "len",
    "p_to_str",
    "pykafka.membershipprotocol.log",
    "range",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.membershipprotocol.decide_partitions_roundrobin.p_to_str": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.membershipprotocol.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pykafka.membershipprotocol.log": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "pykafka.membershipprotocol.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.membershipprotocol.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.partition": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.partition.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.partition.Partition": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.partition.Partition.__eq__": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.__hash__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "pykafka.partition.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.__lt__": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "pykafka.partition.Partition.__ne__": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "pykafka.partition.Partition.__repr__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.earliest_available_offset": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "pykafka.partition.Partition.fetch_offset_limit": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "PartitionOffsetRequest",
    "datetime.datetime",
    "isinstance",
    "len",
    "pykafka.partition.log",
    "pykafka.partition.time",
    "range",
    "round"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.id": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.isr": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.latest_available_offset": {
  "data": {
   "lineno": 119
  },
  "type": "function"
 },
 "pykafka.partition.Partition.leader": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.replicas": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.topic": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.Partition.update": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "KeyError",
    "LeaderNotFoundError",
    "pykafka.partition.log",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.partition.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.partition.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.partition.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pykafka.partition.log": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "pykafka.partition.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.partition.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.partition.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.partitioners": {
  "data": {
   "symbols_in_volume": [
    "pykafka.partitioners.HashingPartitioner"
   ]
  },
  "type": "module"
 },
 "pykafka.partitioners.BasePartitioner": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.partitioners.BasePartitioner.__call__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.GroupHashingPartitioner": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "pykafka.partitioners.BasePartitioner"
   ]
  },
  "type": "class"
 },
 "pykafka.partitioners.GroupHashingPartitioner.__call__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "ValueError",
    "abs",
    "len",
    "pykafka.partitioners.random",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.GroupHashingPartitioner.__init__": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.HashingPartitioner": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "pykafka.partitioners.BasePartitioner"
   ]
  },
  "type": "class"
 },
 "pykafka.partitioners.HashingPartitioner.__call__": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ValueError",
    "abs",
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.HashingPartitioner.__init__": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "hashlib.sha1",
    "int"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.RandomPartitioner": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "pykafka.partitioners.BasePartitioner"
   ]
  },
  "type": "class"
 },
 "pykafka.partitioners.RandomPartitioner.__call__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.partitioners.RandomPartitioner.__init__": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "pykafka.partitioners.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.partitioners.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.partitioners.hashing_partitioner": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "pykafka.partitioners.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "pykafka.partitioners.sha1": {
  "data": {
   "shadows": "hashlib.sha1"
  },
  "type": "import"
 },
 "pykafka.producer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.producer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.producer.OwnedBroker": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.producer.OwnedBroker.__init__": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "collections.deque",
    "pykafka.producer.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_flush_ready": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_has_message": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker._wait_for_slot_available": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": [
    "ProducerQueueFullError",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.cleanup": {
  "data": {
   "lineno": 611
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.enqueue": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.flush": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": [
    "MessageSizeTooLarge",
    "len",
    "pykafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.increment_messages_pending": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.message_is_pending": {
  "data": {
   "lineno": 647
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.start": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "pykafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.start.queue_reader": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": [
    "Exception",
    "pykafka.producer.log",
    "pykafka.producer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.OwnedBroker.stop": {
  "data": {
   "lineno": 634
  },
  "type": "function"
 },
 "pykafka.producer.Producer": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.producer.Producer.__del__": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "pykafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.__enter__": {
  "data": {
   "lineno": 249
  },
  "type": "function"
 },
 "pykafka.producer.Producer.__exit__": {
  "data": {
   "lineno": 253
  },
  "type": "function"
 },
 "pykafka.producer.Producer.__init__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "RandomPartitioner",
    "max",
    "msg_protocol_version",
    "pykafka.producer._DeliveryReportNone",
    "pykafka.producer._DeliveryReportQueue",
    "pykafka.producer.log",
    "pykafka.producer.platform",
    "valid_int"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.__repr__": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._mark_as_delivered": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._produce": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "ProduceFailureError",
    "pykafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._produce_has_timed_out": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "pykafka.producer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._raise_worker_exceptions": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "six.reraise"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._send_request": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "ProduceRequest",
    "_get_partition_msgs",
    "enumerate",
    "iteritems",
    "len",
    "pykafka.producer.log",
    "pykafka.producer.struct",
    "type"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._send_request._get_partition_msgs": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "iteritems"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._setup_owned_brokers": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "list",
    "pykafka.producer.OwnedBroker"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._update": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "len",
    "list",
    "pykafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer._wait_all": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": [
    "any",
    "itervalues",
    "pykafka.producer.log",
    "pykafka.producer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.get_delivery_report": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "AttributeError",
    "KafkaException"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.produce": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "Message",
    "ProduceFailureError",
    "ProducerStoppedException",
    "RuntimeError",
    "TypeError",
    "ValueError",
    "bytes",
    "list",
    "pykafka.producer.time",
    "type"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.start": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "pykafka.producer.Producer.stop": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "get_queue_readers",
    "len",
    "stop_owned_brokers"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.Producer.stop.get_queue_readers": {
  "data": {
   "lineno": 316
  },
  "type": "function"
 },
 "pykafka.producer.Producer.stop.stop_owned_brokers": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "pykafka.producer._DeliveryReportNone": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.producer._DeliveryReportNone.__init__": {
  "data": {
   "lineno": 812
  },
  "type": "function"
 },
 "pykafka.producer._DeliveryReportNone.put": {
  "data": {
   "lineno": 815,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "pykafka.producer._DeliveryReportQueue": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": [
    "pykafka.producer.threading"
   ]
  },
  "type": "class"
 },
 "pykafka.producer._DeliveryReportQueue.__init__": {
  "data": {
   "lineno": 802
  },
  "type": "function"
 },
 "pykafka.producer._DeliveryReportQueue.put": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "pykafka.producer.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.producer.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.producer.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "pykafka.producer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.producer.log": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "pykafka.producer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.producer.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "pykafka.producer.reraise": {
  "data": {
   "shadows": "six.reraise"
  },
  "type": "import"
 },
 "pykafka.producer.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.producer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.producer.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "pykafka.producer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.producer.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.protocol": {
  "data": {},
  "type": "module"
 },
 "pykafka.protocol.__all__": {
  "data": {
   "lineno": 60
  },
  "type": "constant"
 },
 "pykafka.protocol.admin": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.admin.ApiVersionsRequest": {
  "data": {
   "lineno": 348
  },
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsRequest.__len__": {
  "data": {
   "lineno": 363
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsRequest.get_bytes": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "bytearray",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponse": {
  "data": {
   "lineno": 373
  },
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsResponse.__init__": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "pykafka.protocol.admin.ApiVersionsSpec"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponse.get_versions": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.admin.ApiVersionsResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsResponseV1": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "pykafka.protocol.admin.ApiVersionsResponse"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.admin.ApiVersionsResponseV1.__init__": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "pykafka.protocol.admin.ApiVersionsSpec"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ApiVersionsSpec": {
  "data": {
   "lineno": 370
  },
  "type": "constant"
 },
 "pykafka.protocol.admin.CreateTopicRequest": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "pykafka.protocol.admin._CreateTopicRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicRequest.__new__": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "pykafka.protocol.admin.CreateTopicRequest",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest": {
  "data": {
   "lineno": 172
  },
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.__init__": {
  "data": {
   "lineno": 192
  },
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.__len__": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsRequest.get_bytes": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.admin.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.CreateTopicsResponse": {
  "data": {
   "lineno": 254
  },
  "type": "class"
 },
 "pykafka.protocol.admin.CreateTopicsResponse.__init__": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest": {
  "data": {
   "lineno": 279
  },
  "type": "class"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.__init__": {
  "data": {
   "lineno": 290
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.__len__": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsRequest.get_bytes": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.admin.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DeleteTopicsResponse": {
  "data": {
   "lineno": 323
  },
  "type": "class"
 },
 "pykafka.protocol.admin.DeleteTopicsResponse.__init__": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupResponse": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest": {
  "data": {
   "lineno": 62
  },
  "type": "class"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.__init__": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.__len__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsRequest.get_bytes": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.admin.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.DescribeGroupsResponse": {
  "data": {
   "lineno": 111
  },
  "type": "class"
 },
 "pykafka.protocol.admin.DescribeGroupsResponse.__init__": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "pykafka.protocol.admin.DescribeGroupResponse",
    "pykafka.protocol.admin.GroupMember"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.GroupListing": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "pykafka.protocol.admin.GroupMember": {
  "data": {
   "lineno": 99
  },
  "type": "constant"
 },
 "pykafka.protocol.admin.ListGroupsRequest": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "pykafka.protocol.admin.ListGroupsRequest.__len__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ListGroupsRequest.get_bytes": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "bytearray",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin.ListGroupsResponse": {
  "data": {
   "lineno": 35
  },
  "type": "class"
 },
 "pykafka.protocol.admin.ListGroupsResponse.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "pykafka.protocol.admin.GroupListing"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.admin._CreateTopicRequest": {
  "data": {
   "lineno": 153
  },
  "type": "constant"
 },
 "pykafka.protocol.admin.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.admin.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.base": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple",
    "pykafka.protocol.base.ApiVersionsSpec"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.base.API_VERSIONS_080": {
  "data": {
   "lineno": 180
  },
  "type": "constant"
 },
 "pykafka.protocol.base.API_VERSIONS_090": {
  "data": {
   "lineno": 199
  },
  "type": "constant"
 },
 "pykafka.protocol.base.ApiVersionsSpec": {
  "data": {
   "lineno": 176
  },
  "type": "constant"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.__init__": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.__len__": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.from_bytestring": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.ConsumerGroupProtocolMetadata.get_bytes": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.base.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.base.MemberAssignment.__init__": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.__len__": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.from_bytestring": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.MemberAssignment.get_bytes": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.base.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.Request": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "pykafka.protocol.base.Request._write_header": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "len",
    "pykafka.protocol.base.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.Request.get_bytes": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.Request.get_versions": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.Response": {
  "data": {
   "lineno": 49
  },
  "type": "class"
 },
 "pykafka.protocol.base.Response.get_versions": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.Response.raise_error": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.base.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.base.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.fetch": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.fetch.FetchPartitionResponse": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "pykafka.protocol.fetch.FetchRequest": {
  "data": {
   "lineno": 32
  },
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchRequest.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.__len__": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.add_request": {
  "data": {
   "lineno": 75
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.get_bytes": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.fetch.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchRequest.get_versions": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.fetch.FetchRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse": {
  "data": {
   "lineno": 129
  },
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchResponse.__init__": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict",
    "pykafka.protocol.fetch.FetchPartitionResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse._unpack_message_set": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "len",
    "pkg_resources.parse_version"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponse.get_versions": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.fetch.FetchResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponseV1": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "pykafka.protocol.fetch.FetchResponse"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.fetch.FetchResponseV1.__init__": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "pykafka.protocol.fetch.FetchResponseV1",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch.FetchResponseV2": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "pykafka.protocol.fetch.FetchResponseV1"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.fetch.PartitionFetchRequest": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "pykafka.protocol.fetch._PartitionFetchRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.fetch.PartitionFetchRequest.__new__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "pykafka.protocol.fetch.PartitionFetchRequest",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.fetch._PartitionFetchRequest": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "pykafka.protocol.fetch.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.protocol.fetch.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.fetch.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.protocol.fetch.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.group_membership": {
  "data": {},
  "type": "module"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.__init__": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.__len__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.from_bytestring": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata.get_bytes": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest": {
  "data": {
   "lineno": 278
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.__init__": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.__len__": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatRequest.get_bytes": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.HeartbeatResponse": {
  "data": {
   "lineno": 317
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.HeartbeatResponse.__init__": {
  "data": {
   "lineno": 323
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest": {
  "data": {
   "lineno": 60
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.__init__": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "bytes"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.__len__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupRequest.get_bytes": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.JoinGroupResponse": {
  "data": {
   "lineno": 123
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.JoinGroupResponse.__init__": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "pykafka.protocol.group_membership.ConsumerGroupProtocolMetadata"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest": {
  "data": {
   "lineno": 333
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.__init__": {
  "data": {
   "lineno": 342
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.__len__": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupRequest.get_bytes": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.LeaveGroupResponse": {
  "data": {
   "lineno": 370
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.LeaveGroupResponse.__init__": {
  "data": {
   "lineno": 376
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.MemberAssignment.__init__": {
  "data": {
   "lineno": 163
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.__len__": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.from_bytestring": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.MemberAssignment.get_bytes": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest": {
  "data": {
   "lineno": 206
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.__init__": {
  "data": {
   "lineno": 219
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.__len__": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupRequest.get_bytes": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "bytearray",
    "bytes",
    "len",
    "pykafka.protocol.group_membership.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.SyncGroupResponse": {
  "data": {
   "lineno": 260
  },
  "type": "class"
 },
 "pykafka.protocol.group_membership.SyncGroupResponse.__init__": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "pykafka.protocol.group_membership.MemberAssignment"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.group_membership.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.message": {
  "data": {},
  "type": "module"
 },
 "pykafka.protocol.message.Message": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float",
    "six.integer_types",
    "type"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.message.Message.__init__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "datetime.datetime.utcnow"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.Message.__len__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.Message.decode": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.message.Message"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.Message.pack_into": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "buffer",
    "int",
    "len",
    "max",
    "pykafka.protocol.message.struct",
    "zlib.crc32"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.Message.set_timestamp": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "RuntimeError",
    "datetime.datetime",
    "type"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.Message.timestamp_dt": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "datetime.datetime",
    "int"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet": {
  "data": {
   "lineno": 174
  },
  "type": "class"
 },
 "pykafka.protocol.message.MessageSet.__init__": {
  "data": {
   "lineno": 189
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.__len__": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet._get_compressed": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "TypeError",
    "buffer",
    "bytearray",
    "len",
    "max",
    "pkg_resources.parse_version",
    "pykafka.protocol.message.Message",
    "pykafka.protocol.message.MessageSet"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.decode": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "MessageSetDecodeFailure",
    "classmethod",
    "len",
    "pykafka.protocol.message.Message",
    "pykafka.protocol.message.MessageSet",
    "pykafka.protocol.message.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.messages": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.MessageSet.pack_into": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "len",
    "pykafka.protocol.message.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.message.crc32": {
  "data": {
   "shadows": "zlib.crc32"
  },
  "type": "import"
 },
 "pykafka.protocol.message.datetime": {
  "data": {
   "shadows": "datetime.datetime"
  },
  "type": "import"
 },
 "pykafka.protocol.message.integer_types": {
  "data": {
   "shadows": "six.integer_types"
  },
  "type": "import"
 },
 "pykafka.protocol.message.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.protocol.message.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.metadata": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.metadata.BrokerMetadata": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.BrokerMetadataV1": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.MetadataRequest": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequest.__init__": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.__len__": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest._serialize": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.metadata.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest._topics_len": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.get_bytes": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequest.get_versions": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.metadata.MetadataRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV1": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV1._topics_len": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV2": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV1"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV3": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV2"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV4": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV3"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.__init__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV4",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.__len__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV4",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV4.get_bytes": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataRequestV5": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataRequestV4"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponse": {
  "data": {
   "lineno": 116
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponse.__init__": {
  "data": {
   "lineno": 141
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_broker_metas": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.BrokerMetadata"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_partition_metas": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.PartitionMetadata"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._build_topic_metas": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.TopicMetadata"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse._populate": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponse.get_versions": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.metadata.MetadataResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataResponse"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV1.__init__": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1._build_broker_metas": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.BrokerMetadataV1"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV1._build_topic_metas": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.TopicMetadataV1"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV2": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataResponseV1"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV2.__init__": {
  "data": {
   "lineno": 246
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV3": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataResponseV2"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV3.__init__": {
  "data": {
   "lineno": 277
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV4": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataResponseV3"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV5": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.MetadataResponseV4"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.metadata.MetadataResponseV5.__init__": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.MetadataResponseV5._build_partition_metas": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "pykafka.protocol.metadata.PartitionMetadataV5"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.metadata.PartitionMetadata": {
  "data": {
   "lineno": 109
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.PartitionMetadataV5": {
  "data": {
   "lineno": 111
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.TopicMetadata": {
  "data": {
   "lineno": 106
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.TopicMetadataV1": {
  "data": {
   "lineno": 107
  },
  "type": "constant"
 },
 "pykafka.protocol.metadata.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.metadata.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.offset": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.offset.ListOffsetRequest": {
  "data": {
   "lineno": 29
  },
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetRequest.__init__": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.__len__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.get_bytes": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.offset.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequest.get_versions": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.offset.ListOffsetRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "pykafka.protocol.offset.ListOffsetRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.__init__": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.__len__": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetRequestV1.get_bytes": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.offset.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponse": {
  "data": {
   "lineno": 148
  },
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetResponse.__init__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "pykafka.protocol.offset.OffsetPartitionResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponse.get_versions": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.offset.ListOffsetResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.ListOffsetResponseV1": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "pykafka.protocol.offset.ListOffsetResponse"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset.ListOffsetResponseV1.__init__": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "pykafka.protocol.offset.OffsetPartitionResponseV1"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset.OffsetPartitionResponse": {
  "data": {
   "lineno": 136
  },
  "type": "constant"
 },
 "pykafka.protocol.offset.OffsetPartitionResponseV1": {
  "data": {
   "lineno": 142
  },
  "type": "constant"
 },
 "pykafka.protocol.offset.PartitionOffsetRequest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "pykafka.protocol.offset._PartitionOffsetRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset._PartitionOffsetRequest": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "pykafka.protocol.offset.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.protocol.offset.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.offset.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.offset_commit": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest": {
  "data": {
   "lineno": 10
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.__init__": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.__len__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorRequest.get_bytes": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.offset_commit.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorResponse": {
  "data": {
   "lineno": 40
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.GroupCoordinatorResponse.__init__": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitPartitionResponse": {
  "data": {
   "lineno": 169
  },
  "type": "constant"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest": {
  "data": {
   "lineno": 82
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.__init__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "collections.defaultdict",
    "dict"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.__len__": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitRequest.get_bytes": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.offset_commit.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetCommitResponse": {
  "data": {
   "lineno": 175
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetCommitResponse.__init__": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetCommitPartitionResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchPartitionResponse": {
  "data": {
   "lineno": 289
  },
  "type": "constant"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest": {
  "data": {
   "lineno": 212
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.__init__": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "collections.defaultdict",
    "list"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.__len__": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest._reqs_len": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.get_bytes": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.offset_commit.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequest.get_versions": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.offset_commit.OffsetFetchRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV1": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetFetchRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV2": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetFetchRequestV1"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchRequestV2._reqs_len": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse": {
  "data": {
   "lineno": 295
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse.__init__": {
  "data": {
   "lineno": 314
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse._populate_partition_responses": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetFetchPartitionResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponse.get_versions": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.protocol.offset_commit.OffsetFetchResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV1": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetFetchResponse"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV2": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit.OffsetFetchResponseV1"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.OffsetFetchResponseV2.__init__": {
  "data": {
   "lineno": 364
  },
  "type": "function"
 },
 "pykafka.protocol.offset_commit.PartitionOffsetCommitRequest": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit._PartitionOffsetCommitRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit.PartitionOffsetFetchRequest": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "pykafka.protocol.offset_commit._PartitionOffsetFetchRequest"
   ]
  },
  "type": "class"
 },
 "pykafka.protocol.offset_commit._PartitionOffsetCommitRequest": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "pykafka.protocol.offset_commit._PartitionOffsetFetchRequest": {
  "data": {
   "lineno": 198
  },
  "type": "constant"
 },
 "pykafka.protocol.offset_commit.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.protocol.offset_commit.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.offset_commit.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.protocol.produce": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "pykafka.protocol.produce.ProducePartitionResponse": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "pykafka.protocol.produce.ProduceRequest": {
  "data": {
   "lineno": 13
  },
  "type": "class"
 },
 "pykafka.protocol.produce.ProduceRequest.__init__": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "MessageSet",
    "collections.defaultdict"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.__len__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "iteritems",
    "itervalues",
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.add_message": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.get_bytes": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "bytearray",
    "iteritems",
    "len",
    "pykafka.protocol.produce.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.message_count": {
  "data": {
   "lineno": 105
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceRequest.messages": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "iteritems",
    "property",
    "pykafka.protocol.produce.itertools"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.produce.ProduceResponse": {
  "data": {
   "lineno": 116
  },
  "type": "class"
 },
 "pykafka.protocol.produce.ProduceResponse.__init__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "pykafka.protocol.produce.ProducePartitionResponse"
   ]
  },
  "type": "function"
 },
 "pykafka.protocol.produce.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.protocol.produce.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pykafka.protocol.produce.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "pykafka.protocol.produce.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.rdkafka": {
  "data": {},
  "type": "module"
 },
 "pykafka.rdkafka.helpers": {
  "data": {},
  "type": "module"
 },
 "pykafka.rdkafka.helpers._get_ciphers_from_sockets": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.helpers.rdk_ssl_config": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "pykafka.rdkafka.helpers._get_ciphers_from_sockets"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.rdkafka.producer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.rdkafka.producer.CompressionType": {
  "data": {
   "shadows": "pykafka.producer.CompressionType"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.Producer": {
  "data": {
   "shadows": "pykafka.producer.Producer"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.ProducerStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.ProducerStoppedException"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "pykafka.producer.Producer"
   ]
  },
  "type": "class"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "pykafka.producer.CompressionType.NONE",
    "pykafka.rdkafka.producer.RdKafkaProducer",
    "super",
    "vars"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._mk_rdkafka_config_lists": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "pkg_resources.parse_version",
    "pykafka.producer.CompressionType.GZIP",
    "pykafka.producer.CompressionType.LZ4",
    "pykafka.producer.CompressionType.NONE",
    "pykafka.producer.CompressionType.SNAPPY",
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._produce": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "pykafka.exceptions.ProducerStoppedException",
    "pykafka.exceptions.RdKafkaStoppedException"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer._wait_all": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "pykafka.rdkafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.start": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "pykafka.utils.compat.get_bytes",
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.start.poll": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "pykafka.rdkafka.producer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaProducer.stop": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "pykafka.rdkafka.producer.RdKafkaProducer",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.producer.RdKafkaStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.RdKafkaStoppedException"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.get_bytes": {
  "data": {
   "shadows": "pykafka.utils.compat.get_bytes"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.log": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "pykafka.rdkafka.producer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.rdkafka.producer.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.rdkafka.simple_consumer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.rdkafka.simple_consumer.ConsumerStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.ConsumerStoppedException"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.OffsetType": {
  "data": {
   "shadows": "pykafka.simpleconsumer.OffsetType"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.SimpleConsumer"
   ]
  },
  "type": "class"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.__init__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer",
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.utils.error_handlers.valid_int",
    "super",
    "vars"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._consume": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "int",
    "min",
    "pykafka.rdkafka.simple_consumer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._mk_rdkafka_config_lists": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "len",
    "pkg_resources.parse_version",
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.simpleconsumer.OffsetType.LATEST",
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._setup_fetch_workers": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "list",
    "pykafka.rdkafka.simple_consumer.log",
    "pykafka.utils.compat.get_bytes",
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._setup_fetch_workers.poll": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "pykafka.exceptions.RdKafkaStoppedException",
    "pykafka.rdkafka.simple_consumer.log",
    "pykafka.rdkafka.simple_consumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer._stop_start_rdk_consumer": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "pykafka.rdkafka.simple_consumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.consume": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "AttributeError",
    "pykafka.exceptions.ConsumerStoppedException",
    "pykafka.exceptions.RdKafkaStoppedException"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.fetch_offsets": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.reset_offsets": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer.stop": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "pykafka.rdkafka.simple_consumer.RdKafkaSimpleConsumer",
    "pykafka.rdkafka.simple_consumer.log",
    "super"
   ]
  },
  "type": "function"
 },
 "pykafka.rdkafka.simple_consumer.RdKafkaStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.RdKafkaStoppedException"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.SimpleConsumer": {
  "data": {
   "shadows": "pykafka.simpleconsumer.SimpleConsumer"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.get_bytes": {
  "data": {
   "shadows": "pykafka.utils.compat.get_bytes"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.log": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "pykafka.rdkafka.simple_consumer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.rdkafka.simple_consumer.valid_int": {
  "data": {
   "shadows": "pykafka.utils.error_handlers.valid_int"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "pykafka.simpleconsumer.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.simpleconsumer.MAGIC_OFFSETS": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "pykafka.simpleconsumer.OwnedPartition": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.simpleconsumer.OwnedPartition.__init__": {
  "data": {
   "lineno": 848,
   "symbols_in_volume": [
    "Queue",
    "pykafka.simpleconsumer.threading"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_fetch_request": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": [
    "PartitionFetchRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_commit_request": {
  "data": {
   "lineno": 951,
   "symbols_in_volume": [
    "PartitionOffsetCommitRequest",
    "get_bytes",
    "int",
    "pykafka.simpleconsumer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_fetch_request": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": [
    "PartitionOffsetFetchRequest"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.build_offset_request": {
  "data": {
   "lineno": 918,
   "symbols_in_volume": [
    "PartitionOffsetRequest",
    "ValueError",
    "datetime.datetime",
    "isinstance",
    "pykafka.simpleconsumer.MAGIC_OFFSETS",
    "round"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.consume": {
  "data": {
   "lineno": 975
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.enqueue_messages": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.flush": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": [
    "Queue",
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.message_count": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.set_consumer_id": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": [
    "get_string",
    "pykafka.simpleconsumer.json",
    "pykafka.simpleconsumer.socket"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.OwnedPartition.set_offset": {
  "data": {
   "lineno": 908
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__del__": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__init__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "UnicodeEncodeError",
    "UnicodeException",
    "get_string",
    "iteritems",
    "itervalues",
    "pykafka.simpleconsumer.OwnedPartition",
    "pykafka.simpleconsumer.itertools",
    "pykafka.simpleconsumer.time",
    "valid_int"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__iter__": {
  "data": {
   "lineno": 458
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.__repr__": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._auto_commit": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.time"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.weakref",
    "raise_error"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_GroupLoadInProgress": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_IllegalGeneration": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_NotCoordinatorForGroup": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_NotLeaderForPartition": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_OffsetOutOfRangeError": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_RebalanceInProgress": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_RequestTimedOut": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_UnknownError": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._build_default_error_handlers._handle_UnknownMemberId": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._discover_group_coordinator": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._raise_worker_exceptions": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "six.reraise"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_autocommit_worker": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.weakref"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_autocommit_worker.autocommitter": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "Exception",
    "ReferenceError",
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_fetch_workers": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.weakref",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_fetch_workers.fetcher": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "Exception",
    "ReferenceError",
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.sys"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._setup_partitions_by_leader": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "collections.defaultdict",
    "itervalues",
    "list"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._update": {
  "data": {
   "lineno": 278
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer._wait_for_slot_available": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "all",
    "itervalues"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.cleanup": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.commit_offsets": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "Exception",
    "IOError",
    "KafkaException",
    "KeyError",
    "handle_partition_responses",
    "iteritems",
    "len",
    "pykafka.simpleconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.consume": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "ConsumerStoppedException",
    "any",
    "float",
    "itervalues",
    "next"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.consumer_id": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "itervalues"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch": {
  "data": {
   "lineno": 765,
   "symbols_in_volume": [
    "IOError",
    "ValueError",
    "build_parts_by_error",
    "handle_partition_responses",
    "iteritems",
    "iterkeys",
    "itervalues",
    "pykafka.simpleconsumer.log",
    "pykafka.simpleconsumer.socket",
    "sorted",
    "unlock_partitions"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch._handle_success": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": [
    "len",
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch.unlock_partitions": {
  "data": {
   "lineno": 781
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch_offsets": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "Exception",
    "KafkaException",
    "handle_partition_responses",
    "iteritems",
    "itervalues",
    "len",
    "pykafka.simpleconsumer.log",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.fetch_offsets._handle_success": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.generation_id": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "valid_int"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.held_offsets": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "itervalues",
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.partitions": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "iteritems",
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.reset_offsets": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": [
    "KafkaException",
    "KeyError",
    "OffsetRequestFailedError",
    "ValueError",
    "collections.defaultdict",
    "datetime.datetime",
    "handle_partition_responses",
    "int",
    "isinstance",
    "iteritems",
    "len",
    "list",
    "map",
    "pykafka.simpleconsumer.MAGIC_OFFSETS",
    "pykafka.simpleconsumer.log",
    "range",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.reset_offsets._handle_success": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": [
    "len",
    "pykafka.simpleconsumer.log"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.start": {
  "data": {
   "lineno": 286
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.stop": {
  "data": {
   "lineno": 399
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.SimpleConsumer.topic": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.simpleconsumer.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pykafka.simpleconsumer.__license__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pykafka.simpleconsumer.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.log": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "pykafka.simpleconsumer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.reraise": {
  "data": {
   "shadows": "six.reraise"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.simpleconsumer.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "pykafka.test": {
  "data": {},
  "type": "module"
 },
 "pykafka.test.utils": {
  "data": {},
  "type": "module"
 },
 "pykafka.test.utils.KafkaConnection": {
  "data": {
   "shadows": "pykafka.test.kafka_instance.KafkaConnection"
  },
  "type": "import"
 },
 "pykafka.test.utils.KafkaInstance": {
  "data": {
   "shadows": "pykafka.test.kafka_instance.KafkaInstance"
  },
  "type": "import"
 },
 "pykafka.test.utils.get_cluster": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "pykafka.test.kafka_instance.KafkaConnection",
    "pykafka.test.kafka_instance.KafkaInstance",
    "pykafka.test.utils.os"
   ]
  },
  "type": "function"
 },
 "pykafka.test.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "pykafka.test.utils.retry": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "AssertionError",
    "assertion_callable",
    "pykafka.test.utils.time"
   ]
  },
  "type": "function"
 },
 "pykafka.test.utils.stop_cluster": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "isinstance",
    "pykafka.test.kafka_instance.KafkaInstance"
   ]
  },
  "type": "function"
 },
 "pykafka.test.utils.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "pykafka.topic": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "pykafka.topic.log",
    "pykafka.topic.logging"
   ]
  },
  "type": "module"
 },
 "pykafka.topic.GEventHandler": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "pykafka.topic.Topic": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.topic.Topic.__init__": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "pykafka.topic.Topic.__repr__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "hex",
    "id"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.earliest_available_offsets": {
  "data": {
   "lineno": 196
  },
  "type": "function"
 },
 "pykafka.topic.Topic.fetch_offset_limits": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "PartitionOffsetRequest",
    "collections.defaultdict",
    "datetime.datetime",
    "isinstance",
    "iteritems",
    "itervalues",
    "list",
    "round"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.get_balanced_consumer": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "cls"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.get_producer": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "Cls",
    "ImportError",
    "isinstance",
    "pykafka.topic.GEventHandler",
    "pykafka.topic.rdkafka"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.get_simple_consumer": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "Cls",
    "ImportError",
    "isinstance",
    "pykafka.topic.GEventHandler",
    "pykafka.topic.rdkafka"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.get_sync_producer": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "Producer"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.latest_available_offsets": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "pykafka.topic.Topic.name": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.partitions": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.Topic.update": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "LeaderNotFoundError",
    "Partition",
    "iteritems",
    "len",
    "pykafka.topic.log",
    "set"
   ]
  },
  "type": "function"
 },
 "pykafka.topic.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.topic.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.topic.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.topic.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "pykafka.topic.log": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "pykafka.topic.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.topic.rdkafka": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "pykafka.utils": {
  "data": {},
  "type": "module"
 },
 "pykafka.utils.ApiVersionAware": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.utils.ApiVersionAware.get_version_impl": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "AttributeError",
    "classmethod",
    "hasattr",
    "pykafka.utils.VERSIONS_CACHE",
    "sorted"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.Serializable": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.utils.Serializable.__len__": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.Serializable.pack_into": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.VERSIONS_CACHE": {
  "data": {
   "lineno": 58
  },
  "type": "constant"
 },
 "pykafka.utils.__license__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "pykafka.utils.compat": {
  "data": {
   "symbols_in_volume": [
    "memoryview",
    "pykafka.utils.compat.PY3",
    "pykafka.utils.compat.platform",
    "pykafka.utils.compat.sys"
   ]
  },
  "type": "module"
 },
 "pykafka.utils.compat.Condition": {
  "data": {
   "shadows": "threading.Condition"
  },
  "type": "import"
 },
 "pykafka.utils.compat.Empty": {
  "data": {
   "shadows": "Queue.Empty"
  },
  "type": "import"
 },
 "pykafka.utils.compat.IS_PYPY": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "pykafka.utils.compat.Lock": {
  "data": {
   "shadows": "threading.Lock"
  },
  "type": "import"
 },
 "pykafka.utils.compat.PY3": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "pykafka.utils.compat.Queue": {
  "data": {
   "shadows": "Queue.Queue"
  },
  "type": "import"
 },
 "pykafka.utils.compat.Semaphore": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pykafka.utils.compat.Semaphore.__exit__": {
  "data": {
   "lineno": 144
  },
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.__init__": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "ValueError",
    "threading.Condition",
    "threading.Lock"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.acquire": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ValueError",
    "time.time"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compat.Semaphore.release": {
  "data": {
   "lineno": 133
  },
  "type": "function"
 },
 "pykafka.utils.compat.__all__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.utils.compat._time": {
  "data": {
   "shadows": "time.time"
  },
  "type": "import"
 },
 "pykafka.utils.compat.buffer": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "pykafka.utils.compat.get_bytes": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "UnicodeError",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compat.get_string": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "UnicodeError",
    "hasattr",
    "str"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compat.iteritems": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "pykafka.utils.compat.iterkeys": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "pykafka.utils.compat.itervalues": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "pykafka.utils.compat.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "pykafka.utils.compat.range": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "pykafka.utils.compat.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "pykafka.utils.compression": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "lz4.frame",
    "lz4.frame.compress",
    "lz4.frame.decompress",
    "pykafka.utils.compression.decode_lz4f",
    "pykafka.utils.compression.logging",
    "pykafka.utils.compression.lz4f"
   ]
  },
  "type": "module"
 },
 "pykafka.utils.compression.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "pykafka.utils.compression._XERIAL_V1_FORMAT": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "pykafka.utils.compression._XERIAL_V1_HEADER": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "pykafka.utils.compression.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.utils.compression.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.utils.compression._detect_xerial_stream": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "bytes",
    "len",
    "pykafka.utils.compression._XERIAL_V1_FORMAT",
    "pykafka.utils.compression._XERIAL_V1_HEADER",
    "pykafka.utils.compression.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.decode_gzip": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "io.BytesIO",
    "pykafka.utils.compression.gzip"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.decode_lz4": {
  "data": {
   "lineno": 213
  },
  "type": "constant"
 },
 "pykafka.utils.compression.decode_lz4_old_kafka": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "ord",
    "pykafka.utils.compression.decode_lz4",
    "pykafka.utils.compression.xxhash"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.decode_lz4f": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "RuntimeError",
    "pykafka.utils.compression.lz4f"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.decode_snappy": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "ImportError",
    "buffer",
    "bytes",
    "io.BytesIO",
    "len",
    "pykafka.utils.compression._detect_xerial_stream",
    "pykafka.utils.compression.snappy",
    "pykafka.utils.compression.struct"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.encode_gzip": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "io.BytesIO",
    "pykafka.utils.compression.gzip"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.encode_lz4": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "pykafka.utils.compression.encode_lz4_old_kafka": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "bytearray",
    "bytes",
    "int",
    "isinstance",
    "ord",
    "pykafka.utils.compression.encode_lz4",
    "pykafka.utils.compression.xxhash"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.encode_snappy": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "ImportError",
    "_chunker",
    "bytes",
    "io.BytesIO",
    "len",
    "list",
    "pykafka.utils.compression._XERIAL_V1_FORMAT",
    "pykafka.utils.compression._XERIAL_V1_HEADER",
    "pykafka.utils.compression.snappy",
    "pykafka.utils.compression.struct",
    "zip"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.encode_snappy._chunker": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.compression.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "pykafka.utils.compression.log": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "pykafka.utils.compression.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "pykafka.utils.compression.lz4": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "pykafka.utils.compression.lz4f": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "pykafka.utils.compression.snappy": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "pykafka.utils.compression.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.utils.compression.xxhash": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "pykafka.utils.deserialize_utf8": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "pykafka.utils.error_handlers": {
  "data": {},
  "type": "module"
 },
 "pykafka.utils.error_handlers.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.utils.error_handlers.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.utils.error_handlers.build_parts_by_error": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "collections.defaultdict",
    "iteritems",
    "list"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.error_handlers.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "pykafka.utils.error_handlers.handle_partition_responses": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "iteritems",
    "pykafka.utils.error_handlers.build_parts_by_error",
    "success_handler"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.error_handlers.raise_error": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "error"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.error_handlers.valid_int": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "type"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.msg_protocol_version": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "pkg_resources.parse_version"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.parse_version": {
  "data": {
   "shadows": "pkg_resources.parse_version"
  },
  "type": "import"
 },
 "pykafka.utils.serialize_utf8": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "bytes",
    "type"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.socket": {
  "data": {},
  "type": "module"
 },
 "pykafka.utils.socket.SocketDisconnectedError": {
  "data": {
   "shadows": "pykafka.exceptions.SocketDisconnectedError"
  },
  "type": "import"
 },
 "pykafka.utils.socket.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.utils.socket.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.utils.socket.recvall_into": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "IOError",
    "len",
    "pykafka.exceptions.SocketDisconnectedError"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.struct_helpers": {
  "data": {},
  "type": "module"
 },
 "pykafka.utils.struct_helpers.__all__": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "pykafka.utils.struct_helpers.__license__": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pykafka.utils.struct_helpers._unpack": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "enumerate",
    "pykafka.utils.struct_helpers._unpack_array",
    "pykafka.utils.struct_helpers.struct",
    "tuple"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.struct_helpers._unpack_array": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "len",
    "list",
    "pykafka.utils.struct_helpers._unpack",
    "pykafka.utils.struct_helpers.itertools",
    "range"
   ]
  },
  "type": "function"
 },
 "pykafka.utils.struct_helpers.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "pykafka.utils.struct_helpers.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "pykafka.utils.struct_helpers.unpack_from": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "len",
    "pykafka.utils.struct_helpers._unpack"
   ]
  },
  "type": "function"
 },
 "tests": {
  "data": {},
  "type": "module"
 },
 "tests.__license__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "tests.conftest": {
  "data": {
   "symbols_in_volume": [
    "tests.conftest.logging"
   ]
  },
  "type": "module"
 },
 "tests.conftest.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "tests.pykafka": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.rdkafka": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.RDKAFKA": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.RdKafkaException": {
  "data": {
   "shadows": "pykafka.exceptions.RdKafkaException"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.RdKafkaStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.RdKafkaStoppedException"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "tests.pykafka.rdkafka.test_rd_kafka_consumer.RDKAFKA",
    "tests.pykafka.rdkafka.test_rd_kafka_consumer.pytest",
    "tests.pykafka.rdkafka.test_rd_kafka_consumer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.assert_thread_cnt_non_increasing": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "pykafka.rdkafka._rd_kafka._thread_cnt",
    "pykafka.rdkafka._rd_kafka._wait_destroyed"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.setUpClass": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "classmethod",
    "list",
    "pykafka.test.utils.get_cluster",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.tearDownClass": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_start_fail": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "pykafka.exceptions.RdKafkaException",
    "pykafka.rdkafka._rd_kafka.Consumer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_stop": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "pykafka.rdkafka._rd_kafka.Consumer",
    "pykafka.utils.compat.get_bytes"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.TestRdKafkaConsumer.test_stopped_exception": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "pykafka.exceptions.RdKafkaStoppedException",
    "pykafka.rdkafka._rd_kafka.Consumer",
    "pykafka.utils.compat.get_bytes"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer._rd_kafka": {
  "data": {
   "shadows": "pykafka.rdkafka._rd_kafka"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.get_bytes": {
  "data": {
   "shadows": "pykafka.utils.compat.get_bytes"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_ssl": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.rdkafka.test_ssl.TestRdKafkaSsl": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "tests.pykafka.rdkafka.test_ssl.platform",
    "tests.pykafka.rdkafka.test_ssl.pytest",
    "tests.pykafka.test_ssl.SslIntegrationTests"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.rdkafka.test_ssl.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_ssl.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.rdkafka.test_ssl.test_ssl": {
  "data": {
   "shadows": "tests.pykafka.test_ssl"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "tests.pykafka.test_balancedconsumer.kafka_version_string",
    "tests.pykafka.test_balancedconsumer.os",
    "tests.pykafka.test_balancedconsumer.pkg_resources",
    "tests.pykafka.test_balancedconsumer.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumer": {
  "data": {
   "shadows": "pykafka.balancedconsumer.BalancedConsumer"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerGEventIntegrationTests": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests",
    "tests.pykafka.test_balancedconsumer.gevent",
    "tests.pykafka.test_balancedconsumer.platform",
    "tests.pykafka.test_balancedconsumer.pytest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.get_balanced_consumer": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.get_zk": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "kazoo.client.KazooClient",
    "kazoo.handlers.gevent.SequentialGeventHandler"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.setUpClass": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.KafkaClient",
    "pykafka.test.utils.get_cluster",
    "pykafka.utils.compat.range",
    "tests.pykafka.test_balancedconsumer.kafka_version_string",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.tearDownClass": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_a_rebalance_unblock_event": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.pytest",
    "tests.pykafka.test_balancedconsumer.threading"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_consume_earliest": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "len",
    "pykafka.balancedconsumer.OffsetType.EARLIEST",
    "pykafka.utils.compat.range",
    "set"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_consume_latest": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "len",
    "pykafka.balancedconsumer.OffsetType.LATEST",
    "pykafka.utils.compat.range",
    "set"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_external_kazoo_client": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "kazoo.client.KazooClient",
    "tests.pykafka.test_balancedconsumer.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_extra_consumer": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "len",
    "pykafka.utils.compat.range",
    "verify_extras"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_extra_consumer.verify_extras": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_no_partitions": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "pykafka.membershipprotocol.GroupMembershipProtocol"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_no_partitions._decide_dummy": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "pykafka.balancedconsumer.OffsetType.EARLIEST",
    "pykafka.utils.compat.iteritems"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks.on_rebalance": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "len",
    "pykafka.utils.compat.iterkeys"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks_surfaces_errors": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "ValueError",
    "pykafka.balancedconsumer.OffsetType.EARLIEST",
    "str",
    "tests.pykafka.test_balancedconsumer.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_rebalance_callbacks_surfaces_errors.on_rebalance": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.test_zk_conn_lost": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "check_partitions",
    "tests.pykafka.test_balancedconsumer.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests.wait_for_rebalancing": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "AssertionError",
    "len",
    "max",
    "min",
    "pykafka.utils.compat.range",
    "sum"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.ConsumerStoppedException": {
  "data": {
   "shadows": "pykafka.exceptions.ConsumerStoppedException"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.GroupMembershipProtocol": {
  "data": {
   "shadows": "pykafka.membershipprotocol.GroupMembershipProtocol"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.KazooClient": {
  "data": {
   "shadows": "kazoo.client.KazooClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.ManagedBalancedConsumer": {
  "data": {
   "shadows": "pykafka.managedbalancedconsumer.ManagedBalancedConsumer"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.ManagedBalancedConsumerGEventIntegrationTests": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests",
    "tests.pykafka.test_balancedconsumer.gevent",
    "tests.pykafka.test_balancedconsumer.kafka_version",
    "tests.pykafka.test_balancedconsumer.platform",
    "tests.pykafka.test_balancedconsumer.pytest",
    "tests.pykafka.test_balancedconsumer.version_09"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.ManagedBalancedConsumerIntegrationTests": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.BalancedConsumerIntegrationTests",
    "tests.pykafka.test_balancedconsumer.kafka_version",
    "tests.pykafka.test_balancedconsumer.pytest",
    "tests.pykafka.test_balancedconsumer.version_09"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.OffsetType": {
  "data": {
   "shadows": "pykafka.balancedconsumer.OffsetType"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.RangeProtocol": {
  "data": {
   "shadows": "pykafka.membershipprotocol.RangeProtocol"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.RoundRobinProtocol": {
  "data": {
   "shadows": "pykafka.membershipprotocol.RoundRobinProtocol"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.SequentialGeventHandler": {
  "data": {
   "shadows": "kazoo.handlers.gevent.SequentialGeventHandler"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer._test_decide_partitions": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "int",
    "len",
    "pykafka.utils.compat.range",
    "sorted",
    "tests.pykafka.test_balancedconsumer.math"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.buildMockConsumer": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.balancedconsumer.BalancedConsumer",
    "pykafka.utils.compat.range",
    "tests.pykafka.test_balancedconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.setUpClass": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "classmethod",
    "tests.pykafka.test_balancedconsumer.TestBalancedConsumer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_consume_graceful_stop": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "pykafka.exceptions.ConsumerStoppedException"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_consume_returns": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "int",
    "tests.pykafka.test_balancedconsumer.time"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_decide_partitions_range": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "pykafka.membershipprotocol.RangeProtocol"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_decide_partitions_roundrobin": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "pykafka.membershipprotocol.RoundRobinProtocol"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestBalancedConsumer.test_unicode_consumer_group": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.TestManagedBalancedConsumer": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tests.pykafka.test_balancedconsumer.TestBalancedConsumer"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_balancedconsumer.TestManagedBalancedConsumer.buildMockConsumer": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.managedbalancedconsumer.ManagedBalancedConsumer",
    "pykafka.utils.compat.range",
    "tests.pykafka.test_balancedconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_balancedconsumer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.gevent": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "tests.pykafka.test_balancedconsumer.iteritems": {
  "data": {
   "shadows": "pykafka.utils.compat.iteritems"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.iterkeys": {
  "data": {
   "shadows": "pykafka.utils.compat.iterkeys"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.kafka_version": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tests.pykafka.test_balancedconsumer.kafka_version_string": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tests.pykafka.test_balancedconsumer.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.pkg_resources": {
  "data": {
   "shadows": "pkg_resources"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.range": {
  "data": {
   "shadows": "pykafka.utils.compat.range"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.test_balancedconsumer.version_09": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tests.pykafka.test_cluster": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.pykafka.test_cluster.unittest"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "tests.pykafka.test_cluster.unittest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.setUpClass": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.KafkaClient",
    "pykafka.test.utils.get_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.tearDownClass": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_exclude_internal_topics": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "KeyError",
    "isinstance",
    "pykafka.KafkaClient",
    "pykafka.Topic"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_topic_autocreate": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "isinstance",
    "pykafka.Topic",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_topic_updates": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "len",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.ClusterIntegrationTests.test_zk_connect": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "pykafka.KafkaClient",
    "pykafka.utils.compat.itervalues"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_cluster.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.Topic": {
  "data": {
   "shadows": "pykafka.Topic"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.itervalues": {
  "data": {
   "shadows": "pykafka.utils.compat.itervalues"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.pykafka.test_cluster.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.test_connection.Broker": {
  "data": {
   "shadows": "pykafka.Broker"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.BrokerConnection": {
  "data": {
   "shadows": "pykafka.connection.BrokerConnection"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.ManagedInstance": {
  "data": {
   "shadows": "testinstances.managed_instance.ManagedInstance"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.SocketDisconnectedError": {
  "data": {
   "shadows": "pykafka.exceptions.SocketDisconnectedError"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.TestBrokerConnection": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "tests.pykafka.test_connection.unittest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.setUpClass": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "classmethod",
    "isinstance",
    "next",
    "pykafka.KafkaClient",
    "pykafka.connection.BrokerConnection",
    "pykafka.test.utils.get_cluster",
    "testinstances.managed_instance.ManagedInstance",
    "tests.pykafka.test_connection.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.tearDownClass": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_connection_fails_no_broker": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "pykafka.exceptions.SocketDisconnectedError"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "tests.pykafka.test_connection.threading"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect.delayed_make_broker": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tests.pykafka.test_connection.time"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.TestBrokerConnection.test_retry_connect.retry_connect_broker": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "tests.pykafka.test_connection.ThreadingHandler": {
  "data": {
   "shadows": "pykafka.handlers.ThreadingHandler"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.itervalues": {
  "data": {
   "shadows": "pykafka.utils.compat.itervalues"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.pykafka.test_connection.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.test_partition": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.pykafka.test_partition.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_partition.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_partition.TestPartitionInfo": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "tests.pykafka.test_partition.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.setUpClass": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.KafkaClient",
    "pykafka.test.utils.get_cluster",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.tearDownClass": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.test_can_get_earliest_offset": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "tests.pykafka.test_partition.TestPartitionInfo.test_can_get_latest_offset": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "tests.pykafka.test_partition.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_partition.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_partition.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_partitioners": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.test_partitioners.GroupHashingPartitioner": {
  "data": {
   "shadows": "pykafka.partitioners.GroupHashingPartitioner"
  },
  "type": "import"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "tests.pykafka.test_partitioners.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner._run_test": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "abs",
    "hash_func",
    "len",
    "list",
    "map",
    "pykafka.partitioners.GroupHashingPartitioner",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner._run_test.hash_func": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "hashlib.sha1",
    "int"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_create_with_negative_group_size_raises_error": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ValueError",
    "pykafka.partitioners.GroupHashingPartitioner"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_create_with_zero_group_size_raises_error": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ValueError",
    "pykafka.partitioners.GroupHashingPartitioner"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_invalid_inputs_error": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_missing_hash_function_raises_error": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ValueError",
    "pykafka.partitioners.GroupHashingPartitioner"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.TestGroupHashingPartitioner.test_valid_inputs_success": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "tests.pykafka.test_partitioners.sha1": {
  "data": {
   "shadows": "hashlib.sha1"
  },
  "type": "import"
 },
 "tests.pykafka.test_partitioners.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "tests.pykafka.test_producer.os",
    "tests.pykafka.test_producer.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_producer.CompressionType": {
  "data": {
   "shadows": "pykafka.common.CompressionType"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.Message": {
  "data": {
   "shadows": "pykafka.protocol.Message"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.MessageSizeTooLarge": {
  "data": {
   "shadows": "pykafka.exceptions.MessageSizeTooLarge"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.OffsetType": {
  "data": {
   "shadows": "pykafka.common.OffsetType"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.OwnedBroker": {
  "data": {
   "shadows": "pykafka.producer.OwnedBroker"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.ProduceFailureError": {
  "data": {
   "shadows": "pykafka.exceptions.ProduceFailureError"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tests.pykafka.test_producer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests._get_consumer": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "pykafka.common.OffsetType.LATEST"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests._get_producer": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.setUpClass": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.KafkaClient",
    "pykafka.test.utils.get_cluster",
    "tests.pykafka.test_producer.kafka_version"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.tearDownClass": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "pykafka.common.CompressionType.SNAPPY",
    "pykafka.test.utils.retry",
    "range",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message.ensure_all_messages_consumed": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_compression_large_message.ensure_all_messages_produced": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_context": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "len",
    "pykafka.test.utils.retry",
    "range",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message.ensure_all_messages_consumed": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_large_message.ensure_all_messages_produced": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_lingers": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "int",
    "tests.pykafka.test_producer.pytest",
    "tests.pykafka.test_producer.time",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_queue_full": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "pykafka.exceptions.ProducerQueueFullError",
    "tests.pykafka.test_producer.time",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_async_produce_thread_exception": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "AttributeError",
    "pykafka.protocol.Message",
    "tests.pykafka.test_producer.time"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_null_payloads": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_owned_broker_flush_batching_by_max_request_size": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "len",
    "pykafka.producer.OwnedBroker",
    "pykafka.protocol.Message",
    "range",
    "sum",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_owned_broker_flush_message_larger_then_max_request_size": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "pykafka.exceptions.MessageSizeTooLarge",
    "pykafka.producer.OwnedBroker",
    "pykafka.protocol.Message",
    "range",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce_hashing_partitioner": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "pykafka.partitioners.hashing_partitioner",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_produce_utf8": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "pykafka.utils.deserialize_utf8",
    "pykafka.utils.serialize_utf8",
    "tests.pykafka.test_producer.random"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_recover_disconnected": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_required_acks": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "dict",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_doesnt_hang": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "pykafka.exceptions.ProduceFailureError",
    "tests.pykafka.test_producer.mock",
    "tests.pykafka.test_producer.types"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_doesnt_hang.stub_mark": {
  "data": {
   "lineno": 109
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_raises": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "ZeroDivisionError",
    "pykafka.exceptions.MessageSizeTooLarge",
    "tests.pykafka.test_producer.types"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerIntegrationTests.test_sync_produce_raises.stub_send_request": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "tests.pykafka.test_producer.ProducerQueueFullError": {
  "data": {
   "shadows": "pykafka.exceptions.ProducerQueueFullError"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.RDKAFKA": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "tests.pykafka.test_producer.TestGEventProducer": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "tests.pykafka.test_producer.ProducerIntegrationTests",
    "tests.pykafka.test_producer.gevent",
    "tests.pykafka.test_producer.platform",
    "tests.pykafka.test_producer.pytest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_producer.TestRdKafkaProducer": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "tests.pykafka.test_producer.ProducerIntegrationTests",
    "tests.pykafka.test_producer.RDKAFKA",
    "tests.pykafka.test_producer.pytest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_producer._rd_kafka": {
  "data": {
   "shadows": "pykafka.rdkafka._rd_kafka"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.deserialize_utf8": {
  "data": {
   "shadows": "pykafka.utils.deserialize_utf8"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.gevent": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "tests.pykafka.test_producer.hashing_partitioner": {
  "data": {
   "shadows": "pykafka.partitioners.hashing_partitioner"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.kafka_version": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tests.pykafka.test_producer.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.retry": {
  "data": {
   "shadows": "pykafka.test.utils.retry"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.serialize_utf8": {
  "data": {
   "shadows": "pykafka.utils.serialize_utf8"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_producer.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_protocol.CompressionType": {
  "data": {
   "shadows": "pykafka.common.CompressionType"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol.RangeProtocol": {
  "data": {
   "shadows": "pykafka.membershipprotocol.RangeProtocol"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_api_versions_request": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ApiVersionsRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_api_versions_response": {
  "data": {
   "lineno": 1546,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.ApiVersionsResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_create_topics_request": {
  "data": {
   "lineno": 1483,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.CreateTopicRequest",
    "pykafka.protocol.CreateTopicsRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_create_topics_response": {
  "data": {
   "lineno": 1502,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.CreateTopicsResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_delete_topics_request": {
  "data": {
   "lineno": 1512,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.DeleteTopicsRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_delete_topics_response": {
  "data": {
   "lineno": 1526,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.DeleteTopicsResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_describe_groups_request": {
  "data": {
   "lineno": 1418,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.DescribeGroupsRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_describe_groups_response": {
  "data": {
   "lineno": 1431,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.DescribeGroupsResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_list_groups_request": {
  "data": {
   "lineno": 1392,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ListGroupsRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestAdministrativeAPI.test_list_groups_response": {
  "data": {
   "lineno": 1402,
   "symbols_in_volume": [
    "bytearray",
    "len",
    "pykafka.protocol.ListGroupsResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol._FetchAPITestBase",
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestFetchAPI._get_expected": {
  "data": {
   "lineno": 622
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_gzip_decompression": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": [
    "len",
    "pykafka.protocol.FetchResponse",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_partition_error": {
  "data": {
   "lineno": 679,
   "symbols_in_volume": [
    "pykafka.protocol.FetchResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_request": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.FetchRequest",
    "pykafka.protocol.PartitionFetchRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_response": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": [
    "len",
    "pykafka.protocol.FetchResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPI.test_snappy_decompression": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "len",
    "pykafka.protocol.FetchResponse",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1": {
  "data": {
   "lineno": 779,
   "symbols_in_volume": [
    "pykafka.protocol.FetchResponseV1",
    "tests.pykafka.test_protocol._FetchAPITestBase",
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1._get_expected": {
  "data": {
   "lineno": 782
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_gzip_decompression": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_partition_error": {
  "data": {
   "lineno": 840,
   "symbols_in_volume": [
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_response": {
  "data": {
   "lineno": 866,
   "symbols_in_volume": [
    "len",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV1.test_snappy_decompression": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestFetchAPIV2": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": [
    "pykafka.protocol.FetchResponseV2",
    "tests.pykafka.test_protocol.TestFetchAPIV1"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_consumer_group_protocol_metadata": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ConsumerGroupProtocolMetadata"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_heartbeat_request": {
  "data": {
   "lineno": 1343,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.HeartbeatRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_heartbeat_response": {
  "data": {
   "lineno": 1358,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.HeartbeatResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_join_group_request": {
  "data": {
   "lineno": 1218,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.membershipprotocol.RangeProtocol",
    "pykafka.protocol.JoinGroupRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_join_group_response": {
  "data": {
   "lineno": 1244,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.JoinGroupResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_leave_group_request": {
  "data": {
   "lineno": 1366,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.LeaveGroupRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_leave_group_response": {
  "data": {
   "lineno": 1380,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.LeaveGroupResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_member_assignment_construction": {
  "data": {
   "lineno": 1273,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MemberAssignment"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_sync_group_request": {
  "data": {
   "lineno": 1299,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MemberAssignment",
    "pykafka.protocol.SyncGroupRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestGroupMembershipAPI.test_sync_group_response": {
  "data": {
   "lineno": 1330,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.SyncGroupResponse"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_partition_error": {
  "data": {
   "lineno": 951,
   "symbols_in_volume": [
    "pykafka.protocol.ListOffsetResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_request": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ListOffsetRequest",
    "pykafka.protocol.PartitionOffsetRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPI.test_response": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": [
    "pykafka.protocol.ListOffsetResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1": {
  "data": {
   "lineno": 983,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_partition_error": {
  "data": {
   "lineno": 1011,
   "symbols_in_volume": [
    "pykafka.protocol.ListOffsetResponseV1",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_request": {
  "data": {
   "lineno": 986,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ListOffsetRequestV1",
    "pykafka.protocol.PartitionOffsetRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestListOffsetAPIV1.test_response": {
  "data": {
   "lineno": 1028,
   "symbols_in_volume": [
    "pykafka.protocol.ListOffsetResponseV1",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_partition_error": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_request": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_response": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPI.test_topic_error": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1.test_request": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequestV1"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV1.test_response": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponseV1",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2.test_request": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequestV2"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV2.test_response": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponseV2",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3.test_request": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequestV3"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV3.test_response": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponseV3",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4.test_request": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequestV4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV4.test_response": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponseV4",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5.test_request": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.MetadataRequestV5"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestMetadataAPIV5.test_response": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "pykafka.protocol.MetadataResponseV5",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI": {
  "data": {
   "lineno": 1046,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_consumer_metadata_request": {
  "data": {
   "lineno": 1049,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.GroupCoordinatorRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_consumer_metadata_response": {
  "data": {
   "lineno": 1061,
   "symbols_in_volume": [
    "pykafka.protocol.GroupCoordinatorResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_commit_request": {
  "data": {
   "lineno": 1075,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.OffsetCommitRequest",
    "pykafka.protocol.PartitionOffsetCommitRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_commit_response": {
  "data": {
   "lineno": 1102,
   "symbols_in_volume": [
    "pykafka.protocol.OffsetCommitResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_fetch_request": {
  "data": {
   "lineno": 1115,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.OffsetFetchRequest",
    "pykafka.protocol.PartitionOffsetFetchRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPI.test_offset_fetch_response": {
  "data": {
   "lineno": 1141,
   "symbols_in_volume": [
    "pykafka.protocol.OffsetFetchResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": [
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2.test_offset_fetch_request": {
  "data": {
   "lineno": 1161,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.OffsetFetchRequestV2"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestOffsetCommitFetchAPIV2.test_offset_fetch_response": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": [
    "pykafka.protocol.OffsetFetchResponseV2",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "pykafka.protocol.Message",
    "tests.pykafka.test_protocol.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_gzip_compression": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": [
    "len",
    "pykafka.common.CompressionType.GZIP",
    "pykafka.protocol.ProduceRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_partition_error": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": [
    "pykafka.protocol.ProduceResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_request": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ProduceRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_request_message_timestamp": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "bytearray",
    "pykafka.protocol.ProduceRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_response": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "pykafka.protocol.ProducePartitionResponse",
    "pykafka.protocol.ProduceResponse",
    "pykafka.utils.compat.buffer"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.TestProduceAPI.test_snappy_compression": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "len",
    "pykafka.common.CompressionType.SNAPPY",
    "pykafka.protocol.ProduceRequest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol._FetchAPITestBase": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_protocol._FetchAPITestBase.msg_to_dict": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "dict",
    "f",
    "pykafka.protocol.Message.__slots__",
    "tests.pykafka.test_protocol.operator",
    "zip"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_protocol.buffer": {
  "data": {
   "shadows": "pykafka.utils.compat.buffer"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol.protocol": {
  "data": {
   "shadows": "pykafka.protocol"
  },
  "type": "import"
 },
 "tests.pykafka.test_protocol.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "tests.pykafka.test_simpleconsumer.os",
    "tests.pykafka.test_simpleconsumer.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_simpleconsumer.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.OffsetType": {
  "data": {
   "shadows": "pykafka.simpleconsumer.OffsetType"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.OwnedPartition": {
  "data": {
   "shadows": "pykafka.simpleconsumer.OwnedPartition"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.RDKAFKA": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "tests.pykafka.test_simpleconsumer.TestGEventSimpleConsumer": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "tests.pykafka.test_simpleconsumer.TestSimpleConsumer",
    "tests.pykafka.test_simpleconsumer.gevent",
    "tests.pykafka.test_simpleconsumer.platform",
    "tests.pykafka.test_simpleconsumer.pytest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "tests.pykafka.test_simpleconsumer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_compacted_topic_partition_rejects_old_message_after_initial": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_consume_empty_queue": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_commit_request": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "bool",
    "pykafka.simpleconsumer.OwnedPartition",
    "pykafka.utils.compat.get_string",
    "tests.pykafka.test_simpleconsumer.json",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_counters": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_offset_fetch_request": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_rejects_old_message": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestOwnedPartition.test_partition_saves_offset": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OwnedPartition",
    "tests.pykafka.test_simpleconsumer.mock"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tests.pykafka.test_simpleconsumer.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer._convert_offsets": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "dict",
    "f1",
    "f2",
    "isinstance",
    "list",
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.utils.compat.iteritems",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer._get_simple_consumer": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "contextlib.contextmanager"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.setUpClass": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "classmethod",
    "datetime.datetime.now",
    "datetime.timedelta",
    "pykafka.KafkaClient",
    "pykafka.test.utils.get_cluster",
    "pykafka.utils.compat.range",
    "tests.pykafka.test_simpleconsumer.kafka_version",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.tearDownClass": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_consume": {
  "data": {
   "lineno": 67
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_consumer_lag": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "pykafka.utils.compat.iteritems",
    "tests.pykafka.test_simpleconsumer.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_commit": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "pykafka.utils.compat.range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_commit_override": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "pykafka.utils.compat.range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_offset_resume": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "pykafka.utils.compat.range"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offset_on_start": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.simpleconsumer.OffsetType.LATEST",
    "sum"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offsets": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "next",
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.simpleconsumer.OffsetType.LATEST"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_reset_offsets_timestamp": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "next",
    "pykafka.simpleconsumer.OffsetType.EARLIEST",
    "pykafka.simpleconsumer.OffsetType.LATEST"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_unblock_event": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tests.pykafka.test_simpleconsumer.threading"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer.TestSimpleConsumer.test_update_cluster": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tests.pykafka.test_simpleconsumer.pytest",
    "tests.pykafka.test_simpleconsumer.time"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_simpleconsumer._rd_kafka": {
  "data": {
   "shadows": "pykafka.rdkafka._rd_kafka"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.dt": {
  "data": {
   "shadows": "datetime"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.get_string": {
  "data": {
   "shadows": "pykafka.utils.compat.get_string"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.gevent": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "tests.pykafka.test_simpleconsumer.iteritems": {
  "data": {
   "shadows": "pykafka.utils.compat.iteritems"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.kafka_version": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tests.pykafka.test_simpleconsumer.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.range": {
  "data": {
   "shadows": "pykafka.utils.compat.range"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.test_simpleconsumer.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl": {
  "data": {
   "symbols_in_volume": [
    "tests.pykafka.test_ssl.os"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.test_ssl.KafkaClient": {
  "data": {
   "shadows": "pykafka.KafkaClient"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.SslConfig": {
  "data": {
   "shadows": "pykafka.SslConfig"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "tests.pykafka.test_ssl.unittest"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.roundtrip_test": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.setUpClass": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.get_cluster",
    "tests.pykafka.test_ssl.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.tearDownClass": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "classmethod",
    "pykafka.test.utils.stop_cluster"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_ca_only": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "pykafka.KafkaClient",
    "pykafka.SslConfig",
    "tests.pykafka.test_ssl.kafka_version"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_client_cert": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "pykafka.KafkaClient",
    "pykafka.SslConfig",
    "tests.pykafka.test_ssl.kafka_version"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.SslIntegrationTests.test_legacy_wrap_socket": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "pykafka.KafkaClient",
    "pykafka.SslConfig",
    "tests.pykafka.test_ssl.kafka_version",
    "tests.pykafka.test_ssl.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.test_ssl.get_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.get_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.kafka_version": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "tests.pykafka.test_ssl.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.stop_cluster": {
  "data": {
   "shadows": "pykafka.test.utils.stop_cluster"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "tests.pykafka.test_ssl.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.utils": {
  "data": {},
  "type": "module"
 },
 "tests.pykafka.utils.__license__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "tests.pykafka.utils.test_compression": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.pykafka.utils.test_compression.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.utils.test_compression.CompressionTests": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "tests.pykafka.utils.test_compression.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_gzip": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_gzip",
    "pykafka.utils.compression.encode_gzip"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_lz4",
    "pykafka.utils.compression.encode_lz4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4_old_kafka": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_lz4_old_kafka",
    "pykafka.utils.compression.encode_lz4_old_kafka"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_lz4f": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_lz4f",
    "tests.pykafka.utils.test_compression.lz4f",
    "tests.pykafka.utils.test_compression.platform",
    "tests.pykafka.utils.test_compression.pytest"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_snappy",
    "pykafka.utils.compression.encode_snappy"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy_large_payload": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_snappy",
    "pykafka.utils.compression.encode_snappy",
    "range",
    "tests.pykafka.utils.test_compression.platform",
    "tests.pykafka.utils.test_compression.pytest",
    "uuid.uuid4"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.CompressionTests.test_snappy_xerial": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "pykafka.utils.compression.decode_snappy",
    "pykafka.utils.compression.encode_snappy"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_compression.compression": {
  "data": {
   "shadows": "pykafka.utils.compression"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_compression.lz4f": {
  "data": {
   "shadows": "lz4f"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_compression.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_compression.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_compression.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_compression.uuid4": {
  "data": {
   "shadows": "uuid.uuid4"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_struct_helpers": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tests.pykafka.utils.test_struct_helpers.unittest2"
   ]
  },
  "type": "module"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "tests.pykafka.utils.test_struct_helpers.unittest2"
   ]
  },
  "type": "class"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_array_unpacking": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "pykafka.utils.struct_helpers.unpack_from"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_basic_unpack": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "pykafka.utils.struct_helpers.unpack_from"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_bytearray_unpacking": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "pykafka.utils.struct_helpers.unpack_from"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.StructHelpersTests.test_string_encoding": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "pykafka.utils.struct_helpers.unpack_from"
   ]
  },
  "type": "function"
 },
 "tests.pykafka.utils.test_struct_helpers.struct_helpers": {
  "data": {
   "shadows": "pykafka.utils.struct_helpers"
  },
  "type": "import"
 },
 "tests.pykafka.utils.test_struct_helpers.unittest2": {
  "data": {
   "shadows": "unittest2"
  },
  "type": "import"
 }
}