{
 "kafka": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "__name__",
    "kafka.logging",
    "logging.NullHandler"
   ]
  },
  "type": "module"
 },
 "kafka.BrokerConnection": {
  "data": {
   "shadows": "kafka.conn.BrokerConnection"
  },
  "type": "import"
 },
 "kafka.ConsumerRebalanceListener": {
  "data": {
   "shadows": "kafka.consumer.subscription_state.ConsumerRebalanceListener"
  },
  "type": "import"
 },
 "kafka.Deserializer": {
  "data": {
   "shadows": "kafka.serializer.Deserializer"
  },
  "type": "import"
 },
 "kafka.KafkaAdminClient": {
  "data": {
   "shadows": "kafka.admin.KafkaAdminClient"
  },
  "type": "import"
 },
 "kafka.KafkaClient": {
  "data": {
   "shadows": "kafka.client_async.KafkaClient"
  },
  "type": "import"
 },
 "kafka.KafkaConsumer": {
  "data": {
   "shadows": "kafka.consumer.KafkaConsumer"
  },
  "type": "import"
 },
 "kafka.KafkaProducer": {
  "data": {
   "shadows": "kafka.producer.KafkaProducer"
  },
  "type": "import"
 },
 "kafka.NullHandler": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kafka.logging"
   ]
  },
  "type": "class"
 },
 "kafka.NullHandler.emit": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "kafka.OffsetAndMetadata": {
  "data": {
   "shadows": "kafka.structs.OffsetAndMetadata"
  },
  "type": "import"
 },
 "kafka.Serializer": {
  "data": {
   "shadows": "kafka.serializer.Serializer"
  },
  "type": "import"
 },
 "kafka.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "kafka.__author__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "kafka.__copyright__": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "kafka.__license__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.__title__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "kafka.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin": {
  "data": {},
  "type": "module"
 },
 "kafka.admin.ACL": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACL"
  },
  "type": "import"
 },
 "kafka.admin.ACLFilter": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLFilter"
  },
  "type": "import"
 },
 "kafka.admin.ACLOperation": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLOperation"
  },
  "type": "import"
 },
 "kafka.admin.ACLPermissionType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLPermissionType"
  },
  "type": "import"
 },
 "kafka.admin.ACLResourcePatternType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLResourcePatternType"
  },
  "type": "import"
 },
 "kafka.admin.ConfigResource": {
  "data": {
   "shadows": "kafka.admin.config_resource.ConfigResource"
  },
  "type": "import"
 },
 "kafka.admin.ConfigResourceType": {
  "data": {
   "shadows": "kafka.admin.config_resource.ConfigResourceType"
  },
  "type": "import"
 },
 "kafka.admin.KafkaAdminClient": {
  "data": {
   "shadows": "kafka.admin.client.KafkaAdminClient"
  },
  "type": "import"
 },
 "kafka.admin.NewPartitions": {
  "data": {
   "shadows": "kafka.admin.new_partitions.NewPartitions"
  },
  "type": "import"
 },
 "kafka.admin.NewTopic": {
  "data": {
   "shadows": "kafka.admin.new_topic.NewTopic"
  },
  "type": "import"
 },
 "kafka.admin.ResourcePattern": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ResourcePattern"
  },
  "type": "import"
 },
 "kafka.admin.ResourcePatternFilter": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ResourcePatternFilter"
  },
  "type": "import"
 },
 "kafka.admin.ResourceType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ResourceType"
  },
  "type": "import"
 },
 "kafka.admin.__all__": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "kafka.admin.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin.acl_resource": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "kafka.admin.acl_resource.ACL": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "kafka.admin.acl_resource.ACLFilter"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ACL.__init__": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "kafka.admin.acl_resource.ACL",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACL.validate": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "isinstance",
    "kafka.admin.acl_resource.ACLOperation",
    "kafka.admin.acl_resource.ACLPermissionType",
    "kafka.errors.IllegalArgumentError"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLFilter": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ACLFilter.__eq__": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLFilter.__hash__": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLFilter.__init__": {
  "data": {
   "lineno": 82
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLFilter.__repr__": {
  "data": {
   "lineno": 106
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLFilter.validate": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "isinstance",
    "kafka.admin.acl_resource.ACLOperation",
    "kafka.admin.acl_resource.ACLPermissionType",
    "kafka.errors.IllegalArgumentError"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ACLOperation": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "kafka.vendor.enum34.IntEnum"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ACLPermissionType": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "kafka.vendor.enum34.IntEnum"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ACLResourcePatternType": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "kafka.vendor.enum34.IntEnum"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.IllegalArgumentError": {
  "data": {
   "shadows": "kafka.errors.IllegalArgumentError"
  },
  "type": "import"
 },
 "kafka.admin.acl_resource.IntEnum": {
  "data": {
   "shadows": "kafka.vendor.enum34.IntEnum"
  },
  "type": "import"
 },
 "kafka.admin.acl_resource.ResourcePattern": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "kafka.admin.acl_resource.ResourcePatternFilter"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ResourcePattern.__init__": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "kafka.admin.acl_resource.ACLResourcePatternType",
    "kafka.admin.acl_resource.ResourcePattern",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePattern.validate": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "kafka.admin.acl_resource.ACLResourcePatternType",
    "kafka.admin.acl_resource.ResourceType",
    "kafka.errors.IllegalArgumentError"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter.__eq__": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter.__hash__": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter.__init__": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter.__repr__": {
  "data": {
   "lineno": 195
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourcePatternFilter.validate": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "isinstance",
    "kafka.admin.acl_resource.ACLResourcePatternType",
    "kafka.admin.acl_resource.ResourceType",
    "kafka.errors.IllegalArgumentError"
   ]
  },
  "type": "function"
 },
 "kafka.admin.acl_resource.ResourceType": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "kafka.vendor.enum34.IntEnum"
   ]
  },
  "type": "class"
 },
 "kafka.admin.acl_resource.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin.client": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.admin.client.logging"
   ]
  },
  "type": "module"
 },
 "kafka.admin.client.ACL": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACL"
  },
  "type": "import"
 },
 "kafka.admin.client.ACLFilter": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLFilter"
  },
  "type": "import"
 },
 "kafka.admin.client.ACLOperation": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLOperation"
  },
  "type": "import"
 },
 "kafka.admin.client.ACLPermissionType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLPermissionType"
  },
  "type": "import"
 },
 "kafka.admin.client.ACLResourcePatternType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ACLResourcePatternType"
  },
  "type": "import"
 },
 "kafka.admin.client.AlterConfigsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.AlterConfigsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.admin.client.ConsumerProtocol": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocol"
  },
  "type": "import"
 },
 "kafka.admin.client.ConsumerProtocolMemberAssignment": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment"
  },
  "type": "import"
 },
 "kafka.admin.client.ConsumerProtocolMemberMetadata": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata"
  },
  "type": "import"
 },
 "kafka.admin.client.CreateAclsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.CreateAclsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.CreatePartitionsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.CreatePartitionsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.CreateTopicsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.CreateTopicsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DeleteAclsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DeleteAclsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DeleteGroupsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DeleteGroupsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DeleteTopicsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DeleteTopicsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DescribeAclsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DescribeAclsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DescribeConfigsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DescribeConfigsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.DescribeGroupsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.DescribeGroupsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.admin.client.GroupCoordinatorRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.GroupCoordinatorRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.GroupInformation": {
  "data": {
   "shadows": "kafka.structs.GroupInformation"
  },
  "type": "import"
 },
 "kafka.admin.client.IllegalArgumentError": {
  "data": {
   "shadows": "kafka.errors.IllegalArgumentError"
  },
  "type": "import"
 },
 "kafka.admin.client.IncompatibleBrokerVersion": {
  "data": {
   "shadows": "kafka.errors.IncompatibleBrokerVersion"
  },
  "type": "import"
 },
 "kafka.admin.client.KafkaAdminClient": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "kafka.admin.client.socket",
    "kafka.client_async.selectors.DefaultSelector",
    "kafka.version.__version__",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.client.KafkaAdminClient.__init__": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "kafka.admin.client.copy",
    "kafka.admin.client.log",
    "kafka.client_async.KafkaClient",
    "kafka.errors.KafkaConfigurationError",
    "kafka.metrics.MetricConfig",
    "kafka.metrics.Metrics",
    "reporter",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_alter_config_resource_request": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_create_acls_resource_request_v0": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_create_acls_resource_request_v1": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_create_acls_response_to_acls": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "NotImplementedError",
    "enumerate",
    "kafka.errors.NoError",
    "kafka.errors.for_code",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_create_partitions_request": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_delete_acls_resource_request_v0": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_delete_acls_resource_request_v1": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_delete_acls_response_to_matching_acls": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": [
    "NotImplementedError",
    "enumerate",
    "kafka.admin.acl_resource.ACL",
    "kafka.admin.acl_resource.ACLOperation",
    "kafka.admin.acl_resource.ACLPermissionType",
    "kafka.admin.acl_resource.ACLResourcePatternType",
    "kafka.admin.acl_resource.ACLResourcePatternType.LITERAL.value",
    "kafka.admin.acl_resource.ResourcePattern",
    "kafka.admin.acl_resource.ResourceType",
    "kafka.errors.for_code",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_delete_groups_response": {
  "data": {
   "lineno": 1308,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_describe_acls_response_to_acls": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.admin.acl_resource.ACL",
    "kafka.admin.acl_resource.ACLOperation",
    "kafka.admin.acl_resource.ACLPermissionType",
    "kafka.admin.acl_resource.ACLResourcePatternType",
    "kafka.admin.acl_resource.ACLResourcePatternType.LITERAL.value",
    "kafka.admin.acl_resource.ResourcePattern",
    "kafka.admin.acl_resource.ResourceType",
    "kafka.errors.for_code",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_describe_config_resource_request": {
  "data": {
   "lineno": 791,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._convert_new_topic_request": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._delete_consumer_groups_send_request": {
  "data": {
   "lineno": 1319,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.admin.DeleteGroupsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._describe_consumer_groups_process_response": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": [
    "NotImplementedError",
    "error_type",
    "isinstance",
    "kafka.coordinator.protocol.ConsumerProtocol.PROTOCOL_TYPE",
    "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment.decode",
    "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata.decode",
    "kafka.errors.NoError",
    "kafka.errors.for_code",
    "kafka.protocol.types.Array",
    "kafka.structs.GroupInformation._make",
    "kafka.structs.MemberInformation._make",
    "len",
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._describe_consumer_groups_send_request": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.errors.IncompatibleBrokerVersion",
    "kafka.protocol.admin.DescribeGroupsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._find_coordinator_id_process_response": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "NotImplementedError",
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._find_coordinator_id_send_request": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.commit.GroupCoordinatorRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._find_coordinator_ids": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._get_cluster_metadata": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "kafka.errors.IncompatibleBrokerVersion",
    "kafka.protocol.metadata.MetadataRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._list_consumer_group_offsets_process_response": {
  "data": {
   "lineno": 1203,
   "symbols_in_volume": [
    "NotImplementedError",
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.for_code",
    "kafka.structs.OffsetAndMetadata",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._list_consumer_group_offsets_send_request": {
  "data": {
   "lineno": 1171,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "collections.defaultdict",
    "kafka.protocol.commit.OffsetFetchRequest",
    "kafka.vendor.six.iteritems",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._list_consumer_groups_process_response": {
  "data": {
   "lineno": 1118,
   "symbols_in_volume": [
    "NotImplementedError",
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._list_consumer_groups_send_request": {
  "data": {
   "lineno": 1103,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.admin.ListGroupsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._matching_api_version": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "kafka.errors.IncompatibleBrokerVersion",
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._refresh_controller_id": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "kafka.errors.IncompatibleBrokerVersion",
    "kafka.errors.UnrecognizedBrokerVersion",
    "kafka.protocol.metadata.MetadataRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._send_request_to_controller": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "RuntimeError",
    "error_type",
    "hasattr",
    "kafka.errors.NoError",
    "kafka.errors.NotControllerError",
    "kafka.errors.for_code",
    "map"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._send_request_to_node": {
  "data": {
   "lineno": 354
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._validate_timeout": {
  "data": {
   "lineno": 258
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient._wait_for_futures": {
  "data": {
   "lineno": 1336,
   "symbols_in_volume": [
    "all"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.alter_configs": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.admin.AlterConfigsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.close": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "hasattr",
    "kafka.admin.client.log"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.create_acls": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": [
    "NotImplementedError",
    "isinstance",
    "kafka.admin.acl_resource.ACL",
    "kafka.errors.IllegalArgumentError",
    "kafka.protocol.admin.CreateAclsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.create_partitions": {
  "data": {
   "lineno": 936,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.admin.CreatePartitionsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.create_topics": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.errors.IncompatibleBrokerVersion",
    "kafka.protocol.admin.CreateTopicsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.delete_acls": {
  "data": {
   "lineno": 755,
   "symbols_in_volume": [
    "NotImplementedError",
    "isinstance",
    "kafka.admin.acl_resource.ACLFilter",
    "kafka.errors.IllegalArgumentError",
    "kafka.protocol.admin.DeleteAclsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.delete_consumer_groups": {
  "data": {
   "lineno": 1272,
   "symbols_in_volume": [
    "collections.defaultdict",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.delete_topics": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.protocol.admin.DeleteTopicsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.describe_acls": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "NotImplementedError",
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.for_code",
    "kafka.protocol.admin.DescribeAclsRequest"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.describe_cluster": {
  "data": {
   "lineno": 522
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.describe_configs": {
  "data": {
   "lineno": 801,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "int",
    "kafka.errors.IncompatibleBrokerVersion",
    "kafka.protocol.admin.DescribeConfigsRequest",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.describe_consumer_groups": {
  "data": {
   "lineno": 1059
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.describe_topics": {
  "data": {
   "lineno": 517
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.list_consumer_group_offsets": {
  "data": {
   "lineno": 1238
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.list_consumer_groups": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": [
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaAdminClient.list_topics": {
  "data": {
   "lineno": 512
  },
  "type": "function"
 },
 "kafka.admin.client.KafkaClient": {
  "data": {
   "shadows": "kafka.client_async.KafkaClient"
  },
  "type": "import"
 },
 "kafka.admin.client.KafkaConfigurationError": {
  "data": {
   "shadows": "kafka.errors.KafkaConfigurationError"
  },
  "type": "import"
 },
 "kafka.admin.client.ListGroupsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.ListGroupsRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.MemberInformation": {
  "data": {
   "shadows": "kafka.structs.MemberInformation"
  },
  "type": "import"
 },
 "kafka.admin.client.MetadataRequest": {
  "data": {
   "shadows": "kafka.protocol.metadata.MetadataRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.MetricConfig": {
  "data": {
   "shadows": "kafka.metrics.MetricConfig"
  },
  "type": "import"
 },
 "kafka.admin.client.Metrics": {
  "data": {
   "shadows": "kafka.metrics.Metrics"
  },
  "type": "import"
 },
 "kafka.admin.client.NotControllerError": {
  "data": {
   "shadows": "kafka.errors.NotControllerError"
  },
  "type": "import"
 },
 "kafka.admin.client.OffsetAndMetadata": {
  "data": {
   "shadows": "kafka.structs.OffsetAndMetadata"
  },
  "type": "import"
 },
 "kafka.admin.client.OffsetFetchRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.OffsetFetchRequest"
  },
  "type": "import"
 },
 "kafka.admin.client.ResourcePattern": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ResourcePattern"
  },
  "type": "import"
 },
 "kafka.admin.client.ResourceType": {
  "data": {
   "shadows": "kafka.admin.acl_resource.ResourceType"
  },
  "type": "import"
 },
 "kafka.admin.client.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.admin.client.UnrecognizedBrokerVersion": {
  "data": {
   "shadows": "kafka.errors.UnrecognizedBrokerVersion"
  },
  "type": "import"
 },
 "kafka.admin.client.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.admin.client.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin.client.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.admin.client.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "kafka.admin.client.log": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "kafka.admin.client.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.admin.client.selectors": {
  "data": {
   "shadows": "kafka.client_async.selectors"
  },
  "type": "import"
 },
 "kafka.admin.client.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.admin.client.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.admin.config_resource": {
  "data": {
   "symbols_in_volume": [
    "ImportError"
   ]
  },
  "type": "module"
 },
 "kafka.admin.config_resource.ConfigResource": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.config_resource.ConfigResource.__init__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "isinstance",
    "kafka.admin.config_resource.ConfigResourceType",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.admin.config_resource.ConfigResourceType": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "kafka.vendor.enum34.IntEnum"
   ]
  },
  "type": "class"
 },
 "kafka.admin.config_resource.IntEnum": {
  "data": {
   "shadows": "kafka.vendor.enum34.IntEnum"
  },
  "type": "import"
 },
 "kafka.admin.config_resource.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin.new_partitions": {
  "data": {},
  "type": "module"
 },
 "kafka.admin.new_partitions.NewPartitions": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.new_partitions.NewPartitions.__init__": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "kafka.admin.new_partitions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.admin.new_topic": {
  "data": {},
  "type": "module"
 },
 "kafka.admin.new_topic.IllegalArgumentError": {
  "data": {
   "shadows": "kafka.errors.IllegalArgumentError"
  },
  "type": "import"
 },
 "kafka.admin.new_topic.NewTopic": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.admin.new_topic.NewTopic.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "kafka.errors.IllegalArgumentError"
   ]
  },
  "type": "function"
 },
 "kafka.admin.new_topic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.client_async": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "collections.OrderedDict",
    "dict",
    "kafka.client_async.logging",
    "kafka.vendor.six.PY2"
   ]
  },
  "type": "module"
 },
 "kafka.client_async.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.client_async.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.client_async.BrokerConnection": {
  "data": {
   "shadows": "kafka.conn.BrokerConnection"
  },
  "type": "import"
 },
 "kafka.client_async.ClusterMetadata": {
  "data": {
   "shadows": "kafka.cluster.ClusterMetadata"
  },
  "type": "import"
 },
 "kafka.client_async.ConnectionError": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "kafka.client_async.ConnectionStates": {
  "data": {
   "shadows": "kafka.conn.ConnectionStates"
  },
  "type": "import"
 },
 "kafka.client_async.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.Count"
  },
  "type": "import"
 },
 "kafka.client_async.Dict": {
  "data": {
   "shadows": "kafka.util.Dict"
  },
  "type": "import"
 },
 "kafka.client_async.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.client_async.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.client_async.IdleConnectionManager": {
  "data": {
   "lineno": 974,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.client_async.IdleConnectionManager.__init__": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "float",
    "kafka.client_async.time"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.is_expired": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": [
    "kafka.client_async.time"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.next_check_ms": {
  "data": {
   "lineno": 999,
   "symbols_in_volume": [
    "float",
    "int",
    "kafka.client_async.time"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.poll_expired_connection": {
  "data": {
   "lineno": 1011,
   "symbols_in_volume": [
    "collections.OrderedDict",
    "dict",
    "iter",
    "kafka.client_async.time",
    "len",
    "next"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.remove": {
  "data": {
   "lineno": 990
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.update": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": [
    "kafka.client_async.time"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.IdleConnectionManager.update_next_idle_close_check_time": {
  "data": {
   "lineno": 1008
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "kafka.client_async.socket",
    "kafka.vendor.selectors34.DefaultSelector",
    "kafka.version.__version__",
    "object",
    "set"
   ]
  },
  "type": "class"
 },
 "kafka.client_async.KafkaClient.__del__": {
  "data": {
   "lineno": 442
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.__init__": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "IdleConnectionManager",
    "KafkaClientMetrics",
    "kafka.client_async.collections",
    "kafka.client_async.copy",
    "kafka.client_async.socket",
    "kafka.client_async.threading",
    "kafka.client_async.weakref",
    "kafka.cluster.ClusterMetadata",
    "kafka.conn.collect_hosts",
    "kafka.util.Dict",
    "kafka.vendor.selectors34.EVENT_READ",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._can_bootstrap": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "kafka.client_async.random",
    "kafka.client_async.time",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._can_connect": {
  "data": {
   "lineno": 260
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._can_send_request": {
  "data": {
   "lineno": 509
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._clear_wake_fd": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": [
    "kafka.client_async.socket"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._close": {
  "data": {
   "lineno": 416
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._conn_state_change": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "KeyError",
    "kafka.client_async.log",
    "kafka.client_async.time",
    "kafka.conn.ConnectionStates.DISCONNECTED",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._fire_pending_completed_requests": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "IndexError"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._maybe_close_oldest_connection": {
  "data": {
   "lineno": 947,
   "symbols_in_volume": [
    "kafka.client_async.log",
    "kafka.client_async.time"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._maybe_connect": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "kafka.client_async.log",
    "kafka.conn.BrokerConnection",
    "kafka.conn.get_ip_port_afi",
    "kafka.util.WeakMethod"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._maybe_refresh_metadata": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": [
    "float",
    "kafka.client_async.log",
    "kafka.protocol.metadata.MetadataRequest",
    "list",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._maybe_refresh_metadata.refresh_done": {
  "data": {
   "lineno": 843
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._poll": {
  "data": {
   "lineno": 625,
   "symbols_in_volume": [
    "events",
    "kafka.client_async.log",
    "kafka.client_async.socket",
    "kafka.client_async.time",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.RequestTimedOutError",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.six.itervalues",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._register_send_sockets": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "KeyError",
    "events",
    "kafka.vendor.selectors34.EVENT_WRITE"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient._should_recycle_connection": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "kafka.client_async.log",
    "kafka.conn.get_ip_port_afi"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.add_topic": {
  "data": {
   "lineno": 791,
   "symbols_in_volume": [
    "kafka.future.Future",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.bootstrap_connected": {
  "data": {
   "lineno": 955
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.check_version": {
  "data": {
   "lineno": 875,
   "symbols_in_volume": [
    "kafka.client_async.time",
    "kafka.errors.NoBrokersAvailable",
    "kafka.errors.NodeNotReadyError",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.close": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "kafka.client_async.log",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.connected": {
  "data": {
   "lineno": 409
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.connection_delay": {
  "data": {
   "lineno": 464
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.get_api_versions": {
  "data": {
   "lineno": 864
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.in_flight_request_count": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": [
    "len",
    "list",
    "sum"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.is_disconnected": {
  "data": {
   "lineno": 445
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.is_ready": {
  "data": {
   "lineno": 483
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.least_loaded_node": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": [
    "float",
    "kafka.client_async.random",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.maybe_connect": {
  "data": {
   "lineno": 334
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.poll": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": [
    "TypeError",
    "float",
    "int",
    "isinstance",
    "list",
    "max",
    "min",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.ready": {
  "data": {
   "lineno": 395
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.send": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.set_topics": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": [
    "kafka.future.Future",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClient.wakeup": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": [
    "kafka.client_async.log",
    "kafka.client_async.socket",
    "kafka.errors.KafkaTimeoutError"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.KafkaClientMetrics": {
  "data": {
   "lineno": 1036,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.client_async.KafkaClientMetrics.__init__": {
  "data": {
   "lineno": 1037,
   "symbols_in_volume": [
    "kafka.metrics.AnonMeasurable",
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Count",
    "kafka.metrics.stats.Rate",
    "kafka.metrics.stats.rate.TimeUnit.NANOSECONDS",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.client_async.MetadataRequest": {
  "data": {
   "shadows": "kafka.protocol.metadata.MetadataRequest"
  },
  "type": "import"
 },
 "kafka.client_async.OrderedDict": {
  "data": {
   "lineno": 971
  },
  "type": "constant"
 },
 "kafka.client_async.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.client_async.TimeUnit": {
  "data": {
   "shadows": "kafka.metrics.stats.rate.TimeUnit"
  },
  "type": "import"
 },
 "kafka.client_async.WeakMethod": {
  "data": {
   "shadows": "kafka.util.WeakMethod"
  },
  "type": "import"
 },
 "kafka.client_async.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.client_async.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.client_async.collect_hosts": {
  "data": {
   "shadows": "kafka.conn.collect_hosts"
  },
  "type": "import"
 },
 "kafka.client_async.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.client_async.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.client_async.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.client_async.get_ip_port_afi": {
  "data": {
   "shadows": "kafka.conn.get_ip_port_afi"
  },
  "type": "import"
 },
 "kafka.client_async.log": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "kafka.client_async.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.client_async.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "kafka.client_async.selectors": {
  "data": {
   "shadows": "kafka.vendor.selectors34"
  },
  "type": "import"
 },
 "kafka.client_async.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.client_async.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.client_async.socketpair": {
  "data": {
   "shadows": "kafka.vendor.socketpair"
  },
  "type": "import"
 },
 "kafka.client_async.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.client_async.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.client_async.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "kafka.cluster": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.cluster.logging"
   ]
  },
  "type": "module"
 },
 "kafka.cluster.BrokerMetadata": {
  "data": {
   "shadows": "kafka.structs.BrokerMetadata"
  },
  "type": "import"
 },
 "kafka.cluster.ClusterMetadata": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.cluster.ClusterMetadata.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "kafka.cluster.collections",
    "kafka.cluster.copy",
    "kafka.cluster.threading",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.__str__": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata._generate_bootstrap_brokers": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "enumerate",
    "kafka.conn.collect_hosts",
    "kafka.structs.BrokerMetadata"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.add_group_coordinator": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "kafka.cluster.log",
    "kafka.errors.NoError",
    "kafka.errors.for_code",
    "kafka.structs.BrokerMetadata"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.add_listener": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "listener"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.available_partitions_for_topic": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.broker_metadata": {
  "data": {
   "lineno": 91
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.brokers": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.coordinator_for_group": {
  "data": {
   "lineno": 155
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.failed_update": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "kafka.cluster.time"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.is_bootstrap": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.leader_for_partition": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.partitions_for_broker": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.partitions_for_topic": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.refresh_backoff": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.remove_listener": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "listener"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.request_update": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "kafka.future.Future"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.topics": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.ttl": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "kafka.cluster.time",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.update_metadata": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "kafka.cluster.collections",
    "kafka.cluster.log",
    "kafka.cluster.time",
    "kafka.errors.InvalidTopicError",
    "kafka.errors.LeaderNotAvailableError",
    "kafka.errors.MetadataEmptyBrokerList",
    "kafka.errors.NoError",
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.errors.UnknownTopicOrPartitionError",
    "kafka.errors.for_code",
    "kafka.structs.BrokerMetadata",
    "kafka.structs.PartitionMetadata",
    "kafka.structs.TopicPartition",
    "len",
    "listener",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.ClusterMetadata.with_partitions": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "kafka.cluster.ClusterMetadata",
    "kafka.cluster.copy",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.cluster.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.cluster.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.cluster.PartitionMetadata": {
  "data": {
   "shadows": "kafka.structs.PartitionMetadata"
  },
  "type": "import"
 },
 "kafka.cluster.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.cluster.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.cluster.collect_hosts": {
  "data": {
   "shadows": "kafka.conn.collect_hosts"
  },
  "type": "import"
 },
 "kafka.cluster.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.cluster.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.cluster.log": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "kafka.cluster.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.cluster.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.cluster.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.cluster.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.codec": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "bool",
    "kafka.codec._lz4_compress",
    "kafka.codec.lz4f",
    "kafka.codec.lz4f_decode",
    "kafka.codec.lz4framed",
    "kafka.codec.platform",
    "lz4.frame",
    "lz4.frame.decompress",
    "zstandard"
   ]
  },
  "type": "module"
 },
 "kafka.codec.PYPY": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "kafka.codec.ZSTD_MAX_OUTPUT_SIZE": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.codec._XERIAL_V1_FORMAT": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "kafka.codec._XERIAL_V1_HEADER": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "kafka.codec._detect_xerial_stream": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "bytes",
    "kafka.codec._XERIAL_V1_FORMAT",
    "kafka.codec._XERIAL_V1_HEADER",
    "kafka.codec.struct",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.codec._lz4_compress": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "TypeError",
    "lz4.frame.compress"
   ]
  },
  "type": "function"
 },
 "kafka.codec.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.codec.gzip": {
  "data": {
   "shadows": "gzip"
  },
  "type": "import"
 },
 "kafka.codec.gzip_decode": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "kafka.codec.gzip",
    "kafka.codec.io"
   ]
  },
  "type": "function"
 },
 "kafka.codec.gzip_encode": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "kafka.codec.gzip",
    "kafka.codec.io"
   ]
  },
  "type": "function"
 },
 "kafka.codec.has_gzip": {
  "data": {
   "lineno": 59
  },
  "type": "function"
 },
 "kafka.codec.has_lz4": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "kafka.codec.lz4f",
    "kafka.codec.lz4framed",
    "lz4.frame"
   ]
  },
  "type": "function"
 },
 "kafka.codec.has_snappy": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "kafka.codec.snappy"
   ]
  },
  "type": "function"
 },
 "kafka.codec.has_zstd": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "zstandard"
   ]
  },
  "type": "function"
 },
 "kafka.codec.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "kafka.codec.lz4": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "kafka.codec.lz4_decode": {
  "data": {
   "lineno": 257
  },
  "type": "constant"
 },
 "kafka.codec.lz4_decode_old_kafka": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "kafka.codec.lz4_decode",
    "kafka.codec.xxhash",
    "ord"
   ]
  },
  "type": "function"
 },
 "kafka.codec.lz4_encode": {
  "data": {
   "lineno": 233
  },
  "type": "constant"
 },
 "kafka.codec.lz4_encode_old_kafka": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "bytearray",
    "bytes",
    "int",
    "isinstance",
    "kafka.codec.lz4_encode",
    "kafka.codec.xxhash",
    "ord"
   ]
  },
  "type": "function"
 },
 "kafka.codec.lz4f": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "kafka.codec.lz4f_decode": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "RuntimeError",
    "kafka.codec.lz4f"
   ]
  },
  "type": "function"
 },
 "kafka.codec.lz4framed": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "kafka.codec.platform": {
  "data": {
   "shadows": "platform"
  },
  "type": "import"
 },
 "kafka.codec.range": {
  "data": {
   "shadows": "kafka.vendor.six.moves.range"
  },
  "type": "import"
 },
 "kafka.codec.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.codec.snappy": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "kafka.codec.snappy_decode": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.codec._detect_xerial_stream",
    "kafka.codec.has_snappy",
    "kafka.codec.io",
    "kafka.codec.snappy",
    "kafka.codec.struct",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.codec.snappy_encode": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "NotImplementedError",
    "buffer",
    "chunker",
    "kafka.codec.PYPY",
    "kafka.codec._XERIAL_V1_FORMAT",
    "kafka.codec._XERIAL_V1_HEADER",
    "kafka.codec.has_snappy",
    "kafka.codec.io",
    "kafka.codec.snappy",
    "kafka.codec.struct",
    "kafka.vendor.six.PY2",
    "kafka.vendor.six.moves.range",
    "len",
    "memoryview",
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.codec.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.codec.xxhash": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "kafka.codec.zstd": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "kafka.codec.zstd_decode": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.codec.ZSTD_MAX_OUTPUT_SIZE",
    "zstandard",
    "zstandard.ZstdDecompressor",
    "zstandard.ZstdError"
   ]
  },
  "type": "function"
 },
 "kafka.codec.zstd_encode": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "NotImplementedError",
    "zstandard",
    "zstandard.ZstdCompressor"
   ]
  },
  "type": "function"
 },
 "kafka.conn": {
  "data": {
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "ImportError",
    "__name__",
    "gssapi.raw.misc.GSSError",
    "kafka.conn.log",
    "kafka.conn.logging",
    "kafka.conn.socket",
    "kafka.conn.ssl",
    "kafka.vendor.six.PY2"
   ]
  },
  "type": "module"
 },
 "kafka.conn.AFI_NAMES": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "kafka.conn.AbstractTokenProvider": {
  "data": {
   "shadows": "kafka.oauth.abstract.AbstractTokenProvider"
  },
  "type": "import"
 },
 "kafka.conn.ApiVersionRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.ApiVersionRequest"
  },
  "type": "import"
 },
 "kafka.conn.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.conn.BlockingIOError": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "kafka.conn.BrokerConnection": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "kafka.conn.socket",
    "kafka.vendor.selectors34.DefaultSelector",
    "kafka.version.__version__",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.conn.BrokerConnection.__del__": {
  "data": {
   "lineno": 903
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.__init__": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "BrokerConnectionMetrics",
    "callable",
    "dict",
    "getattr",
    "kafka.conn.ConnectionStates",
    "kafka.conn.copy",
    "kafka.conn.gssapi",
    "kafka.conn.socket",
    "kafka.conn.ssl_available",
    "kafka.conn.threading",
    "kafka.protocol.parser.KafkaProtocol"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.__str__": {
  "data": {
   "lineno": 1302,
   "symbols_in_volume": [
    "kafka.conn.AFI_NAMES"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._build_oauth_client_request": {
  "data": {
   "lineno": 822
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._can_send_recv": {
  "data": {
   "lineno": 945,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._close_socket": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._dns_lookup": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "dns_lookup",
    "kafka.conn.log"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._handle_api_version_response": {
  "data": {
   "lineno": 1145,
   "symbols_in_volume": [
    "dict",
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._handle_sasl_handshake_response": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": [
    "error_type",
    "kafka.errors.NoError",
    "kafka.errors.UnsupportedSaslMechanismError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._infer_broker_version_from_api_versions": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": [
    "kafka.conn.struct",
    "kafka.protocol.admin.DescribeAclsRequest_v2",
    "kafka.protocol.commit.OffsetFetchRequest",
    "kafka.protocol.fetch.FetchRequest",
    "kafka.protocol.metadata.MetadataRequest",
    "kafka.protocol.offset.OffsetRequest",
    "kafka.protocol.produce.ProduceRequest",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._next_afi_sockaddr": {
  "data": {
   "lineno": 320
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._recv": {
  "data": {
   "lineno": 1079,
   "symbols_in_volume": [
    "kafka.conn.BlockingIOError",
    "kafka.conn.ConnectionError",
    "kafka.conn.SSLWantReadError",
    "kafka.conn.SSLWantWriteError",
    "kafka.conn.TimeoutError",
    "kafka.conn.errno",
    "kafka.conn.log",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.KafkaProtocolError",
    "kafka.vendor.six.PY2",
    "kafka.vendor.six.PY3",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._recv_bytes_blocking": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": [
    "kafka.conn.ConnectionError",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._reset_reconnect_backoff": {
  "data": {
   "lineno": 882
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._send": {
  "data": {
   "lineno": 961,
   "symbols_in_volume": [
    "kafka.conn.log",
    "kafka.conn.time",
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._send_bytes": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "kafka.conn.BlockingIOError",
    "kafka.conn.ConnectionError",
    "kafka.conn.SSLWantReadError",
    "kafka.conn.SSLWantWriteError",
    "kafka.conn.TimeoutError",
    "kafka.conn.errno",
    "kafka.vendor.six.PY2",
    "kafka.vendor.six.PY3",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._send_bytes_blocking": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "kafka.conn.ConnectionError",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._token_extensions": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "callable",
    "getattr",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_authenticate": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "isinstance",
    "kafka.errors.KafkaConnectionError",
    "kafka.future.Future",
    "kafka.protocol.admin.SaslHandShakeRequest"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_authenticate_gssapi": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "Exception",
    "kafka.conn.ConnectionError",
    "kafka.conn.SASL_QOP_AUTH",
    "kafka.conn.TimeoutError",
    "kafka.conn.gssapi",
    "kafka.conn.io",
    "kafka.conn.log",
    "kafka.conn.struct",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.NodeNotReadyError",
    "kafka.protocol.types.Int32.encode",
    "kafka.protocol.types.Int8.decode",
    "kafka.protocol.types.Int8.encode",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_authenticate_oauth": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": [
    "bytes",
    "kafka.conn.ConnectionError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.errors.AuthenticationFailedError",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.NodeNotReadyError",
    "kafka.protocol.types.Int32.encode",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_authenticate_plain": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "bytes",
    "kafka.conn.ConnectionError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.errors.AuthenticationFailedError",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.NodeNotReadyError",
    "kafka.protocol.types.Int32.encode",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_authenticate_scram": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": [
    "kafka.conn.ConnectionError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.conn.struct",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.NodeNotReadyError",
    "kafka.protocol.types.Int32.encode",
    "kafka.scram.ScramClient",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._try_handshake": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "kafka.conn.ConnectionError",
    "kafka.conn.SSLEOFError",
    "kafka.conn.SSLWantReadError",
    "kafka.conn.SSLWantWriteError",
    "kafka.conn.SSLZeroReturnError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.errors.KafkaConnectionError"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._update_reconnect_backoff": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": [
    "kafka.conn.log",
    "len",
    "min",
    "random.uniform"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection._wrap_ssl": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "RuntimeError",
    "hasattr",
    "kafka.conn.log",
    "kafka.conn.ssl"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.blacked_out": {
  "data": {
   "lineno": 841,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates",
    "kafka.conn.time"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.can_send_more": {
  "data": {
   "lineno": 1043,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.check_version": {
  "data": {
   "lineno": 1197,
   "symbols_in_volume": [
    "isinstance",
    "kafka.conn.ConnectionError",
    "kafka.conn.log",
    "kafka.conn.socket",
    "kafka.conn.time",
    "kafka.errors.CorrelationIdError",
    "kafka.errors.NodeNotReadyError",
    "kafka.errors.RequestTimedOutError",
    "kafka.errors.UnrecognizedBrokerVersion",
    "kafka.protocol.admin.ApiVersionRequest",
    "kafka.protocol.admin.ListGroupsRequest",
    "kafka.protocol.commit.GroupCoordinatorRequest",
    "kafka.protocol.commit.OffsetFetchRequest",
    "kafka.protocol.metadata.MetadataRequest",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.six.PY2",
    "map",
    "reset_override_configs",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.check_version.reset_override_configs": {
  "data": {
   "lineno": 1216
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.close": {
  "data": {
   "lineno": 906,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates",
    "kafka.conn.log",
    "kafka.errors.Cancelled",
    "kafka.protocol.parser.KafkaProtocol",
    "list",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.connect": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "kafka.conn.AFI_NAMES",
    "kafka.conn.ConnectionStates",
    "kafka.conn.errno",
    "kafka.conn.log",
    "kafka.conn.socket",
    "kafka.conn.time",
    "kafka.errors.KafkaConnectionError"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.connect_blocking": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "float",
    "kafka.conn.time",
    "kafka.vendor.selectors34.EVENT_WRITE"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.connected": {
  "data": {
   "lineno": 867,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.connecting": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.connection_delay": {
  "data": {
   "lineno": 851,
   "symbols_in_volume": [
    "float",
    "kafka.conn.ConnectionStates",
    "kafka.conn.time",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.disconnected": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": [
    "kafka.conn.ConnectionStates"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.get_api_versions": {
  "data": {
   "lineno": 1154,
   "symbols_in_volume": [
    "kafka.errors.UnsupportedVersionError"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.recv": {
  "data": {
   "lineno": 1048,
   "symbols_in_volume": [
    "KeyError",
    "enumerate",
    "kafka.conn.log",
    "kafka.conn.time",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.RequestTimedOutError"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.requests_timed_out": {
  "data": {
   "lineno": 1134,
   "symbols_in_volume": [
    "kafka.conn.time",
    "map",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.send": {
  "data": {
   "lineno": 950,
   "symbols_in_volume": [
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.NodeNotReadyError",
    "kafka.errors.TooManyInFlightRequests",
    "kafka.future.Future",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.send_pending_requests": {
  "data": {
   "lineno": 987,
   "symbols_in_volume": [
    "kafka.conn.ConnectionError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.errors.KafkaConnectionError"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnection.send_pending_requests_v2": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": [
    "Exception",
    "kafka.conn.ConnectionError",
    "kafka.conn.TimeoutError",
    "kafka.conn.log",
    "kafka.errors.KafkaConnectionError",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.conn.BrokerConnectionMetrics": {
  "data": {
   "lineno": 1308,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.conn.BrokerConnectionMetrics.__init__": {
  "data": {
   "lineno": 1309,
   "symbols_in_volume": [
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Count",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate"
   ]
  },
  "type": "function"
 },
 "kafka.conn.ConnectionError": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "kafka.conn.ConnectionStates": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.conn.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.Count"
  },
  "type": "import"
 },
 "kafka.conn.DEFAULT_KAFKA_PORT": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "kafka.conn.DescribeAclsRequest_v2": {
  "data": {
   "shadows": "kafka.protocol.admin.DescribeAclsRequest_v2"
  },
  "type": "import"
 },
 "kafka.conn.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.conn.FetchRequest": {
  "data": {
   "shadows": "kafka.protocol.fetch.FetchRequest"
  },
  "type": "import"
 },
 "kafka.conn.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.conn.GSSError": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "kafka.conn.GroupCoordinatorRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.GroupCoordinatorRequest"
  },
  "type": "import"
 },
 "kafka.conn.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.conn.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.conn.KafkaProtocol": {
  "data": {
   "shadows": "kafka.protocol.parser.KafkaProtocol"
  },
  "type": "import"
 },
 "kafka.conn.ListGroupsRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.ListGroupsRequest"
  },
  "type": "import"
 },
 "kafka.conn.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.Max"
  },
  "type": "import"
 },
 "kafka.conn.MetadataRequest": {
  "data": {
   "shadows": "kafka.protocol.metadata.MetadataRequest"
  },
  "type": "import"
 },
 "kafka.conn.OffsetFetchRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.OffsetFetchRequest"
  },
  "type": "import"
 },
 "kafka.conn.OffsetRequest": {
  "data": {
   "shadows": "kafka.protocol.offset.OffsetRequest"
  },
  "type": "import"
 },
 "kafka.conn.ProduceRequest": {
  "data": {
   "shadows": "kafka.protocol.produce.ProduceRequest"
  },
  "type": "import"
 },
 "kafka.conn.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.conn.SASL_QOP_AUTH": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "kafka.conn.SASL_QOP_AUTH_CONF": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "kafka.conn.SASL_QOP_AUTH_INT": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "kafka.conn.SSLEOFError": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "kafka.conn.SSLWantReadError": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "kafka.conn.SSLWantWriteError": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "kafka.conn.SSLZeroReturnError": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "kafka.conn.SaslHandShakeRequest": {
  "data": {
   "shadows": "kafka.protocol.admin.SaslHandShakeRequest"
  },
  "type": "import"
 },
 "kafka.conn.ScramClient": {
  "data": {
   "shadows": "kafka.scram.ScramClient"
  },
  "type": "import"
 },
 "kafka.conn.TimeoutError": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "kafka.conn.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.conn._address_family": {
  "data": {
   "lineno": 1417,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "kafka.conn.socket"
   ]
  },
  "type": "function"
 },
 "kafka.conn.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.conn.collect_hosts": {
  "data": {
   "lineno": 1484,
   "symbols_in_volume": [
    "isinstance",
    "kafka.conn.DEFAULT_KAFKA_PORT",
    "kafka.conn.get_ip_port_afi",
    "kafka.conn.socket",
    "kafka.vendor.six.string_types",
    "random.shuffle"
   ]
  },
  "type": "function"
 },
 "kafka.conn.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.conn.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.conn.dns_lookup": {
  "data": {
   "lineno": 1515,
   "symbols_in_volume": [
    "filter",
    "kafka.conn.is_inet_4_or_6",
    "kafka.conn.log",
    "kafka.conn.socket",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.conn.errno": {
  "data": {
   "shadows": "errno"
  },
  "type": "import"
 },
 "kafka.conn.get_ip_port_afi": {
  "data": {
   "lineno": 1435,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "int",
    "kafka.conn.DEFAULT_KAFKA_PORT",
    "kafka.conn._address_family",
    "kafka.conn.log",
    "kafka.conn.socket"
   ]
  },
  "type": "function"
 },
 "kafka.conn.gssapi": {
  "data": {
   "lineno": 83
  },
  "type": "constant"
 },
 "kafka.conn.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "kafka.conn.is_inet_4_or_6": {
  "data": {
   "lineno": 1510,
   "symbols_in_volume": [
    "kafka.conn.socket"
   ]
  },
  "type": "function"
 },
 "kafka.conn.log": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "kafka.conn.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.conn.selectors": {
  "data": {
   "shadows": "kafka.vendor.selectors34"
  },
  "type": "import"
 },
 "kafka.conn.shuffle": {
  "data": {
   "shadows": "random.shuffle"
  },
  "type": "import"
 },
 "kafka.conn.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.conn.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.conn.ssl": {
  "data": {
   "shadows": "ssl"
  },
  "type": "import"
 },
 "kafka.conn.ssl_available": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "kafka.conn.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.conn.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.conn.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.conn.uniform": {
  "data": {
   "shadows": "random.uniform"
  },
  "type": "import"
 },
 "kafka.consumer": {
  "data": {},
  "type": "module"
 },
 "kafka.consumer.KafkaConsumer": {
  "data": {
   "shadows": "kafka.consumer.group.KafkaConsumer"
  },
  "type": "import"
 },
 "kafka.consumer.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "kafka.consumer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.consumer.fetcher.collections",
    "kafka.consumer.fetcher.logging"
   ]
  },
  "type": "module"
 },
 "kafka.consumer.fetcher.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.CompletedFetch": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "kafka.consumer.fetcher.ConsumerRecord": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "kafka.consumer.fetcher.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.Count"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.Deserializer": {
  "data": {
   "shadows": "kafka.serializer.Deserializer"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.FetchManagerMetrics": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.FetchManagerMetrics.__init__": {
  "data": {
   "lineno": 942,
   "symbols_in_volume": [
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Count",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.FetchManagerMetrics.record_topic_fetch_metrics": {
  "data": {
   "lineno": 978,
   "symbols_in_volume": [
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.FetchRequest": {
  "data": {
   "shadows": "kafka.protocol.fetch.FetchRequest"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.FetchResponseMetricAggregator": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.FetchResponseMetricAggregator.__init__": {
  "data": {
   "lineno": 919
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.FetchResponseMetricAggregator.record": {
  "data": {
   "lineno": 925
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.sys",
    "kafka.vendor.six.Iterator"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.Fetcher.PartitionRecords": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.Fetcher.PartitionRecords.__init__": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": [
    "enumerate",
    "kafka.consumer.fetcher.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.PartitionRecords.__len__": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.PartitionRecords.discard": {
  "data": {
   "lineno": 895
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.PartitionRecords.take": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": [
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.__init__": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "FetchManagerMetrics",
    "kafka.consumer.fetcher.READ_UNCOMMITTED",
    "kafka.consumer.fetcher.collections",
    "kafka.consumer.fetcher.copy"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.__iter__": {
  "data": {
   "lineno": 494
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.__next__": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._append": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.log",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._clean_done_fetch_futures": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._create_fetch_requests": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.collections",
    "kafka.consumer.fetcher.log",
    "kafka.consumer.fetcher.random",
    "kafka.protocol.fetch.FetchRequest",
    "kafka.vendor.six.iteritems",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._deserialize": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": [
    "f",
    "isinstance",
    "kafka.serializer.Deserializer"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._fetchable_partitions": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.copy"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._handle_fetch_response": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": [
    "FetchResponseMetricAggregator",
    "kafka.consumer.fetcher.CompletedFetch",
    "kafka.consumer.fetcher.random",
    "kafka.consumer.fetcher.time",
    "kafka.structs.TopicPartition",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._handle_offset_response": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": [
    "error_type",
    "kafka.consumer.fetcher.log",
    "kafka.errors.NoError",
    "kafka.errors.NotLeaderForPartitionError",
    "kafka.errors.UnknownTopicOrPartitionError",
    "kafka.errors.UnsupportedForMessageFormatError",
    "kafka.errors.for_code",
    "kafka.protocol.offset.UNKNOWN_OFFSET",
    "kafka.structs.TopicPartition",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._message_generator": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.log",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._parse_fetched_data": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": [
    "error_type",
    "kafka.consumer.fetcher.RecordTooLargeError",
    "kafka.consumer.fetcher.log",
    "kafka.errors.NoError",
    "kafka.errors.NotLeaderForPartitionError",
    "kafka.errors.OffsetOutOfRangeError",
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.errors.UnknownError",
    "kafka.errors.UnknownTopicOrPartitionError",
    "kafka.errors.for_code",
    "kafka.record.MemoryRecords",
    "len",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._reset_offset": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.NoOffsetForPartitionError",
    "kafka.consumer.fetcher.log",
    "kafka.protocol.offset.OffsetResetStrategy.EARLIEST",
    "kafka.protocol.offset.OffsetResetStrategy.LATEST"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._retrieve_offsets": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "float",
    "isinstance",
    "kafka.consumer.fetcher.copy",
    "kafka.consumer.fetcher.log",
    "kafka.consumer.fetcher.time",
    "kafka.errors.KafkaTimeoutError",
    "kafka.errors.StaleMetadata"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._send_offset_request": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.collections",
    "kafka.future.Future",
    "kafka.protocol.offset.OffsetRequest",
    "kafka.vendor.six.iteritems",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._send_offset_requests": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "dict",
    "kafka.consumer.fetcher.collections",
    "kafka.consumer.fetcher.log",
    "kafka.errors.LeaderNotAvailableError",
    "kafka.errors.StaleMetadata",
    "kafka.future.Future",
    "kafka.vendor.six.iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._send_offset_requests.on_fail": {
  "data": {
   "lineno": 553
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._send_offset_requests.on_success": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher._unpack_message_set": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "AttributeError",
    "RuntimeError",
    "StopIteration",
    "kafka.consumer.fetcher.ConsumerRecord",
    "kafka.consumer.fetcher.log",
    "len",
    "sum"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.beginning_offsets": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "kafka.protocol.offset.OffsetResetStrategy.EARLIEST"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.beginning_or_end_offset": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.end_offsets": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "kafka.protocol.offset.OffsetResetStrategy.LATEST"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.fetched_records": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "bool",
    "dict",
    "kafka.consumer.fetcher.collections",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.get_offsets_by_times": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "kafka.structs.OffsetAndTimestamp"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.in_flight_fetches": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.reset_offsets_if_needed": {
  "data": {
   "lineno": 134
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.send_fetches": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.log",
    "kafka.consumer.fetcher.time",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Fetcher.update_fetch_positions": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "kafka.consumer.fetcher.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.fetcher.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.Max"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.MemoryRecords": {
  "data": {
   "shadows": "kafka.record.MemoryRecords"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.NoOffsetForPartitionError": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.OffsetAndTimestamp": {
  "data": {
   "shadows": "kafka.structs.OffsetAndTimestamp"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.OffsetRequest": {
  "data": {
   "shadows": "kafka.protocol.offset.OffsetRequest"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.OffsetResetStrategy": {
  "data": {
   "shadows": "kafka.protocol.offset.OffsetResetStrategy"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.READ_COMMITTED": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "kafka.consumer.fetcher.READ_UNCOMMITTED": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "kafka.consumer.fetcher.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.RecordTooLargeError": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.fetcher.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.UNKNOWN_OFFSET": {
  "data": {
   "shadows": "kafka.protocol.offset.UNKNOWN_OFFSET"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.log": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "kafka.consumer.fetcher.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.consumer.fetcher.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.consumer.group": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.consumer.group.logging"
   ]
  },
  "type": "module"
 },
 "kafka.consumer.group.ConsumerCoordinator": {
  "data": {
   "shadows": "kafka.coordinator.consumer.ConsumerCoordinator"
  },
  "type": "import"
 },
 "kafka.consumer.group.Fetcher": {
  "data": {
   "shadows": "kafka.consumer.fetcher.Fetcher"
  },
  "type": "import"
 },
 "kafka.consumer.group.KafkaClient": {
  "data": {
   "shadows": "kafka.client_async.KafkaClient"
  },
  "type": "import"
 },
 "kafka.consumer.group.KafkaConfigurationError": {
  "data": {
   "shadows": "kafka.errors.KafkaConfigurationError"
  },
  "type": "import"
 },
 "kafka.consumer.group.KafkaConsumer": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "float",
    "kafka.client_async.selectors.DefaultSelector",
    "kafka.consumer.group.socket",
    "kafka.coordinator.assignors.range.RangePartitionAssignor",
    "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor",
    "kafka.vendor.six.Iterator",
    "kafka.version.__version__"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.group.KafkaConsumer.__init__": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "float",
    "int",
    "isinstance",
    "kafka.client_async.KafkaClient",
    "kafka.consumer.fetcher.Fetcher",
    "kafka.consumer.group.copy",
    "kafka.consumer.group.log",
    "kafka.consumer.subscription_state.SubscriptionState",
    "kafka.coordinator.consumer.ConsumerCoordinator",
    "kafka.errors.KafkaConfigurationError",
    "kafka.metrics.MetricConfig",
    "kafka.metrics.Metrics",
    "map",
    "reporter",
    "set",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.__iter__": {
  "data": {
   "lineno": 1181
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.__next__": {
  "data": {
   "lineno": 1184,
   "symbols_in_volume": [
    "StopIteration"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._fetch_all_topic_metadata": {
  "data": {
   "lineno": 569
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._message_generator": {
  "data": {
   "lineno": 1133,
   "symbols_in_volume": [
    "kafka.consumer.group.log",
    "kafka.consumer.group.time",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._message_generator_v2": {
  "data": {
   "lineno": 1114,
   "symbols_in_volume": [
    "kafka.consumer.group.log",
    "kafka.consumer.group.time",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._next_timeout": {
  "data": {
   "lineno": 1175,
   "symbols_in_volume": [
    "kafka.consumer.group.time",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._poll_once": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": [
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._set_consumer_timeout": {
  "data": {
   "lineno": 1217,
   "symbols_in_volume": [
    "kafka.consumer.group.time"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._update_fetch_positions": {
  "data": {
   "lineno": 1084
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer._use_consumer_group": {
  "data": {
   "lineno": 1074
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.assign": {
  "data": {
   "lineno": 400
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.assignment": {
  "data": {
   "lineno": 428
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.beginning_offsets": {
  "data": {
   "lineno": 1021
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.bootstrap_connected": {
  "data": {
   "lineno": 396
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.close": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "AttributeError",
    "kafka.consumer.group.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.commit": {
  "data": {
   "lineno": 503
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.commit_async": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "kafka.consumer.group.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.committed": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.end_offsets": {
  "data": {
   "lineno": 1047
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.highwater": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.metrics": {
  "data": {
   "lineno": 953,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.next_v1": {
  "data": {
   "lineno": 1206,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.next_v2": {
  "data": {
   "lineno": 1195,
   "symbols_in_volume": [
    "StopIteration",
    "kafka.consumer.group.time",
    "next"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.offsets_for_times": {
  "data": {
   "lineno": 975,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "kafka.errors.UnsupportedVersionError",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.partitions_for_topic": {
  "data": {
   "lineno": 594
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.pause": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "isinstance",
    "kafka.consumer.group.log",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.paused": {
  "data": {
   "lineno": 775
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.poll": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "kafka.consumer.group.time"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.position": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.resume": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "isinstance",
    "kafka.consumer.group.log",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.seek": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "isinstance",
    "kafka.consumer.group.log",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.seek_to_beginning": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "isinstance",
    "kafka.consumer.group.log",
    "kafka.protocol.offset.OffsetResetStrategy.EARLIEST",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.seek_to_end": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "isinstance",
    "kafka.consumer.group.log",
    "kafka.protocol.offset.OffsetResetStrategy.LATEST",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.subscribe": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "kafka.consumer.group.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.subscription": {
  "data": {
   "lineno": 933
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.topics": {
  "data": {
   "lineno": 583
  },
  "type": "function"
 },
 "kafka.consumer.group.KafkaConsumer.unsubscribe": {
  "data": {
   "lineno": 943,
   "symbols_in_volume": [
    "kafka.consumer.group.log"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.group.MetricConfig": {
  "data": {
   "shadows": "kafka.metrics.MetricConfig"
  },
  "type": "import"
 },
 "kafka.consumer.group.Metrics": {
  "data": {
   "shadows": "kafka.metrics.Metrics"
  },
  "type": "import"
 },
 "kafka.consumer.group.OffsetResetStrategy": {
  "data": {
   "shadows": "kafka.protocol.offset.OffsetResetStrategy"
  },
  "type": "import"
 },
 "kafka.consumer.group.RangePartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.range.RangePartitionAssignor"
  },
  "type": "import"
 },
 "kafka.consumer.group.RoundRobinPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.consumer.group.SubscriptionState": {
  "data": {
   "shadows": "kafka.consumer.subscription_state.SubscriptionState"
  },
  "type": "import"
 },
 "kafka.consumer.group.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.consumer.group.UnsupportedVersionError": {
  "data": {
   "shadows": "kafka.errors.UnsupportedVersionError"
  },
  "type": "import"
 },
 "kafka.consumer.group.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.consumer.group.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.consumer.group.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.consumer.group.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.consumer.group.log": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "kafka.consumer.group.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.consumer.group.selectors": {
  "data": {
   "shadows": "kafka.client_async.selectors"
  },
  "type": "import"
 },
 "kafka.consumer.group.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.consumer.group.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.consumer.group.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.consumer.subscription_state.logging"
   ]
  },
  "type": "module"
 },
 "kafka.consumer.subscription_state.ConsumerRebalanceListener": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "kafka.consumer.subscription_state.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.subscription_state.ConsumerRebalanceListener.on_partitions_assigned": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": [
    "kafka.consumer.subscription_state.abc"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.ConsumerRebalanceListener.on_partitions_revoked": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "kafka.consumer.subscription_state.abc"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.IllegalStateError": {
  "data": {
   "shadows": "kafka.errors.IllegalStateError"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.OffsetAndMetadata": {
  "data": {
   "shadows": "kafka.structs.OffsetAndMetadata"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.OffsetResetStrategy": {
  "data": {
   "shadows": "kafka.protocol.offset.OffsetResetStrategy"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.SubscriptionState": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "kafka.consumer.subscription_state.re",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.subscription_state.SubscriptionState.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "AttributeError",
    "dict",
    "getattr",
    "kafka.consumer.subscription_state.log",
    "kafka.protocol.offset.OffsetResetStrategy",
    "kafka.protocol.offset.OffsetResetStrategy.NONE",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState._add_assigned_partition": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "TopicPartitionState"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState._ensure_valid_topic_name": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "isinstance",
    "kafka.vendor.six.string_types",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.all_consumed_offsets": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "kafka.structs.OffsetAndMetadata",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.assign_from_subscribed": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "ValueError",
    "kafka.consumer.subscription_state.log",
    "kafka.errors.IllegalStateError"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.assign_from_user": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "kafka.errors.IllegalStateError",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.assigned_partitions": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.change_subscription": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "isinstance",
    "kafka.consumer.subscription_state.log",
    "kafka.errors.IllegalStateError",
    "kafka.vendor.six.string_types",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.fetchable_partitions": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.group_subscribe": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "kafka.errors.IllegalStateError"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.group_subscription": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.has_all_fetch_positions": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.has_default_offset_reset_policy": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "kafka.protocol.offset.OffsetResetStrategy.NONE"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.is_assigned": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.is_fetchable": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.is_offset_reset_needed": {
  "data": {
   "lineno": 340
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.is_paused": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.missing_fetch_positions": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.need_offset_reset": {
  "data": {
   "lineno": 325
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.partitions_auto_assigned": {
  "data": {
   "lineno": 313
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.pause": {
  "data": {
   "lineno": 365
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.paused_partitions": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.reset_group_subscription": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "kafka.errors.IllegalStateError"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.resume": {
  "data": {
   "lineno": 368
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.seek": {
  "data": {
   "lineno": 281
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.subscribe": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "kafka.consumer.subscription_state.log",
    "kafka.consumer.subscription_state.re",
    "kafka.errors.IllegalStateError",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.SubscriptionState.unsubscribe": {
  "data": {
   "lineno": 259
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "object",
    "property"
   ]
  },
  "type": "class"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.__init__": {
  "data": {
   "lineno": 376
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState._get_position": {
  "data": {
   "lineno": 393
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState._set_position": {
  "data": {
   "lineno": 389
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.await_reset": {
  "data": {
   "lineno": 398
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.is_fetchable": {
  "data": {
   "lineno": 419
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.pause": {
  "data": {
   "lineno": 413
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.resume": {
  "data": {
   "lineno": 416
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.TopicPartitionState.seek": {
  "data": {
   "lineno": 405
  },
  "type": "function"
 },
 "kafka.consumer.subscription_state.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.log": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.consumer.subscription_state.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "kafka.consumer.subscription_state.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.assignors": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.assignors.abstract": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.coordinator.assignors.abstract.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor.assign": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor.metadata": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor.name": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor.on_assignment": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.abstract.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.abstract.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.abstract.log": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.abstract.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.coordinator.assignors.range.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.assignors.range.AbstractPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.ConsumerProtocolMemberAssignment": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.ConsumerProtocolMemberMetadata": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.RangePartitionAssignor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.range.RangePartitionAssignor.assign": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "classmethod",
    "dict",
    "enumerate",
    "kafka.coordinator.assignors.range.collections",
    "kafka.coordinator.assignors.range.log",
    "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment",
    "kafka.vendor.six.iteritems",
    "len",
    "list",
    "min",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.range.RangePartitionAssignor.metadata": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.range.RangePartitionAssignor.on_assignment": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.range.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.log": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.range.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.range.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.coordinator.assignors.roundrobin.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.assignors.roundrobin.AbstractPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.ConsumerProtocolMemberAssignment": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.ConsumerProtocolMemberMetadata": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor.assign": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.assignors.roundrobin.collections",
    "kafka.coordinator.assignors.roundrobin.itertools",
    "kafka.coordinator.assignors.roundrobin.log",
    "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment",
    "kafka.structs.TopicPartition",
    "kafka.vendor.six.itervalues",
    "list",
    "next",
    "set",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor.metadata": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor.on_assignment": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.roundrobin.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.log": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.roundrobin.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.roundrobin.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.assignors.sticky.partition_movements": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "collections.namedtuple",
    "kafka.coordinator.assignors.sticky.partition_movements.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.ConsumerPair": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements": {
  "data": {
   "lineno": 36
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "collections.defaultdict",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements._add_partition_movement_record": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements._has_cycles": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.coordinator.assignors.sticky.partition_movements.log",
    "len",
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements._is_linked": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.coordinator.assignors.sticky.partition_movements.ConsumerPair"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements._is_subcycle": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.coordinator.assignors.sticky.partition_movements.is_sublist",
    "len",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements._remove_movement_record_of_partition": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements.are_sticky": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.partition_movements.log",
    "kafka.vendor.six.iteritems",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements.get_partition_to_be_moved": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "iter",
    "kafka.coordinator.assignors.sticky.partition_movements.ConsumerPair",
    "next"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements.move_partition": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.partition_movements.ConsumerPair"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.is_sublist": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.log": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.partition_movements.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sorted_set": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet": {
  "data": {
   "lineno": 1
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.__contains__": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.__init__": {
  "data": {
   "lineno": 2,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.__iter__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "iter",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet._bool": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.add": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.first": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.last": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.pop_last": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sorted_set.SortedSet.remove": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "collections.namedtuple",
    "kafka.coordinator.assignors.sticky.sticky_assignor.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.AbstractPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.ClusterMetadata": {
  "data": {
   "shadows": "kafka.cluster.ClusterMetadata"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.ConsumerGenerationPair": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.ConsumerProtocolMemberAssignment": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.ConsumerProtocolMemberMetadata": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.PartitionMovements": {
  "data": {
   "shadows": "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.Schema": {
  "data": {
   "shadows": "kafka.coordinator.protocol.Schema"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.SortedSet": {
  "data": {
   "shadows": "kafka.coordinator.assignors.sticky.sorted_set.SortedSet"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor": {
  "data": {
   "lineno": 68
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor.__init__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "collections.defaultdict",
    "kafka.coordinator.assignors.sticky.partition_movements.PartitionMovements",
    "kafka.coordinator.assignors.sticky.sorted_set.SortedSet",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._add_consumer_to_current_subscriptions_and_maintain_order": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._are_subscriptions_identical": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.has_identical_list_elements",
    "kafka.vendor.six.itervalues",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._assign_partition": {
  "data": {
   "lineno": 379
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._can_consumer_participate_in_reassignment": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._can_partition_participate_in_reassignment": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._get_balance_score": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "abs",
    "kafka.vendor.six.iteritems",
    "len",
    "set",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._get_consumer_with_least_subscriptions": {
  "data": {
   "lineno": 332
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._get_consumer_with_most_subscriptions": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._init_current_assignments": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.ConsumerGenerationPair",
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "kafka.vendor.six.iteritems",
    "len",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._initialize": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "kafka.structs.TopicPartition",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._initialize_current_subscriptions": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sorted_set.SortedSet",
    "kafka.coordinator.assignors.sticky.sticky_assignor.subscriptions_comparator_key",
    "kafka.vendor.six.iteritems",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._is_balanced": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "kafka.vendor.six.iteritems",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._move_partition": {
  "data": {
   "lineno": 465
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._perform_reassignments": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._populate_partitions_to_reassign": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._populate_sorted_partitions": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.coordinator.assignors.sticky.sorted_set.SortedSet",
    "kafka.coordinator.assignors.sticky.sticky_assignor.partitions_comparator_key",
    "kafka.coordinator.assignors.sticky.sticky_assignor.subscriptions_comparator_key",
    "kafka.vendor.six.iteritems",
    "kafka.vendor.six.iterkeys",
    "set",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._reassign_partition": {
  "data": {
   "lineno": 450
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._reassign_partition_to_consumer": {
  "data": {
   "lineno": 459
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor._remove_consumer_from_current_subscriptions_and_maintain_order": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor.balance": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "copy.deepcopy",
    "kafka.coordinator.assignors.sticky.sticky_assignor.remove_if_present",
    "kafka.vendor.six.iteritems",
    "kafka.vendor.six.iterkeys",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor.get_final_assignment": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "collections.defaultdict",
    "kafka.vendor.six.iteritems",
    "kafka.vendor.six.viewitems",
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor.perform_initial_assignment": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignorMemberMetadataV1": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignorUserDataV1": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "kafka.coordinator.protocol.Schema",
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.abstract.AbstractPartitionAssignor"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor.assign": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignmentExecutor",
    "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment",
    "kafka.vendor.six.iteritems",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor.metadata": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "classmethod",
    "collections.defaultdict",
    "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignorUserDataV1",
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata",
    "kafka.vendor.six.iteritems",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor.on_assignment": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.assignors.sticky.sticky_assignor.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor.on_generation_assignment": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": [
    "classmethod",
    "kafka.coordinator.assignors.sticky.sticky_assignor.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor.parse_member_metadata": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": [
    "Exception",
    "classmethod",
    "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignorMemberMetadataV1",
    "kafka.coordinator.assignors.sticky.sticky_assignor.StickyAssignorUserDataV1",
    "kafka.coordinator.assignors.sticky.sticky_assignor.log",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.Struct": {
  "data": {
   "shadows": "kafka.protocol.struct.Struct"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.has_identical_list_elements": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.log": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.partitions_comparator_key": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.remove_if_present": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "KeyError",
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.assignors.sticky.sticky_assignor.subscriptions_comparator_key": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base": {
  "data": {
   "symbols_in_volume": [
    "kafka.coordinator.base.Generation",
    "kafka.coordinator.base.logging",
    "kafka.protocol.commit.OffsetCommitRequest.DEFAULT_GENERATION_ID",
    "kafka.protocol.group.JoinGroupRequest.UNKNOWN_MEMBER_ID"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.base.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.coordinator.base.BaseCoordinator": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.BaseCoordinator.__del__": {
  "data": {
   "lineno": 755
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.__init__": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "GroupCoordinatorMetrics",
    "kafka.coordinator.base.Generation",
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.copy",
    "kafka.coordinator.base.threading",
    "kafka.coordinator.heartbeat.Heartbeat",
    "kafka.errors.KafkaConfigurationError"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._close_heartbeat_thread": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": [
    "ReferenceError",
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._failed_request": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "isinstance",
    "kafka.coordinator.base.log",
    "kafka.errors.NodeNotReadyError",
    "kafka.errors.TooManyInFlightRequests"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_group_coordinator_response": {
  "data": {
   "lineno": 679,
   "symbols_in_volume": [
    "error_type",
    "kafka.coordinator.base.log",
    "kafka.errors.GroupAuthorizationFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.IllegalStateError",
    "kafka.errors.NoError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_heartbeat_response": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": [
    "error_type",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time",
    "kafka.errors.GroupAuthorizationFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.IllegalGenerationError",
    "kafka.errors.NoError",
    "kafka.errors.NotCoordinatorForGroupError",
    "kafka.errors.RebalanceInProgressError",
    "kafka.errors.UnknownMemberIdError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_join_failure": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "kafka.coordinator.base.MemberState"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_join_group_response": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "error_type",
    "error_type.__name__",
    "kafka.coordinator.base.Generation",
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.UnjoinedGroupException",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time",
    "kafka.errors.GroupAuthorizationFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.GroupLoadInProgressError",
    "kafka.errors.InconsistentGroupProtocolError",
    "kafka.errors.InvalidGroupIdError",
    "kafka.errors.InvalidSessionTimeoutError",
    "kafka.errors.NoError",
    "kafka.errors.NotCoordinatorForGroupError",
    "kafka.errors.UnknownMemberIdError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_join_success": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_leave_group_response": {
  "data": {
   "lineno": 783,
   "symbols_in_volume": [
    "error_type",
    "kafka.coordinator.base.log",
    "kafka.errors.NoError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._handle_sync_group_response": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "error_type",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time",
    "kafka.errors.GroupAuthorizationFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.IllegalGenerationError",
    "kafka.errors.NoError",
    "kafka.errors.NotCoordinatorForGroupError",
    "kafka.errors.RebalanceInProgressError",
    "kafka.errors.UnknownMemberIdError",
    "kafka.errors.for_code"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._on_join_complete": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "kafka.coordinator.base.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._on_join_follower": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "kafka.coordinator.base.log",
    "kafka.protocol.group.SyncGroupRequest"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._on_join_leader": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": [
    "Exception",
    "bytes",
    "isinstance",
    "kafka.coordinator.base.log",
    "kafka.future.Future",
    "kafka.protocol.group.SyncGroupRequest",
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._on_join_prepare": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "kafka.coordinator.base.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._perform_assignment": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "kafka.coordinator.base.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._rejoin_incomplete": {
  "data": {
   "lineno": 428
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._reset_find_coordinator_future": {
  "data": {
   "lineno": 271
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._send_group_coordinator_request": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "kafka.coordinator.base.log",
    "kafka.errors.NoBrokersAvailable",
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future",
    "kafka.protocol.commit.GroupCoordinatorRequest"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._send_heartbeat_request": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future",
    "kafka.protocol.group.HeartbeatRequest"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._send_join_group_request": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "bytes",
    "isinstance",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.KafkaError",
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future",
    "kafka.protocol.group.JoinGroupRequest"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._send_sync_group_request": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": [
    "kafka.coordinator.base.time",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.future.Future"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator._start_heartbeat_thread": {
  "data": {
   "lineno": 739,
   "symbols_in_volume": [
    "HeartbeatThread",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.weakref"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.close": {
  "data": {
   "lineno": 758
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.coordinator": {
  "data": {
   "lineno": 228
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.coordinator_dead": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.coordinator_unknown": {
  "data": {
   "lineno": 218
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.ensure_active_group": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "isinstance",
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.time",
    "kafka.errors.IllegalGenerationError",
    "kafka.errors.RebalanceInProgressError",
    "kafka.errors.UnknownMemberIdError"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.ensure_coordinator_ready": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "getattr",
    "kafka.coordinator.base.log",
    "kafka.coordinator.base.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.generation": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "kafka.coordinator.base.MemberState"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.group_protocols": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "kafka.coordinator.base.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.lookup_coordinator": {
  "data": {
   "lineno": 274
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.maybe_leave_group": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "kafka.coordinator.base.Generation",
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.log",
    "kafka.protocol.group.LeaveGroupRequest"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.need_rejoin": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.poll_heartbeat": {
  "data": {
   "lineno": 296
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.protocol_type": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "kafka.coordinator.base.abc"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.request_rejoin": {
  "data": {
   "lineno": 736
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.reset_generation": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": [
    "kafka.coordinator.base.Generation",
    "kafka.coordinator.base.MemberState"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.BaseCoordinator.time_to_next_heartbeat": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "float",
    "kafka.coordinator.base.MemberState"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.Count"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Generation": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.Generation.__init__": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "kafka.coordinator.base.GroupCoordinatorMetrics": {
  "data": {
   "lineno": 853,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.GroupCoordinatorMetrics.__init__": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": [
    "kafka.metrics.AnonMeasurable",
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Count",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.GroupCoordinatorRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.GroupCoordinatorRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Heartbeat": {
  "data": {
   "shadows": "kafka.coordinator.heartbeat.Heartbeat"
  },
  "type": "import"
 },
 "kafka.coordinator.base.HeartbeatRequest": {
  "data": {
   "shadows": "kafka.protocol.group.HeartbeatRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.HeartbeatThread": {
  "data": {
   "lineno": 904,
   "symbols_in_volume": [
    "kafka.coordinator.base.threading"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.HeartbeatThread.__init__": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": [
    "kafka.coordinator.base.HeartbeatThread",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread._handle_heartbeat_failure": {
  "data": {
   "lineno": 1011,
   "symbols_in_volume": [
    "isinstance",
    "kafka.errors.RebalanceInProgressError"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread._handle_heartbeat_success": {
  "data": {
   "lineno": 1007
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread._run_once": {
  "data": {
   "lineno": 948,
   "symbols_in_volume": [
    "kafka.coordinator.base.MemberState",
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread.close": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": [
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread.disable": {
  "data": {
   "lineno": 919
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread.enable": {
  "data": {
   "lineno": 913
  },
  "type": "function"
 },
 "kafka.coordinator.base.HeartbeatThread.run": {
  "data": {
   "lineno": 931,
   "symbols_in_volume": [
    "ReferenceError",
    "RuntimeError",
    "kafka.coordinator.base.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.base.JoinGroupRequest": {
  "data": {
   "shadows": "kafka.protocol.group.JoinGroupRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.LeaveGroupRequest": {
  "data": {
   "shadows": "kafka.protocol.group.LeaveGroupRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.Max"
  },
  "type": "import"
 },
 "kafka.coordinator.base.MemberState": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.OffsetCommitRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.OffsetCommitRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.coordinator.base.SyncGroupRequest": {
  "data": {
   "shadows": "kafka.protocol.group.SyncGroupRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.base.UnjoinedGroupException": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.base.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.coordinator.base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.base.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.coordinator.base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.coordinator.base.log": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "kafka.coordinator.base.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.base.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.base.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.coordinator.base.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.coordinator.base.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.coordinator.consumer.logging"
   ]
  },
  "type": "module"
 },
 "kafka.coordinator.consumer.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.BaseCoordinator": {
  "data": {
   "shadows": "kafka.coordinator.base.BaseCoordinator"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "kafka.coordinator.assignors.range.RangePartitionAssignor",
    "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor",
    "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor",
    "kafka.coordinator.base.BaseCoordinator"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.__del__": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "hasattr",
    "kafka.coordinator.consumer.ConsumerCoordinator",
    "kafka.util.WeakMethod",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.__init__": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ConsumerCoordinatorMetrics",
    "kafka.coordinator.consumer.ConsumerCoordinator",
    "kafka.coordinator.consumer.collections",
    "kafka.coordinator.consumer.copy",
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.consumer.time",
    "kafka.errors.KafkaConfigurationError",
    "kafka.util.WeakMethod",
    "set",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._auto_assign_all_partitions": {
  "data": {
   "lineno": 190
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._build_metadata_snapshot": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._commit_offsets_async_on_complete": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "getattr",
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.consumer.time",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._default_offset_commit_callback": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.log"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._do_commit_offsets_async": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "all",
    "callback",
    "isinstance",
    "kafka.structs.OffsetAndMetadata",
    "kafka.structs.TopicPartition",
    "map"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._handle_metadata_update": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.structs.TopicPartition",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._handle_offset_commit_response": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": [
    "error_type",
    "error_type.__name__",
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.consumer.time",
    "kafka.errors.CommitFailedError",
    "kafka.errors.GroupAuthorizationFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.GroupLoadInProgressError",
    "kafka.errors.IllegalGenerationError",
    "kafka.errors.InvalidCommitOffsetSizeError",
    "kafka.errors.NoError",
    "kafka.errors.NotCoordinatorForGroupError",
    "kafka.errors.OffsetMetadataTooLargeError",
    "kafka.errors.RebalanceInProgressError",
    "kafka.errors.RequestTimedOutError",
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.errors.UnknownMemberIdError",
    "kafka.errors.for_code",
    "kafka.structs.TopicPartition",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._handle_offset_fetch_response": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "error_type",
    "kafka.coordinator.consumer.log",
    "kafka.errors.GroupLoadInProgressError",
    "kafka.errors.NoError",
    "kafka.errors.NotCoordinatorForGroupError",
    "kafka.errors.UnknownTopicOrPartitionError",
    "kafka.errors.for_code",
    "kafka.structs.OffsetAndMetadata",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._invoke_completed_offset_commit_callbacks": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "callback"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._lookup_assignor": {
  "data": {
   "lineno": 207
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._maybe_auto_commit_offsets_async": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._maybe_auto_commit_offsets_sync": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "Exception",
    "kafka.coordinator.consumer.log",
    "kafka.errors.IllegalGenerationError",
    "kafka.errors.RebalanceInProgressError",
    "kafka.errors.UnknownMemberIdError"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._on_join_complete": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "Exception",
    "ValueError",
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.consumer.time",
    "kafka.coordinator.protocol.ConsumerProtocol.ASSIGNMENT.decode",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._on_join_prepare": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "Exception",
    "kafka.coordinator.consumer.log",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._perform_assignment": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.protocol.ConsumerProtocol.METADATA.decode",
    "kafka.vendor.six.iteritems",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._send_offset_commit_request": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "all",
    "dict",
    "isinstance",
    "kafka.coordinator.base.Generation.NO_GENERATION",
    "kafka.coordinator.consumer.collections",
    "kafka.coordinator.consumer.log",
    "kafka.coordinator.consumer.time",
    "kafka.errors.CommitFailedError",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.future.Future",
    "kafka.protocol.commit.OffsetCommitRequest",
    "kafka.protocol.commit.OffsetCommitRequest.DEFAULT_RETENTION_TIME",
    "kafka.structs.OffsetAndMetadata",
    "kafka.structs.TopicPartition",
    "kafka.vendor.six.iteritems",
    "map"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator._send_offset_fetch_request": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": [
    "all",
    "isinstance",
    "kafka.coordinator.consumer.collections",
    "kafka.coordinator.consumer.log",
    "kafka.errors.GroupCoordinatorNotAvailableError",
    "kafka.errors.NodeNotReadyError",
    "kafka.future.Future",
    "kafka.protocol.commit.OffsetFetchRequest",
    "kafka.structs.TopicPartition",
    "list",
    "map",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.close": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.ConsumerCoordinator",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.commit_offsets_async": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "callback",
    "kafka.coordinator.consumer.functools"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.commit_offsets_sync": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "all",
    "isinstance",
    "kafka.coordinator.consumer.time",
    "kafka.structs.OffsetAndMetadata",
    "kafka.structs.TopicPartition",
    "map"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.fetch_committed_offsets": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.group_protocols": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "kafka.errors.IllegalStateError",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.need_rejoin": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.ConsumerCoordinator",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.poll": {
  "data": {
   "lineno": 258
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.protocol_type": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "kafka.coordinator.protocol.ConsumerProtocol.PROTOCOL_TYPE"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.refresh_committed_offsets_if_needed": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinator.time_to_next_poll": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "kafka.coordinator.consumer.time",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerCoordinatorMetrics": {
  "data": {
   "lineno": 812,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.consumer.ConsumerCoordinatorMetrics.__init__": {
  "data": {
   "lineno": 813,
   "symbols_in_volume": [
    "kafka.metrics.AnonMeasurable",
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Count",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.consumer.ConsumerProtocol": {
  "data": {
   "shadows": "kafka.coordinator.protocol.ConsumerProtocol"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.Count"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Generation": {
  "data": {
   "shadows": "kafka.coordinator.base.Generation"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.Max"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.OffsetAndMetadata": {
  "data": {
   "shadows": "kafka.structs.OffsetAndMetadata"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.OffsetCommitRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.OffsetCommitRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.OffsetFetchRequest": {
  "data": {
   "shadows": "kafka.protocol.commit.OffsetFetchRequest"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.RangePartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.range.RangePartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.RoundRobinPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.StickyPartitionAssignor": {
  "data": {
   "shadows": "kafka.coordinator.assignors.sticky.sticky_assignor.StickyPartitionAssignor"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.WeakMethod": {
  "data": {
   "shadows": "kafka.util.WeakMethod"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.log": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "kafka.coordinator.consumer.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.coordinator.consumer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.coordinator.heartbeat": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.heartbeat.Heartbeat": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.heartbeat.Heartbeat.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "kafka.coordinator.heartbeat.copy",
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.fail_heartbeat": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.poll": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.poll_timeout_expired": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.received_heartbeat": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.reset_timeouts": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.sent_heartbeat": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.session_timeout_expired": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.should_heartbeat": {
  "data": {
   "lineno": 55
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.Heartbeat.time_to_next_heartbeat": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "kafka.coordinator.heartbeat.time",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.heartbeat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.coordinator.heartbeat.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.coordinator.heartbeat.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.coordinator.heartbeat.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol": {
  "data": {},
  "type": "module"
 },
 "kafka.coordinator.protocol.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.ConsumerProtocol": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment",
    "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.protocol.ConsumerProtocolMemberAssignment.partitions": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.coordinator.protocol.ConsumerProtocolMemberMetadata": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.coordinator.protocol.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.Struct": {
  "data": {
   "shadows": "kafka.protocol.struct.Struct"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.coordinator.protocol.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.errors": {
  "data": {
   "symbols_in_volume": [
    "dict",
    "kafka.errors.CorruptRecordException",
    "kafka.errors.FailedPayloadsError",
    "kafka.errors.KafkaConnectionError",
    "kafka.errors.KafkaUnavailableError",
    "kafka.errors.LeaderNotAvailableError",
    "kafka.errors.NotLeaderForPartitionError",
    "kafka.errors.RETRY_BACKOFF_ERROR_TYPES",
    "kafka.errors.RETRY_REFRESH_ERROR_TYPES",
    "kafka.errors.UnknownTopicOrPartitionError",
    "kafka.errors._iter_broker_errors"
   ]
  },
  "type": "module"
 },
 "kafka.errors.AsyncProducerQueueFull": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.AsyncProducerQueueFull.__init__": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "kafka.errors.AsyncProducerQueueFull",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.errors.AuthenticationFailedError": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.AuthenticationMethodNotSupported": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.BrokerNotAvailableError": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.BrokerResponseError": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.BrokerResponseError.__str__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.errors.Cancelled": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.ClusterAuthorizationFailedError": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.CommitFailedError": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.CommitFailedError.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "kafka.errors.CommitFailedError",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.errors.CorrelationIdError": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "kafka.errors.KafkaProtocolError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.CorruptRecordException": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.FailedPayloadsError": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.FailedPayloadsError.__init__": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "kafka.errors.FailedPayloadsError",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.errors.GroupAuthorizationFailedError": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.GroupCoordinatorNotAvailableError": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.GroupIdNotFoundError": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.GroupLoadInProgressError": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.IllegalArgumentError": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.IllegalGenerationError": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.IllegalSaslStateError": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.IllegalStateError": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.IncompatibleBrokerVersion": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InconsistentGroupProtocolError": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidCommitOffsetSizeError": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidConfigurationError": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidFetchRequestError": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidGroupIdError": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidMessageError": {
  "data": {
   "lineno": 130
  },
  "type": "constant"
 },
 "kafka.errors.InvalidPartitionsError": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidReplicationAssignmentError": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidReplicationFactorError": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidRequestError": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidRequiredAcksError": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidSessionTimeoutError": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidTimestampError": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.InvalidTopicError": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaConfigurationError": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaConnectionError": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaError": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "RuntimeError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaError.__str__": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "kafka.errors.KafkaError",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.errors.KafkaProtocolError": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaTimeoutError": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.KafkaUnavailableError": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.LeaderNotAvailableError": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.MessageSizeTooLargeError": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.MetadataEmptyBrokerList": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NoBrokersAvailable": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NoError": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NodeNotReadyError": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NonEmptyGroupError": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NotControllerError": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NotCoordinatorForGroupError": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NotEnoughReplicasAfterAppendError": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NotEnoughReplicasError": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.NotLeaderForPartitionError": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.OffsetMetadataTooLargeError": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.OffsetOutOfRangeError": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.PolicyViolationError": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.ProtocolError": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.QuotaViolationError": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.RETRY_BACKOFF_ERROR_TYPES": {
  "data": {
   "lineno": 526
  },
  "type": "constant"
 },
 "kafka.errors.RETRY_ERROR_TYPES": {
  "data": {
   "lineno": 538
  },
  "type": "constant"
 },
 "kafka.errors.RETRY_REFRESH_ERROR_TYPES": {
  "data": {
   "lineno": 532
  },
  "type": "constant"
 },
 "kafka.errors.RebalanceInProgressError": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.RecordListTooLargeError": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.ReplicaNotAvailableError": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.RequestTimedOutError": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.SecurityDisabledError": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.StaleControllerEpochError": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.StaleLeaderEpochCodeError": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.StaleMetadata": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.TooManyInFlightRequests": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.TopicAlreadyExistsError": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.TopicAuthorizationFailedError": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnknownError": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnknownMemberIdError": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnknownTopicOrPartitionError": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnrecognizedBrokerVersion": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnsupportedCodecError": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "kafka.errors.KafkaError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnsupportedForMessageFormatError": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnsupportedSaslMechanismError": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors.UnsupportedVersionError": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "kafka.errors.BrokerResponseError"
   ]
  },
  "type": "class"
 },
 "kafka.errors._iter_broker_errors": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "__name__",
    "issubclass",
    "kafka.errors.BrokerResponseError",
    "kafka.errors.inspect",
    "kafka.errors.sys"
   ]
  },
  "type": "function"
 },
 "kafka.errors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.errors.check_error": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "Exception",
    "error_class",
    "isinstance",
    "kafka.errors.UnknownError",
    "kafka.errors.kafka_errors"
   ]
  },
  "type": "function"
 },
 "kafka.errors.for_code": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "kafka.errors.UnknownError",
    "kafka.errors.kafka_errors"
   ]
  },
  "type": "function"
 },
 "kafka.errors.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "kafka.errors.kafka_errors": {
  "data": {
   "lineno": 511
  },
  "type": "constant"
 },
 "kafka.errors.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.future": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.future.logging"
   ]
  },
  "type": "module"
 },
 "kafka.future.Future": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.future.Future.__init__": {
  "data": {
   "lineno": 12
  },
  "type": "function"
 },
 "kafka.future.Future._call_backs": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "Exception",
    "e",
    "f",
    "kafka.future.log"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.add_both": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "kafka.future.Future.add_callback": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "kafka.future.functools"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.add_errback": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "kafka.future.functools"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.chain": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "kafka.future.Future.failed": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.failure": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "BaseException",
    "e",
    "isinstance",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.retriable": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.succeeded": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "bool"
   ]
  },
  "type": "function"
 },
 "kafka.future.Future.success": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "kafka.future.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.future.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "kafka.future.log": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.future.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.metrics": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.measurable.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.DictReporter": {
  "data": {
   "shadows": "kafka.metrics.dict_reporter.DictReporter"
  },
  "type": "import"
 },
 "kafka.metrics.KafkaMetric": {
  "data": {
   "shadows": "kafka.metrics.kafka_metric.KafkaMetric"
  },
  "type": "import"
 },
 "kafka.metrics.MetricConfig": {
  "data": {
   "shadows": "kafka.metrics.metric_config.MetricConfig"
  },
  "type": "import"
 },
 "kafka.metrics.MetricName": {
  "data": {
   "shadows": "kafka.metrics.metric_name.MetricName"
  },
  "type": "import"
 },
 "kafka.metrics.Metrics": {
  "data": {
   "shadows": "kafka.metrics.metrics.Metrics"
  },
  "type": "import"
 },
 "kafka.metrics.NamedMeasurable": {
  "data": {
   "shadows": "kafka.metrics.compound_stat.NamedMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.Quota": {
  "data": {
   "shadows": "kafka.metrics.quota.Quota"
  },
  "type": "import"
 },
 "kafka.metrics.__all__": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "kafka.metrics.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.compound_stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.compound_stat.AbstractCompoundStat": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.metrics.compound_stat.abc",
    "kafka.metrics.stat.AbstractStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.compound_stat.AbstractCompoundStat.stats": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.compound_stat.AbstractStat": {
  "data": {
   "shadows": "kafka.metrics.stat.AbstractStat"
  },
  "type": "import"
 },
 "kafka.metrics.compound_stat.NamedMeasurable": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.compound_stat.NamedMeasurable.__init__": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "kafka.metrics.compound_stat.NamedMeasurable.name": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.compound_stat.NamedMeasurable.stat": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.compound_stat.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.compound_stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.dict_reporter": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.metrics.dict_reporter.logging"
   ]
  },
  "type": "module"
 },
 "kafka.metrics.dict_reporter.AbstractMetricsReporter": {
  "data": {
   "shadows": "kafka.metrics.metrics_reporter.AbstractMetricsReporter"
  },
  "type": "import"
 },
 "kafka.metrics.dict_reporter.DictReporter": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "kafka.metrics.metrics_reporter.AbstractMetricsReporter"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.dict_reporter.DictReporter.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "kafka.metrics.dict_reporter.threading"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.close": {
  "data": {
   "lineno": 82
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.configure": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.get_category": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.init": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.metric_change": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.metric_removal": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.DictReporter.snapshot": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "dict",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.dict_reporter.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.dict_reporter.logger": {
  "data": {
   "lineno": 8
  },
  "type": "constant"
 },
 "kafka.metrics.dict_reporter.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.metrics.dict_reporter.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.metrics.kafka_metric": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.kafka_metric.KafkaMetric": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.kafka_metric.KafkaMetric.__init__": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.kafka_metric.KafkaMetric.config": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "kafka.metrics.kafka_metric.KafkaMetric.measurable": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.kafka_metric.KafkaMetric.metric_name": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.kafka_metric.KafkaMetric.value": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "kafka.metrics.kafka_metric.time"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.kafka_metric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.kafka_metric.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.metrics.measurable": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.measurable.AbstractMeasurable": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.measurable.AbstractMeasurable.measure": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.measurable.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.measurable.AnonMeasurable": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "kafka.metrics.measurable.AbstractMeasurable"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.measurable.AnonMeasurable.__init__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "kafka.metrics.measurable.AnonMeasurable.measure": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.measurable.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.measurable.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.measurable_stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.measurable_stat.AbstractMeasurable": {
  "data": {
   "shadows": "kafka.metrics.measurable.AbstractMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.measurable_stat.AbstractMeasurableStat": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "kafka.metrics.measurable.AbstractMeasurable",
    "kafka.metrics.measurable_stat.abc",
    "kafka.metrics.stat.AbstractStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.measurable_stat.AbstractStat": {
  "data": {
   "shadows": "kafka.metrics.stat.AbstractStat"
  },
  "type": "import"
 },
 "kafka.metrics.measurable_stat.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.measurable_stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.metric_config": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.metric_config.MetricConfig": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.metric_config.MetricConfig.__init__": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.metrics.metric_config.sys"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_config.MetricConfig.samples": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_config.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.metric_config.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.metrics.metric_name": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.metric_name.MetricName": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.metric_name.MetricName.__eq__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.__hash__": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "frozenset",
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "isinstance",
    "kafka.metrics.metric_name.copy"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.__ne__": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.__str__": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.description": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.group": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.name": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.MetricName.tags": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "kafka.metrics.metric_name.copy",
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metric_name.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.metric_name.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.metrics.metrics": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.metrics.metrics.logging"
   ]
  },
  "type": "module"
 },
 "kafka.metrics.metrics.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.KafkaMetric": {
  "data": {
   "shadows": "kafka.metrics.KafkaMetric"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.MetricConfig": {
  "data": {
   "shadows": "kafka.metrics.MetricConfig"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.MetricName": {
  "data": {
   "shadows": "kafka.metrics.MetricName"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.Metrics": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.metrics.Metrics.ExpireSensorTask": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.metrics.Metrics.ExpireSensorTask.run": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "kafka.metrics.metrics.logger",
    "list",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "kafka.metrics.AnonMeasurable",
    "kafka.metrics.MetricConfig",
    "kafka.metrics.metrics.threading",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.__init__.expire_loop": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "kafka.metrics.metrics.time"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.add_metric": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "kafka.metrics.KafkaMetric"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.add_reporter": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.close": {
  "data": {
   "lineno": 256
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.config": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.get_sensor": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.metric_name": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "dict",
    "kafka.metrics.MetricName"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.metrics": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.register_metric": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.remove_metric": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.remove_sensor": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "kafka.metrics.metrics.logger"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Metrics.sensor": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "kafka.metrics.metrics.logger",
    "kafka.metrics.metrics.sys",
    "kafka.metrics.stats.Sensor"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics.Sensor": {
  "data": {
   "shadows": "kafka.metrics.stats.Sensor"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.logger": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "kafka.metrics.metrics.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.metrics.metrics.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.metrics.metrics_reporter": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.metrics_reporter.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter.close": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.metrics_reporter.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter.configure": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.metrics_reporter.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter.init": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.metrics_reporter.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter.metric_change": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.metrics_reporter.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics_reporter.AbstractMetricsReporter.metric_removal": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.metrics_reporter.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.metrics_reporter.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.metrics_reporter.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.quota": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.quota.Quota": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.quota.Quota.__eq__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.__hash__": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.__init__": {
  "data": {
   "lineno": 6
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.__ne__": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.bound": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.is_acceptable": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.is_upper_bound": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.lower_bound": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kafka.metrics.quota.Quota",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.quota.Quota.upper_bound": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "kafka.metrics.quota.Quota",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.quota.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stat.AbstractStat": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.stat.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stat.AbstractStat.record": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.stat.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stat.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.avg.Avg"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Count": {
  "data": {
   "shadows": "kafka.metrics.stats.count.Count"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Histogram": {
  "data": {
   "shadows": "kafka.metrics.stats.histogram.Histogram"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.max_stat.Max"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Min": {
  "data": {
   "shadows": "kafka.metrics.stats.min_stat.Min"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Percentile": {
  "data": {
   "shadows": "kafka.metrics.stats.percentile.Percentile"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Percentiles": {
  "data": {
   "shadows": "kafka.metrics.stats.percentiles.Percentiles"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.rate.Rate"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Sensor": {
  "data": {
   "shadows": "kafka.metrics.stats.sensor.Sensor"
  },
  "type": "import"
 },
 "kafka.metrics.stats.Total": {
  "data": {
   "shadows": "kafka.metrics.stats.total.Total"
  },
  "type": "import"
 },
 "kafka.metrics.stats.__all__": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "kafka.metrics.stats.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.avg": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.avg.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.avg.Avg": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.avg.Avg.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "kafka.metrics.stats.avg.Avg",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.avg.Avg.combine": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.avg.Avg.update": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "kafka.metrics.stats.avg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.count": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.count.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.count.Count": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.count.Count.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "kafka.metrics.stats.count.Count",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.count.Count.combine": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "sum"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.count.Count.update": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "kafka.metrics.stats.count.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.histogram": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.histogram.Histogram": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.histogram.Histogram.ConstantBinScheme": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.histogram.Histogram.ConstantBinScheme.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "int"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.ConstantBinScheme.bins": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.ConstantBinScheme.from_bin": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.ConstantBinScheme.to_bin": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.LinearBinScheme": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.histogram.Histogram.LinearBinScheme.__init__": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.LinearBinScheme.bins": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.LinearBinScheme.from_bin": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.LinearBinScheme.to_bin": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "kafka.metrics.stats.histogram.math"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.__init__": {
  "data": {
   "lineno": 7
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.__str__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "enumerate",
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.clear": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.counts": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.record": {
  "data": {
   "lineno": 12
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.Histogram.value": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "enumerate",
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.histogram.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.histogram.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "kafka.metrics.stats.max_stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.max_stat.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.max_stat.Max": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.max_stat.Max.__init__": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "float",
    "kafka.metrics.stats.max_stat.Max",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.max_stat.Max.combine": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.max_stat.Max.update": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.max_stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.min_stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.min_stat.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.min_stat.Min": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.min_stat.Min.__init__": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "float",
    "kafka.metrics.stats.min_stat.Min",
    "kafka.metrics.stats.min_stat.sys",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.min_stat.Min.combine": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "float",
    "kafka.metrics.stats.min_stat.sys",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.min_stat.Min.update": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.min_stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.min_stat.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentile": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.percentile.Percentile": {
  "data": {
   "lineno": 4,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.percentile.Percentile.__init__": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentile.Percentile.name": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentile.Percentile.percentile": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentile.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.percentiles.AbstractCompoundStat": {
  "data": {
   "shadows": "kafka.metrics.compound_stat.AbstractCompoundStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles.BucketSizing": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.percentiles.Histogram": {
  "data": {
   "shadows": "kafka.metrics.stats.Histogram"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles.NamedMeasurable": {
  "data": {
   "shadows": "kafka.metrics.NamedMeasurable"
  },
  "type": "import"
 },
 "kafka.metrics.stats.percentiles.Percentiles": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kafka.metrics.compound_stat.AbstractCompoundStat",
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.percentiles.Percentiles.HistogramSample": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat.Sample"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.percentiles.Percentiles.HistogramSample.__init__": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "kafka.metrics.stats.Histogram",
    "kafka.metrics.stats.percentiles.Percentiles",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "kafka.metrics.stats.Histogram.ConstantBinScheme",
    "kafka.metrics.stats.Histogram.LinearBinScheme",
    "kafka.metrics.stats.percentiles.BucketSizing",
    "kafka.metrics.stats.percentiles.Percentiles",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.combine": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.new_sample": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "kafka.metrics.stats.percentiles.Percentiles"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.stats": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "kafka.metrics.AnonMeasurable",
    "kafka.metrics.NamedMeasurable",
    "make_measure_fn"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.stats.make_measure_fn": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.update": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.Percentiles.value": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "float",
    "range",
    "sum",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.percentiles.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.rate": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.rate.AbstractMeasurableStat": {
  "data": {
   "shadows": "kafka.metrics.measurable_stat.AbstractMeasurableStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.rate.AbstractSampledStat": {
  "data": {
   "shadows": "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.rate.Rate": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.metrics.measurable_stat.AbstractMeasurableStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.rate.Rate.__init__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "SampledTotal",
    "kafka.metrics.stats.rate.TimeUnit"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.Rate.convert": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "ValueError",
    "kafka.metrics.stats.rate.TimeUnit"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.Rate.measure": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.Rate.record": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.Rate.unit_name": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "kafka.metrics.stats.rate.TimeUnit"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.Rate.window_size": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.SampledTotal": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "kafka.metrics.stats.sampled_stat.AbstractSampledStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.rate.SampledTotal.__init__": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "ValueError",
    "kafka.metrics.stats.rate.SampledTotal",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.SampledTotal.combine": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "float",
    "sum"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.SampledTotal.update": {
  "data": {
   "lineno": 113
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.TimeUnit": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.rate.TimeUnit.get_name": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "kafka.metrics.stats.rate.TimeUnit",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.rate.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sampled_stat": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.sampled_stat.AbstractMeasurableStat": {
  "data": {
   "shadows": "kafka.metrics.measurable_stat.AbstractMeasurableStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.metrics.measurable_stat.AbstractMeasurableStat",
    "kafka.metrics.stats.sampled_stat.abc"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.Sample": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.Sample.__init__": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.Sample.is_complete": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.Sample.reset": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.__init__": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat._advance": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.combine": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.stats.sampled_stat.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.current": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.measure": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.new_sample": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.oldest": {
  "data": {
   "lineno": 57
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.purge_obsolete_samples": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.record": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.AbstractSampledStat.update": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "NotImplementedError",
    "kafka.metrics.stats.sampled_stat.abc"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sampled_stat.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sampled_stat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sensor": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.sensor.KafkaMetric": {
  "data": {
   "shadows": "kafka.metrics.KafkaMetric"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sensor.QuotaViolationError": {
  "data": {
   "shadows": "kafka.errors.QuotaViolationError"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sensor.Sensor": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.sensor.Sensor.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ValueError",
    "kafka.metrics.stats.sensor.threading",
    "kafka.metrics.stats.sensor.time",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor._check_forest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor._check_quotas": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "kafka.errors.QuotaViolationError"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.add": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "kafka.metrics.KafkaMetric"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.add_compound": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "ValueError",
    "kafka.metrics.KafkaMetric"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.has_expired": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "kafka.metrics.stats.sensor.time"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.metrics": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "property",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.name": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.Sensor.record": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "kafka.metrics.stats.sensor.time"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.sensor.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sensor.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.metrics.stats.sensor.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.metrics.stats.total": {
  "data": {},
  "type": "module"
 },
 "kafka.metrics.stats.total.AbstractMeasurableStat": {
  "data": {
   "shadows": "kafka.metrics.measurable_stat.AbstractMeasurableStat"
  },
  "type": "import"
 },
 "kafka.metrics.stats.total.Total": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.metrics.measurable_stat.AbstractMeasurableStat"
   ]
  },
  "type": "class"
 },
 "kafka.metrics.stats.total.Total.__init__": {
  "data": {
   "lineno": 8
  },
  "type": "function"
 },
 "kafka.metrics.stats.total.Total.measure": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "float"
   ]
  },
  "type": "function"
 },
 "kafka.metrics.stats.total.Total.record": {
  "data": {
   "lineno": 11
  },
  "type": "function"
 },
 "kafka.metrics.stats.total.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.oauth": {
  "data": {},
  "type": "module"
 },
 "kafka.oauth.AbstractTokenProvider": {
  "data": {
   "shadows": "kafka.oauth.abstract.AbstractTokenProvider"
  },
  "type": "import"
 },
 "kafka.oauth.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.oauth.abstract": {
  "data": {
   "symbols_in_volume": [
    "kafka.oauth.abstract.abc",
    "object"
   ]
  },
  "type": "module"
 },
 "kafka.oauth.abstract.ABC": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.oauth.abstract.AbstractTokenProvider": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.oauth.abstract.ABC"
   ]
  },
  "type": "class"
 },
 "kafka.oauth.abstract.AbstractTokenProvider.__init__": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "kafka.oauth.abstract.AbstractTokenProvider.extensions": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "kafka.oauth.abstract.AbstractTokenProvider.token": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "kafka.oauth.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.oauth.abstract.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.oauth.abstract.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.partitioner": {
  "data": {},
  "type": "module"
 },
 "kafka.partitioner.DefaultPartitioner": {
  "data": {
   "shadows": "kafka.partitioner.default.DefaultPartitioner"
  },
  "type": "import"
 },
 "kafka.partitioner.__all__": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.partitioner.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.partitioner.default": {
  "data": {},
  "type": "module"
 },
 "kafka.partitioner.default.DefaultPartitioner": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.partitioner.default.DefaultPartitioner.__call__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "classmethod",
    "kafka.partitioner.default.random",
    "len",
    "murmur2"
   ]
  },
  "type": "function"
 },
 "kafka.partitioner.default.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.partitioner.default.murmur2": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "bytearray",
    "bytes",
    "kafka.vendor.six.PY2",
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "kafka.partitioner.default.random": {
  "data": {
   "shadows": "random"
  },
  "type": "import"
 },
 "kafka.partitioner.default.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.partitioner.murmur2": {
  "data": {
   "shadows": "kafka.partitioner.default.murmur2"
  },
  "type": "import"
 },
 "kafka.producer": {
  "data": {},
  "type": "module"
 },
 "kafka.producer.KafkaProducer": {
  "data": {
   "shadows": "kafka.producer.kafka.KafkaProducer"
  },
  "type": "import"
 },
 "kafka.producer.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "kafka.producer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.buffer": {
  "data": {},
  "type": "module"
 },
 "kafka.producer.buffer.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.producer.buffer.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.producer.buffer.SimpleBufferPool": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.buffer.SimpleBufferPool.__init__": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "int",
    "kafka.metrics.stats.Rate",
    "kafka.producer.buffer.collections",
    "kafka.producer.buffer.io",
    "kafka.producer.buffer.threading",
    "range"
   ]
  },
  "type": "function"
 },
 "kafka.producer.buffer.SimpleBufferPool.allocate": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "kafka.errors.KafkaTimeoutError",
    "kafka.producer.buffer.io",
    "kafka.producer.buffer.threading",
    "kafka.producer.buffer.time"
   ]
  },
  "type": "function"
 },
 "kafka.producer.buffer.SimpleBufferPool.deallocate": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "kafka.producer.buffer.SimpleBufferPool.queued": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.producer.buffer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.buffer.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.producer.buffer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.producer.buffer.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "kafka.producer.buffer.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.producer.buffer.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.producer.future": {
  "data": {
   "symbols_in_volume": [
    "kafka.producer.future.collections"
   ]
  },
  "type": "module"
 },
 "kafka.producer.future.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.producer.future.Future": {
  "data": {
   "shadows": "kafka.future.Future"
  },
  "type": "import"
 },
 "kafka.producer.future.FutureProduceResult": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "kafka.future.Future"
   ]
  },
  "type": "class"
 },
 "kafka.producer.future.FutureProduceResult.__init__": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "kafka.producer.future.FutureProduceResult",
    "kafka.producer.future.threading",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.FutureProduceResult.failure": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "kafka.producer.future.FutureProduceResult",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.FutureProduceResult.success": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "kafka.producer.future.FutureProduceResult",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.FutureProduceResult.wait": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "kafka.producer.future.FutureRecordMetadata": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.future.Future"
   ]
  },
  "type": "class"
 },
 "kafka.producer.future.FutureRecordMetadata.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "kafka.producer.future.FutureRecordMetadata",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.FutureRecordMetadata._produce_success": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "RecordMetadata"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.FutureRecordMetadata.get": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "kafka.errors.KafkaTimeoutError"
   ]
  },
  "type": "function"
 },
 "kafka.producer.future.RecordMetadata": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "kafka.producer.future.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.future.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.producer.future.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.producer.kafka": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.producer.kafka.logging",
    "kafka.producer.record_accumulator.AtomicInteger"
   ]
  },
  "type": "module"
 },
 "kafka.producer.kafka.AtomicInteger": {
  "data": {
   "shadows": "kafka.producer.record_accumulator.AtomicInteger"
  },
  "type": "import"
 },
 "kafka.producer.kafka.DefaultPartitioner": {
  "data": {
   "shadows": "kafka.partitioner.default.DefaultPartitioner"
  },
  "type": "import"
 },
 "kafka.producer.kafka.DefaultRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.default_records.DefaultRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.producer.kafka.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.producer.kafka.FutureProduceResult": {
  "data": {
   "shadows": "kafka.producer.future.FutureProduceResult"
  },
  "type": "import"
 },
 "kafka.producer.kafka.FutureRecordMetadata": {
  "data": {
   "shadows": "kafka.producer.future.FutureRecordMetadata"
  },
  "type": "import"
 },
 "kafka.producer.kafka.KafkaClient": {
  "data": {
   "shadows": "kafka.client_async.KafkaClient"
  },
  "type": "import"
 },
 "kafka.producer.kafka.KafkaProducer": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.client_async.selectors.DefaultSelector",
    "kafka.codec.has_gzip",
    "kafka.codec.has_lz4",
    "kafka.codec.has_snappy",
    "kafka.codec.has_zstd",
    "kafka.partitioner.default.DefaultPartitioner",
    "kafka.producer.kafka.socket",
    "kafka.record.default_records.DefaultRecordBatchBuilder.CODEC_ZSTD",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_GZIP",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_LZ4",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_NONE",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_SNAPPY",
    "object",
    "set"
   ]
  },
  "type": "class"
 },
 "kafka.producer.kafka.KafkaProducer.__del__": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "NullLogger",
    "kafka.producer.kafka.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.__del__.NullLogger": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.kafka.KafkaProducer.__del__.NullLogger.__getattr__": {
  "data": {
   "lineno": 454
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.__init__": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "checker",
    "int",
    "isinstance",
    "kafka.client_async.KafkaClient",
    "kafka.metrics.MetricConfig",
    "kafka.metrics.Metrics",
    "kafka.producer.kafka.PRODUCER_CLIENT_ID_SEQUENCE",
    "kafka.producer.kafka.atexit",
    "kafka.producer.kafka.copy",
    "kafka.producer.kafka.log",
    "kafka.producer.record_accumulator.RecordAccumulator",
    "kafka.producer.sender.Sender",
    "map",
    "reporter",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._cleanup_factory": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "kafka.producer.kafka.weakref"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._cleanup_factory.wrapper": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "AttributeError",
    "ReferenceError"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._ensure_valid_record_size": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": [
    "kafka.errors.MessageSizeTooLargeError"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._estimate_size_in_bytes": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "kafka.record.default_records.DefaultRecordBatchBuilder.estimate_size_in_bytes",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder.estimate_size_in_bytes"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._max_usable_produce_magic": {
  "data": {
   "lineno": 521
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._partition": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": [
    "list",
    "sorted"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._serialize": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": [
    "f",
    "isinstance",
    "kafka.serializer.Serializer"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._unregister_cleanup": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "hasattr",
    "kafka.producer.kafka.atexit"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer._wait_on_metadata": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": [
    "kafka.errors.KafkaTimeoutError",
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.producer.kafka.log",
    "kafka.producer.kafka.threading",
    "kafka.producer.kafka.time"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.bootstrap_connected": {
  "data": {
   "lineno": 420
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.close": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "AttributeError",
    "bool",
    "float",
    "getattr",
    "hasattr",
    "kafka.producer.kafka.log",
    "kafka.producer.kafka.threading"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.flush": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "kafka.producer.kafka.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.metrics": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.partitions_for": {
  "data": {
   "lineno": 516
  },
  "type": "function"
 },
 "kafka.producer.kafka.KafkaProducer.send": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": [
    "all",
    "bytearray",
    "bytes",
    "kafka.errors.BrokerResponseError",
    "kafka.producer.future.FutureProduceResult",
    "kafka.producer.future.FutureRecordMetadata",
    "kafka.producer.kafka.log",
    "kafka.structs.TopicPartition",
    "len",
    "list",
    "memoryview",
    "str",
    "sum",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.producer.kafka.LegacyRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.legacy_records.LegacyRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.producer.kafka.MetricConfig": {
  "data": {
   "shadows": "kafka.metrics.MetricConfig"
  },
  "type": "import"
 },
 "kafka.producer.kafka.Metrics": {
  "data": {
   "shadows": "kafka.metrics.Metrics"
  },
  "type": "import"
 },
 "kafka.producer.kafka.PRODUCER_CLIENT_ID_SEQUENCE": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "kafka.producer.kafka.RecordAccumulator": {
  "data": {
   "shadows": "kafka.producer.record_accumulator.RecordAccumulator"
  },
  "type": "import"
 },
 "kafka.producer.kafka.Sender": {
  "data": {
   "shadows": "kafka.producer.sender.Sender"
  },
  "type": "import"
 },
 "kafka.producer.kafka.Serializer": {
  "data": {
   "shadows": "kafka.serializer.Serializer"
  },
  "type": "import"
 },
 "kafka.producer.kafka.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.producer.kafka.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.kafka.atexit": {
  "data": {
   "shadows": "atexit"
  },
  "type": "import"
 },
 "kafka.producer.kafka.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.producer.kafka.has_gzip": {
  "data": {
   "shadows": "kafka.codec.has_gzip"
  },
  "type": "import"
 },
 "kafka.producer.kafka.has_lz4": {
  "data": {
   "shadows": "kafka.codec.has_lz4"
  },
  "type": "import"
 },
 "kafka.producer.kafka.has_snappy": {
  "data": {
   "shadows": "kafka.codec.has_snappy"
  },
  "type": "import"
 },
 "kafka.producer.kafka.has_zstd": {
  "data": {
   "shadows": "kafka.codec.has_zstd"
  },
  "type": "import"
 },
 "kafka.producer.kafka.log": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "kafka.producer.kafka.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.producer.kafka.selectors": {
  "data": {
   "shadows": "kafka.client_async.selectors"
  },
  "type": "import"
 },
 "kafka.producer.kafka.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.producer.kafka.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.producer.kafka.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.producer.kafka.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.producer.kafka.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.producer.record_accumulator.logging"
   ]
  },
  "type": "module"
 },
 "kafka.producer.record_accumulator.AtomicInteger": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.record_accumulator.AtomicInteger.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "kafka.producer.record_accumulator.threading"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.AtomicInteger.decrement": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.AtomicInteger.get": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.AtomicInteger.increment": {
  "data": {
   "lineno": 24
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.FutureProduceResult": {
  "data": {
   "shadows": "kafka.producer.future.FutureProduceResult"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.FutureRecordMetadata": {
  "data": {
   "shadows": "kafka.producer.future.FutureRecordMetadata"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.IncompleteProducerBatches": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.record_accumulator.IncompleteProducerBatches.__init__": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "kafka.producer.record_accumulator.threading",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.IncompleteProducerBatches.add": {
  "data": {
   "lineno": 580
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.IncompleteProducerBatches.all": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.IncompleteProducerBatches.remove": {
  "data": {
   "lineno": 584
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.MemoryRecordsBuilder": {
  "data": {
   "shadows": "kafka.record.memory_records.MemoryRecordsBuilder"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.ProducerBatch": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.record_accumulator.ProducerBatch.__init__": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "kafka.producer.future.FutureProduceResult",
    "kafka.producer.record_accumulator.time"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.__str__": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.buffer": {
  "data": {
   "lineno": 124
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.done": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "kafka.producer.record_accumulator.log",
    "kafka.producer.record_accumulator.logging"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.in_retry": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.maybe_expire": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "kafka.errors.KafkaTimeoutError",
    "kafka.producer.record_accumulator.time"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.record_count": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.set_retry": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.ProducerBatch.try_append": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "kafka.producer.future.FutureRecordMetadata",
    "kafka.producer.record_accumulator.time",
    "len",
    "max",
    "sum"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.__init__": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "IncompleteProducerBatches",
    "kafka.producer.buffer.SimpleBufferPool",
    "kafka.producer.record_accumulator.AtomicInteger",
    "kafka.producer.record_accumulator.collections",
    "kafka.producer.record_accumulator.copy",
    "kafka.producer.record_accumulator.threading",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator._abort_batches": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "kafka.errors.IllegalStateError"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator._flush_in_progress": {
  "data": {
   "lineno": 509
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.abort_expired_batches": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "bool",
    "kafka.producer.record_accumulator.log",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.abort_incomplete_batches": {
  "data": {
   "lineno": 538
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.append": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "Exception",
    "isinstance",
    "kafka.producer.record_accumulator.ProducerBatch",
    "kafka.producer.record_accumulator.log",
    "kafka.producer.record_accumulator.threading",
    "kafka.record.memory_records.MemoryRecordsBuilder",
    "kafka.structs.TopicPartition",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.await_flush_completion": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "kafka.errors.KafkaTimeoutError",
    "kafka.errors.UnknownError",
    "kafka.producer.record_accumulator.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.begin_flush": {
  "data": {
   "lineno": 513
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.close": {
  "data": {
   "lineno": 568
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.deallocate": {
  "data": {
   "lineno": 504
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.drain": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "bool",
    "kafka.producer.record_accumulator.time",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.has_unsent": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": [
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.ready": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "bool",
    "kafka.producer.record_accumulator.time",
    "len",
    "list",
    "max",
    "min",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.RecordAccumulator.reenqueue": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "kafka.producer.record_accumulator.time"
   ]
  },
  "type": "function"
 },
 "kafka.producer.record_accumulator.SimpleBufferPool": {
  "data": {
   "shadows": "kafka.producer.buffer.SimpleBufferPool"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.log": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "kafka.producer.record_accumulator.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.producer.record_accumulator.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.producer.sender": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.producer.sender.logging"
   ]
  },
  "type": "module"
 },
 "kafka.producer.sender.AnonMeasurable": {
  "data": {
   "shadows": "kafka.metrics.measurable.AnonMeasurable"
  },
  "type": "import"
 },
 "kafka.producer.sender.Avg": {
  "data": {
   "shadows": "kafka.metrics.stats.Avg"
  },
  "type": "import"
 },
 "kafka.producer.sender.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.producer.sender.Max": {
  "data": {
   "shadows": "kafka.metrics.stats.Max"
  },
  "type": "import"
 },
 "kafka.producer.sender.ProduceRequest": {
  "data": {
   "shadows": "kafka.protocol.produce.ProduceRequest"
  },
  "type": "import"
 },
 "kafka.producer.sender.Rate": {
  "data": {
   "shadows": "kafka.metrics.stats.Rate"
  },
  "type": "import"
 },
 "kafka.producer.sender.Sender": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "kafka.producer.sender.threading",
    "kafka.version.__version__"
   ]
  },
  "type": "class"
 },
 "kafka.producer.sender.Sender.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "SenderMetrics",
    "kafka.producer.sender.Sender",
    "kafka.producer.sender.copy",
    "set",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._can_retry": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "error",
    "getattr"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._complete_batch": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "error",
    "getattr",
    "kafka.errors.NoError",
    "kafka.errors.TopicAuthorizationFailedError",
    "kafka.producer.sender.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._create_produce_requests": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "kafka.vendor.six.iteritems"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._failed_produce": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "kafka.producer.sender.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._handle_produce_response": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "dict",
    "kafka.errors.for_code",
    "kafka.producer.sender.log",
    "kafka.structs.TopicPartition"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender._produce_request": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "dict",
    "kafka.producer.sender.collections",
    "kafka.protocol.produce.ProduceRequest",
    "kafka.vendor.six.iteritems",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.add_topic": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.bootstrap_connected": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.force_close": {
  "data": {
   "lineno": 168
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.initiate_close": {
  "data": {
   "lineno": 162
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.run": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "Exception",
    "kafka.producer.sender.log"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.run_once": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "float",
    "kafka.producer.sender.log",
    "kafka.producer.sender.time",
    "kafka.vendor.six.iteritems",
    "kafka.vendor.six.itervalues",
    "len",
    "list",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.Sender.wakeup": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.producer.sender.SenderMetrics.__init__": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "kafka.metrics.measurable.AnonMeasurable",
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Max",
    "kafka.metrics.stats.Rate"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.add_metric": {
  "data": {
   "lineno": 423
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.maybe_register_topic_metrics": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "kafka.metrics.stats.Avg",
    "kafka.metrics.stats.Rate",
    "sensor_name"
   ]
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.maybe_register_topic_metrics.sensor_name": {
  "data": {
   "lineno": 436
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.record_errors": {
  "data": {
   "lineno": 510
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.record_retries": {
  "data": {
   "lineno": 504
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.record_throttle_time": {
  "data": {
   "lineno": 516
  },
  "type": "function"
 },
 "kafka.producer.sender.SenderMetrics.update_produce_request_metrics": {
  "data": {
   "lineno": 468
  },
  "type": "function"
 },
 "kafka.producer.sender.TopicPartition": {
  "data": {
   "shadows": "kafka.structs.TopicPartition"
  },
  "type": "import"
 },
 "kafka.producer.sender.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.producer.sender.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.producer.sender.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.producer.sender.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "kafka.producer.sender.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.producer.sender.log": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "kafka.producer.sender.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.producer.sender.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.producer.sender.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "kafka.producer.sender.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.protocol": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.API_KEYS": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "kafka.protocol.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.abstract": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.abstract.AbstractType": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.protocol.abstract.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.abstract.AbstractType.decode": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": [
    "kafka.protocol.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.abstract.AbstractType.encode": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "kafka.protocol.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.abstract.AbstractType.repr": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "classmethod",
    "repr"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.abstract.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.protocol.abstract.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.admin": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.admin.AlterConfigsRequest_v0",
    "kafka.protocol.admin.AlterConfigsRequest_v1",
    "kafka.protocol.admin.AlterConfigsResponse_v0",
    "kafka.protocol.admin.ApiVersionRequest_v0",
    "kafka.protocol.admin.ApiVersionRequest_v1",
    "kafka.protocol.admin.ApiVersionRequest_v2",
    "kafka.protocol.admin.ApiVersionResponse_v0",
    "kafka.protocol.admin.ApiVersionResponse_v1",
    "kafka.protocol.admin.ApiVersionResponse_v2",
    "kafka.protocol.admin.CreateAclsRequest_v0",
    "kafka.protocol.admin.CreateAclsRequest_v1",
    "kafka.protocol.admin.CreateAclsResponse_v0",
    "kafka.protocol.admin.CreateAclsResponse_v1",
    "kafka.protocol.admin.CreatePartitionsRequest_v0",
    "kafka.protocol.admin.CreatePartitionsRequest_v1",
    "kafka.protocol.admin.CreatePartitionsResponse_v0",
    "kafka.protocol.admin.CreatePartitionsResponse_v1",
    "kafka.protocol.admin.CreateTopicsRequest_v0",
    "kafka.protocol.admin.CreateTopicsRequest_v1",
    "kafka.protocol.admin.CreateTopicsRequest_v2",
    "kafka.protocol.admin.CreateTopicsRequest_v3",
    "kafka.protocol.admin.CreateTopicsResponse_v0",
    "kafka.protocol.admin.CreateTopicsResponse_v1",
    "kafka.protocol.admin.CreateTopicsResponse_v2",
    "kafka.protocol.admin.CreateTopicsResponse_v3",
    "kafka.protocol.admin.DeleteAclsRequest_v0",
    "kafka.protocol.admin.DeleteAclsRequest_v1",
    "kafka.protocol.admin.DeleteAclsResponse_v0",
    "kafka.protocol.admin.DeleteAclsResponse_v1",
    "kafka.protocol.admin.DeleteGroupsRequest_v0",
    "kafka.protocol.admin.DeleteGroupsRequest_v1",
    "kafka.protocol.admin.DeleteGroupsResponse_v0",
    "kafka.protocol.admin.DeleteGroupsResponse_v1",
    "kafka.protocol.admin.DeleteTopicsRequest_v0",
    "kafka.protocol.admin.DeleteTopicsRequest_v1",
    "kafka.protocol.admin.DeleteTopicsRequest_v2",
    "kafka.protocol.admin.DeleteTopicsRequest_v3",
    "kafka.protocol.admin.DeleteTopicsResponse_v0",
    "kafka.protocol.admin.DeleteTopicsResponse_v1",
    "kafka.protocol.admin.DeleteTopicsResponse_v2",
    "kafka.protocol.admin.DeleteTopicsResponse_v3",
    "kafka.protocol.admin.DescribeAclsRequest_v0",
    "kafka.protocol.admin.DescribeAclsRequest_v1",
    "kafka.protocol.admin.DescribeAclsResponse_v0",
    "kafka.protocol.admin.DescribeAclsResponse_v1",
    "kafka.protocol.admin.DescribeConfigsRequest_v0",
    "kafka.protocol.admin.DescribeConfigsRequest_v1",
    "kafka.protocol.admin.DescribeConfigsRequest_v2",
    "kafka.protocol.admin.DescribeConfigsResponse_v0",
    "kafka.protocol.admin.DescribeConfigsResponse_v1",
    "kafka.protocol.admin.DescribeConfigsResponse_v2",
    "kafka.protocol.admin.DescribeGroupsRequest_v0",
    "kafka.protocol.admin.DescribeGroupsRequest_v1",
    "kafka.protocol.admin.DescribeGroupsRequest_v2",
    "kafka.protocol.admin.DescribeGroupsRequest_v3",
    "kafka.protocol.admin.DescribeGroupsResponse_v0",
    "kafka.protocol.admin.DescribeGroupsResponse_v1",
    "kafka.protocol.admin.DescribeGroupsResponse_v2",
    "kafka.protocol.admin.DescribeGroupsResponse_v3",
    "kafka.protocol.admin.ListGroupsRequest_v0",
    "kafka.protocol.admin.ListGroupsRequest_v1",
    "kafka.protocol.admin.ListGroupsRequest_v2",
    "kafka.protocol.admin.ListGroupsResponse_v0",
    "kafka.protocol.admin.ListGroupsResponse_v1",
    "kafka.protocol.admin.ListGroupsResponse_v2",
    "kafka.protocol.admin.SaslAuthenticateRequest_v0",
    "kafka.protocol.admin.SaslAuthenticateRequest_v1",
    "kafka.protocol.admin.SaslAuthenticateResponse_v0",
    "kafka.protocol.admin.SaslAuthenticateResponse_v1",
    "kafka.protocol.admin.SaslHandShakeRequest_v0",
    "kafka.protocol.admin.SaslHandShakeRequest_v1",
    "kafka.protocol.admin.SaslHandShakeResponse_v0",
    "kafka.protocol.admin.SaslHandShakeResponse_v1"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.admin.AlterConfigsRequest": {
  "data": {
   "lineno": 686
  },
  "type": "constant"
 },
 "kafka.protocol.admin.AlterConfigsRequest_v0": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "kafka.protocol.admin.AlterConfigsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.AlterConfigsRequest_v1": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "kafka.protocol.admin.AlterConfigsRequest_v0",
    "kafka.protocol.admin.AlterConfigsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.AlterConfigsResponse": {
  "data": {
   "lineno": 687
  },
  "type": "constant"
 },
 "kafka.protocol.admin.AlterConfigsResponse_v0": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.AlterConfigsResponse_v1": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": [
    "kafka.protocol.admin.AlterConfigsResponse_v0",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionRequest": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "kafka.protocol.admin.ApiVersionRequest_v0": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "kafka.protocol.admin.ApiVersionResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionRequest_v1": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "kafka.protocol.admin.ApiVersionRequest_v0",
    "kafka.protocol.admin.ApiVersionResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionRequest_v2": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "kafka.protocol.admin.ApiVersionRequest_v0",
    "kafka.protocol.admin.ApiVersionResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionResponse": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "kafka.protocol.admin.ApiVersionResponse_v0": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionResponse_v1": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ApiVersionResponse_v2": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "kafka.protocol.admin.ApiVersionResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Boolean": {
  "data": {
   "shadows": "kafka.protocol.types.Boolean"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.protocol.admin.CreateAclsRequest": {
  "data": {
   "lineno": 573
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreateAclsRequest_v0": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateAclsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateAclsRequest_v1": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateAclsResponse_v1",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateAclsResponse": {
  "data": {
   "lineno": 574
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreateAclsResponse_v0": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateAclsResponse_v1": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateAclsResponse_v0",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreatePartitionsRequest": {
  "data": {
   "lineno": 878
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreatePartitionsRequest_v0": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreatePartitionsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreatePartitionsRequest_v1": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreatePartitionsRequest_v0",
    "kafka.protocol.admin.CreatePartitionsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreatePartitionsResponse": {
  "data": {
   "lineno": 881
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreatePartitionsResponse_v0": {
  "data": {
   "lineno": 838,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreatePartitionsResponse_v1": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreatePartitionsResponse_v0",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsRequest": {
  "data": {
   "lineno": 158
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreateTopicsRequest_v0": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateTopicsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsRequest_v1": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateTopicsResponse_v1",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsRequest_v2": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateTopicsRequest_v1",
    "kafka.protocol.admin.CreateTopicsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsRequest_v3": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateTopicsRequest_v1",
    "kafka.protocol.admin.CreateTopicsResponse_v3",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsResponse": {
  "data": {
   "lineno": 162
  },
  "type": "constant"
 },
 "kafka.protocol.admin.CreateTopicsResponse_v0": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsResponse_v1": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsResponse_v2": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.CreateTopicsResponse_v3": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "kafka.protocol.admin.CreateTopicsResponse_v2",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteAclsRequest": {
  "data": {
   "lineno": 644
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteAclsRequest_v0": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteAclsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteAclsRequest_v1": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteAclsResponse_v1",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteAclsResponse": {
  "data": {
   "lineno": 645
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteAclsResponse_v0": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteAclsResponse_v1": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteGroupsRequest": {
  "data": {
   "lineno": 919
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteGroupsRequest_v0": {
  "data": {
   "lineno": 903,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteGroupsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteGroupsRequest_v1": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteGroupsRequest_v0",
    "kafka.protocol.admin.DeleteGroupsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteGroupsResponse": {
  "data": {
   "lineno": 923
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteGroupsResponse_v0": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteGroupsResponse_v1": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteGroupsResponse_v0",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsRequest": {
  "data": {
   "lineno": 232
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteTopicsRequest_v0": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsRequest_v1": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsRequest_v0",
    "kafka.protocol.admin.DeleteTopicsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsRequest_v2": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsRequest_v0",
    "kafka.protocol.admin.DeleteTopicsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsRequest_v3": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsRequest_v0",
    "kafka.protocol.admin.DeleteTopicsResponse_v3",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsResponse": {
  "data": {
   "lineno": 236
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DeleteTopicsResponse_v0": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsResponse_v1": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsResponse_v2": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DeleteTopicsResponse_v3": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "kafka.protocol.admin.DeleteTopicsResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsRequest": {
  "data": {
   "lineno": 526
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeAclsRequest_v0": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeAclsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsRequest_v1": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeAclsResponse_v1",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsRequest_v2": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeAclsRequest_v1",
    "kafka.protocol.admin.DescribeAclsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsResponse": {
  "data": {
   "lineno": 527
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeAclsResponse_v0": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsResponse_v1": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeAclsResponse_v2": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeAclsResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsRequest": {
  "data": {
   "lineno": 783
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeConfigsRequest_v0": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeConfigsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsRequest_v1": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeConfigsResponse_v1",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsRequest_v2": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeConfigsRequest_v1",
    "kafka.protocol.admin.DescribeConfigsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsResponse": {
  "data": {
   "lineno": 787
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeConfigsResponse_v0": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsResponse_v1": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeConfigsResponse_v2": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsRequest": {
  "data": {
   "lineno": 399
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeGroupsRequest_v0": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeGroupsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsRequest_v1": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeGroupsRequest_v0",
    "kafka.protocol.admin.DescribeGroupsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsRequest_v2": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeGroupsRequest_v0",
    "kafka.protocol.admin.DescribeGroupsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsRequest_v3": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeGroupsResponse_v2",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsResponse": {
  "data": {
   "lineno": 403
  },
  "type": "constant"
 },
 "kafka.protocol.admin.DescribeGroupsResponse_v0": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsResponse_v1": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsResponse_v2": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "kafka.protocol.admin.DescribeGroupsResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.DescribeGroupsResponse_v3": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.protocol.admin.ListGroupsRequest": {
  "data": {
   "lineno": 290
  },
  "type": "constant"
 },
 "kafka.protocol.admin.ListGroupsRequest_v0": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "kafka.protocol.admin.ListGroupsResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ListGroupsRequest_v1": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "kafka.protocol.admin.ListGroupsRequest_v0",
    "kafka.protocol.admin.ListGroupsResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ListGroupsRequest_v2": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "kafka.protocol.admin.ListGroupsRequest_v0",
    "kafka.protocol.admin.ListGroupsResponse_v2",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ListGroupsResponse": {
  "data": {
   "lineno": 294
  },
  "type": "constant"
 },
 "kafka.protocol.admin.ListGroupsResponse_v0": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ListGroupsResponse_v1": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.ListGroupsResponse_v2": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "kafka.protocol.admin.ListGroupsResponse_v1",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.admin.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.admin.SaslAuthenticateRequest": {
  "data": {
   "lineno": 830
  },
  "type": "constant"
 },
 "kafka.protocol.admin.SaslAuthenticateRequest_v0": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": [
    "kafka.protocol.admin.SaslAuthenticateResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslAuthenticateRequest_v1": {
  "data": {
   "lineno": 823,
   "symbols_in_volume": [
    "kafka.protocol.admin.SaslAuthenticateRequest_v0",
    "kafka.protocol.admin.SaslAuthenticateResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslAuthenticateResponse": {
  "data": {
   "lineno": 833
  },
  "type": "constant"
 },
 "kafka.protocol.admin.SaslAuthenticateResponse_v0": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslAuthenticateResponse_v1": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslHandShakeRequest": {
  "data": {
   "lineno": 440
  },
  "type": "constant"
 },
 "kafka.protocol.admin.SaslHandShakeRequest_v0": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "kafka.protocol.admin.SaslHandShakeResponse_v0",
    "kafka.protocol.api.Request",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslHandShakeRequest_v1": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "kafka.protocol.admin.SaslHandShakeRequest_v0",
    "kafka.protocol.admin.SaslHandShakeResponse_v1",
    "kafka.protocol.api.Request"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslHandShakeResponse": {
  "data": {
   "lineno": 441
  },
  "type": "constant"
 },
 "kafka.protocol.admin.SaslHandShakeResponse_v0": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.SaslHandShakeResponse_v1": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "kafka.protocol.admin.SaslHandShakeResponse_v0",
    "kafka.protocol.api.Response"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.admin.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.admin.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.admin.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.api": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.api.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.api.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.api.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.api.Request": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "kafka.protocol.api.abc",
    "kafka.protocol.struct.Struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.api.Request.API_KEY": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Request.API_VERSION": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Request.RESPONSE_TYPE": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Request.SCHEMA": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Request.expect_response": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "kafka.protocol.api.Request.to_object": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "_to_object"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.RequestHeader": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.api.RequestHeader.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "kafka.protocol.api.RequestHeader",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Response": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "kafka.protocol.api.abc",
    "kafka.protocol.struct.Struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.api.Response.API_KEY": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Response.API_VERSION": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Response.SCHEMA": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "kafka.protocol.api.abc"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Response.to_object": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "_to_object"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.api.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.api.Struct": {
  "data": {
   "shadows": "kafka.protocol.struct.Struct"
  },
  "type": "import"
 },
 "kafka.protocol.api._to_object": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "enumerate",
    "isinstance",
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Schema",
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.api.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.protocol.api.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.commit": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.commit.GroupCoordinatorRequest_v0",
    "kafka.protocol.commit.GroupCoordinatorRequest_v1",
    "kafka.protocol.commit.GroupCoordinatorResponse_v0",
    "kafka.protocol.commit.GroupCoordinatorResponse_v1",
    "kafka.protocol.commit.OffsetCommitRequest_v0",
    "kafka.protocol.commit.OffsetCommitRequest_v1",
    "kafka.protocol.commit.OffsetCommitRequest_v2",
    "kafka.protocol.commit.OffsetCommitRequest_v3",
    "kafka.protocol.commit.OffsetCommitResponse_v0",
    "kafka.protocol.commit.OffsetCommitResponse_v1",
    "kafka.protocol.commit.OffsetCommitResponse_v2",
    "kafka.protocol.commit.OffsetCommitResponse_v3",
    "kafka.protocol.commit.OffsetFetchRequest_v0",
    "kafka.protocol.commit.OffsetFetchRequest_v1",
    "kafka.protocol.commit.OffsetFetchRequest_v2",
    "kafka.protocol.commit.OffsetFetchRequest_v3",
    "kafka.protocol.commit.OffsetFetchResponse_v0",
    "kafka.protocol.commit.OffsetFetchResponse_v1",
    "kafka.protocol.commit.OffsetFetchResponse_v2",
    "kafka.protocol.commit.OffsetFetchResponse_v3"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.commit.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.commit.GroupCoordinatorRequest": {
  "data": {
   "lineno": 254
  },
  "type": "constant"
 },
 "kafka.protocol.commit.GroupCoordinatorRequest_v0": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.GroupCoordinatorResponse_v0",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.GroupCoordinatorRequest_v1": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.GroupCoordinatorResponse_v1",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.GroupCoordinatorResponse": {
  "data": {
   "lineno": 255
  },
  "type": "constant"
 },
 "kafka.protocol.commit.GroupCoordinatorResponse_v0": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.GroupCoordinatorResponse_v1": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.commit.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.commit.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.commit.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.protocol.commit.OffsetCommitRequest": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "kafka.protocol.commit.OffsetCommitRequest_v0": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetCommitResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitRequest_v1": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetCommitResponse_v1",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitRequest_v2": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetCommitResponse_v2",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitRequest_v3": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetCommitRequest_v2",
    "kafka.protocol.commit.OffsetCommitResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitResponse": {
  "data": {
   "lineno": 108
  },
  "type": "constant"
 },
 "kafka.protocol.commit.OffsetCommitResponse_v0": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitResponse_v1": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.commit.OffsetCommitResponse_v0"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitResponse_v2": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.commit.OffsetCommitResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetCommitResponse_v3": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchRequest": {
  "data": {
   "lineno": 202
  },
  "type": "constant"
 },
 "kafka.protocol.commit.OffsetFetchRequest_v0": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetFetchResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchRequest_v1": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetFetchRequest_v0",
    "kafka.protocol.commit.OffsetFetchResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchRequest_v2": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetFetchRequest_v1",
    "kafka.protocol.commit.OffsetFetchResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchRequest_v3": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.commit.OffsetFetchRequest_v2",
    "kafka.protocol.commit.OffsetFetchResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchResponse": {
  "data": {
   "lineno": 206
  },
  "type": "constant"
 },
 "kafka.protocol.commit.OffsetFetchResponse_v0": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchResponse_v1": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.commit.OffsetFetchResponse_v0"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchResponse_v2": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.OffsetFetchResponse_v3": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.commit.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.commit.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.commit.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.commit.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.commit.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.fetch": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.fetch.FetchRequest_v0",
    "kafka.protocol.fetch.FetchRequest_v1",
    "kafka.protocol.fetch.FetchRequest_v10",
    "kafka.protocol.fetch.FetchRequest_v11",
    "kafka.protocol.fetch.FetchRequest_v2",
    "kafka.protocol.fetch.FetchRequest_v3",
    "kafka.protocol.fetch.FetchRequest_v4",
    "kafka.protocol.fetch.FetchRequest_v5",
    "kafka.protocol.fetch.FetchRequest_v6",
    "kafka.protocol.fetch.FetchRequest_v7",
    "kafka.protocol.fetch.FetchRequest_v8",
    "kafka.protocol.fetch.FetchRequest_v9",
    "kafka.protocol.fetch.FetchResponse_v0",
    "kafka.protocol.fetch.FetchResponse_v1",
    "kafka.protocol.fetch.FetchResponse_v10",
    "kafka.protocol.fetch.FetchResponse_v11",
    "kafka.protocol.fetch.FetchResponse_v2",
    "kafka.protocol.fetch.FetchResponse_v3",
    "kafka.protocol.fetch.FetchResponse_v4",
    "kafka.protocol.fetch.FetchResponse_v5",
    "kafka.protocol.fetch.FetchResponse_v6",
    "kafka.protocol.fetch.FetchResponse_v7",
    "kafka.protocol.fetch.FetchResponse_v8",
    "kafka.protocol.fetch.FetchResponse_v9"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.fetch.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.FetchRequest": {
  "data": {
   "lineno": 375
  },
  "type": "constant"
 },
 "kafka.protocol.fetch.FetchRequest_v0": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v1": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchRequest_v0",
    "kafka.protocol.fetch.FetchResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v10": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchRequest_v9",
    "kafka.protocol.fetch.FetchResponse_v10"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v11": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v11",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v2": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchRequest_v1",
    "kafka.protocol.fetch.FetchResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v3": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v3",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v4": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v4",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v5": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v5",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v6": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchRequest_v5",
    "kafka.protocol.fetch.FetchResponse_v6"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v7": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v7",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v8": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchRequest_v7",
    "kafka.protocol.fetch.FetchResponse_v8"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchRequest_v9": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.fetch.FetchResponse_v9",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse": {
  "data": {
   "lineno": 381
  },
  "type": "constant"
 },
 "kafka.protocol.fetch.FetchResponse_v0": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v1": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v10": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v7"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v11": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v2": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v3": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v4": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v5": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v6": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v5"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v7": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v8": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v7"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.FetchResponse_v9": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.fetch.FetchResponse_v7"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.fetch.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.fetch.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.frame": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.frame.KafkaBytes": {
  "data": {
   "lineno": 1,
   "symbols_in_volume": [
    "bytearray"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.frame.KafkaBytes.__init__": {
  "data": {
   "lineno": 2,
   "symbols_in_volume": [
    "kafka.protocol.frame.KafkaBytes",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.__repr__": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.__str__": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.read": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "bytes",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.seek": {
  "data": {
   "lineno": 20
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.tell": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "kafka.protocol.frame.KafkaBytes.write": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.group": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.group.HeartbeatRequest_v0",
    "kafka.protocol.group.HeartbeatRequest_v1",
    "kafka.protocol.group.HeartbeatResponse_v0",
    "kafka.protocol.group.HeartbeatResponse_v1",
    "kafka.protocol.group.JoinGroupRequest_v0",
    "kafka.protocol.group.JoinGroupRequest_v1",
    "kafka.protocol.group.JoinGroupRequest_v2",
    "kafka.protocol.group.JoinGroupResponse_v0",
    "kafka.protocol.group.JoinGroupResponse_v1",
    "kafka.protocol.group.JoinGroupResponse_v2",
    "kafka.protocol.group.LeaveGroupRequest_v0",
    "kafka.protocol.group.LeaveGroupRequest_v1",
    "kafka.protocol.group.LeaveGroupResponse_v0",
    "kafka.protocol.group.LeaveGroupResponse_v1",
    "kafka.protocol.group.SyncGroupRequest_v0",
    "kafka.protocol.group.SyncGroupRequest_v1",
    "kafka.protocol.group.SyncGroupResponse_v0",
    "kafka.protocol.group.SyncGroupResponse_v1"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.group.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.group.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.protocol.group.HeartbeatRequest": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "kafka.protocol.group.HeartbeatRequest_v0": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.HeartbeatResponse_v0",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.HeartbeatRequest_v1": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.HeartbeatRequest_v0",
    "kafka.protocol.group.HeartbeatResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.HeartbeatResponse": {
  "data": {
   "lineno": 192
  },
  "type": "constant"
 },
 "kafka.protocol.group.HeartbeatResponse_v0": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.HeartbeatResponse_v1": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.group.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.group.JoinGroupRequest": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "kafka.protocol.group.JoinGroupRequest_v0": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.JoinGroupResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.JoinGroupRequest_v1": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.JoinGroupResponse_v1",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.JoinGroupRequest_v2": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.JoinGroupRequest_v1",
    "kafka.protocol.group.JoinGroupResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.JoinGroupResponse": {
  "data": {
   "lineno": 89
  },
  "type": "constant"
 },
 "kafka.protocol.group.JoinGroupResponse_v0": {
  "data": {
   "lineno": 8,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.JoinGroupResponse_v1": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.group.JoinGroupResponse_v0"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.JoinGroupResponse_v2": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.LeaveGroupRequest": {
  "data": {
   "lineno": 229
  },
  "type": "constant"
 },
 "kafka.protocol.group.LeaveGroupRequest_v0": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.LeaveGroupResponse_v0",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.LeaveGroupRequest_v1": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.LeaveGroupRequest_v0",
    "kafka.protocol.group.LeaveGroupResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.LeaveGroupResponse": {
  "data": {
   "lineno": 230
  },
  "type": "constant"
 },
 "kafka.protocol.group.LeaveGroupResponse_v0": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.LeaveGroupResponse_v1": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.MemberAssignment": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.ProtocolMetadata": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.group.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.group.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.group.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.group.Struct": {
  "data": {
   "shadows": "kafka.protocol.struct.Struct"
  },
  "type": "import"
 },
 "kafka.protocol.group.SyncGroupRequest": {
  "data": {
   "lineno": 142
  },
  "type": "constant"
 },
 "kafka.protocol.group.SyncGroupRequest_v0": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.SyncGroupResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.SyncGroupRequest_v1": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.group.SyncGroupRequest_v0",
    "kafka.protocol.group.SyncGroupResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.SyncGroupResponse": {
  "data": {
   "lineno": 143
  },
  "type": "constant"
 },
 "kafka.protocol.group.SyncGroupResponse_v0": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.SyncGroupResponse_v1": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.group.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.message": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.message.AbstractType": {
  "data": {
   "shadows": "kafka.protocol.types.AbstractType"
  },
  "type": "import"
 },
 "kafka.protocol.message.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.protocol.message.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.message.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.message.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.protocol.message.KafkaBytes": {
  "data": {
   "shadows": "kafka.protocol.frame.KafkaBytes"
  },
  "type": "import"
 },
 "kafka.protocol.message.Message": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "kafka.protocol.struct.Struct",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.message.Message.__hash__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "bytes",
    "int",
    "isinstance",
    "kafka.protocol.message.time",
    "kafka.util.WeakMethod"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message._encode_self": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "ValueError",
    "kafka.protocol.message.Message",
    "kafka.util.crc32"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.decode": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "bytes",
    "classmethod",
    "cls",
    "isinstance",
    "kafka.protocol.message.io",
    "kafka.util.crc32"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.decompress": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "Exception",
    "kafka.codec.gzip_decode",
    "kafka.codec.has_gzip",
    "kafka.codec.has_lz4",
    "kafka.codec.has_snappy",
    "kafka.codec.has_zstd",
    "kafka.codec.lz4_decode",
    "kafka.codec.lz4_decode_old_kafka",
    "kafka.codec.snappy_decode",
    "kafka.codec.zstd_decode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.is_compressed": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.timestamp_type": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.Message.validate_crc": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "kafka.util.crc32"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.MessageSet": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "kafka.protocol.types.AbstractType",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.message.MessageSet.decode": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "ValueError",
    "bytes",
    "classmethod",
    "isinstance",
    "kafka.protocol.message.Message",
    "kafka.protocol.message.PartialMessage",
    "kafka.protocol.message.io",
    "kafka.protocol.types.Bytes.decode",
    "kafka.protocol.types.Int32.decode",
    "kafka.protocol.types.Int64.decode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.MessageSet.encode": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "classmethod",
    "isinstance",
    "kafka.protocol.frame.KafkaBytes",
    "kafka.protocol.message.io",
    "kafka.protocol.types.Bytes.encode",
    "kafka.protocol.types.Int32.decode",
    "kafka.protocol.types.Int64.encode"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.MessageSet.repr": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "classmethod",
    "cls.ITEM.repr",
    "cls.decode",
    "isinstance",
    "kafka.protocol.frame.KafkaBytes",
    "kafka.protocol.message.io",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.message.PartialMessage": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "bytes"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.message.PartialMessage.__repr__": {
  "data": {
   "lineno": 149
  },
  "type": "function"
 },
 "kafka.protocol.message.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.message.Struct": {
  "data": {
   "shadows": "kafka.protocol.struct.Struct"
  },
  "type": "import"
 },
 "kafka.protocol.message.WeakMethod": {
  "data": {
   "shadows": "kafka.util.WeakMethod"
  },
  "type": "import"
 },
 "kafka.protocol.message.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.message.crc32": {
  "data": {
   "shadows": "kafka.util.crc32"
  },
  "type": "import"
 },
 "kafka.protocol.message.gzip_decode": {
  "data": {
   "shadows": "kafka.codec.gzip_decode"
  },
  "type": "import"
 },
 "kafka.protocol.message.has_gzip": {
  "data": {
   "shadows": "kafka.codec.has_gzip"
  },
  "type": "import"
 },
 "kafka.protocol.message.has_lz4": {
  "data": {
   "shadows": "kafka.codec.has_lz4"
  },
  "type": "import"
 },
 "kafka.protocol.message.has_snappy": {
  "data": {
   "shadows": "kafka.codec.has_snappy"
  },
  "type": "import"
 },
 "kafka.protocol.message.has_zstd": {
  "data": {
   "shadows": "kafka.codec.has_zstd"
  },
  "type": "import"
 },
 "kafka.protocol.message.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "kafka.protocol.message.lz4_decode": {
  "data": {
   "shadows": "kafka.codec.lz4_decode"
  },
  "type": "import"
 },
 "kafka.protocol.message.lz4_decode_old_kafka": {
  "data": {
   "shadows": "kafka.codec.lz4_decode_old_kafka"
  },
  "type": "import"
 },
 "kafka.protocol.message.snappy_decode": {
  "data": {
   "shadows": "kafka.codec.snappy_decode"
  },
  "type": "import"
 },
 "kafka.protocol.message.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.protocol.message.zstd_decode": {
  "data": {
   "shadows": "kafka.codec.zstd_decode"
  },
  "type": "import"
 },
 "kafka.protocol.metadata": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.metadata.MetadataRequest_v0",
    "kafka.protocol.metadata.MetadataRequest_v1",
    "kafka.protocol.metadata.MetadataRequest_v2",
    "kafka.protocol.metadata.MetadataRequest_v3",
    "kafka.protocol.metadata.MetadataRequest_v4",
    "kafka.protocol.metadata.MetadataRequest_v5",
    "kafka.protocol.metadata.MetadataResponse_v0",
    "kafka.protocol.metadata.MetadataResponse_v1",
    "kafka.protocol.metadata.MetadataResponse_v2",
    "kafka.protocol.metadata.MetadataResponse_v3",
    "kafka.protocol.metadata.MetadataResponse_v4",
    "kafka.protocol.metadata.MetadataResponse_v5"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.metadata.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.Boolean": {
  "data": {
   "shadows": "kafka.protocol.types.Boolean"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.MetadataRequest": {
  "data": {
   "lineno": 193
  },
  "type": "constant"
 },
 "kafka.protocol.metadata.MetadataRequest_v0": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataRequest_v1": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataRequest_v0",
    "kafka.protocol.metadata.MetadataResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataRequest_v2": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataRequest_v1",
    "kafka.protocol.metadata.MetadataResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataRequest_v3": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataRequest_v1",
    "kafka.protocol.metadata.MetadataResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataRequest_v4": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataResponse_v4",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataRequest_v5": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.metadata.MetadataRequest_v4",
    "kafka.protocol.metadata.MetadataResponse_v5"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "kafka.protocol.metadata.MetadataResponse_v0": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse_v1": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse_v2": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse_v3": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse_v4": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.metadata.MetadataResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.MetadataResponse_v5": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Boolean",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.metadata.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.metadata.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.offset": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.offset.OffsetRequest_v0",
    "kafka.protocol.offset.OffsetRequest_v1",
    "kafka.protocol.offset.OffsetRequest_v2",
    "kafka.protocol.offset.OffsetRequest_v3",
    "kafka.protocol.offset.OffsetRequest_v4",
    "kafka.protocol.offset.OffsetRequest_v5",
    "kafka.protocol.offset.OffsetResponse_v0",
    "kafka.protocol.offset.OffsetResponse_v1",
    "kafka.protocol.offset.OffsetResponse_v2",
    "kafka.protocol.offset.OffsetResponse_v3",
    "kafka.protocol.offset.OffsetResponse_v4",
    "kafka.protocol.offset.OffsetResponse_v5"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.offset.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Int8": {
  "data": {
   "shadows": "kafka.protocol.types.Int8"
  },
  "type": "import"
 },
 "kafka.protocol.offset.OffsetRequest": {
  "data": {
   "lineno": 187
  },
  "type": "constant"
 },
 "kafka.protocol.offset.OffsetRequest_v0": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetRequest_v1": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetResponse_v1",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetRequest_v2": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetResponse_v2",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetRequest_v3": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetRequest_v2",
    "kafka.protocol.offset.OffsetResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetRequest_v4": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetResponse_v4",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Int8",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetRequest_v5": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "kafka.protocol.api.Request",
    "kafka.protocol.offset.OffsetRequest_v4",
    "kafka.protocol.offset.OffsetResponse_v5"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResetStrategy": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse": {
  "data": {
   "lineno": 191
  },
  "type": "constant"
 },
 "kafka.protocol.offset.OffsetResponse_v0": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse_v1": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse_v2": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse_v3": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.offset.OffsetResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse_v4": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.OffsetResponse_v5": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.offset.OffsetResponse_v4"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.offset.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.offset.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.offset.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.offset.UNKNOWN_OFFSET": {
  "data": {
   "lineno": 6
  },
  "type": "constant"
 },
 "kafka.protocol.offset.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.parser": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "kafka.protocol.parser.logging"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.parser.Errors": {
  "data": {
   "shadows": "kafka.errors"
  },
  "type": "import"
 },
 "kafka.protocol.parser.GroupCoordinatorResponse": {
  "data": {
   "shadows": "kafka.protocol.commit.GroupCoordinatorResponse"
  },
  "type": "import"
 },
 "kafka.protocol.parser.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.parser.KafkaBytes": {
  "data": {
   "shadows": "kafka.protocol.frame.KafkaBytes"
  },
  "type": "import"
 },
 "kafka.protocol.parser.KafkaProtocol": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.parser.KafkaProtocol.__init__": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "kafka.protocol.frame.KafkaBytes",
    "kafka.protocol.parser.collections"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol._gen_client_id": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "kafka.version.__version__"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol._next_correlation_id": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol._process_response": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "ValueError",
    "kafka.errors.CorrelationIdError",
    "kafka.errors.KafkaProtocolError",
    "kafka.protocol.commit.GroupCoordinatorResponse",
    "kafka.protocol.parser.log",
    "kafka.protocol.types.Int32.decode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol._reset_buffer": {
  "data": {
   "lineno": 180
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol.receive_bytes": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "kafka.errors.KafkaError",
    "kafka.protocol.frame.KafkaBytes",
    "kafka.protocol.types.Int32.decode",
    "len",
    "min"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol.send_bytes": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "kafka.protocol.parser.KafkaProtocol.send_request": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "kafka.protocol.api.RequestHeader",
    "kafka.protocol.parser.log",
    "kafka.protocol.types.Int32.encode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.parser.RequestHeader": {
  "data": {
   "shadows": "kafka.protocol.api.RequestHeader"
  },
  "type": "import"
 },
 "kafka.protocol.parser.__version__": {
  "data": {
   "shadows": "kafka.version.__version__"
  },
  "type": "import"
 },
 "kafka.protocol.parser.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.parser.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "kafka.protocol.parser.log": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.protocol.parser.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "kafka.protocol.pickle": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "copy_reg.pickle",
    "kafka.protocol.pickle._pickle_method",
    "kafka.protocol.pickle._unpickle_method",
    "kafka.protocol.pickle.types"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.pickle._pickle_method": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.pickle._unpickle_method": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.pickle.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.pickle.copyreg": {
  "data": {
   "shadows": "copy_reg"
  },
  "type": "import"
 },
 "kafka.protocol.pickle.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "kafka.protocol.produce": {
  "data": {
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest_v0",
    "kafka.protocol.produce.ProduceRequest_v1",
    "kafka.protocol.produce.ProduceRequest_v2",
    "kafka.protocol.produce.ProduceRequest_v3",
    "kafka.protocol.produce.ProduceRequest_v4",
    "kafka.protocol.produce.ProduceRequest_v5",
    "kafka.protocol.produce.ProduceRequest_v6",
    "kafka.protocol.produce.ProduceRequest_v7",
    "kafka.protocol.produce.ProduceRequest_v8",
    "kafka.protocol.produce.ProduceResponse_v0",
    "kafka.protocol.produce.ProduceResponse_v1",
    "kafka.protocol.produce.ProduceResponse_v2",
    "kafka.protocol.produce.ProduceResponse_v3",
    "kafka.protocol.produce.ProduceResponse_v4",
    "kafka.protocol.produce.ProduceResponse_v5",
    "kafka.protocol.produce.ProduceResponse_v6",
    "kafka.protocol.produce.ProduceResponse_v7",
    "kafka.protocol.produce.ProduceResponse_v8"
   ]
  },
  "type": "module"
 },
 "kafka.protocol.produce.Array": {
  "data": {
   "shadows": "kafka.protocol.types.Array"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Bytes": {
  "data": {
   "shadows": "kafka.protocol.types.Bytes"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Int16": {
  "data": {
   "shadows": "kafka.protocol.types.Int16"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Int32": {
  "data": {
   "shadows": "kafka.protocol.types.Int32"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Int64": {
  "data": {
   "shadows": "kafka.protocol.types.Int64"
  },
  "type": "import"
 },
 "kafka.protocol.produce.ProduceRequest": {
  "data": {
   "lineno": 223
  },
  "type": "constant"
 },
 "kafka.protocol.produce.ProduceRequest.expect_response": {
  "data": {
   "lineno": 128
  },
  "type": "function"
 },
 "kafka.protocol.produce.ProduceRequest_v0": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceResponse_v0",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v1": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v0",
    "kafka.protocol.produce.ProduceResponse_v1"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v2": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v1",
    "kafka.protocol.produce.ProduceResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v3": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceResponse_v3",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Bytes",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v4": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v3",
    "kafka.protocol.produce.ProduceResponse_v4"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v5": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v4",
    "kafka.protocol.produce.ProduceResponse_v5"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v6": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v5",
    "kafka.protocol.produce.ProduceResponse_v6"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v7": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v6",
    "kafka.protocol.produce.ProduceResponse_v7"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceRequest_v8": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "kafka.protocol.produce.ProduceRequest",
    "kafka.protocol.produce.ProduceRequest_v7",
    "kafka.protocol.produce.ProduceResponse_v8"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse": {
  "data": {
   "lineno": 228
  },
  "type": "constant"
 },
 "kafka.protocol.produce.ProduceResponse_v0": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v1": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v2": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v3": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.produce.ProduceResponse_v2"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v4": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.produce.ProduceResponse_v3"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v5": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v6": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.produce.ProduceResponse_v5"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v7": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.produce.ProduceResponse_v6"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.ProduceResponse_v8": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "kafka.protocol.api.Response",
    "kafka.protocol.types.Array",
    "kafka.protocol.types.Int16",
    "kafka.protocol.types.Int32",
    "kafka.protocol.types.Int64",
    "kafka.protocol.types.Schema",
    "kafka.protocol.types.String"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.produce.Request": {
  "data": {
   "shadows": "kafka.protocol.api.Request"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Response": {
  "data": {
   "shadows": "kafka.protocol.api.Response"
  },
  "type": "import"
 },
 "kafka.protocol.produce.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.produce.String": {
  "data": {
   "shadows": "kafka.protocol.types.String"
  },
  "type": "import"
 },
 "kafka.protocol.produce.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.struct": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.struct.AbstractType": {
  "data": {
   "shadows": "kafka.protocol.abstract.AbstractType"
  },
  "type": "import"
 },
 "kafka.protocol.struct.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "kafka.protocol.struct.Schema": {
  "data": {
   "shadows": "kafka.protocol.types.Schema"
  },
  "type": "import"
 },
 "kafka.protocol.struct.Struct": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types.Schema"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.struct.Struct.__eq__": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.__hash__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.__init__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "kafka.util.WeakMethod",
    "len",
    "list"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.__repr__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct._encode_self": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.decode": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "bytes",
    "classmethod",
    "cls",
    "cls.SCHEMA.fields",
    "io.BytesIO",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.encode": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "classmethod",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.Struct.get_item": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.struct.WeakMethod": {
  "data": {
   "shadows": "kafka.util.WeakMethod"
  },
  "type": "import"
 },
 "kafka.protocol.struct.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.types": {
  "data": {},
  "type": "module"
 },
 "kafka.protocol.types.AbstractType": {
  "data": {
   "shadows": "kafka.protocol.abstract.AbstractType"
  },
  "type": "import"
 },
 "kafka.protocol.types.Array": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Array.__init__": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "issubclass",
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types.Schema",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Array.decode": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "kafka.protocol.types.Int32",
    "range"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Array.encode": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "kafka.protocol.types.Int32",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Array.repr": {
  "data": {
   "lineno": 195
  },
  "type": "function"
 },
 "kafka.protocol.types.Boolean": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types._pack",
    "kafka.protocol.types._unpack",
    "kafka.protocol.types.struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Boolean.decode": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._unpack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Boolean.encode": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._pack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Bytes": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Bytes.decode": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "ValueError",
    "classmethod",
    "kafka.protocol.types.Int32",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Bytes.encode": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types.Int32",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Bytes.repr": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "classmethod",
    "len",
    "repr"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int16": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types._pack",
    "kafka.protocol.types._unpack",
    "kafka.protocol.types.struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Int16.decode": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._unpack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int16.encode": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._pack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int32": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types._pack",
    "kafka.protocol.types._unpack",
    "kafka.protocol.types.struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Int32.decode": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._unpack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int32.encode": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._pack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int64": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types._pack",
    "kafka.protocol.types._unpack",
    "kafka.protocol.types.struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Int64.decode": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._unpack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int64.encode": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._pack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int8": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType",
    "kafka.protocol.types._pack",
    "kafka.protocol.types._unpack",
    "kafka.protocol.types.struct"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Int8.decode": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._unpack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Int8.encode": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "classmethod",
    "kafka.protocol.types._pack"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Schema": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.Schema.__init__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Schema.__len__": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Schema.decode": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Schema.encode": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.Schema.repr": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "getattr",
    "len",
    "range",
    "repr"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.String": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "kafka.protocol.abstract.AbstractType"
   ]
  },
  "type": "class"
 },
 "kafka.protocol.types.String.__init__": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "kafka.protocol.types.String.decode": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "ValueError",
    "kafka.protocol.types.Int16",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.String.encode": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "kafka.protocol.types.Int16",
    "len",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types._pack": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "ValueError",
    "f",
    "struct.error"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types._unpack": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": [
    "ValueError",
    "f",
    "struct.error"
   ]
  },
  "type": "function"
 },
 "kafka.protocol.types.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.protocol.types.error": {
  "data": {
   "shadows": "struct.error"
  },
  "type": "import"
 },
 "kafka.protocol.types.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.record": {
  "data": {},
  "type": "module"
 },
 "kafka.record.MemoryRecords": {
  "data": {
   "shadows": "kafka.record.memory_records.MemoryRecords"
  },
  "type": "import"
 },
 "kafka.record.MemoryRecordsBuilder": {
  "data": {
   "shadows": "kafka.record.memory_records.MemoryRecordsBuilder"
  },
  "type": "import"
 },
 "kafka.record.__all__": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "kafka.record._crc32c": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "hex",
    "kafka.record._crc32c.crc",
    "kafka.record._crc32c.data",
    "kafka.record._crc32c.sys",
    "print"
   ]
  },
  "type": "module"
 },
 "kafka.record._crc32c.CRC_INIT": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "kafka.record._crc32c.CRC_TABLE": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "kafka.record._crc32c._MASK": {
  "data": {
   "lineno": 97
  },
  "type": "constant"
 },
 "kafka.record._crc32c.array": {
  "data": {
   "shadows": "array"
  },
  "type": "import"
 },
 "kafka.record._crc32c.crc": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "kafka.record._crc32c.CRC_INIT",
    "kafka.record._crc32c.crc_finalize",
    "kafka.record._crc32c.crc_update"
   ]
  },
  "type": "function"
 },
 "kafka.record._crc32c.crc_finalize": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "kafka.record._crc32c._MASK"
   ]
  },
  "type": "function"
 },
 "kafka.record._crc32c.crc_update": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "kafka.record._crc32c.CRC_TABLE",
    "kafka.record._crc32c._MASK",
    "kafka.record._crc32c.array",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.record._crc32c.data": {
  "data": {
   "lineno": 144
  },
  "type": "constant"
 },
 "kafka.record._crc32c.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.record.abc": {
  "data": {},
  "type": "module"
 },
 "kafka.record.abc.ABCRecord": {
  "data": {
   "lineno": 5,
   "symbols_in_volume": [
    "kafka.record.abc.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.abc.ABCRecord.checksum": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.headers": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.key": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.offset": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.timestamp": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.timestamp_type": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecord.value": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecordBatch": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "kafka.record.abc.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.abc.ABCRecordBatch.__iter__": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecordBatchBuilder": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "kafka.record.abc.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.abc.ABCRecordBatchBuilder.append": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecordBatchBuilder.build": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecordBatchBuilder.size_in_bytes": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecords": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "kafka.record.abc.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.abc.ABCRecords.__init__": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecords.has_next": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecords.next_batch": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.ABCRecords.size_in_bytes": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "kafka.record.abc.abc"
   ]
  },
  "type": "function"
 },
 "kafka.record.abc.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.record.abc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.record.default_records": {
  "data": {},
  "type": "module"
 },
 "kafka.record.default_records.ABCRecord": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecord"
  },
  "type": "import"
 },
 "kafka.record.default_records.ABCRecordBatch": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecordBatch"
  },
  "type": "import"
 },
 "kafka.record.default_records.ABCRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.record.default_records.CorruptRecordException": {
  "data": {
   "shadows": "kafka.errors.CorruptRecordException"
  },
  "type": "import"
 },
 "kafka.record.default_records.DefaultRecord": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecord"
   ]
  },
  "type": "class"
 },
 "kafka.record.default_records.DefaultRecord.__init__": {
  "data": {
   "lineno": 312
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.__repr__": {
  "data": {
   "lineno": 356
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.checksum": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.headers": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.key": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.offset": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.timestamp": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.timestamp_type": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecord.value": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBase": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "kafka.record.default_records.struct",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.default_records.DefaultRecordBase._assert_has_codec": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "checker",
    "kafka.codec.has_gzip",
    "kafka.codec.has_lz4",
    "kafka.codec.has_snappy",
    "kafka.codec.has_zstd",
    "kafka.errors.UnsupportedCodecError"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecordBatch",
    "kafka.record.default_records.DefaultRecordBase",
    "next"
   ]
  },
  "type": "class"
 },
 "kafka.record.default_records.DefaultRecordBatch.__init__": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "bytearray"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.__iter__": {
  "data": {
   "lineno": 275
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.__next__": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "IndexError",
    "StopIteration",
    "ValueError",
    "kafka.errors.CorruptRecordException",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch._maybe_uncompress": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "bytearray",
    "kafka.codec.gzip_decode",
    "kafka.codec.lz4_decode",
    "kafka.codec.snappy_decode",
    "kafka.codec.zstd_decode",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch._read_msg": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "DefaultRecord",
    "bytes",
    "kafka.errors.CorruptRecordException",
    "kafka.record.util.decode_varint"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.attributes": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.base_offset": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.compression_type": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.crc": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.first_timestamp": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.is_control_batch": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "bool",
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.is_transactional": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "bool",
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.last_offset_delta": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.magic": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.max_timestamp": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.timestamp_type": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "bool",
    "int",
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatch.validate_crc": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "kafka.record.util.calc_crc32c",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecordBatchBuilder",
    "kafka.record.default_records.DefaultRecordBase"
   ]
  },
  "type": "class"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.__init__": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "bool",
    "bytearray"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder._get_attributes": {
  "data": {
   "lineno": 396
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder._maybe_compress": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "bytes",
    "kafka.codec.gzip_encode",
    "kafka.codec.lz4_encode",
    "kafka.codec.snappy_encode",
    "kafka.codec.zstd_encode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.append": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "DefaultRecordMetadata",
    "TypeError",
    "bytearray",
    "bytearray_type",
    "bytes",
    "get_type",
    "int",
    "kafka.record.default_records.time",
    "kafka.record.util.encode_varint",
    "kafka.record.util.size_of_varint",
    "len",
    "len_func",
    "memoryview",
    "time_time",
    "type",
    "type_int",
    "write",
    "write_byte"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.build": {
  "data": {
   "lineno": 540
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.estimate_size_in_bytes": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.size": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.size_in_bytes": {
  "data": {
   "lineno": 550,
   "symbols_in_volume": [
    "kafka.record.util.size_of_varint"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.size_of": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "classmethod",
    "kafka.record.util.size_of_varint",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordBatchBuilder.write_header": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "kafka.record.default_records.struct",
    "kafka.record.util.calc_crc32c",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.default_records.DefaultRecordMetadata.__init__": {
  "data": {
   "lineno": 605
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata.__repr__": {
  "data": {
   "lineno": 626
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata.crc": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata.offset": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata.size": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.DefaultRecordMetadata.timestamp": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.default_records.UnsupportedCodecError": {
  "data": {
   "shadows": "kafka.errors.UnsupportedCodecError"
  },
  "type": "import"
 },
 "kafka.record.default_records.calc_crc32c": {
  "data": {
   "shadows": "kafka.record.util.calc_crc32c"
  },
  "type": "import"
 },
 "kafka.record.default_records.codecs": {
  "data": {
   "shadows": "kafka.codec"
  },
  "type": "import"
 },
 "kafka.record.default_records.decode_varint": {
  "data": {
   "shadows": "kafka.record.util.decode_varint"
  },
  "type": "import"
 },
 "kafka.record.default_records.encode_varint": {
  "data": {
   "shadows": "kafka.record.util.encode_varint"
  },
  "type": "import"
 },
 "kafka.record.default_records.gzip_decode": {
  "data": {
   "shadows": "kafka.codec.gzip_decode"
  },
  "type": "import"
 },
 "kafka.record.default_records.gzip_encode": {
  "data": {
   "shadows": "kafka.codec.gzip_encode"
  },
  "type": "import"
 },
 "kafka.record.default_records.lz4_decode": {
  "data": {
   "shadows": "kafka.codec.lz4_decode"
  },
  "type": "import"
 },
 "kafka.record.default_records.lz4_encode": {
  "data": {
   "shadows": "kafka.codec.lz4_encode"
  },
  "type": "import"
 },
 "kafka.record.default_records.size_of_varint": {
  "data": {
   "shadows": "kafka.record.util.size_of_varint"
  },
  "type": "import"
 },
 "kafka.record.default_records.snappy_decode": {
  "data": {
   "shadows": "kafka.codec.snappy_decode"
  },
  "type": "import"
 },
 "kafka.record.default_records.snappy_encode": {
  "data": {
   "shadows": "kafka.codec.snappy_encode"
  },
  "type": "import"
 },
 "kafka.record.default_records.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.record.default_records.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.record.default_records.zstd_decode": {
  "data": {
   "shadows": "kafka.codec.zstd_decode"
  },
  "type": "import"
 },
 "kafka.record.default_records.zstd_encode": {
  "data": {
   "shadows": "kafka.codec.zstd_encode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records": {
  "data": {},
  "type": "module"
 },
 "kafka.record.legacy_records.ABCRecord": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecord"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.ABCRecordBatch": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecordBatch"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.ABCRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.CorruptRecordException": {
  "data": {
   "shadows": "kafka.errors.CorruptRecordException"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.LegacyRecord": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecord"
   ]
  },
  "type": "class"
 },
 "kafka.record.legacy_records.LegacyRecord.__init__": {
  "data": {
   "lineno": 289
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.__repr__": {
  "data": {
   "lineno": 333
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.checksum": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.headers": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.key": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.offset": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.timestamp": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.timestamp_type": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecord.value": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBase": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "kafka.record.legacy_records.struct",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.legacy_records.LegacyRecordBase._assert_has_codec": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "checker",
    "kafka.codec.has_gzip",
    "kafka.codec.has_lz4",
    "kafka.codec.has_snappy",
    "kafka.errors.UnsupportedCodecError"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecordBatch",
    "kafka.record.legacy_records.LegacyRecordBase"
   ]
  },
  "type": "class"
 },
 "kafka.record.legacy_records.LegacyRecordBatch.__init__": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "len",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch.__iter__": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "LegacyRecord",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch._decompress": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "kafka.codec.gzip_decode",
    "kafka.codec.lz4_decode",
    "kafka.codec.lz4_decode_old_kafka",
    "kafka.codec.snappy_decode",
    "kafka.errors.CorruptRecordException",
    "kafka.record.legacy_records.struct"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch._read_all_headers": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch._read_header": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch._read_key_value": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "kafka.record.legacy_records.struct"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch.compression_type": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch.timestamp_type": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatch.validate_crc": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "kafka.record.util.calc_crc32"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecordBatchBuilder",
    "kafka.record.legacy_records.LegacyRecordBase"
   ]
  },
  "type": "class"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.__init__": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "bytearray"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder._encode_msg": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "kafka.record.legacy_records.struct",
    "kafka.record.util.calc_crc32",
    "len",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder._maybe_compress": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "bytearray",
    "bytes",
    "kafka.codec.gzip_encode",
    "kafka.codec.lz4_encode",
    "kafka.codec.lz4_encode_old_kafka",
    "kafka.codec.snappy_encode",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.append": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "LegacyRecordMetadata",
    "TypeError",
    "bytearray",
    "bytes",
    "int",
    "isinstance",
    "kafka.record.legacy_records.time",
    "len",
    "memoryview",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.build": {
  "data": {
   "lineno": 467
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.estimate_size_in_bytes": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.record_overhead": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "classmethod"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.record_size": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "classmethod",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.size": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordBatchBuilder.size_in_bytes": {
  "data": {
   "lineno": 479
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.__init__": {
  "data": {
   "lineno": 521
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.__repr__": {
  "data": {
   "lineno": 543
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.crc": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.offset": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.size": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.LegacyRecordMetadata.timestamp": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.record.legacy_records.UnsupportedCodecError": {
  "data": {
   "shadows": "kafka.errors.UnsupportedCodecError"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.calc_crc32": {
  "data": {
   "shadows": "kafka.record.util.calc_crc32"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.codecs": {
  "data": {
   "shadows": "kafka.codec"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.gzip_decode": {
  "data": {
   "shadows": "kafka.codec.gzip_decode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.gzip_encode": {
  "data": {
   "shadows": "kafka.codec.gzip_encode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.lz4_decode": {
  "data": {
   "shadows": "kafka.codec.lz4_decode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.lz4_decode_old_kafka": {
  "data": {
   "shadows": "kafka.codec.lz4_decode_old_kafka"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.lz4_encode": {
  "data": {
   "shadows": "kafka.codec.lz4_encode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.lz4_encode_old_kafka": {
  "data": {
   "shadows": "kafka.codec.lz4_encode_old_kafka"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.snappy_decode": {
  "data": {
   "shadows": "kafka.codec.snappy_decode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.snappy_encode": {
  "data": {
   "shadows": "kafka.codec.snappy_encode"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.record.legacy_records.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "kafka.record.memory_records": {
  "data": {},
  "type": "module"
 },
 "kafka.record.memory_records.ABCRecords": {
  "data": {
   "shadows": "kafka.record.abc.ABCRecords"
  },
  "type": "import"
 },
 "kafka.record.memory_records.CorruptRecordException": {
  "data": {
   "shadows": "kafka.errors.CorruptRecordException"
  },
  "type": "import"
 },
 "kafka.record.memory_records.DefaultRecordBatch": {
  "data": {
   "shadows": "kafka.record.default_records.DefaultRecordBatch"
  },
  "type": "import"
 },
 "kafka.record.memory_records.DefaultRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.default_records.DefaultRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.record.memory_records.LegacyRecordBatch": {
  "data": {
   "shadows": "kafka.record.legacy_records.LegacyRecordBatch"
  },
  "type": "import"
 },
 "kafka.record.memory_records.LegacyRecordBatchBuilder": {
  "data": {
   "shadows": "kafka.record.legacy_records.LegacyRecordBatchBuilder"
  },
  "type": "import"
 },
 "kafka.record.memory_records.MemoryRecords": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "kafka.record.abc.ABCRecords",
    "kafka.record.legacy_records.LegacyRecordBatch.RECORD_OVERHEAD_V0",
    "kafka.record.memory_records.struct"
   ]
  },
  "type": "class"
 },
 "kafka.record.memory_records.MemoryRecords.__init__": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecords._cache_next": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "kafka.record.memory_records.struct",
    "len",
    "memoryview"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecords.has_next": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecords.next_batch": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "kafka.errors.CorruptRecordException",
    "kafka.record.default_records.DefaultRecordBatch",
    "kafka.record.legacy_records.LegacyRecordBatch",
    "kafka.record.memory_records.struct",
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecords.size_in_bytes": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecords.valid_bytes": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.__init__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "kafka.record.default_records.DefaultRecordBatchBuilder",
    "kafka.record.legacy_records.LegacyRecordBatchBuilder"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.append": {
  "data": {
   "lineno": 137
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.buffer": {
  "data": {
   "lineno": 185
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.close": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "bytes"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.compression_rate": {
  "data": {
   "lineno": 172
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.is_full": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.next_offset": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "kafka.record.memory_records.MemoryRecordsBuilder.size_in_bytes": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.record.memory_records.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "kafka.record.memory_records.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.record.util": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "crc32c.crc32c",
    "kafka.record._crc32c.crc"
   ]
  },
  "type": "module"
 },
 "kafka.record.util._crc32c": {
  "data": {
   "lineno": 122
  },
  "type": "constant"
 },
 "kafka.record.util.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "kafka.record.util.calc_crc32": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "kafka.record._crc32c.crc",
    "kafka.record.util.binascii"
   ]
  },
  "type": "function"
 },
 "kafka.record.util.calc_crc32c": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "kafka.record.util._crc32c"
   ]
  },
  "type": "function"
 },
 "kafka.record.util.crc32c_c": {
  "data": {
   "lineno": 7
  },
  "type": "constant"
 },
 "kafka.record.util.crc32c_py": {
  "data": {
   "shadows": "kafka.record._crc32c.crc"
  },
  "type": "import"
 },
 "kafka.record.util.decode_varint": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "kafka.record.util.encode_varint": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": [
    "write"
   ]
  },
  "type": "function"
 },
 "kafka.record.util.size_of_varint": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "kafka.scram": {
  "data": {
   "symbols_in_volume": [
    "kafka.vendor.six.PY2"
   ]
  },
  "type": "module"
 },
 "kafka.scram.ScramClient": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "kafka.scram.hashlib"
   ]
  },
  "type": "class"
 },
 "kafka.scram.ScramClient.__init__": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "kafka.scram.uuid",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.create_salted_password": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "kafka.scram.hashlib"
   ]
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.final_message": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "kafka.scram.base64"
   ]
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.first_message": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.hmac": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "kafka.scram.hmac"
   ]
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.process_server_final_message": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "kafka.scram.base64"
   ]
  },
  "type": "function"
 },
 "kafka.scram.ScramClient.process_server_first_message": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "int",
    "kafka.scram.base64",
    "kafka.scram.xor_bytes"
   ]
  },
  "type": "function"
 },
 "kafka.scram.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.scram.base64": {
  "data": {
   "shadows": "base64"
  },
  "type": "import"
 },
 "kafka.scram.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "kafka.scram.hmac": {
  "data": {
   "shadows": "hmac"
  },
  "type": "import"
 },
 "kafka.scram.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.scram.uuid": {
  "data": {
   "shadows": "uuid"
  },
  "type": "import"
 },
 "kafka.scram.xor_bytes": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": [
    "bytes",
    "zip"
   ]
  },
  "type": "function"
 },
 "kafka.serializer": {
  "data": {},
  "type": "module"
 },
 "kafka.serializer.Deserializer": {
  "data": {
   "shadows": "kafka.serializer.abstract.Deserializer"
  },
  "type": "import"
 },
 "kafka.serializer.Serializer": {
  "data": {
   "shadows": "kafka.serializer.abstract.Serializer"
  },
  "type": "import"
 },
 "kafka.serializer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.serializer.abstract": {
  "data": {},
  "type": "module"
 },
 "kafka.serializer.abstract.Deserializer": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "kafka.serializer.abstract.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.serializer.abstract.Deserializer.__init__": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "kafka.serializer.abstract.Deserializer.close": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "kafka.serializer.abstract.Deserializer.deserialize": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "kafka.serializer.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.serializer.abstract.Serializer": {
  "data": {
   "lineno": 6,
   "symbols_in_volume": [
    "kafka.serializer.abstract.abc",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.serializer.abstract.Serializer.__init__": {
  "data": {
   "lineno": 9
  },
  "type": "function"
 },
 "kafka.serializer.abstract.Serializer.close": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "kafka.serializer.abstract.Serializer.serialize": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": [
    "kafka.serializer.abstract.abc"
   ]
  },
  "type": "function"
 },
 "kafka.serializer.abstract.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "kafka.serializer.abstract.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.structs": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "module"
 },
 "kafka.structs.BrokerMetadata": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "kafka.structs.GroupInformation": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "kafka.structs.MemberInformation": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "kafka.structs.OffsetAndMetadata": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "kafka.structs.OffsetAndTimestamp": {
  "data": {
   "lineno": 70
  },
  "type": "constant"
 },
 "kafka.structs.PartitionMetadata": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "kafka.structs.RetryOptions": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "kafka.structs.TopicPartition": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.structs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.structs.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "kafka.util": {
  "data": {
   "symbols_in_volume": [
    "kafka.vendor.six.PY3"
   ]
  },
  "type": "module"
 },
 "kafka.util.Dict": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "kafka.util.MAX_INT": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "kafka.util.TO_SIGNED": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "kafka.util.WeakMethod": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.util.WeakMethod.__call__": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "kafka.util.WeakMethod.__eq__": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "isinstance",
    "kafka.util.WeakMethod"
   ]
  },
  "type": "function"
 },
 "kafka.util.WeakMethod.__hash__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.util.WeakMethod.__init__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "AttributeError",
    "id",
    "kafka.util.weakref"
   ]
  },
  "type": "function"
 },
 "kafka.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.util.binascii": {
  "data": {
   "shadows": "binascii"
  },
  "type": "import"
 },
 "kafka.util.crc32": {
  "data": {
   "shadows": "binascii.crc32"
  },
  "type": "import"
 },
 "kafka.util.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.util.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "kafka.vendor": {
  "data": {},
  "type": "module"
 },
 "kafka.vendor.enum34": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "NameError",
    "any",
    "collections.OrderedDict",
    "float",
    "kafka.vendor.enum34.EnumMeta",
    "kafka.vendor.enum34.__cmp__",
    "kafka.vendor.enum34.__dir__",
    "kafka.vendor.enum34.__eq__",
    "kafka.vendor.enum34.__format__",
    "kafka.vendor.enum34.__ge__",
    "kafka.vendor.enum34.__gt__",
    "kafka.vendor.enum34.__hash__",
    "kafka.vendor.enum34.__le__",
    "kafka.vendor.enum34.__lt__",
    "kafka.vendor.enum34.__ne__",
    "kafka.vendor.enum34.__new__",
    "kafka.vendor.enum34.__reduce_ex__",
    "kafka.vendor.enum34.__repr__",
    "kafka.vendor.enum34.__str__",
    "kafka.vendor.enum34._convert",
    "kafka.vendor.enum34.name",
    "kafka.vendor.enum34.pyver",
    "kafka.vendor.enum34.temp_enum_dict",
    "kafka.vendor.enum34.value",
    "object",
    "str",
    "sys.version_info"
   ]
  },
  "type": "module"
 },
 "kafka.vendor.enum34.Enum": {
  "data": {
   "lineno": 816
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.EnumMeta": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "kafka.vendor.enum34.pyver",
    "type"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.enum34.EnumMeta.__bool__": {
  "data": {
   "lineno": 328
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__call__": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__contains__": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "isinstance"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__delattr__": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "AttributeError",
    "kafka.vendor.enum34.EnumMeta",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__dir__": {
  "data": {
   "lineno": 366
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__getattr__": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError",
    "kafka.vendor.enum34._is_dunder"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__getitem__": {
  "data": {
   "lineno": 396
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__iter__": {
  "data": {
   "lineno": 399
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__len__": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__members__": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__new__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "__new__",
    "aliases",
    "collections.OrderedDict",
    "dict",
    "getattr",
    "hasattr",
    "int",
    "isinstance",
    "issubclass",
    "kafka.vendor.enum34.Enum",
    "kafka.vendor.enum34.EnumMeta",
    "kafka.vendor.enum34._EnumDict",
    "kafka.vendor.enum34._make_class_unpicklable",
    "kafka.vendor.enum34.any",
    "kafka.vendor.enum34.pyver",
    "member_type",
    "member_type.__dict__",
    "object",
    "set",
    "setattr",
    "sorted",
    "super",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__prepare__": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "classmethod",
    "kafka.vendor.enum34._EnumDict"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__repr__": {
  "data": {
   "lineno": 410
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__reversed__": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "reversed"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta.__setattr__": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "AttributeError",
    "kafka.vendor.enum34.EnumMeta",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta._create_": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "UnicodeEncodeError",
    "ValueError",
    "enumerate",
    "isinstance",
    "kafka.vendor.enum34._make_class_unpicklable",
    "kafka.vendor.enum34.basestring",
    "kafka.vendor.enum34.pyver",
    "kafka.vendor.enum34.unicode",
    "list",
    "sys._getframe",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta._find_new_": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "__new__",
    "getattr",
    "kafka.vendor.enum34.Enum",
    "member_type",
    "object.__new__",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.EnumMeta._get_mixins_": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": [
    "TypeError",
    "issubclass",
    "kafka.vendor.enum34.Enum",
    "member_type",
    "object",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.IntEnum": {
  "data": {
   "lineno": 822,
   "symbols_in_volume": [
    "int",
    "kafka.vendor.enum34.Enum"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.enum34.OrderedDict": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "kafka.vendor.enum34._EnumDict": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.enum34._EnumDict.__init__": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "kafka.vendor.enum34._EnumDict",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._EnumDict.__setitem__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "kafka.vendor.enum34._EnumDict",
    "kafka.vendor.enum34._is_descriptor",
    "kafka.vendor.enum34._is_dunder",
    "kafka.vendor.enum34._is_sunder",
    "kafka.vendor.enum34.pyver",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._RouteClassAttributeToGetattr": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.enum34._RouteClassAttributeToGetattr.__delete__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._RouteClassAttributeToGetattr.__get__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._RouteClassAttributeToGetattr.__init__": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "kafka.vendor.enum34._RouteClassAttributeToGetattr.__set__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__all__": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.__cmp__": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": [
    "NotImplemented",
    "TypeError",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__dir__": {
  "data": {
   "lineno": 682
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__eq__": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": [
    "NotImplemented",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__format__": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "object",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__ge__": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__gt__": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__hash__": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__le__": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__lt__": {
  "data": {
   "lineno": 733,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__ne__": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": [
    "NotImplemented",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__new__": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__reduce_ex__": {
  "data": {
   "lineno": 768
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__repr__": {
  "data": {
   "lineno": 670
  },
  "type": "function"
 },
 "kafka.vendor.enum34.__str__": {
  "data": {
   "lineno": 676
  },
  "type": "function"
 },
 "kafka.vendor.enum34._convert": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "cls.__members__",
    "cls.__reduce_ex__",
    "dict",
    "filter",
    "kafka.vendor.enum34.name",
    "kafka.vendor.enum34.value",
    "sys.modules",
    "vars"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._is_descriptor": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._is_dunder": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._is_sunder": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._make_class_unpicklable": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "kafka.vendor.enum34._make_class_unpicklable._break_on_call_reduce": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34._reduce_ex_by_name": {
  "data": {
   "lineno": 825
  },
  "type": "function"
 },
 "kafka.vendor.enum34._sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.vendor.enum34.any": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "kafka.vendor.enum34.basestring": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.name": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "kafka.vendor.enum34._RouteClassAttributeToGetattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.pyver": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.temp_enum_dict": {
  "data": {
   "lineno": 645
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.unicode": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "kafka.vendor.enum34.unique": {
  "data": {
   "lineno": 828,
   "symbols_in_volume": [
    "ValueError",
    "kafka.vendor.enum34.name"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.value": {
  "data": {
   "lineno": 786,
   "symbols_in_volume": [
    "kafka.vendor.enum34._RouteClassAttributeToGetattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.enum34.version": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "kafka.vendor.selectors34": {
  "data": {
   "symbols_in_volume": [
    "collections.namedtuple",
    "globals",
    "hasattr",
    "kafka.vendor.selectors34.DevpollSelector",
    "kafka.vendor.selectors34.EpollSelector",
    "kafka.vendor.selectors34.KqueueSelector",
    "kafka.vendor.selectors34.PollSelector",
    "kafka.vendor.selectors34.SelectSelector",
    "kafka.vendor.selectors34.select"
   ]
  },
  "type": "module"
 },
 "kafka.vendor.selectors34.ABCMeta": {
  "data": {
   "shadows": "abc.ABCMeta"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.BaseSelector": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "abc.ABCMeta",
    "kafka.vendor.six.add_metaclass",
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.BaseSelector.__enter__": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.__exit__": {
  "data": {
   "lineno": 220
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.close": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.get_key": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "KeyError",
    "RuntimeError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.get_map": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "NotImplementedError",
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.modify": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "events"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.register": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "NotImplementedError",
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.select": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "NotImplementedError",
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.BaseSelector.unregister": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "NotImplementedError",
    "abc.abstractmethod"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DefaultSelector": {
  "data": {
   "lineno": 637
  },
  "type": "constant"
 },
 "kafka.vendor.selectors34.DevpollSelector": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._BaseSelectorImpl"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.DevpollSelector.__init__": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.DevpollSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DevpollSelector.close": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.DevpollSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DevpollSelector.fileno": {
  "data": {
   "lineno": 498
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DevpollSelector.register": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "events",
    "kafka.vendor.selectors34.DevpollSelector",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DevpollSelector.select": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "OSError",
    "errno.EINTR",
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.math",
    "kafka.vendor.selectors34.select"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.DevpollSelector.unregister": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.DevpollSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EINTR": {
  "data": {
   "shadows": "errno.EINTR"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.EVENT_READ": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "kafka.vendor.selectors34.EVENT_WRITE": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "kafka.vendor.selectors34.EpollSelector": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._BaseSelectorImpl"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.EpollSelector.__init__": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.EpollSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EpollSelector.close": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.EpollSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EpollSelector.fileno": {
  "data": {
   "lineno": 426
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EpollSelector.register": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.EpollSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EpollSelector.select": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "IOError",
    "errno.EINTR",
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.math",
    "kafka.vendor.selectors34.select",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.EpollSelector.unregister": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "IOError",
    "kafka.vendor.selectors34.EpollSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._BaseSelectorImpl"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.KqueueSelector.__init__": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.KqueueSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector.close": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.KqueueSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector.fileno": {
  "data": {
   "lineno": 559
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector.register": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.KqueueSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector.select": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": [
    "OSError",
    "errno.EINTR",
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.select",
    "len",
    "max"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.KqueueSelector.unregister": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "OSError",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.KqueueSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.Mapping": {
  "data": {
   "shadows": "collections.Mapping"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.PollSelector": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._BaseSelectorImpl"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.PollSelector.__init__": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.PollSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.PollSelector.register": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.PollSelector",
    "kafka.vendor.selectors34.select",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.PollSelector.select": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "errno.EINTR",
    "events",
    "int",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.math",
    "kafka.vendor.selectors34.select"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.PollSelector.unregister": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.PollSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectSelector": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._BaseSelectorImpl",
    "kafka.vendor.selectors34.select",
    "kafka.vendor.selectors34.sys",
    "staticmethod"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34.SelectSelector.__init__": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.SelectSelector",
    "set",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectSelector._select": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.select"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectSelector.register": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.SelectSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectSelector.select": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "errno.EINTR",
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.select",
    "max",
    "set"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectSelector.unregister": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.SelectSelector",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.SelectorKey": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "kafka.vendor.selectors34.BaseSelector"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.__init__": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "kafka.vendor.selectors34._SelectorMapping"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl._fileobj_lookup": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "ValueError",
    "kafka.vendor.selectors34._fileobj_to_fd"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl._key_from_fd": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.close": {
  "data": {
   "lineno": 287
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.get_map": {
  "data": {
   "lineno": 291
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.modify": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "KeyError",
    "events"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.register": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "KeyError",
    "ValueError",
    "events",
    "kafka.vendor.selectors34.EVENT_READ",
    "kafka.vendor.selectors34.EVENT_WRITE",
    "kafka.vendor.selectors34.SelectorKey"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._BaseSelectorImpl.unregister": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._SelectorMapping": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "collections.Mapping"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.selectors34._SelectorMapping.__getitem__": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._SelectorMapping.__init__": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._SelectorMapping.__iter__": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._SelectorMapping.__len__": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._fileobj_to_fd": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError",
    "int",
    "isinstance",
    "kafka.vendor.six.integer_types"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34._wrap_error": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "hasattr",
    "kafka.vendor.selectors34.sys",
    "kafka.vendor.six.reraise",
    "new_err_cls"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.selectors34.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.select": {
  "data": {
   "shadows": "select"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.six": {
  "data": {
   "shadows": "kafka.vendor.six"
  },
  "type": "import"
 },
 "kafka.vendor.selectors34.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.vendor.six": {
  "data": {
   "symbols_in_volume": [
    "NameError",
    "OverflowError",
    "__name__",
    "__spec__.submodule_search_locations",
    "bytes",
    "chr",
    "enumerate",
    "getattr",
    "globals",
    "int",
    "isinstance",
    "iter",
    "kafka.vendor.six.BytesIO",
    "kafka.vendor.six.Module_six_moves_urllib",
    "kafka.vendor.six.Module_six_moves_urllib_error",
    "kafka.vendor.six.Module_six_moves_urllib_parse",
    "kafka.vendor.six.Module_six_moves_urllib_request",
    "kafka.vendor.six.Module_six_moves_urllib_response",
    "kafka.vendor.six.Module_six_moves_urllib_robotparser",
    "kafka.vendor.six.MovedAttribute",
    "kafka.vendor.six.MovedModule",
    "kafka.vendor.six.PY3",
    "kafka.vendor.six.PY34",
    "kafka.vendor.six.StringIO",
    "kafka.vendor.six.X",
    "kafka.vendor.six._MovedItems",
    "kafka.vendor.six._SixMetaPathImporter",
    "kafka.vendor.six._add_doc",
    "kafka.vendor.six._func_closure",
    "kafka.vendor.six._func_code",
    "kafka.vendor.six._func_defaults",
    "kafka.vendor.six._func_globals",
    "kafka.vendor.six._importer",
    "kafka.vendor.six._meth_func",
    "kafka.vendor.six._meth_self",
    "kafka.vendor.six._moved_attributes",
    "kafka.vendor.six._urllib_error_moved_attributes",
    "kafka.vendor.six._urllib_parse_moved_attributes",
    "kafka.vendor.six._urllib_request_moved_attributes",
    "kafka.vendor.six._urllib_response_moved_attributes",
    "kafka.vendor.six._urllib_robotparser_moved_attributes",
    "kafka.vendor.six.advance_iterator",
    "kafka.vendor.six.b",
    "kafka.vendor.six.exec_",
    "kafka.vendor.six.functools",
    "kafka.vendor.six.get_unbound_function",
    "kafka.vendor.six.io",
    "kafka.vendor.six.iteritems",
    "kafka.vendor.six.iterkeys",
    "kafka.vendor.six.iterlists",
    "kafka.vendor.six.itertools",
    "kafka.vendor.six.itervalues",
    "kafka.vendor.six.moves",
    "kafka.vendor.six.operator",
    "kafka.vendor.six.print_",
    "kafka.vendor.six.reraise",
    "kafka.vendor.six.struct",
    "kafka.vendor.six.sys",
    "kafka.vendor.six.types",
    "kafka.vendor.six.u",
    "len",
    "next",
    "object",
    "ord",
    "setattr",
    "str",
    "type"
   ]
  },
  "type": "module"
 },
 "kafka.vendor.six.BytesIO": {
  "data": {
   "lineno": 645
  },
  "type": "constant"
 },
 "kafka.vendor.six.Iterator": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Iterator.next": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.MAXSIZE": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "kafka.vendor.six.Module_six_moves_urllib": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "kafka.vendor.six._importer",
    "kafka.vendor.six.types"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Module_six_moves_urllib.__dir__": {
  "data": {
   "lineno": 491
  },
  "type": "function"
 },
 "kafka.vendor.six.Module_six_moves_urllib_error": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Module_six_moves_urllib_parse": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Module_six_moves_urllib_request": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Module_six_moves_urllib_response": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.Module_six_moves_urllib_robotparser": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.MovedAttribute": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyDescr"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.MovedAttribute.__init__": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "kafka.vendor.six.MovedAttribute",
    "kafka.vendor.six.PY3",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.MovedAttribute._resolve": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "getattr",
    "kafka.vendor.six._import_module"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.MovedModule": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyDescr"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.MovedModule.__getattr__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "getattr",
    "setattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.MovedModule.__init__": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "kafka.vendor.six.MovedModule",
    "kafka.vendor.six.PY3",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.MovedModule._resolve": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "kafka.vendor.six._import_module"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.PY2": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "kafka.vendor.six.PY3": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "kafka.vendor.six.PY34": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "kafka.vendor.six.StringIO": {
  "data": {
   "shadows": "StringIO"
  },
  "type": "import"
 },
 "kafka.vendor.six.X": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.X.__len__": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "kafka.vendor.six._LazyDescr": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six._LazyDescr.__get__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "AttributeError",
    "delattr",
    "setattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six._LazyDescr.__init__": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "kafka.vendor.six._LazyModule": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "kafka.vendor.six.types"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six._LazyModule.__dir__": {
  "data": {
   "lineno": 136
  },
  "type": "function"
 },
 "kafka.vendor.six._LazyModule.__init__": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule",
    "super"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six._MovedItems": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "kafka.vendor.six._LazyModule"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six._SixMetaPathImporter": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six._SixMetaPathImporter.__get_module": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "ImportError",
    "KeyError"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter.__init__": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter._add_module": {
  "data": {
   "lineno": 183
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter._get_module": {
  "data": {
   "lineno": 187
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter.find_module": {
  "data": {
   "lineno": 190
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter.get_code": {
  "data": {
   "lineno": 224
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter.is_package": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six._SixMetaPathImporter.load_module": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "KeyError",
    "isinstance",
    "kafka.vendor.six.MovedModule",
    "kafka.vendor.six.sys"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.__author__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "kafka.vendor.six.__package__": {
  "data": {
   "lineno": 879
  },
  "type": "constant"
 },
 "kafka.vendor.six.__path__": {
  "data": {
   "lineno": 878
  },
  "type": "constant"
 },
 "kafka.vendor.six.__version__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "kafka.vendor.six._add_doc": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "kafka.vendor.six._assertCountEqual": {
  "data": {
   "lineno": 671
  },
  "type": "constant"
 },
 "kafka.vendor.six._assertRaisesRegex": {
  "data": {
   "lineno": 672
  },
  "type": "constant"
 },
 "kafka.vendor.six._assertRegex": {
  "data": {
   "lineno": 673
  },
  "type": "constant"
 },
 "kafka.vendor.six._func_closure": {
  "data": {
   "lineno": 526
  },
  "type": "constant"
 },
 "kafka.vendor.six._func_code": {
  "data": {
   "lineno": 527
  },
  "type": "constant"
 },
 "kafka.vendor.six._func_defaults": {
  "data": {
   "lineno": 528
  },
  "type": "constant"
 },
 "kafka.vendor.six._func_globals": {
  "data": {
   "lineno": 529
  },
  "type": "constant"
 },
 "kafka.vendor.six._import_module": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "__import__",
    "kafka.vendor.six.sys"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six._importer": {
  "data": {
   "lineno": 232
  },
  "type": "constant"
 },
 "kafka.vendor.six._meth_func": {
  "data": {
   "lineno": 523
  },
  "type": "constant"
 },
 "kafka.vendor.six._meth_self": {
  "data": {
   "lineno": 524
  },
  "type": "constant"
 },
 "kafka.vendor.six._moved_attributes": {
  "data": {
   "lineno": 241
  },
  "type": "constant"
 },
 "kafka.vendor.six._print": {
  "data": {
   "lineno": 802
  },
  "type": "constant"
 },
 "kafka.vendor.six._urllib_error_moved_attributes": {
  "data": {
   "lineno": 375
  },
  "type": "constant"
 },
 "kafka.vendor.six._urllib_parse_moved_attributes": {
  "data": {
   "lineno": 333
  },
  "type": "constant"
 },
 "kafka.vendor.six._urllib_request_moved_attributes": {
  "data": {
   "lineno": 395
  },
  "type": "constant"
 },
 "kafka.vendor.six._urllib_response_moved_attributes": {
  "data": {
   "lineno": 447
  },
  "type": "constant"
 },
 "kafka.vendor.six._urllib_robotparser_moved_attributes": {
  "data": {
   "lineno": 468
  },
  "type": "constant"
 },
 "kafka.vendor.six.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.vendor.six.add_metaclass": {
  "data": {
   "lineno": 841
  },
  "type": "function"
 },
 "kafka.vendor.six.add_metaclass.wrapper": {
  "data": {
   "lineno": 843,
   "symbols_in_volume": [
    "isinstance",
    "metaclass",
    "str"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.add_move": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "kafka.vendor.six._MovedItems",
    "setattr"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.advance_iterator": {
  "data": {
   "lineno": 535
  },
  "type": "function"
 },
 "kafka.vendor.six.assertCountEqual": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": [
    "getattr",
    "kafka.vendor.six._assertCountEqual"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.assertRaisesRegex": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "getattr",
    "kafka.vendor.six._assertRaisesRegex"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.assertRegex": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "getattr",
    "kafka.vendor.six._assertRegex"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.b": {
  "data": {
   "lineno": 654
  },
  "type": "function"
 },
 "kafka.vendor.six.binary_type": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "kafka.vendor.six.byte2int": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": [
    "ord"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.callable": {
  "data": {
   "lineno": 572
  },
  "type": "constant"
 },
 "kafka.vendor.six.class_types": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "kafka.vendor.six.create_bound_method": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": [
    "kafka.vendor.six.types"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.create_unbound_method": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": [
    "kafka.vendor.six.types"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.exec_": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": [
    "exec",
    "kafka.vendor.six.sys"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "kafka.vendor.six.get_function_closure": {
  "data": {
   "lineno": 579
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_function_code": {
  "data": {
   "lineno": 580
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_function_defaults": {
  "data": {
   "lineno": 581
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_function_globals": {
  "data": {
   "lineno": 582
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_method_function": {
  "data": {
   "lineno": 577
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_method_self": {
  "data": {
   "lineno": 578
  },
  "type": "constant"
 },
 "kafka.vendor.six.get_unbound_function": {
  "data": {
   "lineno": 558
  },
  "type": "function"
 },
 "kafka.vendor.six.indexbytes": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "ord"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.int2byte": {
  "data": {
   "lineno": 661
  },
  "type": "constant"
 },
 "kafka.vendor.six.integer_types": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "kafka.vendor.six.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "kafka.vendor.six.iterbytes": {
  "data": {
   "lineno": 668
  },
  "type": "constant"
 },
 "kafka.vendor.six.iteritems": {
  "data": {
   "lineno": 610
  },
  "type": "function"
 },
 "kafka.vendor.six.iterkeys": {
  "data": {
   "lineno": 604
  },
  "type": "function"
 },
 "kafka.vendor.six.iterlists": {
  "data": {
   "lineno": 613
  },
  "type": "function"
 },
 "kafka.vendor.six.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "kafka.vendor.six.itervalues": {
  "data": {
   "lineno": 607
  },
  "type": "function"
 },
 "kafka.vendor.six.moves": {
  "data": {
   "lineno": 324
  },
  "type": "constant"
 },
 "kafka.vendor.six.next": {
  "data": {
   "lineno": 537
  },
  "type": "constant"
 },
 "kafka.vendor.six.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "kafka.vendor.six.print_": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": [
    "kafka.vendor.six._print",
    "kafka.vendor.six.sys"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.print_.write": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": [
    "getattr",
    "isinstance",
    "str",
    "unicode"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.python_2_unicode_compatible": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": [
    "ValueError",
    "kafka.vendor.six.PY2"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.raise_from": {
  "data": {
   "lineno": 742
  },
  "type": "function"
 },
 "kafka.vendor.six.remove_move": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "AttributeError",
    "KeyError",
    "delattr",
    "kafka.vendor.six._MovedItems",
    "kafka.vendor.six.moves"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.reraise": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "tp"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.string_types": {
  "data": {
   "lineno": 51
  },
  "type": "constant"
 },
 "kafka.vendor.six.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "kafka.vendor.six.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.vendor.six.text_type": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "kafka.vendor.six.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "kafka.vendor.six.u": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "unicode"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.unichr": {
  "data": {
   "lineno": 660
  },
  "type": "constant"
 },
 "kafka.vendor.six.viewitems": {
  "data": {
   "lineno": 620
  },
  "type": "constant"
 },
 "kafka.vendor.six.viewkeys": {
  "data": {
   "lineno": 616
  },
  "type": "constant"
 },
 "kafka.vendor.six.viewvalues": {
  "data": {
   "lineno": 618
  },
  "type": "constant"
 },
 "kafka.vendor.six.with_metaclass": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": [
    "type.__new__"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.with_metaclass.metaclass": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "class"
 },
 "kafka.vendor.six.with_metaclass.metaclass.__new__": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": [
    "meta"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.with_metaclass.metaclass.__prepare__": {
  "data": {
   "lineno": 835,
   "symbols_in_volume": [
    "classmethod",
    "meta.__prepare__"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.six.wraps": {
  "data": {
   "lineno": 822
  },
  "type": "constant"
 },
 "kafka.vendor.six.wraps.wrapper": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "kafka.vendor.six.functools"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.socketpair": {
  "data": {
   "symbols_in_volume": [
    "hasattr",
    "kafka.vendor.socketpair.socket",
    "kafka.vendor.socketpair.socketpair"
   ]
  },
  "type": "module"
 },
 "kafka.vendor.socketpair._LOCALHOST": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "kafka.vendor.socketpair._LOCALHOST_V6": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "kafka.vendor.socketpair.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "kafka.vendor.socketpair.errno": {
  "data": {
   "shadows": "errno"
  },
  "type": "import"
 },
 "kafka.vendor.socketpair.socket": {
  "data": {
   "shadows": "socket"
  },
  "type": "import"
 },
 "kafka.vendor.socketpair.socketpair": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "BlockingIOError",
    "Exception",
    "InterruptedError",
    "ValueError",
    "kafka.vendor.socketpair._LOCALHOST",
    "kafka.vendor.socketpair._LOCALHOST_V6",
    "kafka.vendor.socketpair.errno",
    "kafka.vendor.socketpair.socket",
    "kafka.vendor.socketpair.sys",
    "min",
    "type"
   ]
  },
  "type": "function"
 },
 "kafka.vendor.socketpair.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "kafka.version": {
  "data": {},
  "type": "module"
 },
 "kafka.version.__version__": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 }
}