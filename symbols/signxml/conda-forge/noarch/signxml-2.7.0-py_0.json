{
 "signxml": {
  "data": {
   "symbols_in_volume": [
    "Namespace",
    "enum.Enum"
   ]
  },
  "type": "module"
 },
 "signxml.DSASignature": {
  "data": {
   "shadows": "asn1crypto.algos.DSASignature"
  },
  "type": "import"
 },
 "signxml.Element": {
  "data": {
   "shadows": "lxml.etree.Element"
  },
  "type": "import"
 },
 "signxml.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "signxml.FILETYPE_PEM": {
  "data": {
   "shadows": "OpenSSL.crypto.FILETYPE_PEM"
  },
  "type": "import"
 },
 "signxml.HMAC": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hmac.HMAC"
  },
  "type": "import"
 },
 "signxml.Hash": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.Hash"
  },
  "type": "import"
 },
 "signxml.OpenSSLCryptoError": {
  "data": {
   "shadows": "OpenSSL.crypto.Error"
  },
  "type": "import"
 },
 "signxml.PKCS1v15": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
  },
  "type": "import"
 },
 "signxml.SHA1": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.SHA1"
  },
  "type": "import"
 },
 "signxml.SHA224": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.SHA224"
  },
  "type": "import"
 },
 "signxml.SHA256": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.SHA256"
  },
  "type": "import"
 },
 "signxml.SHA384": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.SHA384"
  },
  "type": "import"
 },
 "signxml.SHA512": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes.SHA512"
  },
  "type": "import"
 },
 "signxml.SubElement": {
  "data": {
   "shadows": "lxml.etree.SubElement"
  },
  "type": "import"
 },
 "signxml.VerifyResult": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "collections.namedtuple"
   ]
  },
  "type": "class"
 },
 "signxml.X509": {
  "data": {
   "shadows": "OpenSSL.crypto.X509"
  },
  "type": "import"
 },
 "signxml.XMLSignatureProcessor": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "cryptography.hazmat.primitives.asymmetric.ec",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
    "cryptography.hazmat.primitives.hashes.SHA1",
    "cryptography.hazmat.primitives.hashes.SHA224",
    "cryptography.hazmat.primitives.hashes.SHA256",
    "cryptography.hazmat.primitives.hashes.SHA384",
    "cryptography.hazmat.primitives.hashes.SHA512",
    "signxml.namespaces"
   ]
  },
  "type": "class"
 },
 "signxml.XMLSignatureProcessor._c14n": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "lxml.etree.tostring"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._find": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "InvalidInput",
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._findall": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "base64.b64encode",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.hashes.Hash",
    "ensure_str"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest_method": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "InvalidInput",
    "signxml.methods"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest_method_by_tag": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "InvalidInput",
    "signxml.methods"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_hmac_digest_method": {
  "data": {
   "lineno": 171
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_hmac_digest_method_by_tag": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_signature_digest_method": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_signature_digest_method_by_tag": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._resolve_reference": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "InvalidInput",
    "len",
    "uri_resolver"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSigner": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "signxml.XMLSignatureProcessor"
   ]
  },
  "type": "class"
 },
 "signxml.XMLSigner.__init__": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "InvalidInput",
    "dict",
    "signxml.XMLSignatureProcessor",
    "signxml.methods",
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSigner._build_sig": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "enumerate",
    "lxml.etree.SubElement",
    "signxml.ds_tag",
    "signxml.methods",
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSigner._get_c14n_inputs_from_reference_uris": {
  "data": {
   "lineno": 410
  },
  "type": "function"
 },
 "signxml.XMLSigner._serialize_key_value": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "base64.b64encode",
    "dict",
    "ensure_str",
    "getattr",
    "long_to_bytes",
    "lxml.etree.SubElement",
    "signxml.ds_tag",
    "signxml.dsig11_tag",
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSigner._unpack": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "InvalidInput",
    "eight.bytes",
    "eight.str",
    "isinstance",
    "len",
    "lxml.etree.Element",
    "signxml._remove_sig",
    "signxml.ds_tag",
    "signxml.methods"
   ]
  },
  "type": "function"
 },
 "signxml.XMLSigner.sign": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "InvalidInput",
    "NotImplementedError",
    "OpenSSL.crypto.FILETYPE_PEM",
    "OpenSSL.crypto.dump_certificate",
    "any",
    "asn1crypto.algos.DSASignature.load",
    "base64.b64encode",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
    "cryptography.hazmat.primitives.hmac.HMAC",
    "cryptography.hazmat.primitives.serialization.load_pem_private_key",
    "eight.bytes",
    "eight.str",
    "ensure_str",
    "isinstance",
    "iterate_pem",
    "list",
    "long_to_bytes",
    "lxml.etree.SubElement",
    "signxml.ds_tag",
    "signxml.methods",
    "strip_pem_header"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "signxml.XMLSignatureProcessor"
   ]
  },
  "type": "class"
 },
 "signxml.XMLVerifier._apply_transforms": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": [
    "base64.b64decode",
    "eight.bytes",
    "eight.str",
    "isinstance",
    "signxml._remove_sig"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier._get_inclusive_ns_prefixes": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": [
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier._get_long": {
  "data": {
   "lineno": 789,
   "symbols_in_volume": [
    "base64.b64decode",
    "bytes_to_long"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier._get_signature": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "signxml.ds_tag"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier._verify_signature_with_pubkey": {
  "data": {
   "lineno": 533,
   "symbols_in_volume": [
    "NotImplementedError",
    "asn1crypto.algos.DSASignature.from_p1363",
    "base64.b64decode",
    "bytes_to_long",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
    "curve_class",
    "len"
   ]
  },
  "type": "function"
 },
 "signxml.XMLVerifier.verify": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "Exception",
    "InvalidDigest",
    "InvalidInput",
    "InvalidSignature",
    "OpenSSL.crypto.Error",
    "OpenSSL.crypto.FILETYPE_PEM",
    "OpenSSL.crypto.X509",
    "OpenSSL.crypto.load_certificate",
    "OpenSSL.crypto.verify",
    "add_pem_header",
    "base64.b64decode",
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.hmac.HMAC",
    "ensure_bytes",
    "int",
    "isinstance",
    "len",
    "lxml.etree.XMLSyntaxError",
    "signxml.VerifyResult",
    "signxml.namespaces",
    "type",
    "uri_resolver",
    "verify_x509_cert_chain"
   ]
  },
  "type": "function"
 },
 "signxml._remove_sig": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "StopIteration",
    "ValueError",
    "next"
   ]
  },
  "type": "function"
 },
 "signxml.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "signxml.b64decode": {
  "data": {
   "shadows": "base64.b64decode"
  },
  "type": "import"
 },
 "signxml.b64encode": {
  "data": {
   "shadows": "base64.b64encode"
  },
  "type": "import"
 },
 "signxml.bytes": {
  "data": {
   "shadows": "eight.bytes"
  },
  "type": "import"
 },
 "signxml.default_backend": {
  "data": {
   "shadows": "cryptography.hazmat.backends.default_backend"
  },
  "type": "import"
 },
 "signxml.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "signxml.ds_tag": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.dsa": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.dsa"
  },
  "type": "import"
 },
 "signxml.dsig11_tag": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "signxml.namespaces"
   ]
  },
  "type": "function"
 },
 "signxml.dump_certificate": {
  "data": {
   "shadows": "OpenSSL.crypto.dump_certificate"
  },
  "type": "import"
 },
 "signxml.ec": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.ec"
  },
  "type": "import"
 },
 "signxml.etree": {
  "data": {
   "shadows": "lxml.etree"
  },
  "type": "import"
 },
 "signxml.exceptions": {
  "data": {},
  "type": "module"
 },
 "signxml.exceptions.InvalidCertificate": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "signxml.exceptions.InvalidSignature"
   ]
  },
  "type": "class"
 },
 "signxml.exceptions.InvalidDigest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": [
    "signxml.exceptions.InvalidSignature"
   ]
  },
  "type": "class"
 },
 "signxml.exceptions.InvalidInput": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "class"
 },
 "signxml.exceptions.InvalidSignature": {
  "data": {
   "lineno": 9
  },
  "type": "class"
 },
 "signxml.exceptions.RedundantCert": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "signxml.exceptions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "signxml.exceptions.cryptography.exceptions": {
  "data": {
   "shadows": "cryptography.exceptions"
  },
  "type": "import"
 },
 "signxml.exceptions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "signxml.exceptions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "signxml.exceptions.unicode_literals": {
  "data": {
   "shadows": "__future__.unicode_literals"
  },
  "type": "import"
 },
 "signxml.load_certificate": {
  "data": {
   "shadows": "OpenSSL.crypto.load_certificate"
  },
  "type": "import"
 },
 "signxml.load_pem_private_key": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.serialization.load_pem_private_key"
  },
  "type": "import"
 },
 "signxml.methods": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "signxml.namedtuple": {
  "data": {
   "shadows": "collections.namedtuple"
  },
  "type": "import"
 },
 "signxml.namespaces": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "signxml.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "signxml.rsa": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.asymmetric.rsa"
  },
  "type": "import"
 },
 "signxml.str": {
  "data": {
   "shadows": "eight.str"
  },
  "type": "import"
 },
 "signxml.unicode_literals": {
  "data": {
   "shadows": "__future__.unicode_literals"
  },
  "type": "import"
 },
 "signxml.util": {
  "data": {
   "symbols_in_volume": [
    "signxml.util.PEM_FOOTER",
    "signxml.util.PEM_HEADER",
    "signxml.util.re",
    "signxml.util.sys"
   ]
  },
  "type": "module"
 },
 "signxml.util.Namespace": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "dict",
    "dict.__getitem__"
   ]
  },
  "type": "class"
 },
 "signxml.util.OpenSSLCryptoError": {
  "data": {
   "shadows": "OpenSSL.crypto.Error"
  },
  "type": "import"
 },
 "signxml.util.PEM_FOOTER": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "signxml.util.PEM_HEADER": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "signxml.util.SSL": {
  "data": {
   "shadows": "OpenSSL.SSL"
  },
  "type": "import"
 },
 "signxml.util.USING_PYTHON2": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "signxml.util.X509StoreContext": {
  "data": {
   "shadows": "OpenSSL.crypto.X509StoreContext"
  },
  "type": "import"
 },
 "signxml.util.X509StoreContextError": {
  "data": {
   "shadows": "OpenSSL.crypto.X509StoreContextError"
  },
  "type": "import"
 },
 "signxml.util.XMLProcessor": {
  "data": {
   "lineno": 122
  },
  "type": "class"
 },
 "signxml.util.XMLProcessor.fromstring": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "InvalidInput",
    "lxml.etree.Entity",
    "lxml.etree.fromstring"
   ]
  },
  "type": "function"
 },
 "signxml.util.XMLProcessor.get_root": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "eight.bytes",
    "eight.str",
    "isinstance",
    "lxml.etree.tostring",
    "xml.etree.ElementTree.Element",
    "xml.etree.ElementTree.tostring"
   ]
  },
  "type": "function"
 },
 "signxml.util.XMLProcessor.parser": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "lxml.etree.XMLParser",
    "property"
   ]
  },
  "type": "function"
 },
 "signxml.util.XMLProcessor.schema": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "classmethod",
    "lxml.etree.XMLSchema",
    "lxml.etree.parse",
    "signxml.util.os"
   ]
  },
  "type": "function"
 },
 "signxml.util.XMLProcessor.tostring": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "lxml.etree.tostring"
   ]
  },
  "type": "function"
 },
 "signxml.util._add_cert_to_store": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "InvalidCertificate",
    "OpenSSL.crypto.Error",
    "OpenSSL.crypto.X509StoreContext",
    "OpenSSL.crypto.X509StoreContextError",
    "RedundantCert"
   ]
  },
  "type": "function"
 },
 "signxml.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "signxml.util.add_pem_header": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "signxml.util.PEM_FOOTER",
    "signxml.util.PEM_HEADER",
    "signxml.util.ensure_str",
    "signxml.util.textwrap"
   ]
  },
  "type": "function"
 },
 "signxml.util.b64decode": {
  "data": {
   "shadows": "base64.b64decode"
  },
  "type": "import"
 },
 "signxml.util.b64encode": {
  "data": {
   "shadows": "base64.b64encode"
  },
  "type": "import"
 },
 "signxml.util.bytes": {
  "data": {
   "shadows": "eight.bytes"
  },
  "type": "import"
 },
 "signxml.util.bytes_to_long": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "len",
    "long",
    "range",
    "signxml.util.USING_PYTHON2",
    "signxml.util.struct",
    "unpack"
   ]
  },
  "type": "function"
 },
 "signxml.util.certifi": {
  "data": {
   "shadows": "certifi"
  },
  "type": "import"
 },
 "signxml.util.default_backend": {
  "data": {
   "shadows": "cryptography.hazmat.backends.default_backend"
  },
  "type": "import"
 },
 "signxml.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "signxml.util.ensure_bytes": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "eight.bytes",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "signxml.util.ensure_str": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "eight.str",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "signxml.util.etree": {
  "data": {
   "shadows": "lxml.etree"
  },
  "type": "import"
 },
 "signxml.util.hashes": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hashes"
  },
  "type": "import"
 },
 "signxml.util.hmac": {
  "data": {
   "shadows": "cryptography.hazmat.primitives.hmac"
  },
  "type": "import"
 },
 "signxml.util.hmac_sha1": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "cryptography.hazmat.backends.default_backend",
    "cryptography.hazmat.primitives.hashes.SHA1",
    "cryptography.hazmat.primitives.hmac.HMAC"
   ]
  },
  "type": "function"
 },
 "signxml.util.iterate_pem": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "signxml.util.ensure_str",
    "signxml.util.pem_regexp",
    "signxml.util.re"
   ]
  },
  "type": "function"
 },
 "signxml.util.long_to_bytes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "len",
    "long",
    "pack",
    "range",
    "signxml.util.USING_PYTHON2",
    "signxml.util.struct"
   ]
  },
  "type": "function"
 },
 "signxml.util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "signxml.util.p_sha1": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "base64.b64decode",
    "base64.b64encode",
    "len",
    "signxml.util.raw_p_sha1"
   ]
  },
  "type": "function"
 },
 "signxml.util.pem_regexp": {
  "data": {
   "lineno": 95
  },
  "type": "constant"
 },
 "signxml.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "signxml.util.raw_p_sha1": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "len",
    "signxml.util.hmac_sha1",
    "tuple"
   ]
  },
  "type": "function"
 },
 "signxml.util.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "signxml.util.stdlibElementTree": {
  "data": {
   "shadows": "xml.etree.ElementTree"
  },
  "type": "import"
 },
 "signxml.util.str": {
  "data": {
   "shadows": "eight.str"
  },
  "type": "import"
 },
 "signxml.util.strip_pem_header": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "Exception",
    "signxml.util.ensure_str",
    "signxml.util.pem_regexp",
    "signxml.util.re"
   ]
  },
  "type": "function"
 },
 "signxml.util.struct": {
  "data": {
   "shadows": "struct"
  },
  "type": "import"
 },
 "signxml.util.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "signxml.util.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "signxml.util.unicode_literals": {
  "data": {
   "shadows": "__future__.unicode_literals"
  },
  "type": "import"
 },
 "signxml.util.verify_x509_cert_chain": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "Exception",
    "OpenSSL.SSL.Context",
    "OpenSSL.SSL.TLSv1_METHOD",
    "RedundantCert",
    "len",
    "list",
    "reversed",
    "signxml.util._add_cert_to_store",
    "signxml.util.certifi",
    "signxml.util.ensure_bytes"
   ]
  },
  "type": "function"
 },
 "signxml.verify": {
  "data": {
   "shadows": "OpenSSL.crypto.verify"
  },
  "type": "import"
 }
}