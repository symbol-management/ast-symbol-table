{
 "signxml": {
  "lineno": null,
  "symbols_in_volume": [
   "enum.Enum"
  ],
  "type": "module"
 },
 "signxml.VerifyResult": {
  "lineno": 74,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "signxml.XMLSignatureProcessor": {
  "lineno": 90,
  "symbols_in_volume": [
   "cryptography.hazmat.primitives.asymmetric.ec",
   "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
   "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
   "cryptography.hazmat.primitives.hashes.SHA1",
   "cryptography.hazmat.primitives.hashes.SHA224",
   "cryptography.hazmat.primitives.hashes.SHA256",
   "cryptography.hazmat.primitives.hashes.SHA384",
   "cryptography.hazmat.primitives.hashes.SHA512"
  ],
  "type": "class"
 },
 "signxml.XMLSignatureProcessor._c14n": {
  "lineno": 205,
  "symbols_in_volume": [
   "lxml.etree.tostring"
  ],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._find": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._findall": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest": {
  "lineno": 156,
  "symbols_in_volume": [
   "cryptography.hazmat.backends.default_backend",
   "cryptography.hazmat.primitives.hashes.Hash"
  ],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest_method": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_digest_method_by_tag": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_hmac_digest_method": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_hmac_digest_method_by_tag": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_signature_digest_method": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._get_signature_digest_method_by_tag": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSignatureProcessor._resolve_reference": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSigner": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.XMLSigner.__init__": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSigner._build_sig": {
  "lineno": 492,
  "symbols_in_volume": [
   "base64.b64encode",
   "lxml.etree.SubElement"
  ],
  "type": "function"
 },
 "signxml.XMLSigner._get_c14n_inputs_from_reference_uris": {
  "lineno": 433,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLSigner._serialize_key_value": {
  "lineno": 522,
  "symbols_in_volume": [
   "base64.b64encode",
   "lxml.etree.SubElement"
  ],
  "type": "function"
 },
 "signxml.XMLSigner._unpack": {
  "lineno": 442,
  "symbols_in_volume": [
   "eight.bytes",
   "eight.str",
   "lxml.etree.Element"
  ],
  "type": "function"
 },
 "signxml.XMLSigner.sign": {
  "lineno": 286,
  "symbols_in_volume": [
   "OpenSSL.crypto.FILETYPE_PEM",
   "OpenSSL.crypto.dump_certificate",
   "base64.b64encode",
   "cryptography.hazmat.backends.default_backend",
   "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
   "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
   "cryptography.hazmat.primitives.asymmetric.utils.decode_dss_signature",
   "cryptography.hazmat.primitives.hmac.HMAC",
   "cryptography.hazmat.primitives.serialization.load_pem_private_key",
   "eight.bytes",
   "eight.str",
   "lxml.etree.SubElement"
  ],
  "type": "function"
 },
 "signxml.XMLVerifier": {
  "lineno": 553,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.XMLVerifier._apply_transforms": {
  "lineno": 638,
  "symbols_in_volume": [
   "base64.b64decode",
   "eight.bytes",
   "eight.str"
  ],
  "type": "function"
 },
 "signxml.XMLVerifier._encode_dss_signature": {
  "lineno": 619,
  "symbols_in_volume": [
   "cryptography.hazmat.primitives.asymmetric.utils.encode_dss_signature"
  ],
  "type": "function"
 },
 "signxml.XMLVerifier._get_inclusive_ns_prefixes": {
  "lineno": 631,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLVerifier._get_long": {
  "lineno": 898,
  "symbols_in_volume": [
   "base64.b64decode"
  ],
  "type": "function"
 },
 "signxml.XMLVerifier._get_signature": {
  "lineno": 558,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.XMLVerifier._verify_signature_with_pubkey": {
  "lineno": 564,
  "symbols_in_volume": [
   "base64.b64decode",
   "cryptography.hazmat.backends.default_backend",
   "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
   "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
   "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
   "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
   "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
   "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
   "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
   "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
   "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
   "cryptography.hazmat.primitives.serialization.load_der_public_key"
  ],
  "type": "function"
 },
 "signxml.XMLVerifier.verify": {
  "lineno": 663,
  "symbols_in_volume": [
   "OpenSSL.crypto.Error",
   "OpenSSL.crypto.FILETYPE_PEM",
   "OpenSSL.crypto.X509",
   "OpenSSL.crypto.load_certificate",
   "OpenSSL.crypto.verify",
   "base64.b64decode",
   "cryptography.hazmat.backends.default_backend",
   "cryptography.hazmat.primitives.hmac.HMAC",
   "lxml.etree.XMLSyntaxError"
  ],
  "type": "function"
 },
 "signxml._remove_sig": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.ds_tag": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.dsig11_tag": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.ec_tag": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.exceptions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "signxml.exceptions.InvalidCertificate": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.exceptions.InvalidDigest": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.exceptions.InvalidInput": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.exceptions.InvalidSignature": {
  "lineno": 9,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.exceptions.RedundantCert": {
  "lineno": 27,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.util": {
  "lineno": null,
  "symbols_in_volume": [
   "re.S",
   "re.compile",
   "sys.version_info"
  ],
  "type": "module"
 },
 "signxml.util.Namespace": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.util.Namespace.__getattr__": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.util.XMLProcessor": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "signxml.util.XMLProcessor.fromstring": {
  "lineno": 151,
  "symbols_in_volume": [
   "lxml.etree.Entity",
   "lxml.etree.fromstring"
  ],
  "type": "function"
 },
 "signxml.util.XMLProcessor.get_root": {
  "lineno": 160,
  "symbols_in_volume": [
   "eight.bytes",
   "eight.str",
   "lxml.etree.tostring",
   "xml.etree.ElementTree.Element",
   "xml.etree.ElementTree.tostring"
  ],
  "type": "function"
 },
 "signxml.util.XMLProcessor.parser": {
  "lineno": 143,
  "symbols_in_volume": [
   "lxml.etree.XMLParser"
  ],
  "type": "function"
 },
 "signxml.util.XMLProcessor.schema": {
  "lineno": 136,
  "symbols_in_volume": [
   "lxml.etree.XMLSchema",
   "lxml.etree.parse",
   "os.path.dirname",
   "os.path.join"
  ],
  "type": "function"
 },
 "signxml.util.XMLProcessor.tostring": {
  "lineno": 157,
  "symbols_in_volume": [
   "lxml.etree.tostring"
  ],
  "type": "function"
 },
 "signxml.util._add_cert_to_store": {
  "lineno": 213,
  "symbols_in_volume": [
   "OpenSSL.crypto.Error",
   "OpenSSL.crypto.X509StoreContext",
   "OpenSSL.crypto.X509StoreContextError"
  ],
  "type": "function"
 },
 "signxml.util.add_pem_header": {
  "lineno": 116,
  "symbols_in_volume": [
   "textwrap.fill"
  ],
  "type": "function"
 },
 "signxml.util.bits_to_bytes_unit": {
  "lineno": 96,
  "symbols_in_volume": [
   "math.ceil"
  ],
  "type": "function"
 },
 "signxml.util.bytes_to_long": {
  "lineno": 41,
  "symbols_in_volume": [
   "struct.unpack"
  ],
  "type": "function"
 },
 "signxml.util.ensure_bytes": {
  "lineno": 25,
  "symbols_in_volume": [
   "eight.bytes"
  ],
  "type": "function"
 },
 "signxml.util.ensure_str": {
  "lineno": 33,
  "symbols_in_volume": [
   "eight.str"
  ],
  "type": "function"
 },
 "signxml.util.hmac_sha1": {
  "lineno": 173,
  "symbols_in_volume": [
   "cryptography.hazmat.backends.default_backend",
   "cryptography.hazmat.primitives.hashes.SHA1",
   "cryptography.hazmat.primitives.hmac.HMAC"
  ],
  "type": "function"
 },
 "signxml.util.iterate_pem": {
  "lineno": 123,
  "symbols_in_volume": [
   "re.findall"
  ],
  "type": "function"
 },
 "signxml.util.long_to_bytes": {
  "lineno": 64,
  "symbols_in_volume": [
   "struct.pack"
  ],
  "type": "function"
 },
 "signxml.util.p_sha1": {
  "lineno": 208,
  "symbols_in_volume": [
   "base64.b64decode",
   "base64.b64encode"
  ],
  "type": "function"
 },
 "signxml.util.raw_p_sha1": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "signxml.util.strip_pem_header": {
  "lineno": 109,
  "symbols_in_volume": [
   "re.search"
  ],
  "type": "function"
 },
 "signxml.util.verify_x509_cert_chain": {
  "lineno": 228,
  "symbols_in_volume": [
   "OpenSSL.SSL.Context",
   "OpenSSL.SSL.TLSv1_METHOD",
   "certifi.where"
  ],
  "type": "function"
 }
}